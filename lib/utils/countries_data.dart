// –ü—É—Ç—å: lib/utils/countries_data.dart

import 'package:flutter/material.dart';
import '../services/geography_service.dart';

class CountriesData {
  static final GeographyService _geographyService = GeographyService();

  // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ fallback (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)
  static final List<String> _fallbackCountries = [
    '–†–æ—Å—Å–∏—è',
    '–ë–µ–ª–∞—Ä—É—Å—å',
    '–£–∫—Ä–∞–∏–Ω–∞',
    '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω',
    '–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω',
    '–ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω',
    '–¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω',
    '–¢—É—Ä–∫–º–µ–Ω–∏—Å—Ç–∞–Ω',
    '–ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω',
    '–ê—Ä–º–µ–Ω–∏—è',
    '–ì—Ä—É–∑–∏—è',
    '–ú–æ–ª–¥–æ–≤–∞',
    '–õ–∞—Ç–≤–∏—è',
    '–õ–∏—Ç–≤–∞',
    '–≠—Å—Ç–æ–Ω–∏—è',
  ];

  static final Map<String, List<String>> _fallbackCitiesByCountry = {
    '–†–æ—Å—Å–∏—è': [
      '–ú–æ—Å–∫–≤–∞', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥',
      '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥', '–ö–∞–∑–∞–Ω—å', '–ß–µ–ª—è–±–∏–Ω—Å–∫', '–û–º—Å–∫', '–°–∞–º–∞—Ä–∞',
      '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É', '–£—Ñ–∞', '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫', '–ü–µ—Ä–º—å', '–í–æ—Ä–æ–Ω–µ–∂', '–í–æ–ª–≥–æ–≥—Ä–∞–¥',
      '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä', '–°–∞—Ä–∞—Ç–æ–≤', '–¢—é–º–µ–Ω—å', '–¢–æ–ª—å—è—Ç—Ç–∏', '–ò–∂–µ–≤—Å–∫',
    ],
    '–ë–µ–ª–∞—Ä—É—Å—å': [
      '–ú–∏–Ω—Å–∫', '–ì–æ–º–µ–ª—å', '–ú–æ–≥–∏–ª–µ–≤', '–í–∏—Ç–µ–±—Å–∫', '–ì—Ä–æ–¥–Ω–æ',
      '–ë—Ä–µ—Å—Ç', '–ë–æ–±—Ä—É–π—Å–∫', '–ë–∞—Ä–∞–Ω–æ–≤–∏—á–∏', '–ë–æ—Ä–∏—Å–æ–≤', '–ü–∏–Ω—Å–∫',
    ],
    '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω': [
      '–ê–ª–º–∞—Ç—ã', '–ù—É—Ä-–°—É–ª—Ç–∞–Ω', '–®—ã–º–∫–µ–Ω—Ç', '–ö–∞—Ä–∞–≥–∞–Ω–¥–∞', '–ê–∫—Ç–æ–±–µ',
      '–¢–∞—Ä–∞–∑', '–ü–∞–≤–ª–æ–¥–∞—Ä', '–£—Å—Ç—å-–ö–∞–º–µ–Ω–æ–≥–æ—Ä—Å–∫', '–°–µ–º–µ–π', '–ê—Ç—ã—Ä–∞—É',
      '–ö–æ—Å—Ç–∞–Ω–∞–π', '–ö—ã–∑—ã–ª–æ—Ä–¥–∞', '–£—Ä–∞–ª—å—Å–∫', '–ü–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫', '–ê–∫—Ç–∞—É',
    ],
    '–£–∫—Ä–∞–∏–Ω–∞': [
      '–ö–∏–µ–≤', '–•–∞—Ä—å–∫–æ–≤', '–û–¥–µ—Å—Å–∞', '–î–Ω–µ–ø—Ä', '–î–æ–Ω–µ—Ü–∫',
      '–ó–∞–ø–æ—Ä–æ–∂—å–µ', '–õ—å–≤–æ–≤', '–ö—Ä–∏–≤–æ–π –†–æ–≥', '–ù–∏–∫–æ–ª–∞–µ–≤', '–ú–∞—Ä–∏—É–ø–æ–ª—å',
    ],
  };

  /// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω
  static Future<List<String>> getLocalizedCountries(BuildContext context) async {
    try {
      final countries = await _geographyService.getLocalizedCountries(context);
      if (countries.isNotEmpty) {
        return countries;
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω: $e');
    }

    // Fallback –Ω–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
    return _fallbackCountries;
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã
  static Future<List<String>> getLocalizedCitiesForCountry(
      String countryName,
      BuildContext context
      ) async {
    try {
      final cities = await _geographyService.getLocalizedCitiesForCountry(
          countryName,
          context
      );
      if (cities.isNotEmpty) {
        return cities;
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤: $e');
    }

    // Fallback –Ω–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
    return _fallbackCitiesByCountry[countryName] ?? [];
  }

  // –°—Ç–∞—Ä—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  @Deprecated('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ getLocalizedCountries() –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ')
  static List<String> get countries => _fallbackCountries;

  @Deprecated('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ getLocalizedCitiesForCountry() –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ')
  static List<String> getCitiesForCountry(String country) {
    return _fallbackCitiesByCountry[country] ?? [];
  }

  /// –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∏—Ç—å –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
  static Future<void> preloadGeographyData(BuildContext context) async {
    try {
      await _geographyService.getLocalizedCountries(context);
      debugPrint('‚úÖ –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω—ã');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: $e');
    }
  }

  /// –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö (–ø–æ–ª–µ–∑–Ω–æ –ø—Ä–∏ —Å–º–µ–Ω–µ —è–∑—ã–∫–∞)
  static void clearGeographyCache() {
    _geographyService.clearCache();
    debugPrint('üóëÔ∏è –ö—ç—à –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω');
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—ç—à–µ
  static Map<String, dynamic> getCacheInfo() {
    return _geographyService.getCacheInfo();
  }
}