// –ü—É—Ç—å: lib/mixins/policy_enforcement_mixin.dart

import 'package:flutter/material.dart';
import '../services/user_consent_service.dart';
import '../widgets/user_agreements_dialog.dart';
import '../localization/app_localizations.dart';
import '../constants/app_constants.dart';

/// ‚úÖ –°–ï–õ–ï–ö–¢–ò–í–ù–´–ô –º–∏–∫—Å–∏–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≥–ª–∞—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/// –£–õ–£–ß–®–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–µ–ª–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–∫–∞–∑–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –ø–æ–ª–∏—Ç–∏–∫
mixin PolicyEnforcementMixin<T extends StatefulWidget> on State<T> {
  final UserConsentService _consentService = UserConsentService();
  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±—Ä–∞–ª –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–µ –ø–æ–ª–µ _firebaseService

  bool _consentsChecked = false;
  bool _consentsValid = false;

  // ‚úÖ –ù–û–í–û–ï: –•—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è —Å–µ–ª–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  ConsentCheckResult? _lastConsentCheck;

  /// ‚úÖ –°–ï–õ–ï–ö–¢–ò–í–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≥–ª–∞—Å–∏–π –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  Future<void> checkPolicyCompliance() async {
    if (_consentsChecked) return; // –ò–∑–±–µ–≥–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫

    try {
      debugPrint('üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≥–ª–∞—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');

      // ‚úÖ –°–ï–õ–ï–ö–¢–ò–í–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      final consentResult = await _consentService.checkUserConsents();
      _lastConsentCheck = consentResult; // ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      _consentsChecked = true;
      _consentsValid = consentResult.allValid;

      if (!consentResult.allValid) {
        // ‚úÖ –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –∏–º–µ–Ω–Ω–æ —É—Å—Ç–∞—Ä–µ–ª–æ
        final outdatedList = consentResult.outdatedPolicies;
        debugPrint('üö´ –°–æ–≥–ª–∞—Å–∏—è –Ω–µ –ø—Ä–∏–Ω—è—Ç—ã –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–∏: $outdatedList');
        debugPrint('üìã Privacy Policy –Ω—É–∂–Ω–æ: ${consentResult.needPrivacyPolicy}');
        debugPrint('üìã Terms of Service –Ω—É–∂–Ω–æ: ${consentResult.needTermsOfService}');

        // ‚úÖ –°–ï–õ–ï–ö–¢–ò–í–ù–´–ô –ø–æ–∫–∞–∑ –¥–∏–∞–ª–æ–≥–∞
        await _showSelectivePolicyDialog(consentResult);
      } else {
        debugPrint('‚úÖ –í—Å–µ —Å–æ–≥–ª–∞—Å–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã');
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–≥–ª–∞—Å–∏–π: $e');
      _consentsChecked = true;
      _consentsValid = false;
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (–ø–æ–ª–Ω—ã–π)
      await _showFallbackPolicyDialog();
    }
  }

  /// ‚úÖ –ù–û–í–´–ô: –°–µ–ª–µ–∫—Ç–∏–≤–Ω—ã–π –ø–æ–∫–∞–∑ –¥–∏–∞–ª–æ–≥–∞ —Ç–æ–ª—å–∫–æ —Å —É—Å—Ç–∞—Ä–µ–≤—à–∏–º–∏ –ø–æ–ª–∏—Ç–∏–∫–∞–º–∏
  Future<void> _showSelectivePolicyDialog(ConsentCheckResult consentResult) async {
    if (!mounted) return;

    final outdatedPolicies = consentResult.outdatedPolicies;

    // ‚úÖ –°–ï–õ–ï–ö–¢–ò–í–ù–´–ï –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –¥–∏–∞–ª–æ–≥–∞
    final showPrivacy = consentResult.needPrivacyPolicy;
    final showTerms = consentResult.needTermsOfService;

    debugPrint('üéØ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–ª–µ–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥:');
    debugPrint('   - Privacy Policy –Ω—É–∂–µ–Ω: ${consentResult.needPrivacyPolicy}');
    debugPrint('   - Terms of Service –Ω—É–∂–µ–Ω: ${consentResult.needTermsOfService}');
    debugPrint('   - Privacy Policy –ø–æ–∫–∞–∑–∞—Ç—å: $showPrivacy');
    debugPrint('   - Terms of Service –ø–æ–∫–∞–∑–∞—Ç—å: $showTerms');
    debugPrint('   - –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ –ø–æ–ª–∏—Ç–∏–∫–∏: $outdatedPolicies');

    final bool? agreementsAccepted = await showDialog<bool>(
      context: context,
      barrierDismissible: false,
      builder: (BuildContext context) {
        return PopScope(
          canPop: false, // –ó–∞–ø—Ä–µ—â–∞–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–≤–∞–π–ø–æ–º/–∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥
          child: UserAgreementsDialog(
            isRegistration: false,
            // ‚úÖ –°–ï–õ–ï–ö–¢–ò–í–ù–´–ï –ø–∞—Ä–∞–º–µ—Ç—Ä—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
            showPrivacyPolicy: showPrivacy,
            showTermsOfService: showTerms,
            outdatedPolicies: outdatedPolicies,
            onAgreementsAccepted: () {
              debugPrint('‚úÖ –°–µ–ª–µ–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–≥–ª–∞—Å–∏—è –ø—Ä–∏–Ω—è—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
              debugPrint('üìã –û–±–Ω–æ–≤–ª–µ–Ω—ã –ø–æ–ª–∏—Ç–∏–∫–∏: $outdatedPolicies');
              Navigator.of(context).pop(true);
            },
            onCancel: () {
              debugPrint('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –ø—Ä–∏–Ω—è—Ç–∏—è —Å–µ–ª–µ–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–≥–ª–∞—Å–∏–π');
              Navigator.of(context).pop(false);
            },
          ),
        );
      },
    );

    await _handlePolicyDialogResult(agreementsAccepted, outdatedPolicies);
  }

  /// ‚úÖ –ù–û–í–´–ô: Fallback –¥–∏–∞–ª–æ–≥ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –ø–æ–ª–∏—Ç–∏–∫–∏)
  Future<void> _showFallbackPolicyDialog() async {
    if (!mounted) return;

    debugPrint('üö® –ü–æ–∫–∞–∑—ã–≤–∞–µ–º fallback –¥–∏–∞–ª–æ–≥ —Å–æ –≤—Å–µ–º–∏ –ø–æ–ª–∏—Ç–∏–∫–∞–º–∏');

    final bool? agreementsAccepted = await showDialog<bool>(
      context: context,
      barrierDismissible: false,
      builder: (BuildContext context) {
        return PopScope(
          canPop: false,
          child: UserAgreementsDialog(
            isRegistration: false,
            // ‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∫–∞–∫ fallback
            showPrivacyPolicy: true,
            showTermsOfService: true,
            outdatedPolicies: const ['privacy', 'terms'], // –í—Å–µ –ø–æ–ª–∏—Ç–∏–∫–∏
            onAgreementsAccepted: () {
              debugPrint('‚úÖ Fallback —Å–æ–≥–ª–∞—Å–∏—è –ø—Ä–∏–Ω—è—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
              Navigator.of(context).pop(true);
            },
            onCancel: () {
              debugPrint('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –ø—Ä–∏–Ω—è—Ç–∏—è fallback —Å–æ–≥–ª–∞—Å–∏–π');
              Navigator.of(context).pop(false);
            },
          ),
        );
      },
    );

    await _handlePolicyDialogResult(agreementsAccepted, ['privacy', 'terms']);
  }

  /// ‚úÖ –ù–û–í–´–ô: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–∏–∞–ª–æ–≥–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –ø–æ–ª–∏—Ç–∏–∫
  Future<void> _handlePolicyDialogResult(bool? accepted, List<String> updatedPolicies) async {
    if (accepted == true) {
      _consentsValid = true;
      debugPrint('‚úÖ –°–æ–≥–ª–∞—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ: $updatedPolicies');

      // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
      await _updateConsentCheckCache();

      if (mounted) setState(() {}); // –û–±–Ω–æ–≤–ª—è–µ–º UI
    } else {
      // ‚úÖ –ú–Ø–ì–ö–û–ï –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
      _consentsValid = false;

      if (mounted) {
        await _showPolicyReminderMessage(updatedPolicies);
      }
    }
  }

  /// ‚úÖ –ù–û–í–´–ô: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≥–ª–∞—Å–∏–π
  Future<void> _updateConsentCheckCache() async {
    try {
      _lastConsentCheck = await _consentService.checkUserConsents();
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ —Å–æ–≥–ª–∞—Å–∏–π: $e');
    }
  }

  /// ‚úÖ –ù–û–í–´–ô: –£–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –ø–æ–ª–∏—Ç–∏–∫
  Future<void> _showPolicyReminderMessage(List<String> rejectedPolicies) async {
    final localizations = AppLocalizations.of(context);

    // ‚úÖ –ê–î–ê–ü–¢–ò–í–ù–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª–∏—Ç–∏–∫
    String message;
    if (rejectedPolicies.length == 1) {
      final policyName = rejectedPolicies.first == 'privacy'
          ? (localizations.translate('privacy_policy'))
          : (localizations.translate('terms_of_service'));

      message = localizations.translate('single_policy_reminder')?.replaceFirst('{policy}', policyName) ??
          '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –æ–±–Ω–æ–≤–∏–ª–∞—Å—å $policyName. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω—è—Ç—å –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.';
    } else {
      message = localizations.translate('multiple_policies_reminder') ??
          '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –æ–±–Ω–æ–≤–∏–ª–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω—è—Ç—å –Ω–æ–≤—ã–µ –≤–µ—Ä—Å–∏–∏ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.';
    }

    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±—Ä–∞–ª –Ω–µ–Ω—É–∂–Ω—ã–µ ?. –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã - ScaffoldMessenger –∏ context –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å null
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: Colors.orange,
        duration: const Duration(seconds: 6),
        action: SnackBarAction(
          label: localizations.translate('accept_now') ?? '–ü—Ä–∏–Ω—è—Ç—å —Å–µ–π—á–∞—Å',
          textColor: Colors.white,
          onPressed: () {
            ScaffoldMessenger.of(context).hideCurrentSnackBar();
            // ‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å —Ç–µ–º–∏ –∂–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            if (_lastConsentCheck != null) {
              _showSelectivePolicyDialog(_lastConsentCheck!);
            } else {
              _showFallbackPolicyDialog();
            }
          },
        ),
      ),
    );

    debugPrint('‚ö†Ô∏è –ü–æ–∫–∞–∑–∞–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª–∏—Ç–∏–∫–∞—Ö: $rejectedPolicies');
  }

  /// ‚úÖ –£–ü–†–û–©–ï–ù–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è
  bool canPerformAction(String action) {
    return _consentsValid;
  }

  /// ‚úÖ –£–õ–£–ß–®–ï–ù–ù–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –¥–µ–π—Å—Ç–≤–∏—è —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –±—ã—Å—Ç—Ä–æ–≥–æ –ø—Ä–∏–Ω—è—Ç–∏—è
  void showActionBlockedMessage(String action) {
    if (!mounted) return;

    final localizations = AppLocalizations.of(context);

    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±—Ä–∞–ª –Ω–µ–Ω—É–∂–Ω—ã–µ ?. –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(
          localizations.translate('action_blocked_consents_required') ??
              '–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–Ω—è—Ç—å —Å–æ–≥–ª–∞—Å–∏—è',
        ),
        backgroundColor: Colors.orange,
        action: SnackBarAction(
          label: localizations.translate('accept_consents') ?? '–ü—Ä–∏–Ω—è—Ç—å —Å–æ–≥–ª–∞—Å–∏—è',
          textColor: Colors.white,
          onPressed: () {
            ScaffoldMessenger.of(context).hideCurrentSnackBar();
            // ‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–ª–µ–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥ –µ—Å–ª–∏ –µ—Å—Ç—å –∫—ç—à, –∏–Ω–∞—á–µ fallback
            if (_lastConsentCheck != null && !_lastConsentCheck!.allValid) {
              _showSelectivePolicyDialog(_lastConsentCheck!);
            } else {
              recheckConsents(); // –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π –¥–∏–∞–ª–æ–≥
            }
          },
        ),
        duration: const Duration(seconds: 4),
      ),
    );
  }

  /// ‚úÖ –ë–ï–ó–û–ü–ê–°–ù–û–ï –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
  Future<bool> safePerformAction(
      String action,
      Future<void> Function() actionCallback,
      ) async {
    if (!canPerformAction(action)) {
      showActionBlockedMessage(action);
      return false;
    }

    try {
      await actionCallback();
      return true;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è $action: $e');

      if (mounted) {
        final localizations = AppLocalizations.of(context);

        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±—Ä–∞–ª –Ω–µ–Ω—É–∂–Ω—ã–µ ?. –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(
              localizations.translate('action_failed') ??
                  '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
            ),
            backgroundColor: Colors.red,
            duration: const Duration(seconds: 3),
          ),
        );
      }

      return false;
    }
  }

  /// ‚úÖ –í–ò–î–ñ–ï–¢ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–æ–≥–ª–∞—Å–∏–π
  Widget buildRestrictedWidget({
    required String action,
    required Widget child,
    Widget? restrictedChild,
  }) {
    if (!canPerformAction(action)) {
      return restrictedChild ?? _buildRestrictedPlaceholder(action);
    }
    return child;
  }

  /// ‚úÖ –£–õ–£–ß–®–ï–ù–ù–ê–Ø –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  Widget _buildRestrictedPlaceholder(String action) {
    final localizations = AppLocalizations.of(context);

    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.grey[100],
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: Colors.orange, width: 2),
      ),
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(
            Icons.privacy_tip_outlined,
            size: 48,
            color: Colors.orange[700],
          ),
          const SizedBox(height: 12),
          Text(
            localizations.translate('content_requires_consents') ??
                '–ö–æ–Ω—Ç–µ–Ω—Ç —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–∏–Ω—è—Ç–∏—è —Å–æ–≥–ª–∞—Å–∏–π',
            style: TextStyle(
              fontSize: 16,
              fontWeight: FontWeight.bold,
              color: Colors.orange[700],
            ),
            textAlign: TextAlign.center,
          ),
          const SizedBox(height: 8),
          Text(
            localizations.translate('accept_consents_to_unlock') ??
                '–ü—Ä–∏–º–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–æ–≥–ª–∞—Å–∏—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É',
            style: TextStyle(
              fontSize: 14,
              color: Colors.orange[600],
            ),
            textAlign: TextAlign.center,
          ),
          const SizedBox(height: 16),
          ElevatedButton.icon(
            onPressed: () {
              // ‚úÖ –£–º–Ω—ã–π –ø–æ–∫–∞–∑ –¥–∏–∞–ª–æ–≥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫—ç—à–∞
              if (_lastConsentCheck != null && !_lastConsentCheck!.allValid) {
                _showSelectivePolicyDialog(_lastConsentCheck!);
              } else {
                recheckConsents();
              }
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: AppConstants.primaryColor,
              foregroundColor: Colors.white,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(8),
              ),
            ),
            icon: const Icon(Icons.check_circle_outline, size: 20),
            label: Text(
              localizations.translate('accept_consents') ?? '–ü—Ä–∏–Ω—è—Ç—å —Å–æ–≥–ª–∞—Å–∏—è',
            ),
          ),
        ],
      ),
    );
  }

  /// ‚úÖ –ì–ï–¢–¢–ï–†–´ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è

  /// –ü—Ä–æ–≤–µ—Ä–µ–Ω—ã –ª–∏ —Å–æ–≥–ª–∞—Å–∏—è
  bool get consentsChecked => _consentsChecked;

  /// –í–∞–ª–∏–¥–Ω—ã –ª–∏ —Å–æ–≥–ª–∞—Å–∏—è
  bool get consentsValid => _consentsValid;

  /// ‚úÖ –ù–û–í–´–ô: –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
  ConsentCheckResult? get lastConsentCheck => _lastConsentCheck;

  /// ‚úÖ –ù–û–í–´–ô: –ï—Å—Ç—å –ª–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –ø–æ–ª–∏—Ç–∏–∫–∏
  bool get hasOutdatedPolicies => _lastConsentCheck?.hasChanges ?? false;

  /// ‚úÖ –ù–û–í–´–ô: –°–ø–∏—Å–æ–∫ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –ø–æ–ª–∏—Ç–∏–∫
  List<String> get outdatedPolicies => _lastConsentCheck?.outdatedPolicies ?? [];

  /// –ú–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç
  bool get canCreateContent => _consentsValid;

  /// –ú–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
  bool get canEditData => _consentsValid;

  /// –ú–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–∏
  bool get canUsePremiumFeatures => _consentsValid;

  /// ‚úÖ –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≥–ª–∞—Å–∏–π
  Future<void> recheckConsents() async {
    debugPrint('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≥–ª–∞—Å–∏–π...');
    _consentsChecked = false;
    _consentsValid = false;
    _lastConsentCheck = null;
    await checkPolicyCompliance();
  }

  /// ‚úÖ –ú–ï–¢–û–î –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–≥–ª–∞—Å–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ)
  void resetConsentsState() {
    debugPrint('üîÑ –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–≥–ª–∞—Å–∏–π');
    _consentsChecked = false;
    _consentsValid = false;
    _lastConsentCheck = null;
  }

  /// ‚úÖ –ù–û–í–´–ô: –ë—ã—Å—Ç—Ä–æ–µ –ø—Ä–∏–Ω—è—Ç–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–ª–∏—Ç–∏–∫–∏
  Future<bool> quickAcceptPolicy(String policyType) async {
    try {
      bool success = false;

      switch (policyType) {
        case 'privacy':
          success = await _consentService.updatePrivacyPolicyAcceptance(null);
          break;
        case 'terms':
          success = await _consentService.updateTermsOfServiceAcceptance(null);
          break;
        default:
          debugPrint('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–æ–ª–∏—Ç–∏–∫–∏: $policyType');
          return false;
      }

      if (success) {
        await _updateConsentCheckCache();
        _consentsValid = _lastConsentCheck?.allValid ?? false;
        if (mounted) setState(() {});
        debugPrint('‚úÖ –ü–æ–ª–∏—Ç–∏–∫–∞ $policyType –ø—Ä–∏–Ω—è—Ç–∞ –±—ã—Å—Ç—Ä—ã–º –º–µ—Ç–æ–¥–æ–º');
      }

      return success;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –ø—Ä–∏–Ω—è—Ç–∏—è –ø–æ–ª–∏—Ç–∏–∫–∏ $policyType: $e');
      return false;
    }
  }

  /// ‚úÖ –ù–û–í–´–ô: –ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–ª–∏—Ç–∏–∫–∏
  Future<void> showSpecificPolicyDialog(String policyType) async {
    if (!mounted) return;

    final showPrivacy = policyType == 'privacy';
    final showTerms = policyType == 'terms';

    await _showSelectivePolicyDialog(ConsentCheckResult(
      allValid: false,
      needPrivacyPolicy: showPrivacy,
      needTermsOfService: showTerms,
      currentPrivacyVersion: '1.0.0',
      currentTermsVersion: '1.0.0',
    ));
  }
}