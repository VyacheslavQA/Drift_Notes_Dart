// –ü—É—Ç—å: lib/providers/subscription_provider.dart

import 'dart:async';
import 'package:flutter/material.dart';
import 'package:in_app_purchase/in_app_purchase.dart';
import '../constants/subscription_constants.dart';
import '../models/subscription_model.dart';
import '../models/usage_limits_model.dart';
import '../services/subscription/subscription_service.dart';
import '../services/firebase/firebase_service.dart';
import '../utils/network_utils.dart';


/// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô Provider –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
/// –ü—Ä–∞–≤–∏–ª—å–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç—Å—è —Å Isar —á–µ—Ä–µ–∑ SubscriptionService
class SubscriptionProvider extends ChangeNotifier {
  final SubscriptionService _subscriptionService = SubscriptionService();
  final FirebaseService _firebaseService = FirebaseService();

  // ‚úÖ –£–ü–†–û–©–ï–ù–ù–û–ï —Å–æ—Å—Ç–æ—è–Ω–∏–µ - —Ç–æ–ª—å–∫–æ SubscriptionService
  SubscriptionModel? _subscription;
  UsageLimitsModel? _usageLimits;

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
  List<ProductDetails> _availableProducts = [];
  bool _isLoadingProducts = false;

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏
  bool _isPurchasing = false;
  String? _purchasingProductId;

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
  bool _isLoading = true;
  String? _lastError;

  // –ö—ç—à –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ü–µ–Ω
  Map<String, String>? _localizedPrices;

  // ‚úÖ –£–ü–†–û–©–ï–ù–ù–´–ï —Å—Ç—Ä–∏–º—ã - —Ç–æ–ª—å–∫–æ SubscriptionService
  StreamSubscription<SubscriptionModel>? _subscriptionSubscription;

  // ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –ò–°–ü–†–ê–í–õ–ï–ù–û: –ö—ç—à —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω —Å SubscriptionService
  Map<ContentType, int> _realUsageCache = {};
  DateTime? _lastUsageUpdateTime;

  // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
  Timer? _debounceTimer;
  static const Duration _debounceDelay = Duration(milliseconds: 300);

  // ========================================
  // ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ú–µ—Ç–æ–¥ –¥–ª—è DebugPrint
  // ========================================

  void _debugPrint(String message) {
    // ‚úÖ –£–ë–†–ê–ù–û: –≤—Å–µ debugPrint –≤—ã–∑–æ–≤—ã –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ silent –æ–±—Ä–∞–±–æ—Ç–∫—É
  }

  // ========================================
  // ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ú–µ—Ç–æ–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ FirebaseService
  // ========================================

  /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç FirebaseService –≤ SubscriptionService
  void setFirebaseService(FirebaseService firebaseService) {
    try {
      _subscriptionService.setFirebaseService(firebaseService);
      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫–∏ FirebaseService
    } catch (e) {
      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –¥–µ—Ç–∞–ª—è–º–∏ –æ—à–∏–±–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ FirebaseService
    }
  }

  // ========================================
  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –ì–ï–¢–¢–ï–†–´
  // ========================================

  SubscriptionModel? get subscription => _subscription;
  UsageLimitsModel? get usageLimits => _usageLimits;
  List<ProductDetails> get availableProducts => _availableProducts;
  bool get isLoadingProducts => _isLoadingProducts;
  bool get isPurchasing => _isPurchasing;
  String? get purchasingProductId => _purchasingProductId;
  bool get isLoading => _isLoading;
  String? get lastError => _lastError;

  // –£–¥–æ–±–Ω—ã–µ –≥–µ—Ç—Ç–µ—Ä—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
  bool get isPremium => _subscription?.isPremium ?? false;
  bool get hasActiveSubscription => _subscription?.isActive ?? false;
  bool get isExpiringSoon => _subscription?.isExpiringSoon ?? false;
  int? get daysUntilExpiration => _subscription?.daysUntilExpiration;
  String get planDisplayName => _subscription?.planDisplayName ?? '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞–Ω';

  // –ì–µ—Ç—Ç–µ—Ä –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å HomeScreen
  bool get hasPremiumAccess => isPremium;

  // ========================================
  // ‚úÖ –£–ü–†–û–©–ï–ù–ù–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
  // ========================================

  Future<void> initialize() async {
    try {
      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –æ–± –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏

      _isLoading = true;
      _lastError = null;
      notifyListeners();

      // ‚úÖ –£–ü–†–û–©–ï–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ SubscriptionService
      await _subscriptionService.initialize();

      // ‚úÖ –£–ü–†–û–©–ï–ù–û: –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
      _subscriptionSubscription = _subscriptionService.subscriptionStream.listen(
        _onSubscriptionChanged,
        onError: _onSubscriptionError,
      );

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      await _loadInitialData();

      _isLoading = false;
      notifyListeners();

      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    } catch (e) {
      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –¥–µ—Ç–∞–ª—è–º–∏ –æ—à–∏–±–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
      _lastError = e.toString();
      _isLoading = false;
      notifyListeners();
    }
  }

  /// ‚úÖ –£–ü–†–û–©–ï–ù–ù–ê–Ø –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ SubscriptionService
  Future<void> _loadInitialData() async {
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
      _subscription = await _subscriptionService.loadCurrentSubscription();

      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–∏–º–∏—Ç—ã —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç
      await _loadUsageLimitsWithRealCount();

      await _loadLocalizedPrices();
      await loadAvailableProducts();
    } catch (e) {
      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –¥–µ—Ç–∞–ª—è–º–∏ –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
      _subscription ??= SubscriptionModel.defaultSubscription('unknown');
      _usageLimits ??= UsageLimitsModel.defaultLimits(_subscription?.userId ?? 'unknown');
    }
  }

  /// ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–∏–º–∏—Ç—ã —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ Isar
  Future<void> _loadUsageLimitsWithRealCount() async {
    try {
      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint –æ –∑–∞–≥—Ä—É–∑–∫–µ –ª–∏–º–∏—Ç–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç

      if (!_firebaseService.isUserLoggedIn) {
        // –î–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –ª–∏–º–∏—Ç—ã
        _usageLimits = UsageLimitsModel.defaultLimits('offline');
        _realUsageCache.clear();
        return;
      }

      final userId = _firebaseService.currentUserId!;

      // ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º SubscriptionService.getCurrentUsage (—á–∏—Ç–∞–µ—Ç –∏–∑ Isar)
      final fishingNotesCount = await _subscriptionService.getCurrentUsage(ContentType.fishingNotes);
      final markerMapsCount = await _subscriptionService.getCurrentUsage(ContentType.markerMaps);
      final budgetNotesCount = await _subscriptionService.getCurrentUsage(ContentType.budgetNotes);

      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint('üìä –†–µ–∞–ª—å–Ω—ã–µ –ø–æ–¥—Å—á–µ—Ç—ã: fishing=$fishingNotesCount, maps=$markerMapsCount, budget=$budgetNotesCount');

      // –°–æ–∑–¥–∞–µ–º UsageLimitsModel —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      _usageLimits = UsageLimitsModel(
        userId: userId,
        notesCount: fishingNotesCount,
        markerMapsCount: markerMapsCount,
        budgetNotesCount: budgetNotesCount,
        lastResetDate: DateTime.now(),
        updatedAt: DateTime.now(),
      );

      // ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      _updateUsageCache({
        ContentType.fishingNotes: fishingNotesCount,
        ContentType.markerMaps: markerMapsCount,
        ContentType.budgetNotes: budgetNotesCount,
      });

      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏–º–∏—Ç–æ–≤ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ø–æ–¥—Å—á–µ—Ç–∞–º–∏
    } catch (e) {
      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –¥–µ—Ç–∞–ª—è–º–∏ –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏–º–∏—Ç–æ–≤
      _usageLimits = UsageLimitsModel.defaultLimits(_subscription?.userId ?? 'unknown');
      _realUsageCache.clear();
    }
  }

  /// ‚úÖ –ù–û–í–´–ô –ú–ï–¢–û–î: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
  void _updateUsageCache(Map<ContentType, int> newCounts) {
    _realUsageCache = Map.from(newCounts);
    _lastUsageUpdateTime = DateTime.now();
    // ‚úÖ –£–ë–†–ê–ù–û: debugPrint('üîÑ –ö—ç—à –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω: $_realUsageCache');
  }

  /// ‚úÖ –ù–û–í–´–ô –ú–ï–¢–û–î: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –∫—ç—à–∞
  bool _isCacheValid() {
    if (_lastUsageUpdateTime == null) return false;
    final cacheAge = DateTime.now().difference(_lastUsageUpdateTime!);
    return cacheAge < const Duration(minutes: 2);
  }

  // ========================================
  // ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –ú–ï–¢–û–î–´ –ü–†–û–í–ï–†–ö–ò –õ–ò–ú–ò–¢–û–í
  // ========================================

  /// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  Future<bool> canCreateContent(ContentType contentType) async {
    // –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞, —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ
    if (isPremium) {
      return true;
    }

    // –î–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –≥–ª—É–±–∏–Ω —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–µ–º–∏—É–º
    if (contentType == ContentType.depthChart) {
      return false;
    }

    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º SubscriptionService –Ω–∞–ø—Ä—è–º—É—é (–æ–Ω —á–∏—Ç–∞–µ—Ç –∏–∑ Isar)
    final hasNetwork = await NetworkUtils.isNetworkAvailable();

    if (hasNetwork) {
      return await _subscriptionService.canCreateContent(contentType);
    } else {
      return await _subscriptionService.canCreateContentOffline(contentType);
    }
  }

  /// ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑ —Å—Ç–∞—Ä–æ–≥–æ –∫—ç—à–∞
  bool canCreateContentSync(ContentType contentType) {
    // –ï—Å–ª–∏ –ø—Ä–µ–º–∏—É–º - —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ
    if (isPremium) {
      return true;
    }

    // –î–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –≥–ª—É–±–∏–Ω - —Ç–æ–ª—å–∫–æ –ø—Ä–µ–º–∏—É–º
    if (contentType == ContentType.depthChart) {
      return false;
    }

    // ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞
    int currentUsage;

    if (_isCacheValid() && _realUsageCache.containsKey(contentType)) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à –µ—Å–ª–∏ –æ–Ω —Å–≤–µ–∂–∏–π
      currentUsage = _realUsageCache[contentType]!;
    } else {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ UsageLimitsModel –∫–∞–∫ fallback
      currentUsage = _usageLimits?.getCountForType(contentType) ?? 0;
    }

    final limit = getLimit(contentType);
    final canCreate = currentUsage < limit;

    // ‚úÖ –£–ë–†–ê–ù–û: debugPrint('üîç canCreateContentSync: $contentType, usage=$currentUsage, limit=$limit, canCreate=$canCreate');
    return canCreate;
  }

  /// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  int? getUsage(ContentType contentType) {
    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∫—ç—à—É, –µ—Å–ª–∏ –æ–Ω –∞–∫—Ç—É–∞–ª—å–Ω—ã–π
    if (_isCacheValid() && _realUsageCache.containsKey(contentType)) {
      return _realUsageCache[contentType];
    }

    // Fallback –∫ UsageLimitsModel
    return _usageLimits?.getCountForType(contentType) ?? 0;
  }

  /// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –¥–ª—è —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  int getLimit(ContentType contentType) {
    if (isPremium) {
      return SubscriptionConstants.unlimitedValue;
    }

    return SubscriptionConstants.getContentLimit(contentType);
  }

  /// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
  int getRemainingCount(ContentType contentType) {
    if (isPremium) return SubscriptionConstants.unlimitedValue;

    final currentUsage = getUsage(contentType) ?? 0;
    final limit = getLimit(contentType);
    return (limit - currentUsage).clamp(0, limit);
  }

  /// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
  double getUsagePercentage(ContentType contentType) {
    if (isPremium) return 0.0;

    final currentUsage = getUsage(contentType) ?? 0;
    final limit = getLimit(contentType);

    if (limit <= 0) return 0.0;
    return (currentUsage / limit).clamp(0.0, 1.0);
  }

  /// ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∫—ç—à–∞
  Future<void> incrementUsage(ContentType contentType) async {
    try {
      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint('üìà –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ $contentType...');

      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à
      final currentUsage = _realUsageCache[contentType] ?? 0;
      _realUsageCache[contentType] = currentUsage + 1;
      _lastUsageUpdateTime = DateTime.now();

      // –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥–µ–ª—å –ª–∏–º–∏—Ç–æ–≤
      if (_usageLimits != null) {
        _usageLimits = _usageLimits!.incrementCounter(contentType);
      }

      // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –î–µ–±–∞—É–Ω—Å–∏–Ω–≥ –¥–ª—è —á–∞—Å—Ç—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
      _debounceTimer?.cancel();
      _debounceTimer = Timer(_debounceDelay, () {
        notifyListeners();
      });

      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: SubscriptionService –±–æ–ª—å—à–µ –Ω–µ –≤–µ–¥–µ—Ç —Å—á–µ—Ç—á–∏–∫–∏
      await _subscriptionService.incrementUsage(contentType);

      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint('‚úÖ –°—á–µ—Ç—á–∏–∫ $contentType —É–≤–µ–ª–∏—á–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ –¥–æ ${_realUsageCache[contentType]}');
    } catch (e) {
      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –¥–µ—Ç–∞–ª—è–º–∏ –æ—à–∏–±–∫–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞
    }
  }

  /// ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–º–µ–Ω—å—à–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∫—ç—à–∞
  Future<void> decrementUsage(ContentType contentType) async {
    try {
      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint('üìâ –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ $contentType...');

      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à
      final currentUsage = _realUsageCache[contentType] ?? 0;
      if (currentUsage > 0) {
        _realUsageCache[contentType] = currentUsage - 1;
        _lastUsageUpdateTime = DateTime.now();
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥–µ–ª—å –ª–∏–º–∏—Ç–æ–≤
      if (_usageLimits != null) {
        _usageLimits = _usageLimits!.decrementCounter(contentType);
      }

      // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –î–µ–±–∞—É–Ω—Å–∏–Ω–≥ –¥–ª—è —á–∞—Å—Ç—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
      _debounceTimer?.cancel();
      _debounceTimer = Timer(_debounceDelay, () {
        notifyListeners();
      });

      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: SubscriptionService –±–æ–ª—å—à–µ –Ω–µ –≤–µ–¥–µ—Ç —Å—á–µ—Ç—á–∏–∫–∏
      await _subscriptionService.decrementUsage(contentType);

      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint('‚úÖ –°—á–µ—Ç—á–∏–∫ $contentType —É–º–µ–Ω—å—à–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ –¥–æ ${_realUsageCache[contentType]}');
    } catch (e) {
      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –¥–µ—Ç–∞–ª—è–º–∏ –æ—à–∏–±–∫–∏ —É–º–µ–Ω—å—à–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞
    }
  }

  // ========================================
  // –ú–ï–¢–û–î–´ –†–ê–ë–û–¢–´ –° –ü–†–û–î–£–ö–¢–ê–ú–ò –ò –ü–û–ö–£–ü–ö–ê–ú–ò
  // ========================================

  /// –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ü–µ–Ω
  Future<void> _loadLocalizedPrices() async {
    try {
      _localizedPrices = await SubscriptionConstants.getLocalizedPrices();
    } catch (e) {
      _localizedPrices = SubscriptionConstants.defaultPrices;
    }
  }

  /// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–æ–≤
  Future<void> loadAvailableProducts() async {
    try {
      _isLoadingProducts = true;
      _lastError = null;
      notifyListeners();

      final products = await _subscriptionService.getAvailableProducts();

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –≤ –Ω—É–∂–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
      products.sort((a, b) {
        const order = [
          SubscriptionConstants.monthlyPremiumId,
          SubscriptionConstants.yearlyPremiumId,
        ];
        return order.indexOf(a.id).compareTo(order.indexOf(b.id));
      });

      _availableProducts = products;
      _isLoadingProducts = false;
      notifyListeners();

      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: ${products.length}');
    } catch (e) {
      _lastError = '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã: $e';
      _isLoadingProducts = false;
      notifyListeners();
    }
  }

  /// –ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
  Future<bool> purchaseSubscription(String productId) async {
    try {
      _isPurchasing = true;
      _purchasingProductId = productId;
      _lastError = null;
      notifyListeners();

      final success = await _subscriptionService.purchaseSubscription(productId);

      if (!success) {
        _lastError = '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∫—É–ø–∫—É';
      }

      _isPurchasing = false;
      _purchasingProductId = null;
      notifyListeners();

      return success;
    } catch (e) {
      _lastError = '–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏: $e';
      _isPurchasing = false;
      _purchasingProductId = null;
      notifyListeners();
      return false;
    }
  }

  /// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–æ–∫
  Future<void> restorePurchases() async {
    try {
      _isLoading = true;
      _lastError = null;
      notifyListeners();

      await _subscriptionService.restorePurchases();
      await refreshData();
    } catch (e) {
      _lastError = '–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: $e';
      _isLoading = false;
      notifyListeners();
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–µ –ø–æ ID
  ProductDetails? getProductById(String productId) {
    try {
      return _availableProducts.where((p) => p.id == productId).firstOrNull;
    } catch (e) {
      return null;
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –ø—Ä–æ–¥—É–∫—Ç–∞
  String getProductPrice(String productId) {
    final product = getProductById(productId);

    if (product != null && product.price.isNotEmpty) {
      return product.price;
    }

    if (_localizedPrices != null && _localizedPrices!.containsKey(productId)) {
      return _localizedPrices![productId]!;
    }

    return SubscriptionConstants.getDefaultPrice(productId);
  }

  // ========================================
  // üÜï –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –†–ï–ê–õ–¨–ù–´–ú–ò –¶–ï–ù–ê–ú–ò
  // ========================================

  /// üÜï –ù–û–í–û–ï: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ Google Play
  Future<void> refreshProductPrices() async {
    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã –≤ SubscriptionService
      await _subscriptionService.refreshProductPrices();

      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω
      await loadAvailableProducts();

      notifyListeners();
    } catch (e) {
      // –¢–∏—Ö–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ - –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã —Ñ–æ–ª–ª–±—ç–∫ —Ü–µ–Ω—ã
    }
  }

  /// üÜï –ù–û–í–û–ï: –ü–æ–ª—É—á–µ–Ω–∏–µ –ª—É—á—à–µ–π –¥–æ—Å—Ç—É–ø–Ω–æ–π —Ü–µ–Ω—ã (—Ä–µ–∞–ª—å–Ω–∞—è –∏–∑ Google Play –∏–ª–∏ —Ñ–æ–ª–ª–±—ç–∫)
  Future<String> getBestPrice(String productId) async {
    try {
      return await _subscriptionService.getBestAvailablePrice(productId);
    } catch (e) {
      return SubscriptionConstants.getDefaultPrice(productId);
    }
  }

  /// üÜï –ù–û–í–û–ï: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ü–µ–Ω
  Future<Map<String, String>> getAllPrices() async {
    try {
      return await _subscriptionService.getRegionalizedPrices();
    } catch (e) {
      return SubscriptionConstants.defaultPrices;
    }
  }

  /// üÜï –ù–û–í–û–ï: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ Google Play
  Future<String?> getRealPrice(String productId) async {
    try {
      return await _subscriptionService.getLocalizedPrice(productId);
    } catch (e) {
      return null;
    }
  }

  /// üÜï –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω
  bool get areRealPricesLoaded => _subscriptionService.areProductsLoaded;

  // ========================================
  // ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ï –ú–ï–¢–û–î–´ –û–ë–ù–û–í–õ–ï–ù–ò–Ø
  // ========================================

  /// ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
  Future<void> refreshUsageData() async {
    try {
      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint('üîÑ SubscriptionProvider: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...');

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      _subscription = await _subscriptionService.loadCurrentSubscription();

      // ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –ø–æ–¥–ø–∏—Å–∫–∏ –µ—Å–ª–∏ –æ–Ω–ª–∞–π–Ω
      if (await NetworkUtils.isNetworkAvailable()) {
        await _subscriptionService.cacheSubscriptionDataOnline();
      }

      // ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–∏–º–∏—Ç—ã —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∫—ç—à–∞
      await _loadUsageLimitsWithRealCount();

      // üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö —Å–ª—É—à–∞—Ç–µ–ª–µ–π
      notifyListeners();

      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint('‚úÖ SubscriptionProvider: –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
    } catch (e) {
      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint('‚ùå SubscriptionProvider: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: $e');
      _lastError = e.toString();
      notifyListeners();
    }
  }

  /// ‚úÖ –ù–û–í–´–ô –ú–ï–¢–û–î: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ –æ—Ñ–ª–∞–π–Ω
  Future<void> refreshUsageDataOffline() async {
    try {
      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint('üîÑ SubscriptionProvider: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ñ–ª–∞–π–Ω...');

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      _subscription = await _subscriptionService.loadCurrentSubscription();

      // ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–∏–º–∏—Ç—ã —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∫—ç—à–∞
      await _loadUsageLimitsWithRealCount();

      // üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö —Å–ª—É—à–∞—Ç–µ–ª–µ–π
      notifyListeners();

      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint('‚úÖ SubscriptionProvider: –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è –æ—Ñ–ª–∞–π–Ω');
    } catch (e) {
      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint('‚ùå SubscriptionProvider: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –æ—Ñ–ª–∞–π–Ω: $e');
      _lastError = e.toString();
      notifyListeners();
    }
  }

  /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
  Future<void> refreshData() async {
    try {
      _isLoading = true;
      _lastError = null;
      notifyListeners();

      await _loadInitialData();

      _isLoading = false;
      notifyListeners();
    } catch (e) {
      _lastError = e.toString();
      _isLoading = false;
      notifyListeners();
    }
  }

  /// ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  Future<void> updateCacheAfterAuth() async {
    try {
      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint('üîÑ SubscriptionProvider: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
      if (!_firebaseService.isUserLoggedIn) {
        // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å
      final hasNetwork = await NetworkUtils.isNetworkAvailable();
      if (hasNetwork) {
        // –ö—ç—à–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ñ–ª–∞–π–Ω
        await _subscriptionService.cacheSubscriptionDataOnline();
        // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ñ–ª–∞–π–Ω
      }

      // ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å –Ω–æ–≤—ã–º –∫—ç—à–µ–º
      await refreshUsageData();

      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint('‚úÖ SubscriptionProvider: –ö—ç—à –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    } catch (e) {
      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint('‚ùå SubscriptionProvider: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞: $e');
    }
  }

  /// ‚úÖ –ù–û–í–´–ô –ú–ï–¢–û–î: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  Future<void> refreshCacheAfterSync() async {
    try {
      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint('üîÑ SubscriptionProvider: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...');

      // ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Isar –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      await _loadUsageLimitsWithRealCount();

      // –£–≤–µ–¥–æ–º–ª—è–µ–º UI
      notifyListeners();

      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint('‚úÖ SubscriptionProvider: –ö—ç—à –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
    } catch (e) {
      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint('‚ùå SubscriptionProvider: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: $e');
    }
  }

  // ========================================
  // UI HELPER –ú–ï–¢–û–î–´
  // ========================================

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
  String getUsageText(ContentType contentType) {
    if (isPremium) {
      return '‚àû';
    }

    final currentUsage = getUsage(contentType) ?? 0;
    final limit = getLimit(contentType);

    return '$currentUsage/$limit';
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
  Color getUsageIndicatorColor(ContentType contentType) {
    return SubscriptionConstants.getLimitIndicatorColor(
      getUsage(contentType) ?? 0,
      getLimit(contentType),
    );
  }

  /// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ–¥–æ–≤–æ–π —Å–∫–∏–¥–∫–∏
  double getYearlyDiscount() {
    try {
      final monthlyProduct = getProductById(SubscriptionConstants.monthlyPremiumId);
      final yearlyProduct = getProductById(SubscriptionConstants.yearlyPremiumId);

      if (monthlyProduct == null || yearlyProduct == null) {
        return 33.0; // –î–µ—Ñ–æ–ª—Ç–Ω–∞—è —Å–∫–∏–¥–∫–∞
      }

      final monthlyPrice = _extractPrice(monthlyProduct.price);
      final yearlyPrice = _extractPrice(yearlyProduct.price);

      if (monthlyPrice > 0 && yearlyPrice > 0) {
        final annualMonthlyPrice = monthlyPrice * 12;
        final discount = ((annualMonthlyPrice - yearlyPrice) / annualMonthlyPrice) * 100;
        return discount.clamp(0.0, 100.0);
      }
    } catch (e) {
      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –¥–µ—Ç–∞–ª—è–º–∏ –æ—à–∏–±–∫–∏ —Ä–∞—Å—á–µ—Ç–∞ —Å–∫–∏–¥–∫–∏
    }

    return 33.0; // –î–µ—Ñ–æ–ª—Ç–Ω–∞—è —Å–∫–∏–¥–∫–∞
  }

  /// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–∏—Å–ª–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ü–µ–Ω—ã
  double _extractPrice(String priceString) {
    try {
      // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä, —Ç–æ—á–µ–∫ –∏ –∑–∞–ø—è—Ç—ã—Ö
      String numericString = priceString.replaceAll(RegExp(r'[^\d.,]'), '');
      // –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É –¥–ª—è –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö –¥—Ä–æ–±–µ–π
      numericString = numericString.replaceAll(',', '.');
      return double.tryParse(numericString) ?? 0.0;
    } catch (e) {
      return 0.0;
    }
  }

  /// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º –∫—ç—à–µ–º
  Map<String, dynamic> getUsageStats() {
    return {
      'notes': {
        'current': getUsage(ContentType.fishingNotes) ?? 0,
        'limit': getLimit(ContentType.fishingNotes),
        'remaining': getRemainingCount(ContentType.fishingNotes),
        'percentage': getUsagePercentage(ContentType.fishingNotes),
      },
      'maps': {
        'current': getUsage(ContentType.markerMaps) ?? 0,
        'limit': getLimit(ContentType.markerMaps),
        'remaining': getRemainingCount(ContentType.markerMaps),
        'percentage': getUsagePercentage(ContentType.markerMaps),
      },
      'budgetNotes': {
        'current': getUsage(ContentType.budgetNotes) ?? 0,
        'limit': getLimit(ContentType.budgetNotes),
        'remaining': getRemainingCount(ContentType.budgetNotes),
        'percentage': getUsagePercentage(ContentType.budgetNotes),
      },
      'total': (_realUsageCache.values.fold(0, (sum, count) => sum + count)),
    };
  }

  /// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ª–∏–º–∏—Ç–µ
  bool shouldShowLimitWarning(ContentType contentType) {
    if (isPremium) return false;

    final remaining = getRemainingCount(contentType);
    return remaining <= 1 && remaining > 0;
  }

  // ========================================
  // –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô
  // ========================================

  /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ–¥–ø–∏—Å–∫–∏
  void _onSubscriptionChanged(SubscriptionModel subscription) {
    _subscription = subscription;
    notifyListeners();
  }

  /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏
  void _onSubscriptionError(dynamic error) {
    _lastError = error.toString();
    notifyListeners();
  }

  /// –û—á–∏—Å—Ç–∫–∞ –æ—à–∏–±–∫–∏
  void clearError() {
    _lastError = null;
    notifyListeners();
  }

  @override
  void dispose() {
    _debounceTimer?.cancel();
    _subscriptionSubscription?.cancel();
    _subscriptionService.dispose();
    super.dispose();
  }
}