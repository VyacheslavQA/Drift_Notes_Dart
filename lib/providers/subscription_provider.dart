// –ü—É—Ç—å: lib/providers/subscription_provider.dart

import 'dart:async';
import 'package:flutter/material.dart';
import 'package:in_app_purchase/in_app_purchase.dart';
import '../constants/subscription_constants.dart';
import '../models/subscription_model.dart';
import '../models/usage_limits_model.dart';
import '../services/subscription/subscription_service.dart';
import '../services/subscription/usage_limits_service.dart';
import '../services/firebase/firebase_service.dart'; // –î–û–ë–ê–í–õ–ï–ù–û

/// Provider –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
class SubscriptionProvider extends ChangeNotifier {
  final SubscriptionService _subscriptionService = SubscriptionService();
  final UsageLimitsService _usageLimitsService = UsageLimitsService();

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
  SubscriptionModel? _subscription;
  // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–∑–º–µ–Ω–∏–ª–∏ —Ç–∏–ø —Å UsageLimitsModel –Ω–∞ Map
  Map<String, dynamic>? _usageLimits;

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
  List<ProductDetails> _availableProducts = [];
  bool _isLoadingProducts = false;

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏
  bool _isPurchasing = false;
  String? _purchasingProductId;

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
  bool _isLoading = true;
  String? _lastError;

  // –ö—ç—à –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ü–µ–Ω
  Map<String, String>? _localizedPrices;

  // –°—Ç—Ä–∏–º—ã –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
  StreamSubscription<SubscriptionModel>? _subscriptionSubscription;
  // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–∑–º–µ–Ω–∏–ª–∏ —Ç–∏–ø —Å—Ç—Ä–∏–º–∞
  StreamSubscription<Map<String, dynamic>>? _limitsSubscription;

  // –ì–µ—Ç—Ç–µ—Ä—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
  SubscriptionModel? get subscription => _subscription;
  // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  UsageLimitsModel? get usageLimits => _convertMapToUsageLimits(_usageLimits);
  List<ProductDetails> get availableProducts => _availableProducts;
  bool get isLoadingProducts => _isLoadingProducts;
  bool get isPurchasing => _isPurchasing;
  String? get purchasingProductId => _purchasingProductId;
  bool get isLoading => _isLoading;
  String? get lastError => _lastError;

  // –£–¥–æ–±–Ω—ã–µ –≥–µ—Ç—Ç–µ—Ä—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
  bool get isPremium => _subscription?.isPremium ?? false;
  bool get hasActiveSubscription => _subscription?.isActive ?? false;
  bool get isExpiringSoon => _subscription?.isExpiringSoon ?? false;
  int? get daysUntilExpiration => _subscription?.daysUntilExpiration;
  String get planDisplayName => _subscription?.planDisplayName ?? 'Free';

  /// üî• –ù–û–í–´–ô –ú–ï–¢–û–î: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è Map –≤ UsageLimitsModel –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  UsageLimitsModel? _convertMapToUsageLimits(Map<String, dynamic>? data) {
    if (data == null || !data.containsKey('notesCount')) return null;

    // –°–æ–∑–¥–∞–µ–º UsageLimitsModel –∏–∑ –¥–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ–π Firebase —Å–∏—Å—Ç–µ–º—ã
    return UsageLimitsModel(
      userId: _subscription?.userId ?? '',
      notesCount: data['notesCount'] ?? 0,
      markerMapsCount: data['markerMapsCount'] ?? 0,
      expensesCount: data['expensesCount'] ?? 0,
      lastResetDate: DateTime.now(), // –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ
      updatedAt: DateTime.now(),
    );
  }

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
  Future<void> initialize() async {
    try {
      debugPrint('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SubscriptionProvider...');

      _isLoading = true;
      _lastError = null;
      notifyListeners();

      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ–∑–¥–∞–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º FirebaseService –≤ SubscriptionService
      try {
        final firebaseService = FirebaseService();
        _subscriptionService.setFirebaseService(firebaseService);
        debugPrint('‚úÖ FirebaseService —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ SubscriptionService');
      } catch (e) {
        debugPrint('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å FirebaseService: $e');
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –±–µ–∑ FirebaseService –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –∫—Ä–∞—Ö–∞
      }

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
      await _subscriptionService.initialize();
      await _usageLimitsService.initialize();

      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
      _subscriptionSubscription = _subscriptionService.subscriptionStream.listen(
        _onSubscriptionChanged,
        onError: _onSubscriptionError,
      );

      // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–∏–ø–∞ —Å—Ç—Ä–∏–º–∞
      _limitsSubscription = _usageLimitsService.limitsStream.listen(
        _onLimitsChanged,
        onError: _onLimitsError,
      );

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      await _loadInitialData();

      _isLoading = false;
      notifyListeners();

      debugPrint('‚úÖ SubscriptionProvider –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SubscriptionProvider: $e');
      _lastError = e.toString();
      _isLoading = false;
      notifyListeners();
    }
  }

  /// üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
  Future<void> _loadInitialData() async {
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∏ –ª–∏–º–∏—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
      final results = await Future.wait([
        _subscriptionService.loadCurrentSubscription(),
        _usageLimitsService.loadCurrentLimits(),
      ]);

      _subscription = results[0] as SubscriptionModel;
      // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –¢–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ–º Map –≤–º–µ—Å—Ç–æ UsageLimitsModel
      _usageLimits = results[1] as Map<String, dynamic>;

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã
      await _loadLocalizedPrices();

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
      await loadAvailableProducts();
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: $e');
      rethrow;
    }
  }

  /// –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ü–µ–Ω
  Future<void> _loadLocalizedPrices() async {
    try {
      _localizedPrices = await SubscriptionConstants.getLocalizedPrices();
      debugPrint('üí∞ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã: $_localizedPrices');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ü–µ–Ω: $e');
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ–ª–ª–±—ç–∫
      _localizedPrices = const {
        SubscriptionConstants.monthlyPremiumId: '\$4.99',
        SubscriptionConstants.yearlyPremiumId: '\$39.99',
      };
    }
  }

  /// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–æ–≤
  Future<void> loadAvailableProducts() async {
    try {
      _isLoadingProducts = true;
      _lastError = null;
      notifyListeners();

      final products = await _subscriptionService.getAvailableProducts();

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã: —Å–Ω–∞—á–∞–ª–∞ –º–µ—Å—è—á–Ω—ã–π, –ø–æ—Ç–æ–º –≥–æ–¥–æ–≤–æ–π
      products.sort((a, b) {
        const order = [
          SubscriptionConstants.monthlyPremiumId,
          SubscriptionConstants.yearlyPremiumId,
        ];
        return order.indexOf(a.id).compareTo(order.indexOf(b.id));
      });

      _availableProducts = products;
      _isLoadingProducts = false;
      notifyListeners();

      debugPrint('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: ${products.length}');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: $e');
      _lastError = 'Failed to load products: $e';
      _isLoadingProducts = false;
      notifyListeners();
    }
  }

  /// –ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
  Future<bool> purchaseSubscription(String productId) async {
    try {
      debugPrint('üõí –ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: $productId');

      _isPurchasing = true;
      _purchasingProductId = productId;
      _lastError = null;
      notifyListeners();

      final success = await _subscriptionService.purchaseSubscription(productId);

      if (!success) {
        _lastError = 'Failed to initiate purchase';
      }

      _isPurchasing = false;
      _purchasingProductId = null;
      notifyListeners();

      return success;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏: $e');
      _lastError = 'Purchase failed: $e';
      _isPurchasing = false;
      _purchasingProductId = null;
      notifyListeners();
      return false;
    }
  }

  /// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–æ–∫
  Future<void> restorePurchases() async {
    try {
      debugPrint('üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–æ–∫...');

      _isLoading = true;
      _lastError = null;
      notifyListeners();

      await _subscriptionService.restorePurchases();

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
      await refreshData();

      debugPrint('‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–æ–∫: $e');
      _lastError = 'Restore failed: $e';
      _isLoading = false;
      notifyListeners();
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  Future<bool> canCreateContent(ContentType contentType) async {
    // –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞, —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ
    if (isPremium) {
      return true;
    }

    // –î–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –≥–ª—É–±–∏–Ω —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–µ–º–∏—É–º
    if (contentType == ContentType.depthChart) {
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
    return await _usageLimitsService.canCreateContent(contentType);
  }

  /// –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  Future<ContentCreationResult> checkContentCreation(
      ContentType contentType,
      ) async {
    // –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞
    if (isPremium) {
      return ContentCreationResult(
        canCreate: true,
        reason: null,
        currentCount: _getUsageCountFromMap(contentType),
        limit: -1, // –ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ
        remaining: -1, // –ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å –ª–∏–º–∏—Ç–æ–≤
    return await _usageLimitsService.checkContentCreation(contentType);
  }

  /// üî• –ù–û–í–´–ô –ú–ï–¢–û–î: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∏–∑ Map –¥–∞–Ω–Ω—ã—Ö
  int _getUsageCountFromMap(ContentType contentType) {
    if (_usageLimits == null) return 0;

    switch (contentType) {
      case ContentType.fishingNotes:
        return _usageLimits!['notesCount'] ?? 0;
      case ContentType.markerMaps:
        return _usageLimits!['markerMapsCount'] ?? 0;
      case ContentType.expenses:
        return _usageLimits!['expensesCount'] ?? 0;
      case ContentType.depthChart:
        return 0; // –¢–æ–ª—å–∫–æ –ø—Ä–µ–º–∏—É–º
    }
  }

  /// –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
  Future<bool> incrementUsage(ContentType contentType) async {
    try {
      // –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞, —Å—á–µ—Ç—á–∏–∫–∏ –Ω–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º
      if (isPremium) {
        return true;
      }

      final success = await _usageLimitsService.incrementUsage(contentType);

      if (success) {
        // –õ–∏–º–∏—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤—è—Ç—Å—è —á–µ—Ä–µ–∑ —Å—Ç—Ä–∏–º
        debugPrint('‚úÖ –°—á–µ—Ç—á–∏–∫ —É–≤–µ–ª–∏—á–µ–Ω –¥–ª—è $contentType');
      }

      return success;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞: $e');
      return false;
    }
  }

  /// –£–º–µ–Ω—å—à–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
  Future<bool> decrementUsage(ContentType contentType) async {
    try {
      // –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞, —Å—á–µ—Ç—á–∏–∫–∏ –Ω–µ —É–º–µ–Ω—å—à–∞–µ–º
      if (isPremium) {
        return true;
      }

      final success = await _usageLimitsService.decrementUsage(contentType);

      if (success) {
        debugPrint('‚úÖ –°—á–µ—Ç—á–∏–∫ —É–º–µ–Ω—å—à–µ–Ω –¥–ª—è $contentType');
      }

      return success;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ —É–º–µ–Ω—å—à–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞: $e');
      return false;
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
  Future<Map<String, dynamic>> getUsageStatistics() async {
    return await _usageLimitsService.getUsageStatistics();
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –æ –ª–∏–º–∏—Ç–∞—Ö
  Future<List<ContentTypeWarning>> checkForWarnings() async {
    // –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–º–∏—É–º, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –Ω–µ—Ç
    if (isPremium) {
      return [];
    }

    return await _usageLimitsService.checkForWarnings();
  }

  /// –ü–µ—Ä–µ—Å—á–µ—Ç –ª–∏–º–∏—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
  Future<void> recalculateLimits() async {
    try {
      await _usageLimitsService.recalculateLimits();
      debugPrint('‚úÖ –õ–∏–º–∏—Ç—ã –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –ª–∏–º–∏—Ç–æ–≤: $e');
    }
  }

  /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
  Future<void> refreshData() async {
    try {
      debugPrint('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–∫–∏...');

      _isLoading = true;
      _lastError = null;
      notifyListeners();

      await _loadInitialData();

      _isLoading = false;
      notifyListeners();

      debugPrint('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: $e');
      _lastError = e.toString();
      _isLoading = false;
      notifyListeners();
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–µ –ø–æ ID
  ProductDetails? getProductById(String productId) {
    return _availableProducts.where((p) => p.id == productId).firstOrNull;
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –ø—Ä–æ–¥—É–∫—Ç–∞ (–ò–°–ü–†–ê–í–õ–ï–ù–û)
  String getProductPrice(String productId) {
    final product = getProductById(productId);

    // –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞
    if (product != null && product.price.isNotEmpty) {
      return product.price;
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é —Ü–µ–Ω—É
    if (_localizedPrices != null && _localizedPrices!.containsKey(productId)) {
      return _localizedPrices![productId]!;
    }

    // –§–æ–ª–ª–±—ç–∫ –Ω–∞ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ —Ü–µ–Ω—ã
    const fallbackPrices = {
      SubscriptionConstants.monthlyPremiumId: '\$4.99',
      SubscriptionConstants.yearlyPremiumId: '\$39.99',
    };

    return fallbackPrices[productId] ?? '\$4.99';
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π —Ü–µ–Ω—ã –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
  Future<String> getLocalizedPrice(String productId) async {
    try {
      return await SubscriptionConstants.getLocalizedPrice(productId);
    } catch (e) {
      return getProductPrice(productId);
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ–¥–æ–≤–æ–π —ç–∫–æ–Ω–æ–º–∏–∏ (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö) - –£–õ–£–ß–®–ï–ù–û
  double getYearlyDiscount() {
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–∫–∏–¥–∫—É –∏–∑ –∫–æ–Ω—Å—Ç–∞–Ω—Ç
      if (_localizedPrices != null) {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–∞–ª—é—Ç—É –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–∏–¥–∫—É
        return SubscriptionConstants.getUserYearlyDiscount() as double? ?? 0.0;
      }

      // –ï—Å–ª–∏ –Ω–µ—Ç –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ü–µ–Ω, —Å—á–∏—Ç–∞–µ–º –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞
      final monthlyProduct = getProductById(SubscriptionConstants.monthlyPremiumId);
      final yearlyProduct = getProductById(SubscriptionConstants.yearlyPremiumId);

      if (monthlyProduct == null || yearlyProduct == null) {
        return 33.0; // –î–µ—Ñ–æ–ª—Ç–Ω–∞—è —Å–∫–∏–¥–∫–∞
      }

      // –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Ü–µ–Ω
      final monthlyPrice = _extractPrice(monthlyProduct.price);
      final yearlyPrice = _extractPrice(yearlyProduct.price);

      if (monthlyPrice > 0 && yearlyPrice > 0) {
        final annualMonthlyPrice = monthlyPrice * 12;
        final discount = ((annualMonthlyPrice - yearlyPrice) / annualMonthlyPrice) * 100;
        return discount.clamp(0.0, 100.0);
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å–∫–∏–¥–∫–∏: $e');
    }

    return 33.0; // –î–µ—Ñ–æ–ª—Ç–Ω–∞—è —Å–∫–∏–¥–∫–∞
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ–¥–æ–≤–æ–π —Å–∫–∏–¥–∫–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
  Future<double> getYearlyDiscountAsync() async {
    try {
      return await SubscriptionConstants.getUserYearlyDiscount();
    } catch (e) {
      return getYearlyDiscount();
    }
  }

  /// üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  int getUsageCount(ContentType contentType) {
    return _getUsageCountFromMap(contentType);
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –¥–ª—è —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  int getUsageLimit(ContentType contentType) {
    return SubscriptionConstants.getContentLimit(contentType);
  }

  /// üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  int getRemainingCount(ContentType contentType) {
    if (isPremium) return -1; // –ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ

    final current = _getUsageCountFromMap(contentType);
    final limit = getUsageLimit(contentType);

    return (limit - current).clamp(0, limit);
  }

  /// üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
  double getUsagePercentage(ContentType contentType) {
    if (isPremium) return 0.0; // –ù–µ—Ç –ª–∏–º–∏—Ç–æ–≤

    final current = _getUsageCountFromMap(contentType);
    final limit = getUsageLimit(contentType);

    if (limit <= 0) return 0.0;
    return (current / limit).clamp(0.0, 1.0);
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞–ª—é—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<SupportedCurrency> getUserCurrency() async {
    return await SubscriptionConstants.getUserCurrency();
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞ –≤–∞–ª—é—Ç—ã
  Future<String> getCurrencySymbol() async {
    final currency = await getUserCurrency();
    return SubscriptionConstants.getCurrencySymbol(currency);
  }

  /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ–¥–ø–∏—Å–∫–∏
  void _onSubscriptionChanged(SubscriptionModel subscription) {
    debugPrint('üîÑ –ü–æ–¥–ø–∏—Å–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞: ${subscription.status}');
    _subscription = subscription;
    notifyListeners();
  }

  /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏
  void _onSubscriptionError(dynamic error) {
    debugPrint('‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–∏–º–µ –ø–æ–¥–ø–∏—Å–∫–∏: $error');
    _lastError = error.toString();
    notifyListeners();
  }

  /// üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ª–∏–º–∏—Ç–æ–≤ (—Ç–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç Map)
  void _onLimitsChanged(Map<String, dynamic> limits) {
    debugPrint('üîÑ –õ–∏–º–∏—Ç—ã –∏–∑–º–µ–Ω–µ–Ω—ã —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é Firebase —Å–∏—Å—Ç–µ–º—É');
    debugPrint('üîÑ –î–∞–Ω–Ω—ã–µ: $limits');
    _usageLimits = limits;
    notifyListeners();
  }

  /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ª–∏–º–∏—Ç–æ–≤
  void _onLimitsError(dynamic error) {
    debugPrint('‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–∏–º–µ –ª–∏–º–∏—Ç–æ–≤: $error');
    _lastError = error.toString();
    notifyListeners();
  }

  /// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–∏—Å–ª–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ü–µ–Ω—ã
  double _extractPrice(String priceString) {
    try {
      // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä, —Ç–æ—á–µ–∫ –∏ –∑–∞–ø—è—Ç—ã—Ö
      String numericString = priceString.replaceAll(RegExp(r'[^\d.,]'), '');

      // –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É –¥–ª—è –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö –¥—Ä–æ–±–µ–π
      numericString = numericString.replaceAll(',', '.');

      return double.tryParse(numericString) ?? 0.0;
    } catch (e) {
      return 0.0;
    }
  }

  /// –û—á–∏—Å—Ç–∫–∞ –æ—à–∏–±–∫–∏
  void clearError() {
    _lastError = null;
    notifyListeners();
  }

  // üî• –ù–û–í–´–ï –ú–ï–¢–û–î–´ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å—á–µ—Ç—á–∏–∫–æ–≤

  /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º —Å–ª—É—à–∞—Ç–µ–ª–µ–π
  Future<void> refreshUsageData() async {
    try {
      debugPrint('üîÑ SubscriptionProvider: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...');

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
      await _subscriptionService.loadCurrentSubscription();

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ª–∏–º–∏—Ç—ã
      await _usageLimitsService.loadCurrentLimits();

      // üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö —Å–ª—É—à–∞—Ç–µ–ª–µ–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
      notifyListeners();

      debugPrint('‚úÖ SubscriptionProvider: –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏ —Å–ª—É—à–∞—Ç–µ–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã');
    } catch (e) {
      debugPrint('‚ùå SubscriptionProvider: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: $e');
      _lastError = e.toString();
      notifyListeners(); // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    }
  }

  /// –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø–∞
  bool get hasPremiumAccess => _subscription?.isPremium ?? false;

  /// –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  int? getUsage(ContentType contentType) {
    if (_usageLimits == null) return null;

    switch (contentType) {
      case ContentType.fishingNotes:
        return _usageLimits!['notesCount'] ?? 0;
      case ContentType.markerMaps:
        return _usageLimits!['markerMapsCount'] ?? 0;
      case ContentType.expenses:
        return _usageLimits!['expensesCount'] ?? 0;
      case ContentType.depthChart:
        return 0; // –¢–æ–ª—å–∫–æ –ø—Ä–µ–º–∏—É–º
    }
  }

  /// –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –¥–ª—è —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  int? getLimit(ContentType contentType) {
    if (hasPremiumAccess) {
      return SubscriptionConstants.unlimitedValue; // –ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ –¥–ª—è –ø—Ä–µ–º–∏—É–º
    }

    return SubscriptionConstants.getContentLimit(contentType);
  }

  /// –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  bool canCreateContentSync(ContentType contentType) {
    // –ï—Å–ª–∏ –ø—Ä–µ–º–∏—É–º - —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ
    if (hasPremiumAccess) {
      return true;
    }

    // –î–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –≥–ª—É–±–∏–Ω - —Ç–æ–ª—å–∫–æ –ø—Ä–µ–º–∏—É–º
    if (contentType == ContentType.depthChart) {
      return false;
    }

    final currentUsage = getUsage(contentType) ?? 0;
    final limit = getLimit(contentType) ?? 0;

    return currentUsage < limit;
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
  Color getUsageIndicatorColor(ContentType contentType) {
    final currentUsage = getUsage(contentType) ?? 0;
    final limit = getLimit(contentType) ?? 0;

    if (limit <= 0) return const Color(0xFF2E7D32);

    final percentage = currentUsage / limit;

    if (percentage >= 0.9) {
      return const Color(0xFFFF4444); // –ö—Ä–∞—Å–Ω—ã–π - –ª–∏–º–∏—Ç
    } else if (percentage >= 0.7) {
      return const Color(0xFFFFA500); // –û—Ä–∞–Ω–∂–µ–≤—ã–π - –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    } else {
      return const Color(0xFF2E7D32); // –ó–µ–ª–µ–Ω—ã–π - –Ω–æ—Ä–º–∞
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
  String getUsageText(ContentType contentType) {
    if (hasPremiumAccess) {
      return '‚àû'; // –ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ
    }

    final currentUsage = getUsage(contentType) ?? 0;
    final limit = getLimit(contentType) ?? 0;

    return '$currentUsage/$limit';
  }

  @override
  void dispose() {
    _subscriptionSubscription?.cancel();
    _limitsSubscription?.cancel();
    _subscriptionService.dispose();
    _usageLimitsService.dispose();
    super.dispose();
  }
}