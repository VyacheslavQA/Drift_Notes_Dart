// –ü—É—Ç—å: lib/constants/subscription_constants.dart

import 'dart:io';
import 'package:flutter/material.dart';

// ========================================
// –û–°–ù–û–í–ù–´–ï –ï–ù–£–ú–´
// ========================================

/// –¢–∏–ø—ã –ø–æ–¥–ø–∏—Å–∫–∏
enum SubscriptionType {
  monthly,
  yearly,
}

/// –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
enum SubscriptionStatus {
  none,          // –ù–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏
  active,        // –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
  expired,       // –ò—Å—Ç–µ–∫—à–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
  canceled,      // –û—Ç–º–µ–Ω–µ–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
  pending,       // –û–∂–∏–¥–∞—é—â–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
}

/// üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: expenses ‚Üí budgetNotes
enum ContentType {
  fishingNotes,
  markerMaps,
  budgetNotes,   // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û! –ë—ã–ª–æ expenses
  depthChart,    // –ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏
}

/// üî• –£–ü–†–û–©–ï–ù–û: –¢–æ–ª—å–∫–æ 3 –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–∞–ª—é—Ç—ã –≤–º–µ—Å—Ç–æ 5
enum SupportedCurrency {
  rub,    // –†–æ—Å—Å–∏–π—Å–∫–∏–µ —Ä—É–±–ª–∏ (–æ—Å–Ω–æ–≤–Ω–∞—è)
  kzt,    // –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∏–µ —Ç–µ–Ω–≥–µ
  usd,    // –î–æ–ª–ª–∞—Ä—ã –°–®–ê (—Ñ–æ–ª–ª–±—ç–∫)
}

class SubscriptionConstants {
  // ========================================
  // GOOGLE PLAY PRODUCT IDs
  // ========================================

  static const String monthlyPremiumId = 'drift_notes_monthly_premium';
  static const String yearlyPremiumId = 'drift_notes_yearly_premium';

  static const List<String> subscriptionProductIds = [
    monthlyPremiumId,
    yearlyPremiumId,
  ];

  // ========================================
  // üî• –£–ü–†–û–©–ï–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –¶–ï–ù (3 –≤–∞–ª—é—Ç—ã –≤–º–µ—Å—Ç–æ 5)
  // ========================================

  static const Map<SupportedCurrency, Map<String, String>> pricesByRegion = {
    // –†–æ—Å—Å–∏—è –∏ –°–ù–ì
    SupportedCurrency.rub: {
      monthlyPremiumId: '‚ÇΩ299',
      yearlyPremiumId: '‚ÇΩ2490',
    },

    // –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω
    SupportedCurrency.kzt: {
      monthlyPremiumId: '‚Ç∏1490',
      yearlyPremiumId: '‚Ç∏11990',
    },

    // –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (—Ñ–æ–ª–ª–±—ç–∫)
    SupportedCurrency.usd: {
      monthlyPremiumId: '\$4.99',
      yearlyPremiumId: '\$39.99',
    },
  };

  // üî• –£–ü–†–û–©–ï–ù–û: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤
  static const Map<String, SupportedCurrency> countryToCurrency = {
    'RU': SupportedCurrency.rub,  // –†–æ—Å—Å–∏—è
    'BY': SupportedCurrency.rub,  // –ë–µ–ª–∞—Ä—É—Å—å
    'KZ': SupportedCurrency.kzt,  // –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω
    // –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã ‚Üí USD
  };

  // ========================================
  // üî• –£–ü–†–û–©–ï–ù–ù–´–ï –õ–ò–ú–ò–¢–´ (–±–µ–∑ grace period)
  // ========================================

  static const int freeNotesLimit = 3;
  static const int freeMarkerMapsLimit = 3;
  static const int freeBudgetNotesLimit = 3;
  static const int unlimitedValue = 999999;// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û! –ë—ã–ª–æ freeExpensesLimit

  // ========================================
  // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø FIREBASE –°–¢–†–£–ö–¢–£–†–ê
  // ========================================

  // –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: users/{userId}/subcollections
  static const String usersCollection = 'users';
  static const String userUsageLimitsSubcollection = 'usage_limits';
  static const String currentUsageLimitsDocument = 'current';

  // Subcollections –¥–ª—è –∑–∞–º–µ—Ç–æ–∫
  static const String fishingNotesSubcollection = 'fishing_notes';
  static const String budgetNotesSubcollection = 'budget_notes';    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û! –ë—ã–ª–æ expenses
  static const String markerMapsSubcollection = 'marker_maps';
  static const String subscriptionSubcollection = 'subscription';

  // ========================================
  // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–´ –ù–ï–î–û–°–¢–ê–Æ–©–ò–ï –ü–û–õ–Ø –ü–û–î–ü–ò–°–ö–ò
  // ========================================

  // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
  static const String subscriptionStatusField = 'status';
  static const String subscriptionPlanField = 'plan';
  static const String subscriptionExpirationField = 'expirationDate';
  static const String subscriptionCreatedAtField = 'createdAt';
  static const String subscriptionUpdatedAtField = 'updatedAt';

  // ‚úÖ –ù–û–í–´–ï –ø–æ–ª—è –¥–ª—è –ø–æ–ª–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
  static const String subscriptionPurchaseTokenField = 'purchaseToken';
  static const String subscriptionPlatformField = 'platform';
  static const String subscriptionProductIdField = 'productId';
  static const String subscriptionOriginalTransactionIdField = 'originalTransactionId';
  static const String subscriptionLastValidationField = 'lastValidation';
  static const String subscriptionAutoRenewField = 'autoRenew';

  // ‚úÖ –ö–û–ù–°–¢–ê–ù–¢–´ –ü–õ–ê–¢–§–û–†–ú
  static const String androidPlatform = 'android';
  static const String iosPlatform = 'ios';
  static const String unknownPlatform = 'unknown';

  // –ü–æ–ª—è –ª–∏–º–∏—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
  static const String notesCountField = 'notesCount';
  static const String markerMapsCountField = 'markerMapsCount';
  static const String budgetNotesCountField = 'budgetNotesCount';  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û! –ë—ã–ª–æ expensesCount
  static const String lastResetDateField = 'lastResetDate';

  // –û–±—â–∏–µ –ø–æ–ª—è
  static const String userIdField = 'userId';
  static const String updatedAtField = 'updatedAt';
  static const String createdAtField = 'createdAt';

  // ========================================
  // üî• –£–ü–†–û–©–ï–ù–ù–´–ï –ú–ï–¢–û–î–´ –ü–£–¢–ï–ô FIREBASE
  // ========================================

  /// –ü—É—Ç—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É –ª–∏–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static String getUserUsageLimitsPath(String userId) {
    return '$usersCollection/$userId/$userUsageLimitsSubcollection/$currentUsageLimitsDocument';
  }

  /// –ü—É—Ç—å –∫ subcollection –∑–∞–º–µ—Ç–æ–∫ —Ä—ã–±–∞–ª–∫–∏
  static String getFishingNotesPath(String userId) {
    return '$usersCollection/$userId/$fishingNotesSubcollection';
  }

  /// –ü—É—Ç—å –∫ subcollection –∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞
  static String getBudgetNotesPath(String userId) {
    return '$usersCollection/$userId/$budgetNotesSubcollection';
  }

  /// –ü—É—Ç—å –∫ subcollection –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç
  static String getMarkerMapsPath(String userId) {
    return '$usersCollection/$userId/$markerMapsSubcollection';
  }

  /// –ü—É—Ç—å –∫ subcollection –ø–æ–¥–ø–∏—Å–∫–∏
  static String getSubscriptionPath(String userId) {
    return '$usersCollection/$userId/$subscriptionSubcollection';
  }

  /// ‚úÖ –ù–û–í–´–ô: –ü—É—Ç—å –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –¥–æ–∫—É–º–µ–Ω—Ç—É –ø–æ–¥–ø–∏—Å–∫–∏
  static String getSubscriptionDocumentPath(String userId, [String documentId = 'current']) {
    return '$usersCollection/$userId/$subscriptionSubcollection/$documentId';
  }

  // ========================================
  // üî• –£–ü–†–û–©–ï–ù–ù–´–ï –ú–ï–¢–û–î–´ –õ–ò–ú–ò–¢–û–í (–±–µ–∑ grace period)
  // ========================================

  /// –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞
  static bool isOverLimit(int currentUsage, int limit) {
    return currentUsage >= limit;
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –¥–ª—è —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  static int getContentLimit(ContentType contentType) {
    switch (contentType) {
      case ContentType.fishingNotes:
        return freeNotesLimit;
      case ContentType.markerMaps:
        return freeMarkerMapsLimit;
      case ContentType.budgetNotes:  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û! –ë—ã–ª–æ expenses
        return freeBudgetNotesLimit;
      case ContentType.depthChart:
        return 0; // –¢–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–º–∏—É–º
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—è Firebase –¥–ª—è —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  static String getFirebaseCountField(ContentType contentType) {
    switch (contentType) {
      case ContentType.fishingNotes:
        return notesCountField;
      case ContentType.markerMaps:
        return markerMapsCountField;
      case ContentType.budgetNotes:  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û! –ë—ã–ª–æ expenses
        return budgetNotesCountField;
      case ContentType.depthChart:
        return 'depthChartCount';
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ subcollection –¥–ª—è —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  static String getContentSubcollectionPath(String userId, ContentType contentType) {
    switch (contentType) {
      case ContentType.fishingNotes:
        return getFishingNotesPath(userId);
      case ContentType.markerMaps:
        return getMarkerMapsPath(userId);
      case ContentType.budgetNotes:  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û! –ë—ã–ª–æ expenses
        return getBudgetNotesPath(userId);
      case ContentType.depthChart:
        return '$usersCollection/$userId/depth_charts'; // –ü—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏—è
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–µ–π
  static bool isContentPremium(ContentType contentType) {
    return contentType == ContentType.depthChart;
  }

  /// –ú–æ–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç (–ø—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
  static bool canCreate(int currentUsage, int limit) {
    return currentUsage < limit;
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è UI
  static String getContentTypeName(ContentType contentType) {
    switch (contentType) {
      case ContentType.fishingNotes:
        return '–∑–∞–º–µ—Ç–æ–∫ —Ä—ã–±–∞–ª–∫–∏';
      case ContentType.markerMaps:
        return '–º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç';
      case ContentType.budgetNotes:  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û! –ë—ã–ª–æ expenses ‚Üí –ø–æ–µ–∑–¥–æ–∫
        return '–∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞';
      case ContentType.depthChart:
        return '–≥—Ä–∞—Ñ–∏–∫–æ–≤ –≥–ª—É–±–∏–Ω—ã';
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ª–∏–º–∏—Ç–∞
  static Color getLimitIndicatorColor(int currentUsage, int limit) {
    final percentage = limit > 0 ? currentUsage / limit : 0.0;

    if (percentage >= 1.0) return Colors.red;           // 100% - –∫—Ä–∞—Å–Ω—ã–π
    if (percentage >= 0.8) return Colors.orange;        // 80%+ - –æ—Ä–∞–Ω–∂–µ–≤—ã–π
    if (percentage >= 0.6) return Colors.yellow;        // 60%+ - –∂–µ–ª—Ç—ã–π
    return Colors.green;                                 // <60% - –∑–µ–ª–µ–Ω—ã–π
  }

  // ========================================
  // ‚úÖ –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –ü–û–î–ü–ò–°–ö–ò
  // ========================================

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
  static String getCurrentPlatform() {
    try {
      if (Platform.isAndroid) return androidPlatform;
      if (Platform.isIOS) return iosPlatform;
      return unknownPlatform;
    } catch (e) {
      return unknownPlatform;
    }
  }

  /// –í–∞–ª–∏–¥–∞—Ü–∏—è Product ID
  static bool isValidProductId(String productId) {
    return subscriptionProductIds.contains(productId);
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ Product ID
  static SubscriptionType? getSubscriptionTypeFromProductId(String productId) {
    switch (productId) {
      case monthlyPremiumId:
        return SubscriptionType.monthly;
      case yearlyPremiumId:
        return SubscriptionType.yearly;
      default:
        return null;
    }
  }

  // ========================================
  // üî• –£–ü–†–û–©–ï–ù–ù–´–ï –ú–ï–¢–û–î–´ –†–ê–ë–û–¢–´ –° –í–ê–õ–Æ–¢–ê–ú–ò
  // ========================================

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞)
  static Future<SupportedCurrency> getUserCurrency() async {
    try {
      final String? locale = Platform.localeName;

      if (locale != null && locale.length >= 5) {
        final String countryCode = locale.substring(3, 5).toUpperCase();

        if (countryToCurrency.containsKey(countryCode)) {
          return countryToCurrency[countryCode]!;
        }
      }

      // –§–æ–ª–ª–±—ç–∫ –ø–æ —è–∑—ã–∫—É
      if (locale != null && locale.startsWith('ru')) {
        return SupportedCurrency.rub;
      } else if (locale != null && locale.startsWith('kk')) {
        return SupportedCurrency.kzt;
      }

      return SupportedCurrency.usd;
    } catch (e) {
      return SupportedCurrency.usd;
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static Future<Map<String, String>> getLocalizedPrices() async {
    final currency = await getUserCurrency();
    return pricesByRegion[currency] ?? pricesByRegion[SupportedCurrency.usd]!;
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞ –≤–∞–ª—é—Ç—ã
  static String getCurrencySymbol(SupportedCurrency currency) {
    switch (currency) {
      case SupportedCurrency.rub:
        return '‚ÇΩ';
      case SupportedCurrency.kzt:
        return '‚Ç∏';
      case SupportedCurrency.usd:
        return '\$';
    }
  }

  // ========================================
  // –ë–ê–ó–û–í–´–ï –ú–ï–¢–û–î–´ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
  // ========================================

  static String getProductId(SubscriptionType type) {
    switch (type) {
      case SubscriptionType.monthly:
        return monthlyPremiumId;
      case SubscriptionType.yearly:
        return yearlyPremiumId;
    }
  }

  static SubscriptionType? getSubscriptionType(String productId) {
    switch (productId) {
      case monthlyPremiumId:
        return SubscriptionType.monthly;
      case yearlyPremiumId:
        return SubscriptionType.yearly;
      default:
        return null;
    }
  }

  static bool isValidProduct(String productId) {
    return subscriptionProductIds.contains(productId);
  }

  /// –§–æ–ª–ª–±—ç–∫ —Ü–µ–Ω—ã
  static const Map<String, String> defaultPrices = {
    monthlyPremiumId: '\$4.99',
    yearlyPremiumId: '\$39.99',
  };

  static String getDefaultPrice(String productId) {
    return defaultPrices[productId] ?? '\$4.99';
  }
}