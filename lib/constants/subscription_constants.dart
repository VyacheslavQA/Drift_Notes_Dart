// –ü—É—Ç—å: lib/constants/subscription_constants.dart

import 'dart:io';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';

// –¢–∏–ø—ã –ø–æ–¥–ø–∏—Å–∫–∏ (–≤—ã–Ω–µ—Å–µ–Ω—ã –Ω–∞—Ä—É–∂—É –∏–∑ –∫–ª–∞—Å—Å–∞)
enum SubscriptionType {
  monthly,
  yearly,
}

// –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ (–≤—ã–Ω–µ—Å–µ–Ω—ã –Ω–∞—Ä—É–∂—É –∏–∑ –∫–ª–∞—Å—Å–∞)
enum SubscriptionStatus {
  none,          // –ù–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏
  active,        // –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
  expired,       // –ò—Å—Ç–µ–∫—à–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
  canceled,      // –û—Ç–º–µ–Ω–µ–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
  pending,       // –û–∂–∏–¥–∞—é—â–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
}

// –¢–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ (–≤—ã–Ω–µ—Å–µ–Ω—ã –Ω–∞—Ä—É–∂—É –∏–∑ –∫–ª–∞—Å—Å–∞)
enum ContentType {
  fishingNotes,
  markerMaps,
  expenses,
  depthChart,    // –ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏
}

// –î–û–ë–ê–í–õ–ï–ù–û: –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã –∏ —Ä–µ–≥–∏–æ–Ω—ã
enum SupportedCurrency {
  usd,    // –î–æ–ª–ª–∞—Ä—ã –°–®–ê
  rub,    // –†–æ—Å—Å–∏–π—Å–∫–∏–µ —Ä—É–±–ª–∏
  kzt,    // –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∏–µ —Ç–µ–Ω–≥–µ
  eur,    // –ï–≤—Ä–æ
  uah,    // –£–∫—Ä–∞–∏–Ω—Å–∫–∏–µ –≥—Ä–∏–≤–Ω—ã
}

// üî• –ù–û–í–´–ï –ï–ù–£–ú–´ –¥–ª—è –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞

/// –¢–∏–ø—ã –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –æ –ª–∏–º–∏—Ç–∞—Ö –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ
enum OfflineLimitWarningType {
  normal,       // –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
  approaching,  // –ü—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –∫ –ª–∏–º–∏—Ç—É
  overLimit,    // –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ (–Ω–æ –≤ —Ä–∞–º–∫–∞—Ö grace period)
  blocked,      // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ - –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
}

/// –°—Ç–∞—Ç—É—Å –∫—ç—à–∞ –ø–æ–¥–ø–∏—Å–∫–∏
enum CacheStatus {
  trusted,    // –î–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –∫—ç—à (–¥–æ 30 –¥–Ω–µ–π)
  warning,    // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ (30-60 –¥–Ω–µ–π)
  expired,    // –ò—Å—Ç–µ–∫—à–∏–π (60-90 –¥–Ω–µ–π)
  invalid,    // –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π (–±–æ–ª–µ–µ 90 –¥–Ω–µ–π)
}

class SubscriptionConstants {
  // ========================================
  // GOOGLE PLAY PRODUCT IDs
  // ========================================

  // –ë–∞–∑–æ–≤—ã–µ ID –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (–±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –≤—Å–µ—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤)
  static const String monthlyPremiumId = 'drift_notes_monthly_premium';
  static const String yearlyPremiumId = 'drift_notes_yearly_premium';

  // –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏
  static const List<String> subscriptionProductIds = [
    monthlyPremiumId,
    yearlyPremiumId,
  ];

  // ========================================
  // GOOGLE PLAY –¢–ï–°–¢–û–í–´–ï IDs
  // ========================================

  static const String testMonthlyId = 'android.test.purchased';
  static const String testYearlyId = 'android.test.item_unavailable';

  static const List<String> testProductIds = [
    testMonthlyId,
    testYearlyId,
  ];

  // ========================================
  // –ú–£–õ–¨–¢–ò–í–ê–õ–Æ–¢–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –¶–ï–ù
  // ========================================

  // –¶–µ–Ω—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞–Ω/–≤–∞–ª—é—Ç
  static const Map<SupportedCurrency, Map<String, String>> pricesByRegion = {
    // –°–®–ê –∏ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    SupportedCurrency.usd: {
      monthlyPremiumId: '\$4.99',
      yearlyPremiumId: '\$39.99',
    },

    // –†–æ—Å—Å–∏—è
    SupportedCurrency.rub: {
      monthlyPremiumId: '‚ÇΩ299',
      yearlyPremiumId: '‚ÇΩ2490',  // ~17% —Å–∫–∏–¥–∫–∞
    },

    // –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω
    SupportedCurrency.kzt: {
      monthlyPremiumId: '‚Ç∏1490',
      yearlyPremiumId: '‚Ç∏11990', // ~20% —Å–∫–∏–¥–∫–∞
    },

    // –ï–≤—Ä–æ–ø–∞
    SupportedCurrency.eur: {
      monthlyPremiumId: '‚Ç¨4.49',
      yearlyPremiumId: '‚Ç¨35.99',
    },

    // –£–∫—Ä–∞–∏–Ω–∞
    SupportedCurrency.uah: {
      monthlyPremiumId: '‚Ç¥149',
      yearlyPremiumId: '‚Ç¥1199',
    },
  };

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã –ø–æ –∫–æ–¥—É —Å—Ç—Ä–∞–Ω—ã
  static const Map<String, SupportedCurrency> countryToCurrency = {
    'RU': SupportedCurrency.rub,  // –†–æ—Å—Å–∏—è
    'KZ': SupportedCurrency.kzt,  // –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω
    'BY': SupportedCurrency.rub,  // –ë–µ–ª–∞—Ä—É—Å—å (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É–±–ª–∏)
    'UA': SupportedCurrency.uah,  // –£–∫—Ä–∞–∏–Ω–∞
    'DE': SupportedCurrency.eur,  // –ì–µ—Ä–º–∞–Ω–∏—è
    'FR': SupportedCurrency.eur,  // –§—Ä–∞–Ω—Ü–∏—è
    'IT': SupportedCurrency.eur,  // –ò—Ç–∞–ª–∏—è
    'ES': SupportedCurrency.eur,  // –ò—Å–ø–∞–Ω–∏—è
    'US': SupportedCurrency.usd,  // –°–®–ê
    'CA': SupportedCurrency.usd,  // –ö–∞–Ω–∞–¥–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ–ª–ª–∞—Ä—ã)
    'GB': SupportedCurrency.eur,  // –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≤—Ä–æ)
  };

  // ========================================
  // –õ–ò–ú–ò–¢–´ –ò –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø
  // ========================================

  static const int freeNotesLimit = 3;
  static const int freeMarkerMapsLimit = 3;
  static const int freeExpensesLimit = 3;
  static const int unlimitedValue = 999999;

  // üî• –ù–û–í–´–ï –ö–û–ù–°–¢–ê–ù–¢–´ –¥–ª—è –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞

  /// –û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–≤–µ—Ä—Ö –ª–∏–º–∏—Ç–∞
  static const int offlineGraceLimit = 3;

  /// –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ - –¥–Ω–∏ –ø–æ–ª–Ω–æ–≥–æ –¥–æ–≤–µ—Ä–∏—è –∫ –∫—ç—à—É
  static const int cacheTrustDays = 30;

  /// –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ - –¥–Ω–∏ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º –æ –ø—Ä–æ–≤–µ—Ä–∫–µ
  static const int cacheWarningDays = 60;

  /// –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ - –ø–æ–ª–Ω–æ–µ –∏—Å—Ç–µ—á–µ–Ω–∏–µ –∫—ç—à–∞
  static const int cacheExpireDays = 90;

  /// –í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è –∫—ç—à–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–≤ –º–∏–Ω—É—Ç–∞—Ö)
  static const int usageCacheMinutes = 5;

  /// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  static const int maxSyncRetries = 3;

  /// –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
  static const int syncRetryDelaySeconds = 5;

  // ========================================
  // –õ–û–ö–ê–õ–ò–ó–ê–¶–ò–Ø –ò –ö–≠–®–ò–†–û–í–ê–ù–ò–ï
  // ========================================

  static const String subscriptionTitle = 'premium_subscription';
  static const String monthlyPlanTitle = 'monthly_plan';
  static const String yearlyPlanTitle = 'yearly_plan';
  static const String upgradeButton = 'upgrade_to_premium';
  static const String restorePurchases = 'restore_purchases';

  static const String cachedSubscriptionStatusKey = 'cached_subscription_status';
  static const String cachedExpirationDateKey = 'cached_expiration_date';
  static const String cachedPlanTypeKey = 'cached_plan_type';
  static const String cachedCurrencyKey = 'cached_user_currency';

  // ========================================
  // üî• FIREBASE –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø - –û–ë–ù–û–í–õ–ï–ù–û –î–õ–Ø –ù–û–í–û–ô –°–¢–†–£–ö–¢–£–†–´
  // ========================================

  static const String subscriptionCollection = 'subscriptions';

  // üî• –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—É—é –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É usage_limits!
  // static const String usageLimitsCollection = 'usage_limits'; // ‚ùå –£–î–ê–õ–ï–ù–û - –°–¢–ê–†–ê–Ø –°–¢–†–£–ö–¢–£–†–ê

  // üî• –ù–û–í–´–ï –ö–û–ù–°–¢–ê–ù–¢–´ –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã users/{userId}/usage_limits/current
  static const String usersCollection = 'users';
  static const String userUsageLimitsSubcollection = 'usage_limits';
  static const String currentUsageLimitsDocument = 'current';

  static const String subscriptionStatusField = 'status';
  static const String subscriptionPlanField = 'plan';
  static const String subscriptionExpirationField = 'expirationDate';
  static const String subscriptionPurchaseTokenField = 'purchaseToken';
  static const String subscriptionPlatformField = 'platform';
  static const String subscriptionCreatedAtField = 'createdAt';
  static const String subscriptionUpdatedAtField = 'updatedAt';

  static const String notesCountField = 'notesCount';
  static const String markerMapsCountField = 'markerMapsCount';
  static const String expensesCountField = 'expensesCount';
  static const String lastResetDateField = 'lastResetDate';

  static const String androidPlatform = 'android';
  static const String iosPlatform = 'ios';

  static const Duration limitResetPeriod = Duration(days: 30);

  // üî• –ù–û–í–´–ï –ö–û–ù–°–¢–ê–ù–¢–´ –¥–ª—è Firebase –æ–ø–µ—Ä–∞—Ü–∏–π
  static const String userIdField = 'userId';
  static const String updatedAtField = 'updatedAt';
  static const String createdAtField = 'createdAt';

  // ========================================
  // üî• –ù–û–í–´–ï –ú–ï–¢–û–î–´ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –ø—É—Ç–µ–π Firebase
  // ========================================

  /// –ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É –ª–∏–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
  static String getUserUsageLimitsPath(String userId) {
    return '$usersCollection/$userId/$userUsageLimitsSubcollection/$currentUsageLimitsDocument';
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–µ–Ω—Å –∫–æ–ª–ª–µ–∫—Ü–∏–∏ users
  static String getUsersCollectionPath() {
    return usersCollection;
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ subcollection –ª–∏–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static String getUserUsageLimitsSubcollectionPath(String userId) {
    return '$usersCollection/$userId/$userUsageLimitsSubcollection';
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static String getUserDocumentPath(String userId) {
    return '$usersCollection/$userId';
  }

  // ========================================
  // üî• –ù–û–í–´–ï –ú–ï–¢–û–î–´ –¥–ª—è –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞
  // ========================================

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ —Å —É—á–µ—Ç–æ–º –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞
  static bool isOverLimitWithGrace(int currentUsage, int limit) {
    return currentUsage >= (limit + offlineGraceLimit);
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  static int getRemainingGraceElements(int currentUsage, int limit) {
    if (currentUsage <= limit) {
      return offlineGraceLimit;
    }

    final used = currentUsage - limit;
    return (offlineGraceLimit - used).clamp(0, offlineGraceLimit);
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞
  static bool isCriticalOverage(int currentUsage, int limit) {
    return currentUsage >= (limit + offlineGraceLimit);
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏—è –∫ –ª–∏–º–∏—Ç—É
  static bool isApproachingLimit(int currentUsage, int limit) {
    return currentUsage >= (limit - 2); // –ó–∞ 2 —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–æ –ª–∏–º–∏—Ç–∞
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–≥–æ –ª–∏–º–∏—Ç–∞
  static bool isOverBaseLimit(int currentUsage, int limit) {
    return currentUsage > limit;
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –ª–∏–º–∏—Ç–µ
  static OfflineLimitWarningType getWarningType(int currentUsage, int limit) {
    if (isCriticalOverage(currentUsage, limit)) {
      return OfflineLimitWarningType.blocked;
    }

    if (isOverBaseLimit(currentUsage, limit)) {
      return OfflineLimitWarningType.overLimit;
    }

    if (isApproachingLimit(currentUsage, limit)) {
      return OfflineLimitWarningType.approaching;
    }

    return OfflineLimitWarningType.normal;
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –ª–∏–º–∏—Ç–∞
  static String getLimitStatusMessage(int currentUsage, int limit, ContentType contentType) {
    final warningType = getWarningType(currentUsage, limit);
    final contentName = getContentTypeName(contentType);

    switch (warningType) {
      case OfflineLimitWarningType.blocked:
        return '–õ–∏–º–∏—Ç $contentName –∏—Å—á–µ—Ä–ø–∞–Ω. –¢—Ä–µ–±—É–µ—Ç—Å—è Premium –ø–æ–¥–ø–∏—Å–∫–∞.';

      case OfflineLimitWarningType.overLimit:
        final remaining = getRemainingGraceElements(currentUsage, limit);
        return '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ ${currentUsage - limit} –∏–∑ $offlineGraceLimit –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö $contentName. –û—Å—Ç–∞–ª–æ—Å—å: $remaining.';

      case OfflineLimitWarningType.approaching:
        final remaining = limit - currentUsage;
        return '–û—Å—Ç–∞–ª–æ—Å—å $remaining $contentName –¥–æ –ª–∏–º–∏—Ç–∞.';

      case OfflineLimitWarningType.normal:
        return '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ $currentUsage –∏–∑ $limit $contentName.';
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  static String getContentTypeName(ContentType contentType) {
    switch (contentType) {
      case ContentType.fishingNotes:
        return '–∑–∞–º–µ—Ç–æ–∫';
      case ContentType.markerMaps:
        return '–∫–∞—Ä—Ç';
      case ContentType.expenses:
        return '–ø–æ–µ–∑–¥–æ–∫';
      case ContentType.depthChart:
        return '–≥—Ä–∞—Ñ–∏–∫–æ–≤ –≥–ª—É–±–∏–Ω—ã';
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –∫—ç—à–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
  static bool isCacheValid(DateTime cacheTime, int validDays) {
    final now = DateTime.now();
    final daysSinceCache = now.difference(cacheTime).inDays;
    return daysSinceCache < validDays;
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫—ç—à–∞
  static CacheStatus getCacheStatus(DateTime cacheTime) {
    final now = DateTime.now();
    final daysSinceCache = now.difference(cacheTime).inDays;

    if (daysSinceCache < cacheTrustDays) {
      return CacheStatus.trusted;
    } else if (daysSinceCache < cacheWarningDays) {
      return CacheStatus.warning;
    } else if (daysSinceCache < cacheExpireDays) {
      return CacheStatus.expired;
    } else {
      return CacheStatus.invalid;
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ª–∏–º–∏—Ç–∞
  static Color getLimitIndicatorColor(int currentUsage, int limit) {
    final warningType = getWarningType(currentUsage, limit);

    switch (warningType) {
      case OfflineLimitWarningType.normal:
        return Colors.green;
      case OfflineLimitWarningType.approaching:
        return Colors.orange;
      case OfflineLimitWarningType.overLimit:
        return Colors.red;
      case OfflineLimitWarningType.blocked:
        return Colors.red.shade800;
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ª–∏–º–∏—Ç–∞
  static IconData getLimitIndicatorIcon(int currentUsage, int limit) {
    final warningType = getWarningType(currentUsage, limit);

    switch (warningType) {
      case OfflineLimitWarningType.normal:
        return Icons.check_circle;
      case OfflineLimitWarningType.approaching:
        return Icons.warning;
      case OfflineLimitWarningType.overLimit:
        return Icons.error;
      case OfflineLimitWarningType.blocked:
        return Icons.block;
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
  static double getUsagePercentage(int currentUsage, int limit) {
    if (limit == 0) return 0.0;
    return (currentUsage / limit).clamp(0.0, 1.0);
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å —É—á–µ—Ç–æ–º grace period
  static double getUsagePercentageWithGrace(int currentUsage, int limit) {
    final totalLimit = limit + offlineGraceLimit;
    if (totalLimit == 0) return 0.0;
    return (currentUsage / totalLimit).clamp(0.0, 1.0);
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–∫–∞–∑–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
  static bool shouldShowWarning(int currentUsage, int limit) {
    return getWarningType(currentUsage, limit) != OfflineLimitWarningType.normal;
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–∫–∞–∑–∞ –¥–∏–∞–ª–æ–≥–∞ –ø—Ä–µ–º–∏—É–º
  static bool shouldShowPremiumDialog(int currentUsage, int limit) {
    return getWarningType(currentUsage, limit) == OfflineLimitWarningType.blocked;
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞
  static String getLimitDialogTitle(ContentType contentType) {
    final contentName = getContentTypeName(contentType);
    return '–õ–∏–º–∏—Ç $contentName –ø—Ä–µ–≤—ã—à–µ–Ω';
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞
  static String getLimitDialogDescription(ContentType contentType, int currentUsage, int limit) {
    final contentName = getContentTypeName(contentType);
    final remaining = getRemainingGraceElements(currentUsage, limit);

    if (isCriticalOverage(currentUsage, limit)) {
      return '–í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç –Ω–∞ ${currentUsage - limit} $contentName. –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–±—É–µ—Ç—Å—è Premium –ø–æ–¥–ø–∏—Å–∫–∞.';
    } else if (isOverBaseLimit(currentUsage, limit)) {
      return '–í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –±–∞–∑–æ–≤—ã–π –ª–∏–º–∏—Ç –Ω–∞ ${currentUsage - limit} $contentName. –û—Å—Ç–∞–ª–æ—Å—å $remaining –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤.';
    } else {
      return '–ü—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è –ª–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è $contentName.';
    }
  }

  // ========================================
  // –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –í–ê–õ–Æ–¢–ê–ú–ò
  // ========================================

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ª–æ–∫–∞–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  static Future<SupportedCurrency> getUserCurrency() async {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
      final String? locale = Platform.localeName; // 'ru_RU', 'en_US', 'kk_KZ'

      if (locale != null && locale.length >= 5) {
        final String countryCode = locale.substring(3, 5).toUpperCase();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å—Ç—Ä–∞–Ω–∞ –≤ –Ω–∞—à–µ–π –∫–∞—Ä—Ç–µ
        if (countryToCurrency.containsKey(countryCode)) {
          return countryToCurrency[countryCode]!;
        }
      }

      // –§–æ–ª–ª–±—ç–∫: –ø—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ —è–∑—ã–∫—É
      if (locale != null && locale.startsWith('ru')) {
        return SupportedCurrency.rub;
      } else if (locale != null && locale.startsWith('kk')) {
        return SupportedCurrency.kzt;
      }

      // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–æ–ª–ª–∞—Ä—ã
      return SupportedCurrency.usd;

    } catch (e) {
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–æ–ª–ª–∞—Ä—ã
      return SupportedCurrency.usd;
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static Future<Map<String, String>> getLocalizedPrices() async {
    final currency = await getUserCurrency();
    return pricesByRegion[currency] ?? pricesByRegion[SupportedCurrency.usd]!;
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static Future<String> getLocalizedPrice(String productId) async {
    final prices = await getLocalizedPrices();
    return prices[productId] ?? '\$4.99'; // –§–æ–ª–ª–±—ç–∫
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞ –≤–∞–ª—é—Ç—ã
  static String getCurrencySymbol(SupportedCurrency currency) {
    switch (currency) {
      case SupportedCurrency.usd:
        return '\$';
      case SupportedCurrency.rub:
        return '‚ÇΩ';
      case SupportedCurrency.kzt:
        return '‚Ç∏';
      case SupportedCurrency.eur:
        return '‚Ç¨';
      case SupportedCurrency.uah:
        return '‚Ç¥';
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∞–ª—é—Ç—ã
  static String getCurrencyName(SupportedCurrency currency) {
    switch (currency) {
      case SupportedCurrency.usd:
        return 'USD';
      case SupportedCurrency.rub:
        return 'RUB';
      case SupportedCurrency.kzt:
        return 'KZT';
      case SupportedCurrency.eur:
        return 'EUR';
      case SupportedCurrency.uah:
        return 'UAH';
    }
  }

  /// –†–∞—Å—á–µ—Ç —Å–∫–∏–¥–∫–∏ –¥–ª—è –≥–æ–¥–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞ (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞–ª—é—Ç—ã)
  static double getYearlyDiscount(SupportedCurrency currency) {
    switch (currency) {
      case SupportedCurrency.rub:
      // ‚ÇΩ299 * 12 = ‚ÇΩ3588, ‚ÇΩ2490 = ~31% —Å–∫–∏–¥–∫–∞
        return 31.0;
      case SupportedCurrency.kzt:
      // ‚Ç∏1490 * 12 = ‚Ç∏17880, ‚Ç∏11990 = ~33% —Å–∫–∏–¥–∫–∞
        return 33.0;
      case SupportedCurrency.usd:
      // $4.99 * 12 = $59.88, $39.99 = ~33% —Å–∫–∏–¥–∫–∞
        return 33.0;
      case SupportedCurrency.eur:
      // ‚Ç¨4.49 * 12 = ‚Ç¨53.88, ‚Ç¨35.99 = ~33% —Å–∫–∏–¥–∫–∞
        return 33.0;
      case SupportedCurrency.uah:
      // ‚Ç¥149 * 12 = ‚Ç¥1788, ‚Ç¥1199 = ~33% —Å–∫–∏–¥–∫–∞
        return 33.0;
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static Future<double> getUserYearlyDiscount() async {
    final currency = await getUserCurrency();
    return getYearlyDiscount(currency);
  }

  // ========================================
  // –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –ú–ï–¢–û–î–´ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
  // ========================================

  static String getPlanLocalizedKey(SubscriptionType type) {
    switch (type) {
      case SubscriptionType.monthly:
        return monthlyPlanTitle;
      case SubscriptionType.yearly:
        return yearlyPlanTitle;
    }
  }

  static String getProductId(SubscriptionType type) {
    switch (type) {
      case SubscriptionType.monthly:
        return monthlyPremiumId;
      case SubscriptionType.yearly:
        return yearlyPremiumId;
    }
  }

  static SubscriptionType? getSubscriptionType(String productId) {
    switch (productId) {
      case monthlyPremiumId:
      case testMonthlyId:
        return SubscriptionType.monthly;
      case yearlyPremiumId:
      case testYearlyId:
        return SubscriptionType.yearly;
      default:
        return null;
    }
  }

  static bool isContentPremium(ContentType contentType) {
    switch (contentType) {
      case ContentType.depthChart:
        return true;
      case ContentType.fishingNotes:
      case ContentType.markerMaps:
      case ContentType.expenses:
        return false;
    }
  }

  static int getContentLimit(ContentType contentType) {
    switch (contentType) {
      case ContentType.fishingNotes:
        return freeNotesLimit;
      case ContentType.markerMaps:
        return freeMarkerMapsLimit;
      case ContentType.expenses:
        return freeExpensesLimit;
      case ContentType.depthChart:
        return 0;
    }
  }

  // ========================================
  // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –£–¢–ò–õ–ò–¢–´
  // ========================================

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—Ä–æ–¥—É–∫—Ç —Ç–µ—Å—Ç–æ–≤—ã–º
  static bool isTestProduct(String productId) {
    return testProductIds.contains(productId);
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
  static List<String> getProductIds({bool useTestProducts = false}) {
    return useTestProducts ? testProductIds : subscriptionProductIds;
  }

  /// –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
  static bool isValidProduct(String productId) {
    return subscriptionProductIds.contains(productId) ||
        testProductIds.contains(productId);
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –¥–Ω—è—Ö
  static int getSubscriptionPeriodDays(SubscriptionType type) {
    switch (type) {
      case SubscriptionType.monthly:
        return 30;
      case SubscriptionType.yearly:
        return 365;
    }
  }

  // ========================================
  // –û–ë–†–ê–¢–ù–ê–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨
  // ========================================

  /// –§–æ–ª–ª–±—ç–∫ —Ü–µ–Ω—ã (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
  static const Map<String, String> defaultPrices = {
    monthlyPremiumId: '\$4.99',
    yearlyPremiumId: '\$39.99',
  };

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ–ª–ª–±—ç–∫ —Ü–µ–Ω—ã
  static String getDefaultPrice(String productId) {
    return defaultPrices[productId] ?? '\$4.99';
  }
}