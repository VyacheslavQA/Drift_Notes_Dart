// –ü—É—Ç—å: lib/models/isar/marker_map_entity.dart

import 'package:isar/isar.dart';
import 'package:cloud_firestore/cloud_firestore.dart' hide Index, Query;
import 'dart:convert';

part 'marker_map_entity.g.dart';

@Collection()
class MarkerMapEntity {
  Id id = Isar.autoIncrement; // Isar ID, auto-increment

  @Index(unique: true)
  String? firebaseId; // ID –∏–∑ Firestore

  @Index()
  late String userId; // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

  late String name; // –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã

  late DateTime date; // –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã

  String? sector; // –°–µ–∫—Ç–æ—Ä/–æ–±–ª–∞—Å—Ç—å

  List<String> noteIds = []; // –°–ø–∏—Å–æ–∫ ID –∑–∞–º–µ—Ç–æ–∫

  List<String> noteNames = []; // –°–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –∑–∞–º–µ—Ç–æ–∫

  String markersJson = '[]'; // JSON —Å—Ç—Ä–æ–∫–∞ —Å –º–∞—Ä–∫–µ—Ä–∞–º–∏

  String rayLandmarksJson = '{}'; // üî• –ù–û–í–û–ï –ü–û–õ–ï: JSON —Å—Ç—Ä–æ–∫–∞ —Å –æ—Ä–∏–µ–Ω—Ç–∏—Ä–∞–º–∏ –ª—É—á–µ–π

  bool isSynced = false; // –§–ª–∞–≥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Firebase

  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω –∏–Ω–¥–µ–∫—Å –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ñ–ª–∞–π–Ω —É–¥–∞–ª–µ–Ω–∏—è
  @Index()
  bool markedForDeletion = false; // –§–ª–∞–≥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è

  DateTime createdAt = DateTime.now();
  DateTime updatedAt = DateTime.now();

  // ========================================
  // ‚úÖ –ö–û–ù–°–¢–†–£–ö–¢–û–† –ü–û –£–ú–û–õ–ß–ê–ù–ò–Æ (–ö–†–ò–¢–ò–ß–ù–û!)
  // ========================================

  MarkerMapEntity();

  // ========================================
  // –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –ú–ê–†–ö–ï–†–ê–ú–ò
  // ========================================

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∞—Ä–∫–µ—Ä–∞–º–∏ (–Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ë–î)
  @ignore
  List<Map<String, dynamic>> get markers {
    try {
      if (markersJson.isEmpty) return [];
      final dynamic decoded = _decodeJson(markersJson);
      if (decoded is List) {
        return decoded.cast<Map<String, dynamic>>();
      }
      return [];
    } catch (e) {
      return [];
    }
  }

  // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±—Ä–∞–Ω–∞ –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è @ignore —Å —Å–µ—Ç—Ç–µ—Ä–∞
  set markers(List<Map<String, dynamic>> value) {
    try {
      markersJson = _encodeJson(value);
    } catch (e) {
      markersJson = '[]';
    }
  }

  // ========================================
  // üèóÔ∏è –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –û–†–ò–ï–ù–¢–ò–†–ê–ú–ò –õ–£–ß–ï–ô
  // ========================================

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—Ä–∏–µ–Ω—Ç–∏—Ä–∞–º–∏ (–Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ë–î)
  @ignore
  Map<String, dynamic> get rayLandmarks {
    try {
      if (rayLandmarksJson.isEmpty) return {};
      final dynamic decoded = _decodeJson(rayLandmarksJson);
      if (decoded is Map) {
        return Map<String, dynamic>.from(decoded);
      }
      return {};
    } catch (e) {
      return {};
    }
  }

  set rayLandmarks(Map<String, dynamic> value) {
    try {
      rayLandmarksJson = _encodeJson(value);
    } catch (e) {
      rayLandmarksJson = '{}';
    }
  }

  // ========================================
  // ‚úÖ –ú–ï–¢–û–î–´ –î–õ–Ø SYNC_SERVICE (–ö–†–ò–¢–ò–ß–ù–û!)
  // ========================================

  /// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ Map –¥–ª—è Firestore (–¥–ª—è SyncService)
  Map<String, dynamic> toFirestoreMap() {
    return {
      'userId': userId,
      'name': name,
      'date': Timestamp.fromDate(date),
      'sector': sector,
      'noteIds': noteIds,
      'noteNames': noteNames,
      'markers': markers, // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º JSON –æ–±—Ä–∞—Ç–Ω–æ –≤ List –¥–ª—è Firestore
      'rayLandmarks': rayLandmarks, // üî• –ù–û–í–û–ï –ü–û–õ–ï –¥–ª—è –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤
      'createdAt': Timestamp.fromDate(createdAt),
      'updatedAt': Timestamp.fromDate(updatedAt),
      'isSynced': true, // –í Firestore –≤—Å–µ–≥–¥–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ
      'markedForDeletion': markedForDeletion,
    };
  }

  /// –°–æ–∑–¥–∞—Ç—å –∏–∑ Firestore Map (–¥–ª—è SyncService)
  factory MarkerMapEntity.fromFirestoreMap(String firebaseId, Map<String, dynamic> data) {
    final entity = MarkerMapEntity()
      ..firebaseId = firebaseId
      ..userId = data['userId'] as String
      ..name = data['name'] as String
      ..date = (data['date'] as Timestamp).toDate()
      ..sector = data['sector'] as String?
      ..noteIds = List<String>.from(data['noteIds'] ?? [])
      ..noteNames = List<String>.from(data['noteNames'] ?? [])
      ..createdAt = data['createdAt'] != null
          ? (data['createdAt'] as Timestamp).toDate()
          : DateTime.now()
      ..updatedAt = data['updatedAt'] != null
          ? (data['updatedAt'] as Timestamp).toDate()
          : DateTime.now()
      ..isSynced = true // –ò–∑ Firestore –≤—Å–µ–≥–¥–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ
      ..markedForDeletion = data['markedForDeletion'] as bool? ?? false;

    // –ü–∞—Ä—Å–∏–º –º–∞—Ä–∫–µ—Ä—ã –∏–∑ Firestore
    final markersData = data['markers'] as List<dynamic>? ?? [];
    entity.markers = markersData.map((marker) => Map<String, dynamic>.from(marker)).toList();

    // üî• –ù–û–í–û–ï: –ü–∞—Ä—Å–∏–º –æ—Ä–∏–µ–Ω—Ç–∏—Ä—ã –∏–∑ Firestore
    final rayLandmarksData = data['rayLandmarks'] as Map<String, dynamic>? ?? {};
    entity.rayLandmarks = Map<String, dynamic>.from(rayLandmarksData);

    return entity;
  }

  // ========================================
  // –ú–ï–¢–û–î–´ –î–õ–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò
  // ========================================

  void markAsSynced() {
    isSynced = true;
    updatedAt = DateTime.now();
  }

  void markAsModified() {
    isSynced = false;
    updatedAt = DateTime.now();
  }

  void markForDeletion() {
    markedForDeletion = true;
    isSynced = false;
    updatedAt = DateTime.now();
  }

  // ========================================
  // –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –ü–†–ò–í–Ø–ó–ö–ê–ú–ò
  // ========================================

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–∏–≤—è–∑–∫–∞–º–∏
  bool hasNoteAttached(String noteId) {
    return noteIds.contains(noteId);
  }

  String get attachedNotesText {
    if (noteNames.isEmpty) return '';
    if (noteNames.length == 1) return noteNames.first;
    return '${noteNames.length} –∑–∞–º–µ—Ç–æ–∫';
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–≤–æ–π –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
  String? get noteId => noteIds.isNotEmpty ? noteIds.first : null;
  String? get noteName => noteNames.isNotEmpty ? noteNames.first : null;

  // ========================================
  // –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø JSON
  // ========================================

  // JSON –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∞—Ä–∫–µ—Ä–∞–º–∏
  static dynamic _decodeJson(String jsonString) {
    try {
      return json.decode(jsonString);
    } catch (e) {
      return [];
    }
  }

  static String _encodeJson(dynamic object) {
    try {
      return json.encode(object);
    } catch (e) {
      return '[]';
    }
  }

  // ========================================
  // ‚úÖ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò
  // ========================================

  /// –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—è–∑–∫—É –∫ –∑–∞–º–µ—Ç–∫–µ
  void attachNote(String noteId, String noteName) {
    if (!noteIds.contains(noteId)) {
      noteIds.add(noteId);
      noteNames.add(noteName);
      markAsModified();
    }
  }

  /// –£–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—è–∑–∫—É –∫ –∑–∞–º–µ—Ç–∫–µ
  void detachNote(String noteId) {
    final index = noteIds.indexOf(noteId);
    if (index != -1) {
      noteIds.removeAt(index);
      if (index < noteNames.length) {
        noteNames.removeAt(index);
      }
      markAsModified();
    }
  }

  /// –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏
  void updateNoteName(String noteId, String newName) {
    final index = noteIds.indexOf(noteId);
    if (index != -1 && index < noteNames.length) {
      noteNames[index] = newName;
      markAsModified();
    }
  }

  /// –î–æ–±–∞–≤–∏—Ç—å –º–∞—Ä–∫–µ—Ä
  void addMarker(Map<String, dynamic> marker) {
    final currentMarkers = markers;
    currentMarkers.add(marker);
    markers = currentMarkers;
    markAsModified();
  }

  /// –£–¥–∞–ª–∏—Ç—å –º–∞—Ä–∫–µ—Ä –ø–æ –∏–Ω–¥–µ–∫—Å—É
  void removeMarker(int index) {
    final currentMarkers = markers;
    if (index >= 0 && index < currentMarkers.length) {
      currentMarkers.removeAt(index);
      markers = currentMarkers;
      markAsModified();
    }
  }

  /// –û–±–Ω–æ–≤–∏—Ç—å –º–∞—Ä–∫–µ—Ä
  void updateMarker(int index, Map<String, dynamic> updatedMarker) {
    final currentMarkers = markers;
    if (index >= 0 && index < currentMarkers.length) {
      currentMarkers[index] = updatedMarker;
      markers = currentMarkers;
      markAsModified();
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ä–∫–µ—Ä–æ–≤
  int get markersCount => markers.length;

  /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å—Ç—å –ª–∏ –º–∞—Ä–∫–µ—Ä—ã
  bool get hasMarkers => markers.isNotEmpty;

  /// –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –º–∞—Ä–∫–µ—Ä—ã
  void clearMarkers() {
    markers = [];
    markAsModified();
  }

  // ========================================
  // üèóÔ∏è –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –û–†–ò–ï–ù–¢–ò–†–û–í
  // ========================================

  /// –î–æ–±–∞–≤–∏—Ç—å –æ—Ä–∏–µ–Ω—Ç–∏—Ä –¥–ª—è –ª—É—á–∞
  void addRayLandmark(int rayIndex, Map<String, dynamic> landmark) {
    final currentLandmarks = rayLandmarks;
    currentLandmarks[rayIndex.toString()] = landmark;
    rayLandmarks = currentLandmarks;
    markAsModified();
  }

  /// –£–¥–∞–ª–∏—Ç—å –æ—Ä–∏–µ–Ω—Ç–∏—Ä –ª—É—á–∞
  void removeRayLandmark(int rayIndex) {
    final currentLandmarks = rayLandmarks;
    currentLandmarks.remove(rayIndex.toString());
    rayLandmarks = currentLandmarks;
    markAsModified();
  }

  /// –û–±–Ω–æ–≤–∏—Ç—å –æ—Ä–∏–µ–Ω—Ç–∏—Ä –ª—É—á–∞
  void updateRayLandmark(int rayIndex, Map<String, dynamic> updatedLandmark) {
    final currentLandmarks = rayLandmarks;
    currentLandmarks[rayIndex.toString()] = updatedLandmark;
    rayLandmarks = currentLandmarks;
    markAsModified();
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –æ—Ä–∏–µ–Ω—Ç–∏—Ä –¥–ª—è –ª—É—á–∞
  Map<String, dynamic>? getRayLandmark(int rayIndex) {
    final landmarks = rayLandmarks;
    final landmark = landmarks[rayIndex.toString()];
    return landmark != null ? Map<String, dynamic>.from(landmark) : null;
  }

  /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å—Ç—å –ª–∏ –æ—Ä–∏–µ–Ω—Ç–∏—Ä –¥–ª—è –ª—É—á–∞
  bool hasRayLandmark(int rayIndex) {
    return rayLandmarks.containsKey(rayIndex.toString());
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤
  int get rayLandmarksCount => rayLandmarks.length;

  /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å—Ç—å –ª–∏ –æ—Ä–∏–µ–Ω—Ç–∏—Ä—ã
  bool get hasRayLandmarks => rayLandmarks.isNotEmpty;

  /// –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –æ—Ä–∏–µ–Ω—Ç–∏—Ä—ã
  void clearRayLandmarks() {
    rayLandmarks = {};
    markAsModified();
  }

  @override
  String toString() {
    return 'MarkerMapEntity(id: $id, firebaseId: $firebaseId, name: $name, userId: $userId, markersCount: $markersCount, landmarksCount: $rayLandmarksCount, notesCount: ${noteIds.length})';
  }
}