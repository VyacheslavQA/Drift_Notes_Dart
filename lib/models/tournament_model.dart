// –ü—É—Ç—å: lib/models/tournament_model.dart

class TournamentModel {
  final String id;
  final String name;
  final DateTime startDate;
  final DateTime? endDate;
  final int duration; // –≤ —á–∞—Å–∞—Ö
  final String location;
  final String organizer;
  final String month; // –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
  final FishingType fishingType; // –Ω–æ–≤–æ–µ –ø–æ–ª–µ - —Ç–∏–ø —Ä—ã–±–∞–ª–∫–∏

  TournamentModel({
    required this.id,
    required this.name,
    required this.startDate,
    this.endDate,
    required this.duration,
    required this.location,
    required this.organizer,
    required this.month,
    required this.fishingType,
  });

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç—É—Ä–Ω–∏—Ä –º–Ω–æ–≥–æ–¥–Ω–µ–≤–Ω—ã–º
  bool get isMultiDay => endDate != null && !isSameDay(startDate, endDate!);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –¥–≤–µ –¥–∞—Ç—ã - –æ–¥–∏–Ω –¥–µ–Ω—å
  bool isSameDay(DateTime date1, DateTime date2) {
    return date1.year == date2.year &&
        date1.month == date2.month &&
        date1.day == date2.day;
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  String get formattedDate {
    if (isMultiDay) {
      return '${_formatDate(startDate)} - ${_formatDate(endDate!)}';
    }
    return _formatDate(startDate);
  }

  String _formatDate(DateTime date) {
    return '${date.day}.${date.month.toString().padLeft(2, '0')}';
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø—Ä–æ—à–µ–ª –ª–∏ —Ç—É—Ä–Ω–∏—Ä
  bool get isPast => DateTime.now().isAfter(endDate ?? startDate);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, –∏–¥–µ—Ç –ª–∏ —Å–µ–π—á–∞—Å —Ç—É—Ä–Ω–∏—Ä
  bool get isActive {
    final now = DateTime.now();
    return now.isAfter(startDate) && now.isBefore(endDate ?? startDate.add(Duration(hours: duration)));
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, –±—É–¥–µ—Ç –ª–∏ —Ç—É—Ä–Ω–∏—Ä –≤ –±—É–¥—É—â–µ–º
  bool get isFuture => DateTime.now().isBefore(startDate);

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ç—É—Ä–Ω–∏—Ä–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
  TournamentCategory get category {
    final lowerName = name.toLowerCase();
    if (lowerName.contains('—á–µ–º–ø–∏–æ–Ω–∞—Ç')) {
      return TournamentCategory.championship;
    } else if (lowerName.contains('–∫—É–±–æ–∫')) {
      return TournamentCategory.cup;
    } else if (lowerName.contains('–ª–∏–≥–∞')) {
      return TournamentCategory.league;
    } else {
      return TournamentCategory.tournament;
    }
  }
}

// –¢–∏–ø—ã —Ä—ã–±–∞–ª–∫–∏
enum FishingType {
  carpFishing,    // –ö–∞—Ä–ø–æ–≤–∞—è —Ä—ã–±–∞–ª–∫–∞
  casting,        // –ö–∞—Å—Ç–∏–Ω–≥
  spinning,       // –°–ø–∏–Ω–Ω–∏–Ω–≥
  feeder,         // –§–∏–¥–µ—Ä
  floatFishing,   // –ü–æ–ø–ª–∞–≤–æ—á–Ω–∞—è
  iceFishing,     // –ó–∏–º–Ω—è—è —Ä—ã–±–∞–ª–∫–∞
  flyFishing,     // –ù–∞—Ö–ª—ã—Å—Ç
  other,          // –î—Ä—É–≥–æ–µ
}

extension FishingTypeExtension on FishingType {
  /// –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
  String getDisplayName(Function(String) translate) {
    switch (this) {
      case FishingType.carpFishing:
        return translate('carp_fishing_type');
      case FishingType.casting:
        return translate('casting_type');
      case FishingType.spinning:
        return translate('spinning_type');
      case FishingType.feeder:
        return translate('feeder_type');
      case FishingType.floatFishing:
        return translate('float_fishing_type');
      case FishingType.iceFishing:
        return translate('ice_fishing_type');
      case FishingType.flyFishing:
        return translate('fly_fishing_type');
      case FishingType.other:
        return translate('other_fishing_type');
    }
  }

  /// Fallback –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
  /// –≠—Ç–æ —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Å —Ö–∞—Ä–¥–∫–æ–¥–æ–º –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
  String get displayName {
    switch (this) {
      case FishingType.carpFishing:
        return 'Carp Fishing';
      case FishingType.casting:
        return 'Casting';
      case FishingType.spinning:
        return 'Spinning';
      case FishingType.feeder:
        return 'Feeder';
      case FishingType.floatFishing:
        return 'Float Fishing';
      case FishingType.iceFishing:
        return 'Ice Fishing';
      case FishingType.flyFishing:
        return 'Fly Fishing';
      case FishingType.other:
        return 'Other';
    }
  }

  String get icon {
    switch (this) {
      case FishingType.carpFishing:
        return 'üêü';
      case FishingType.casting:
        return 'üéØ';
      case FishingType.spinning:
        return 'üé£';
      case FishingType.feeder:
        return 'ü™ù';
      case FishingType.floatFishing:
        return 'üéà';
      case FishingType.iceFishing:
        return '‚ùÑÔ∏è';
      case FishingType.flyFishing:
        return 'ü™∂';
      case FishingType.other:
        return 'üèÜ';
    }
  }
}

// –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—É—Ä–Ω–∏—Ä–æ–≤ (–¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∏–ø–∞)
enum TournamentCategory {
  championship,   // –ß–µ–º–ø–∏–æ–Ω–∞—Ç
  cup,           // –ö—É–±–æ–∫
  league,        // –õ–∏–≥–∞
  tournament,    // –¢—É—Ä–Ω–∏—Ä
}

extension TournamentCategoryExtension on TournamentCategory {
  /// –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
  String getDisplayName(Function(String) translate) {
    switch (this) {
      case TournamentCategory.championship:
        return translate('championship');
      case TournamentCategory.cup:
        return translate('cup');
      case TournamentCategory.league:
        return translate('league');
      case TournamentCategory.tournament:
        return translate('tournament');
    }
  }

  /// Fallback –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
  /// –≠—Ç–æ —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Å —Ö–∞—Ä–¥–∫–æ–¥–æ–º –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
  String get displayName {
    switch (this) {
      case TournamentCategory.championship:
        return 'Championship';
      case TournamentCategory.cup:
        return 'Cup';
      case TournamentCategory.league:
        return 'League';
      case TournamentCategory.tournament:
        return 'Tournament';
    }
  }

  String get icon {
    switch (this) {
      case TournamentCategory.championship:
        return 'üèÜ';
      case TournamentCategory.cup:
        return 'ü•á';
      case TournamentCategory.league:
        return '‚öîÔ∏è';
      case TournamentCategory.tournament:
        return 'üéØ';
    }
  }
}