// –ü—É—Ç—å: lib/models/tournament_model.dart

class TournamentModel {
  final String id;
  final String name;
  final DateTime startDate;
  final DateTime? endDate;
  final int duration; // –≤ —á–∞—Å–∞—Ö
  final String sector;
  final String location;
  final String organizer;
  final String month; // –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
  final TournamentType type;
  final bool isOfficial; // –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∏–ª–∏ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π
  final TournamentCategory category; // –ì–æ—Ä–æ–¥—Å–∫–æ–π, —Ä–µ—Å–ø—É–±–ª–∏–∫–∞–Ω—Å–∫–∏–π, –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π
  final FishingDiscipline discipline; // –¢–∏–ø —Ä—ã–±–∞–ª–∫–∏

  TournamentModel({
    required this.id,
    required this.name,
    required this.startDate,
    this.endDate,
    required this.duration,
    required this.sector,
    required this.location,
    required this.organizer,
    required this.month,
    required this.type,
    this.isOfficial = false,
    this.category = TournamentCategory.commercial,
    this.discipline = FishingDiscipline.carp,
  });

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç—É—Ä–Ω–∏—Ä –º–Ω–æ–≥–æ–¥–Ω–µ–≤–Ω—ã–º
  bool get isMultiDay => endDate != null && !isSameDay(startDate, endDate!);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –¥–≤–µ –¥–∞—Ç—ã - –æ–¥–∏–Ω –¥–µ–Ω—å
  bool isSameDay(DateTime date1, DateTime date2) {
    return date1.year == date2.year &&
        date1.month == date2.month &&
        date1.day == date2.day;
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  String get formattedDate {
    if (isMultiDay) {
      return '${_formatDate(startDate)} - ${_formatDate(endDate!)}';
    }
    return _formatDate(startDate);
  }

  String _formatDate(DateTime date) {
    return '${date.day}.${date.month.toString().padLeft(2, '0')}';
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø—Ä–æ—à–µ–ª –ª–∏ —Ç—É—Ä–Ω–∏—Ä
  bool get isPast => DateTime.now().isAfter(endDate ?? startDate);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, –∏–¥–µ—Ç –ª–∏ —Å–µ–π—á–∞—Å —Ç—É—Ä–Ω–∏—Ä
  bool get isActive {
    final now = DateTime.now();
    return now.isAfter(startDate) && now.isBefore(endDate ?? startDate.add(Duration(hours: duration)));
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, –±—É–¥–µ—Ç –ª–∏ —Ç—É—Ä–Ω–∏—Ä –≤ –±—É–¥—É—â–µ–º
  bool get isFuture => DateTime.now().isBefore(startDate);
}

enum TournamentType {
  championship, // –ß–µ–º–ø–∏–æ–Ω–∞—Ç
  cup, // –ö—É–±–æ–∫
  tournament, // –¢—É—Ä–Ω–∏—Ä
  league, // –õ–∏–≥–∞
  commercial, // –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π
  casting, // –ö–∞—Å—Ç–∏–Ω–≥
  worldChampionship, // –ß–µ–º–ø–∏–æ–Ω–∞—Ç –º–∏—Ä–∞
  trainingCamp, // –£–¢–°
  clubChampionship, // –ß–µ–º–ø–∏–æ–Ω–∞—Ç –∫–ª—É–±–æ–≤
  internationalTournament, // –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä
}

extension TournamentTypeExtension on TournamentType {
  String get displayName {
    switch (this) {
      case TournamentType.championship:
        return '–ß–µ–º–ø–∏–æ–Ω–∞—Ç';
      case TournamentType.cup:
        return '–ö—É–±–æ–∫';
      case TournamentType.tournament:
        return '–¢—É—Ä–Ω–∏—Ä';
      case TournamentType.league:
        return '–õ–∏–≥–∞';
      case TournamentType.commercial:
        return '–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π';
      case TournamentType.casting:
        return '–ö–∞—Å—Ç–∏–Ω–≥';
      case TournamentType.worldChampionship:
        return '–ß–µ–º–ø–∏–æ–Ω–∞—Ç –º–∏—Ä–∞';
      case TournamentType.trainingCamp:
        return '–£–¢–°';
      case TournamentType.clubChampionship:
        return '–ß–µ–º–ø–∏–æ–Ω–∞—Ç –∫–ª—É–±–æ–≤';
      case TournamentType.internationalTournament:
        return '–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä';
    }
  }

  String get icon {
    switch (this) {
      case TournamentType.championship:
        return 'üèÜ';
      case TournamentType.cup:
        return 'ü•á';
      case TournamentType.tournament:
        return 'üéØ';
      case TournamentType.league:
        return '‚öîÔ∏è';
      case TournamentType.commercial:
        return 'üí∞';
      case TournamentType.casting:
        return 'üé£';
      case TournamentType.worldChampionship:
        return 'üåç';
      case TournamentType.trainingCamp:
        return 'üèãÔ∏è';
      case TournamentType.clubChampionship:
        return 'üèõÔ∏è';
      case TournamentType.internationalTournament:
        return 'üåê';
    }
  }
}

enum TournamentCategory {
  commercial, // –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π
  city, // –ì–æ—Ä–æ–¥—Å–∫–æ–π
  regional, // –†–µ—Å–ø—É–±–ª–∏–∫–∞–Ω—Å–∫–∏–π/—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π
  international, // –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π
  internationalInKz, // –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ
}

extension TournamentCategoryExtension on TournamentCategory {
  String get displayName {
    switch (this) {
      case TournamentCategory.commercial:
        return '–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π';
      case TournamentCategory.city:
        return '–ì–æ—Ä–æ–¥—Å–∫–æ–π';
      case TournamentCategory.regional:
        return '–†–µ—Å–ø—É–±–ª–∏–∫–∞–Ω—Å–∫–∏–π';
      case TournamentCategory.international:
        return '–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π';
      case TournamentCategory.internationalInKz:
        return '–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –≤ –†–ö';
    }
  }
}

enum FishingDiscipline {
  carp, // –ö–∞—Ä–ø
  iceFishing, // –ü–æ–¥–ª–µ–¥–Ω—ã–π –ª–æ–≤
  troutSpinning, // –§–æ—Ä–µ–ª—å –Ω–∞ —Å–ø–∏–Ω–Ω–∏–Ω–≥
  feeder, // –§–∏–¥–µ—Ä
  floatFishing, // –ü–æ–ø–ª–∞–≤–æ—á–Ω–∞—è —É–¥–æ—á–∫–∞
  spinningWithBoat, // –°–ø–∏–Ω–Ω–∏–Ω–≥ —Å –ª–æ–¥–æ–∫
  streetFishing, // Street Fishing
  casting, // –ö–∞—Å—Ç–∏–Ω–≥
}

extension FishingDisciplineExtension on FishingDiscipline {
  String get displayName {
    switch (this) {
      case FishingDiscipline.carp:
        return '–ö–∞—Ä–ø–æ–≤–∞—è –ª–æ–≤–ª—è';
      case FishingDiscipline.iceFishing:
        return '–ü–æ–¥–ª–µ–¥–Ω—ã–π –ª–æ–≤';
      case FishingDiscipline.troutSpinning:
        return '–§–æ—Ä–µ–ª—å –Ω–∞ —Å–ø–∏–Ω–Ω–∏–Ω–≥';
      case FishingDiscipline.feeder:
        return '–§–∏–¥–µ—Ä';
      case FishingDiscipline.floatFishing:
        return '–ü–æ–ø–ª–∞–≤–æ—á–Ω–∞—è —É–¥–æ—á–∫–∞';
      case FishingDiscipline.spinningWithBoat:
        return '–°–ø–∏–Ω–Ω–∏–Ω–≥ —Å –ª–æ–¥–æ–∫';
      case FishingDiscipline.streetFishing:
        return 'Street Fishing';
      case FishingDiscipline.casting:
        return '–ö–∞—Å—Ç–∏–Ω–≥';
    }
  }

  String get icon {
    switch (this) {
      case FishingDiscipline.carp:
        return 'üêü';
      case FishingDiscipline.iceFishing:
        return '‚ùÑÔ∏è';
      case FishingDiscipline.troutSpinning:
        return 'üé£';
      case FishingDiscipline.feeder:
        return 'ü™ù';
      case FishingDiscipline.floatFishing:
        return 'üéà';
      case FishingDiscipline.spinningWithBoat:
        return 'üö§';
      case FishingDiscipline.streetFishing:
        return 'üèôÔ∏è';
      case FishingDiscipline.casting:
        return 'üéØ';
    }
  }
}