// –ü—É—Ç—å: lib/models/usage_limits_model.dart

import '../constants/subscription_constants.dart';

/// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –º–æ–¥–µ–ª—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
/// expenses ‚Üí budgetNotes –≤–µ–∑–¥–µ –≤ –∫–æ–¥–µ
class UsageLimitsModel {
  final String userId;
  final int notesCount;
  final int markerMapsCount;
  final int budgetNotesCount;  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û! –ë—ã–ª–æ expensesCount
  final DateTime lastResetDate;
  final DateTime updatedAt;

  const UsageLimitsModel({
    required this.userId,
    required this.notesCount,
    required this.markerMapsCount,
    required this.budgetNotesCount,  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û! –ë—ã–ª–æ expensesCount
    required this.lastResetDate,
    required this.updatedAt,
  });

  /// –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–≤—Å–µ —Å—á–µ—Ç—á–∏–∫–∏ –≤ 0)
  factory UsageLimitsModel.defaultLimits(String userId) {
    final now = DateTime.now();
    return UsageLimitsModel(
      userId: userId,
      notesCount: 0,
      markerMapsCount: 0,
      budgetNotesCount: 0,  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û! –ë—ã–ª–æ expensesCount
      lastResetDate: now,
      updatedAt: now,
    );
  }

  /// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑ Map —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞–º–∏
  factory UsageLimitsModel.fromMap(Map<String, dynamic> map, String userId) {
    return UsageLimitsModel(
      userId: userId,
      notesCount: (map[SubscriptionConstants.notesCountField] as num?)?.toInt() ?? 0,
      markerMapsCount: (map[SubscriptionConstants.markerMapsCountField] as num?)?.toInt() ?? 0,
      budgetNotesCount: (map[SubscriptionConstants.budgetNotesCountField] as num?)?.toInt() ?? 0,  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û!
      lastResetDate: _parseDateTime(map[SubscriptionConstants.lastResetDateField]) ?? DateTime.now(),
      updatedAt: _parseDateTime(map[SubscriptionConstants.updatedAtField]) ?? DateTime.now(),
    );
  }

  /// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ Map —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞–º–∏
  Map<String, dynamic> toMap() {
    return {
      SubscriptionConstants.notesCountField: notesCount,
      SubscriptionConstants.markerMapsCountField: markerMapsCount,
      SubscriptionConstants.budgetNotesCountField: budgetNotesCount,  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û!
      SubscriptionConstants.lastResetDateField: lastResetDate.toIso8601String(),
      SubscriptionConstants.updatedAtField: updatedAt.toIso8601String(),
    };
  }

  /// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –Ω–æ–≤—ã–º –ø–æ–ª–µ–º budgetNotesCount
  UsageLimitsModel copyWith({
    String? userId,
    int? notesCount,
    int? markerMapsCount,
    int? budgetNotesCount,  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û! –ë—ã–ª–æ expensesCount
    DateTime? lastResetDate,
    DateTime? updatedAt,
  }) {
    return UsageLimitsModel(
      userId: userId ?? this.userId,
      notesCount: notesCount ?? this.notesCount,
      markerMapsCount: markerMapsCount ?? this.markerMapsCount,
      budgetNotesCount: budgetNotesCount ?? this.budgetNotesCount,  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û!
      lastResetDate: lastResetDate ?? this.lastResetDate,
      updatedAt: updatedAt ?? this.updatedAt,
    );
  }

  /// üöÄ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π markerMapSharing
  UsageLimitsModel incrementCounter(ContentType contentType) {
    final now = DateTime.now();

    switch (contentType) {
      case ContentType.fishingNotes:
        return copyWith(
          notesCount: notesCount + 1,
          updatedAt: now,
        );
      case ContentType.markerMaps:
        return copyWith(
          markerMapsCount: markerMapsCount + 1,
          updatedAt: now,
        );
      case ContentType.budgetNotes:  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û! –ë—ã–ª–æ expenses
        return copyWith(
          budgetNotesCount: budgetNotesCount + 1,  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û!
          updatedAt: now,
        );
      case ContentType.depthChart:
      // –ì—Ä–∞—Ñ–∏–∫ –≥–ª—É–±–∏–Ω –Ω–µ –∏–º–µ–µ—Ç —Å—á–µ—Ç—á–∏–∫–∞, –æ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
        return copyWith(updatedAt: now);
      case ContentType.markerMapSharing: // üöÄ –ù–û–í–û–ï
      // –û–±–º–µ–Ω –∫–∞—Ä—Ç–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ—Ç –∂–µ —Å—á–µ—Ç—á–∏–∫ —á—Ç–æ –∏ –º–∞—Ä–∫–µ—Ä–Ω—ã–µ –∫–∞—Ä—Ç—ã
        return copyWith(
          markerMapsCount: markerMapsCount + 1,
          updatedAt: now,
        );
    }
  }

  /// üöÄ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–º–µ–Ω—å—à–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π markerMapSharing
  UsageLimitsModel decrementCounter(ContentType contentType) {
    final now = DateTime.now();

    switch (contentType) {
      case ContentType.fishingNotes:
        return copyWith(
          notesCount: (notesCount - 1).clamp(0, double.infinity).toInt(),
          updatedAt: now,
        );
      case ContentType.markerMaps:
        return copyWith(
          markerMapsCount: (markerMapsCount - 1).clamp(0, double.infinity).toInt(),
          updatedAt: now,
        );
      case ContentType.budgetNotes:  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û! –ë—ã–ª–æ expenses
        return copyWith(
          budgetNotesCount: (budgetNotesCount - 1).clamp(0, double.infinity).toInt(),  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û!
          updatedAt: now,
        );
      case ContentType.depthChart:
      // –ì—Ä–∞—Ñ–∏–∫ –≥–ª—É–±–∏–Ω –Ω–µ –∏–º–µ–µ—Ç —Å—á–µ—Ç—á–∏–∫–∞
        return copyWith(updatedAt: now);
      case ContentType.markerMapSharing: // üöÄ –ù–û–í–û–ï
      // –û–±–º–µ–Ω –∫–∞—Ä—Ç–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ—Ç –∂–µ —Å—á–µ—Ç—á–∏–∫ —á—Ç–æ –∏ –º–∞—Ä–∫–µ—Ä–Ω—ã–µ –∫–∞—Ä—Ç—ã
        return copyWith(
          markerMapsCount: (markerMapsCount - 1).clamp(0, double.infinity).toInt(),
          updatedAt: now,
        );
    }
  }

  /// üöÄ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π markerMapSharing
  int getCountForType(ContentType contentType) {
    switch (contentType) {
      case ContentType.fishingNotes:
        return notesCount;
      case ContentType.markerMaps:
        return markerMapsCount;
      case ContentType.budgetNotes:  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û! –ë—ã–ª–æ expenses
        return budgetNotesCount;  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û!
      case ContentType.depthChart:
        return 0; // –ì—Ä–∞—Ñ–∏–∫ –≥–ª—É–±–∏–Ω –Ω–µ –∏–º–µ–µ—Ç —Å—á–µ—Ç—á–∏–∫–∞
      case ContentType.markerMapSharing: // üöÄ –ù–û–í–û–ï
        return markerMapsCount; // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ—Ç –∂–µ —Å—á–µ—Ç—á–∏–∫ —á—Ç–æ –∏ –º–∞—Ä–∫–µ—Ä–Ω—ã–µ –∫–∞—Ä—Ç—ã
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –¥–ª—è —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  bool hasReachedLimit(ContentType contentType) {
    final currentCount = getCountForType(contentType);
    final limit = SubscriptionConstants.getContentLimit(contentType);

    return currentCount >= limit;
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
  bool canCreateNew(ContentType contentType) {
    // –î–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –≥–ª—É–±–∏–Ω –∏ –æ–±–º–µ–Ω–∞ –∫–∞—Ä—Ç–∞–º–∏ –≤—Å–µ–≥–¥–∞ false (–ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã)
    if (contentType == ContentType.depthChart ||
        contentType == ContentType.markerMapSharing) { // üöÄ –ù–û–í–û–ï
      return false;
    }

    return !hasReachedLimit(contentType);
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  int getRemainingCount(ContentType contentType) {
    final currentCount = getCountForType(contentType);
    final limit = SubscriptionConstants.getContentLimit(contentType);
    final remaining = limit - currentCount;

    return remaining.clamp(0, double.infinity).toInt();
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (0.0 - 1.0)
  double getUsagePercentage(ContentType contentType) {
    final currentCount = getCountForType(contentType);
    final limit = SubscriptionConstants.getContentLimit(contentType);

    if (limit == 0) return 0.0;

    return (currentCount / limit).clamp(0.0, 1.0);
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ (–¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ 80% –ª–∏–º–∏—Ç–∞)
  bool shouldShowWarning(ContentType contentType) {
    final percentage = getUsagePercentage(contentType);
    return percentage >= 0.8 && percentage < 1.0;
  }

  /// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–±—Ä–æ—Å –≤—Å–µ—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ–ª–µ–º
  UsageLimitsModel resetAllCounters() {
    final now = DateTime.now();
    return copyWith(
      notesCount: 0,
      markerMapsCount: 0,
      budgetNotesCount: 0,  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û! –ë—ã–ª–æ expensesCount
      lastResetDate: now,
      updatedAt: now,
    );
  }

  /// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ–ª–µ–º
  int get totalContentCount => notesCount + markerMapsCount + budgetNotesCount;  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û!

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–æ–∑–¥–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
  bool get hasAnyContent => totalContentCount > 0;

  /// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞–º–∏
  Map<String, dynamic> getUsageStats() {
    return {
      'notes': {
        'current': notesCount,
        'limit': SubscriptionConstants.freeNotesLimit,
        'remaining': getRemainingCount(ContentType.fishingNotes),
        'percentage': getUsagePercentage(ContentType.fishingNotes),
      },
      'maps': {
        'current': markerMapsCount,
        'limit': SubscriptionConstants.freeMarkerMapsLimit,
        'remaining': getRemainingCount(ContentType.markerMaps),
        'percentage': getUsagePercentage(ContentType.markerMaps),
      },
      'budgetNotes': {  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û! –ë—ã–ª–æ 'expenses'
        'current': budgetNotesCount,  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û!
        'limit': SubscriptionConstants.freeBudgetNotesLimit,  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û!
        'remaining': getRemainingCount(ContentType.budgetNotes),  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û!
        'percentage': getUsagePercentage(ContentType.budgetNotes),  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û!
      },
      'total': totalContentCount,
    };
  }

  /// ‚úÖ –ù–û–í–´–ô: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  Map<String, dynamic> getStatsForType(ContentType contentType) {
    return {
      'current': getCountForType(contentType),
      'limit': SubscriptionConstants.getContentLimit(contentType),
      'remaining': getRemainingCount(contentType),
      'percentage': getUsagePercentage(contentType),
      'canCreate': canCreateNew(contentType),
      'shouldWarn': shouldShowWarning(contentType),
      'typeName': SubscriptionConstants.getContentTypeName(contentType),
    };
  }

  /// ‚úÖ –ù–û–í–´–ô: –ü—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã–µ –ª–∏–º–∏—Ç—ã
  bool get hasAnyLimitReached {
    return hasReachedLimit(ContentType.fishingNotes) ||
        hasReachedLimit(ContentType.markerMaps) ||
        hasReachedLimit(ContentType.budgetNotes);
  }

  /// ‚úÖ –ù–û–í–´–ô: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã—Ö –ª–∏–º–∏—Ç–æ–≤
  List<ContentType> get reachedLimits {
    final List<ContentType> reached = [];

    if (hasReachedLimit(ContentType.fishingNotes)) {
      reached.add(ContentType.fishingNotes);
    }
    if (hasReachedLimit(ContentType.markerMaps)) {
      reached.add(ContentType.markerMaps);
    }
    if (hasReachedLimit(ContentType.budgetNotes)) {
      reached.add(ContentType.budgetNotes);
    }

    return reached;
  }

  /// ‚úÖ –ù–û–í–´–ô: –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–≤–∞—Ç—å —á—Ç–æ-–ª–∏–±–æ
  bool get canCreateAnyContent {
    return canCreateNew(ContentType.fishingNotes) ||
        canCreateNew(ContentType.markerMaps) ||
        canCreateNew(ContentType.budgetNotes);
  }

  // ========================================
  // –ü–†–ò–í–ê–¢–ù–´–ï –ú–ï–¢–û–î–´
  // ========================================

  static DateTime? _parseDateTime(dynamic value) {
    if (value == null) return null;

    try {
      if (value is String) {
        return DateTime.parse(value);
      }
      // –î–ª—è Firestore Timestamp
      if (value.runtimeType.toString().contains('Timestamp')) {
        return (value as dynamic).toDate() as DateTime;
      }
      return null;
    } catch (e) {
      return null;
    }
  }

  @override
  String toString() {
    return 'UsageLimitsModel('
        'userId: $userId, '
        'notes: $notesCount/${SubscriptionConstants.freeNotesLimit}, '
        'maps: $markerMapsCount/${SubscriptionConstants.freeMarkerMapsLimit}, '
        'budgetNotes: $budgetNotesCount/${SubscriptionConstants.freeBudgetNotesLimit}, '  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û!
        'total: $totalContentCount'
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;

    return other is UsageLimitsModel &&
        other.userId == userId &&
        other.notesCount == notesCount &&
        other.markerMapsCount == markerMapsCount &&
        other.budgetNotesCount == budgetNotesCount &&  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û!
        other.lastResetDate == lastResetDate;
  }

  @override
  int get hashCode {
    return Object.hash(
      userId,
      notesCount,
      markerMapsCount,
      budgetNotesCount,  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û!
      lastResetDate,
    );
  }
}