// –ü—É—Ç—å: lib/models/fishing_expense_model.dart

import 'package:cloud_firestore/cloud_firestore.dart';

/// –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ —Ä—ã–±–∞–ª–∫—É
enum FishingExpenseCategory {
  tackle('tackle', 'üé£'),           // –°–Ω–∞—Å—Ç–∏ –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
  bait('bait', 'ü™±'),              // –ù–∞–∂–∏–≤–∫–∞ –∏ –ø—Ä–∏–∫–æ—Ä–º–∫–∞
  transport('transport', 'üöó'),     // –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç
  accommodation('accommodation', 'üè†'), // –ü—Ä–æ–∂–∏–≤–∞–Ω–∏–µ
  food('food', 'üçΩÔ∏è'),             // –ü–∏—Ç–∞–Ω–∏–µ
  license('license', 'üìã');         // –õ–∏—Ü–µ–Ω–∑–∏–∏ –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è

  const FishingExpenseCategory(this.id, this.icon);
  final String id;
  final String icon;

  /// –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ ID
  static FishingExpenseCategory? fromId(String id) {
    for (var category in FishingExpenseCategory.values) {
      if (category.id == id) return category;
    }
    return null;
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞
  static List<FishingExpenseCategory> get allCategories => FishingExpenseCategory.values;
}

/// –ú–æ–¥–µ–ª—å —Ä–∞—Å—Ö–æ–¥–∞ –Ω–∞ —Ä—ã–±–∞–ª–∫—É
class FishingExpenseModel {
  /// –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
  final String id;

  /// ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  final String userId;

  /// –°—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–∞
  final double amount;

  /// –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–∞—Å—Ö–æ–¥–∞
  final FishingExpenseCategory category;

  /// –û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞
  final String description;

  /// –î–∞—Ç–∞ —Ä–∞—Å—Ö–æ–¥–∞
  final DateTime date;

  /// –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
  final DateTime createdAt;

  /// –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  final DateTime updatedAt;

  /// –°–≤—è–∑–∞–Ω–Ω–∞—è –∑–∞–º–µ—Ç–∫–∞ –æ —Ä—ã–±–∞–ª–∫–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  final String? fishingNoteId;

  /// –í–∞–ª—é—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–Ω–≥–µ)
  final String currency;

  /// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏
  final String? notes;

  /// –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–∫—É–ø–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  final GeoPoint? location;

  /// –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞ –ø–æ–∫—É–ø–∫–∏
  final String? locationName;

  /// –ü—Ä–∏–∑–Ω–∞–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º
  final bool isSynced;

  const FishingExpenseModel({
    required this.id,
    required this.userId,
    required this.amount,
    required this.category,
    required this.description,
    required this.date,
    required this.createdAt,
    required this.updatedAt,
    this.fishingNoteId,
    this.currency = 'KZT',
    this.notes,
    this.location,
    this.locationName,
    this.isSynced = false,
  });

  /// –°–æ–∑–¥–∞—Ç—å –∫–æ–ø–∏—é –º–æ–¥–µ–ª–∏ —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
  FishingExpenseModel copyWith({
    String? id,
    String? userId,
    double? amount,
    FishingExpenseCategory? category,
    String? description,
    DateTime? date,
    DateTime? createdAt,
    DateTime? updatedAt,
    String? fishingNoteId,
    String? currency,
    String? notes,
    GeoPoint? location,
    String? locationName,
    bool? isSynced,
  }) {
    return FishingExpenseModel(
      id: id ?? this.id,
      userId: userId ?? this.userId,
      amount: amount ?? this.amount,
      category: category ?? this.category,
      description: description ?? this.description,
      date: date ?? this.date,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      fishingNoteId: fishingNoteId ?? this.fishingNoteId,
      currency: currency ?? this.currency,
      notes: notes ?? this.notes,
      location: location ?? this.location,
      locationName: locationName ?? this.locationName,
      isSynced: isSynced ?? this.isSynced,
    );
  }

  /// –°–æ–∑–¥–∞—Ç—å –º–æ–¥–µ–ª—å –∏–∑ Map (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ Firestore)
  factory FishingExpenseModel.fromMap(Map<String, dynamic> map) {
    return FishingExpenseModel(
      id: map['id'] as String,
      userId: map['userId'] as String,
      amount: (map['amount'] as num).toDouble(),
      category: FishingExpenseCategory.fromId(map['category'] as String) ??
          FishingExpenseCategory.tackle,
      description: map['description'] as String,
      date: (map['date'] as Timestamp).toDate(),
      createdAt: (map['createdAt'] as Timestamp).toDate(),
      updatedAt: (map['updatedAt'] as Timestamp).toDate(),
      fishingNoteId: map['fishingNoteId'] as String?,
      currency: map['currency'] as String? ?? 'KZT',
      notes: map['notes'] as String?,
      location: map['location'] as GeoPoint?,
      locationName: map['locationName'] as String?,
      isSynced: map['isSynced'] as bool? ?? false,
    );
  }

  /// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å –≤ Map –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Firestore
  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'userId': userId,
      'amount': amount,
      'category': category.id,
      'description': description,
      'date': Timestamp.fromDate(date),
      'createdAt': Timestamp.fromDate(createdAt),
      'updatedAt': Timestamp.fromDate(updatedAt),
      'fishingNoteId': fishingNoteId,
      'currency': currency,
      'notes': notes,
      'location': location,
      'locationName': locationName,
      'isSynced': isSynced,
    };
  }

  /// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ JSON –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'userId': userId,
      'amount': amount,
      'category': category.id,
      'description': description,
      'date': date.toIso8601String(),
      'createdAt': createdAt.toIso8601String(),
      'updatedAt': updatedAt.toIso8601String(),
      'fishingNoteId': fishingNoteId,
      'currency': currency,
      'notes': notes,
      'location': location != null ? {
        'latitude': location!.latitude,
        'longitude': location!.longitude,
      } : null,
      'locationName': locationName,
      'isSynced': isSynced,
    };
  }

  /// –°–æ–∑–¥–∞—Ç—å –º–æ–¥–µ–ª—å –∏–∑ JSON
  factory FishingExpenseModel.fromJson(Map<String, dynamic> json) {
    return FishingExpenseModel(
      id: json['id'] as String,
      userId: json['userId'] as String,
      amount: (json['amount'] as num).toDouble(),
      category: FishingExpenseCategory.fromId(json['category'] as String) ??
          FishingExpenseCategory.tackle,
      description: json['description'] as String,
      date: DateTime.parse(json['date'] as String),
      createdAt: DateTime.parse(json['createdAt'] as String),
      updatedAt: DateTime.parse(json['updatedAt'] as String),
      fishingNoteId: json['fishingNoteId'] as String?,
      currency: json['currency'] as String? ?? 'KZT',
      notes: json['notes'] as String?,
      location: json['location'] != null ?
      GeoPoint(
        json['location']['latitude'] as double,
        json['location']['longitude'] as double,
      ) : null,
      locationName: json['locationName'] as String?,
      isSynced: json['isSynced'] as bool? ?? false,
    );
  }

  /// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞—Å—Ö–æ–¥
  factory FishingExpenseModel.create({
    required String userId,
    required double amount,
    required FishingExpenseCategory category,
    required String description,
    DateTime? date,
    String? fishingNoteId,
    String currency = 'KZT',
    String? notes,
    GeoPoint? location,
    String? locationName,
  }) {
    final now = DateTime.now();
    return FishingExpenseModel(
      id: 'expense_${now.millisecondsSinceEpoch}',
      userId: userId,
      amount: amount,
      category: category,
      description: description,
      date: date ?? now,
      createdAt: now,
      updatedAt: now,
      fishingNoteId: fishingNoteId,
      currency: currency,
      notes: notes,
      location: location,
      locationName: locationName,
      isSynced: false,
    );
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Å–∏–º–≤–æ–ª –≤–∞–ª—é—Ç—ã
  String get currencySymbol {
    switch (currency) {
      case 'KZT':
        return '‚Ç∏';
      case 'USD':
        return '\$';
      case 'EUR':
        return '‚Ç¨';
      case 'RUB':
        return '‚ÇΩ';
      default:
        return currency;
    }
  }

  /// –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞ —Å —Å–∏–º–≤–æ–ª–æ–º –≤–∞–ª—é—Ç—ã
  String get formattedAmount {
    return '$currencySymbol ${amount.toStringAsFixed(amount.truncateToDouble() == amount ? 0 : 2)}';
  }

  /// –ö—Ä–∞—Ç–∫–æ–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Å–ø–∏—Å–∫–æ–≤
  String get shortDescription {
    if (description.length <= 50) return description;
    return '${description.substring(0, 47)}...';
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
  bool get isValid {
    return id.isNotEmpty &&
        userId.isNotEmpty &&
        amount > 0 &&
        description.isNotEmpty;
  }

  /// –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
  FishingExpenseModel markAsSynced() {
    return copyWith(isSynced: true);
  }

  /// –û–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
  FishingExpenseModel touch() {
    return copyWith(updatedAt: DateTime.now());
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is FishingExpenseModel && other.id == id;
  }

  @override
  int get hashCode => id.hashCode;

  @override
  String toString() {
    return 'FishingExpenseModel(id: $id, amount: $formattedAmount, category: ${category.id}, description: $description)';
  }
}

/// –ú–æ–¥–µ–ª—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
class FishingExpenseStatistics {
  /// –û–±—â–∞—è —Å—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤
  final double totalAmount;

  /// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—Ö–æ–¥–æ–≤
  final int totalCount;

  /// –†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  final Map<FishingExpenseCategory, double> categoryTotals;

  /// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  final Map<FishingExpenseCategory, int> categoryCounts;

  /// –°—Ä–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥
  final double averageExpense;

  /// –°–∞–º—ã–π –¥–æ—Ä–æ–≥–æ–π —Ä–∞—Å—Ö–æ–¥
  final FishingExpenseModel? mostExpensive;

  /// –ü–µ—Ä–∏–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  final DateTime startDate;
  final DateTime endDate;

  /// –í–∞–ª—é—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  final String currency;

  const FishingExpenseStatistics({
    required this.totalAmount,
    required this.totalCount,
    required this.categoryTotals,
    required this.categoryCounts,
    required this.averageExpense,
    this.mostExpensive,
    required this.startDate,
    required this.endDate,
    this.currency = 'KZT',
  });

  /// –°–æ–∑–¥–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤
  factory FishingExpenseStatistics.fromExpenses(
      List<FishingExpenseModel> expenses, {
        DateTime? startDate,
        DateTime? endDate,
        String currency = 'KZT',
      }) {
    if (expenses.isEmpty) {
      return FishingExpenseStatistics(
        totalAmount: 0,
        totalCount: 0,
        categoryTotals: {},
        categoryCounts: {},
        averageExpense: 0,
        startDate: startDate ?? DateTime.now(),
        endDate: endDate ?? DateTime.now(),
        currency: currency,
      );
    }

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–∞—Å—Ö–æ–¥—ã –ø–æ –ø–µ—Ä–∏–æ–¥—É –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
    var filteredExpenses = expenses;
    if (startDate != null || endDate != null) {
      filteredExpenses = expenses.where((expense) {
        if (startDate != null && expense.date.isBefore(startDate)) return false;
        if (endDate != null && expense.date.isAfter(endDate)) return false;
        return true;
      }).toList();
    }

    // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É
    final totalAmount = filteredExpenses.fold<double>(
      0, (sum, expense) => sum + expense.amount,
    );

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    final Map<FishingExpenseCategory, double> categoryTotals = {};
    final Map<FishingExpenseCategory, int> categoryCounts = {};

    for (var expense in filteredExpenses) {
      categoryTotals[expense.category] =
          (categoryTotals[expense.category] ?? 0) + expense.amount;
      categoryCounts[expense.category] =
          (categoryCounts[expense.category] ?? 0) + 1;
    }

    // –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–π –¥–æ—Ä–æ–≥–æ–π —Ä–∞—Å—Ö–æ–¥
    FishingExpenseModel? mostExpensive;
    if (filteredExpenses.isNotEmpty) {
      mostExpensive = filteredExpenses.reduce(
            (current, next) => current.amount > next.amount ? current : next,
      );
    }

    return FishingExpenseStatistics(
      totalAmount: totalAmount,
      totalCount: filteredExpenses.length,
      categoryTotals: categoryTotals,
      categoryCounts: categoryCounts,
      averageExpense: filteredExpenses.isEmpty ? 0 : totalAmount / filteredExpenses.length,
      mostExpensive: mostExpensive,
      startDate: startDate ?? (filteredExpenses.isEmpty ? DateTime.now() :
      filteredExpenses.map((e) => e.date).reduce((a, b) => a.isBefore(b) ? a : b)),
      endDate: endDate ?? (filteredExpenses.isEmpty ? DateTime.now() :
      filteredExpenses.map((e) => e.date).reduce((a, b) => a.isAfter(b) ? a : b)),
      currency: currency,
    );
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Å–∏–º–≤–æ–ª –≤–∞–ª—é—Ç—ã
  String get currencySymbol {
    switch (currency) {
      case 'KZT':
        return '‚Ç∏';
      case 'USD':
        return '\$';
      case 'EUR':
        return '‚Ç¨';
      case 'RUB':
        return '‚ÇΩ';
      default:
        return currency;
    }
  }

  /// –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—â–∞—è —Å—É–º–º–∞
  String get formattedTotal {
    return '$currencySymbol ${totalAmount.toStringAsFixed(totalAmount.truncateToDouble() == totalAmount ? 0 : 2)}';
  }

  /// –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞
  String get formattedAverage {
    return '$currencySymbol ${averageExpense.toStringAsFixed(averageExpense.truncateToDouble() == averageExpense ? 0 : 2)}';
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  double getCategoryPercentage(FishingExpenseCategory category) {
    if (totalAmount == 0) return 0;
    final categoryAmount = categoryTotals[category] ?? 0;
    return (categoryAmount / totalAmount) * 100;
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º
  List<MapEntry<FishingExpenseCategory, double>> getTopCategories([int limit = 3]) {
    final entries = categoryTotals.entries.toList();
    entries.sort((a, b) => b.value.compareTo(a.value));
    return entries.take(limit).toList();
  }
}