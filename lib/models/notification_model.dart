// –ü—É—Ç—å: lib/models/notification_model.dart

enum NotificationType {
  general, // –û–±—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  fishingReminder, // –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ä—ã–±–∞–ª–∫–µ
  tournamentReminder, // –ù–û–í–´–ô: –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ç—É—Ä–Ω–∏—Ä–∞—Ö
  biteForecast, // –ü—Ä–æ–≥–Ω–æ–∑—ã –∫–ª–µ–≤–∞
  weatherUpdate, // –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã
  newFeatures, // –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
  systemUpdate, // –°–∏—Å—Ç–µ–º–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  policyUpdate, // –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ —Å–æ–≥–ª–∞—à–µ–Ω–∏–π
}

class NotificationModel {
  final String id;
  final String title;
  final String message;
  final NotificationType type;
  final DateTime timestamp;
  final bool isRead;
  final Map<String, dynamic> data; // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

  NotificationModel({
    required this.id,
    required this.title,
    required this.message,
    required this.type,
    required this.timestamp,
    this.isRead = false,
    this.data = const {},
  });

  NotificationModel copyWith({
    String? id,
    String? title,
    String? message,
    NotificationType? type,
    DateTime? timestamp,
    bool? isRead,
    Map<String, dynamic>? data,
  }) {
    return NotificationModel(
      id: id ?? this.id,
      title: title ?? this.title,
      message: message ?? this.message,
      type: type ?? this.type,
      timestamp: timestamp ?? this.timestamp,
      isRead: isRead ?? this.isRead,
      data: data ?? this.data,
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'title': title,
      'message': message,
      'type': type.toString(),
      'timestamp': timestamp.toIso8601String(),
      'isRead': isRead,
      'data': data,
    };
  }

  factory NotificationModel.fromJson(Map<String, dynamic> json) {
    return NotificationModel(
      id: json['id'] ?? '',
      title: json['title'] ?? '',
      message: json['message'] ?? '',
      type: NotificationType.values.firstWhere(
        (e) => e.toString() == json['type'],
        orElse: () => NotificationType.general,
      ),
      timestamp: DateTime.parse(
        json['timestamp'] ?? DateTime.now().toIso8601String(),
      ),
      isRead: json['isRead'] ?? false,
      data: Map<String, dynamic>.from(json['data'] ?? {}),
    );
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –ø–æ —Ç–∏–ø—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  String get iconPath {
    switch (type) {
      case NotificationType.general:
        return 'assets/icons/notification.png';
      case NotificationType.fishingReminder:
        return 'assets/icons/fishing.png';
      case NotificationType.tournamentReminder: // –ù–û–í–´–ô –¢–ò–ü
        return 'assets/icons/tournament.png';
      case NotificationType.biteForecast:
        return 'assets/icons/fish_active.png';
      case NotificationType.weatherUpdate:
        return 'assets/icons/weather.png';
      case NotificationType.newFeatures:
        return 'assets/icons/star.png';
      case NotificationType.systemUpdate:
        return 'assets/icons/system.png';
      case NotificationType.policyUpdate:
        return 'assets/icons/security.png';
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –ø–æ —Ç–∏–ø—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  int get typeColor {
    switch (type) {
      case NotificationType.general:
        return 0xFF4CAF50; // –ó–µ–ª–µ–Ω—ã–π
      case NotificationType.fishingReminder:
        return 0xFF2196F3; // –°–∏–Ω–∏–π
      case NotificationType.tournamentReminder: // –ù–û–í–´–ô –¢–ò–ü
        return 0xFFFF5722; // –û—Ä–∞–Ω–∂–µ–≤–æ-–∫—Ä–∞—Å–Ω—ã–π
      case NotificationType.biteForecast:
        return 0xFFFF9800; // –û—Ä–∞–Ω–∂–µ–≤—ã–π
      case NotificationType.weatherUpdate:
        return 0xFF9C27B0; // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
      case NotificationType.newFeatures:
        return 0xFFFFC107; // –ñ–µ–ª—Ç—ã–π
      case NotificationType.systemUpdate:
        return 0xFF607D8B; // –°–µ—Ä—ã–π
      case NotificationType.policyUpdate:
        return 0xFFE91E63; // –†–æ–∑–æ–≤—ã–π/–∫—Ä–∞—Å–Ω—ã–π
    }
  }

  // –ù–û–í–´–ô: –ü–æ–ª—É—á–µ–Ω–∏–µ emoji-–∏–∫–æ–Ω–∫–∏ –¥–ª—è —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  String get emoji {
    switch (type) {
      case NotificationType.general:
        return 'üì¢';
      case NotificationType.fishingReminder:
        return 'üé£';
      case NotificationType.tournamentReminder:
        return 'üèÜ';
      case NotificationType.biteForecast:
        return 'üêü';
      case NotificationType.weatherUpdate:
        return 'üå§Ô∏è';
      case NotificationType.newFeatures:
        return '‚≠ê';
      case NotificationType.systemUpdate:
        return 'üîß';
      case NotificationType.policyUpdate:
        return 'üîí';
    }
  }

  // –ù–û–í–´–ô: –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  String get typeLocalizationKey {
    switch (type) {
      case NotificationType.general:
        return 'notification_type_general';
      case NotificationType.fishingReminder:
        return 'notification_type_fishing_reminder';
      case NotificationType.tournamentReminder:
        return 'notification_type_tournament_reminder';
      case NotificationType.biteForecast:
        return 'notification_type_bite_forecast';
      case NotificationType.weatherUpdate:
        return 'notification_type_weather_update';
      case NotificationType.newFeatures:
        return 'notification_type_new_features';
      case NotificationType.systemUpdate:
        return 'notification_type_system_update';
      case NotificationType.policyUpdate:
        return 'notification_type_policy_update';
    }
  }

  // –ù–û–í–´–ô: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏)
  int get priority {
    switch (type) {
      case NotificationType.tournamentReminder:
        return 5; // –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
      case NotificationType.fishingReminder:
        return 4; // –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
      case NotificationType.biteForecast:
        return 3; // –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
      case NotificationType.weatherUpdate:
        return 3; // –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
      case NotificationType.systemUpdate:
        return 2; // –ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
      case NotificationType.policyUpdate:
        return 2; // –ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
      case NotificationType.newFeatures:
        return 1; // –û—á–µ–Ω—å –Ω–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
      case NotificationType.general:
        return 1; // –û—á–µ–Ω—å –Ω–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    }
  }

  // –ù–û–í–´–ô: –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º
  bool get isReminder {
    return type == NotificationType.fishingReminder ||
        type == NotificationType.tournamentReminder;
  }

  // –ù–û–í–´–ô: –ü—Ä–æ–≤–µ—Ä–∫–∞, —Ç—Ä–µ–±—É–µ—Ç –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  bool get requiresAction {
    return type == NotificationType.policyUpdate ||
        type == NotificationType.systemUpdate ||
        isReminder;
  }

  // –ù–û–í–´–ô: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏, —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–ø–∞–¥–µ—Ç (–≤ —á–∞—Å–∞—Ö)
  int? get autoExpireHours {
    switch (type) {
      case NotificationType.fishingReminder:
      case NotificationType.tournamentReminder:
        return 24; // –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏—Å—á–µ–∑–∞—é—Ç —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞
      case NotificationType.biteForecast:
        return 12; // –ü—Ä–æ–≥–Ω–æ–∑—ã –∏—Å—á–µ–∑–∞—é—Ç —á–µ—Ä–µ–∑ 12 —á–∞—Å–æ–≤
      case NotificationType.weatherUpdate:
        return 6; // –ü–æ–≥–æ–¥–∞ –∏—Å—á–µ–∑–∞–µ—Ç —á–µ—Ä–µ–∑ 6 —á–∞—Å–æ–≤
      case NotificationType.general:
        return 48; // –û–±—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ 48 —á–∞—Å–æ–≤
      case NotificationType.newFeatures:
      case NotificationType.systemUpdate:
      case NotificationType.policyUpdate:
        return null; // –ù–µ –∏—Å—á–µ–∑–∞—é—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    }
  }

  // –ù–û–í–´–ô: –ü—Ä–æ–≤–µ—Ä–∫–∞, –∏—Å—Ç–µ–∫–ª–æ –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  bool get isExpired {
    final expireHours = autoExpireHours;
    if (expireHours == null) return false;

    final expireTime = timestamp.add(Duration(hours: expireHours));
    return DateTime.now().isAfter(expireTime);
  }
}
