// –ü—É—Ç—å: lib/widgets/user_agreements_dialog.dart

import 'package:flutter/material.dart';
import 'package:flutter/gestures.dart';
import '../constants/app_constants.dart';
import '../localization/app_localizations.dart';
import '../screens/help/privacy_policy_screen.dart';
import '../screens/help/terms_of_service_screen.dart';
import '../services/user_consent_service.dart';

/// ‚úÖ –£–ü–†–û–©–ï–ù–ù–´–ô –¥–∏–∞–ª–æ–≥ —Å–æ–≥–ª–∞—à–µ–Ω–∏–π –±–µ–∑ —Å–ª–æ–∂–Ω–æ–π —Å–µ–ª–µ–∫—Ç–∏–≤–Ω–æ–π –ª–æ–≥–∏–∫–∏
class UserAgreementsDialog extends StatefulWidget {
  final VoidCallback onAgreementsAccepted;
  final VoidCallback? onCancel;
  final bool isRegistration; // –ù–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞

  const UserAgreementsDialog({
    super.key,
    required this.onAgreementsAccepted,
    this.onCancel,
    this.isRegistration = false, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–∏—Ç–∏–∫
  });

  @override
  State<UserAgreementsDialog> createState() => _UserAgreementsDialogState();
}

class _UserAgreementsDialogState extends State<UserAgreementsDialog> {
  bool _privacyPolicyAccepted = false;
  bool _termsOfServiceAccepted = false;
  bool _isProcessing = false;

  final UserConsentService _consentService = UserConsentService();

  @override
  void initState() {
    super.initState();
    // ‚úÖ –£–ü–†–û–©–ï–ù–û: –ù–∏–∫–∞–∫–∏—Ö —Å–ª–æ–∂–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ - –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    debugPrint('üîç –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥ —Å–æ–≥–ª–∞—Å–∏–π');
  }

  /// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–∏—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
  void _showPrivacyPolicy() {
    Navigator.of(context).push(
      MaterialPageRoute(builder: (context) => const PrivacyPolicyScreen()),
    );
  }

  /// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ
  void _showTermsOfService() {
    Navigator.of(context).push(
      MaterialPageRoute(builder: (context) => const TermsOfServiceScreen()),
    );
  }

  /// ‚úÖ –£–ü–†–û–©–ï–ù–û: –ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–∏–Ω—è—Ç–∏–µ –≤—Å–µ—Ö —Å–æ–≥–ª–∞—à–µ–Ω–∏–π
  Future<void> _handleAcceptAgreements() async {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–±–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø—Ä–∏–Ω—è—Ç—ã
    if (!_privacyPolicyAccepted || !_termsOfServiceAccepted) {
      _showErrorMessage();
      return;
    }

    setState(() {
      _isProcessing = true;
    });

    try {
      // ‚úÖ –£–ü–†–û–©–ï–ù–û: –í—Å–µ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–Ω–µ —Å–µ–ª–µ–∫—Ç–∏–≤–Ω–æ)
      final success = await _consentService.saveSelectiveConsents(
        privacyPolicyAccepted: _privacyPolicyAccepted,
        termsOfServiceAccepted: _termsOfServiceAccepted,
      );

      if (success && mounted) {
        debugPrint('‚úÖ –°–æ–≥–ª–∞—Å–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
        Navigator.of(context).pop();
        widget.onAgreementsAccepted();
      } else if (mounted) {
        _showSaveErrorMessage();
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Å–æ–≥–ª–∞—à–µ–Ω–∏–π: $e');
      if (mounted) {
        _showSaveErrorMessage();
      }
    } finally {
      if (mounted) {
        setState(() {
          _isProcessing = false;
        });
      }
    }
  }

  /// ‚úÖ –£–ü–†–û–©–ï–ù–û: –ü—Ä–æ—Å—Ç–æ–π –æ—Ç–∫–∞–∑ –±–µ–∑ –∑–∞–ø–∏—Å–∏ –≤ —Å–∏—Å—Ç–µ–º—É
  Future<void> _handleDeclineAgreements() async {
    // ‚úÖ –£–ü–†–û–©–ï–ù–û: –£–±—Ä–∞–Ω–∞ –∑–∞–ø–∏—Å—å –æ—Ç–∫–∞–∑–∞ —Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º —É–¥–∞–ª–µ–Ω–∏—è
    // –ü—Ä–æ—Å—Ç–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –∏ –≤—ã–∑—ã–≤–∞–µ–º –∫–æ–ª–ª–±—ç–∫
    debugPrint('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–∏–ª —Å–æ–≥–ª–∞—à–µ–Ω–∏—è');

    if (mounted) {
      Navigator.of(context).pop();
      if (widget.onCancel != null) {
        widget.onCancel!();
      }
    }
  }

  /// ‚úÖ –£–ü–†–û–©–ï–ù–û: –ü—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
  void _showErrorMessage() {
    final localizations = AppLocalizations.of(context);

    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(
          localizations.translate('agreements_required') ??
              '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–Ω—è—Ç—å –≤—Å–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è',
        ),
        backgroundColor: Colors.red,
        duration: const Duration(seconds: 3),
      ),
    );
  }

  /// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  void _showSaveErrorMessage() {
    final localizations = AppLocalizations.of(context);
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(
          localizations.translate('error_saving_agreements') ??
              '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
        ),
        backgroundColor: Colors.red,
        duration: const Duration(seconds: 3),
      ),
    );
  }

  /// ‚úÖ –£–ü–†–û–©–ï–ù–û: –ü—Ä–æ—Å—Ç–æ–π —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
  String _getDialogTitle(AppLocalizations localizations) {
    if (widget.isRegistration) {
      return localizations.translate('accept_agreements_title') ?? '–ü—Ä–∏–Ω—è—Ç–∏–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–π';
    } else {
      return localizations.translate('agreements_update_title') ?? '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–π';
    }
  }

  /// ‚úÖ –£–ü–†–û–©–ï–ù–û: –ü—Ä–æ—Å—Ç–æ–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
  String _getDialogDescription(AppLocalizations localizations) {
    if (widget.isRegistration) {
      return localizations.translate('accept_agreements_description') ??
          '–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–Ω—è—Ç—å —Å–æ–≥–ª–∞—à–µ–Ω–∏—è';
    } else {
      return localizations.translate('agreements_update_description') ??
          '–û–±–Ω–æ–≤–∏–ª–∏—Å—å —Å–æ–≥–ª–∞—à–µ–Ω–∏—è. –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–Ω—è—Ç—å –Ω–æ–≤—ã–µ –≤–µ—Ä—Å–∏–∏.';
    }
  }

  /// ‚úÖ –£–ü–†–û–©–ï–ù–û: –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –æ–±–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–∏–Ω—è—Ç—ã
  bool _canAccept() {
    return _privacyPolicyAccepted && _termsOfServiceAccepted;
  }

  @override
  Widget build(BuildContext context) {
    final localizations = AppLocalizations.of(context);
    final textScaler = MediaQuery.of(context).textScaler;
    final screenSize = MediaQuery.of(context).size;

    return WillPopScope(
      onWillPop: () async => false, // –ù–µ–ª—å–∑—è –∑–∞–∫—Ä—ã—Ç—å –±–µ–∑ –ø—Ä–∏–Ω—è—Ç–∏—è
      child: Dialog(
        backgroundColor: AppConstants.backgroundColor,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
        child: Container(
          constraints: BoxConstraints(
            maxWidth: screenSize.width * 0.9,
            maxHeight: screenSize.height * 0.8,
          ),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              // ‚úÖ –£–ü–†–û–©–ï–ù–ù–´–ô –∑–∞–≥–æ–ª–æ–≤–æ–∫
              Container(
                width: double.infinity,
                padding: const EdgeInsets.all(20),
                decoration: BoxDecoration(
                  color: AppConstants.primaryColor.withOpacity(0.1),
                  borderRadius: const BorderRadius.only(
                    topLeft: Radius.circular(16),
                    topRight: Radius.circular(16),
                  ),
                ),
                child: Column(
                  children: [
                    Icon(
                      widget.isRegistration ? Icons.security : Icons.update,
                      color: AppConstants.primaryColor,
                      size: 48,
                    ),
                    const SizedBox(height: 12),
                    Text(
                      _getDialogTitle(localizations),
                      style: TextStyle(
                        fontSize: 22 * (textScaler.scale(1.0) > 1.2 ? 1.2 / textScaler.scale(1.0) : 1),
                        fontWeight: FontWeight.bold,
                        color: AppConstants.textColor,
                      ),
                      textAlign: TextAlign.center,
                    ),
                    const SizedBox(height: 8),
                    Text(
                      _getDialogDescription(localizations),
                      style: TextStyle(
                        fontSize: 14 * (textScaler.scale(1.0) > 1.2 ? 1.2 / textScaler.scale(1.0) : 1),
                        color: AppConstants.textColor.withOpacity(0.8),
                      ),
                      textAlign: TextAlign.center,
                    ),
                  ],
                ),
              ),

              // ‚úÖ –£–ü–†–û–©–ï–ù–ù–û–ï —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ - –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
              Flexible(
                child: Padding(
                  padding: const EdgeInsets.all(20),
                  child: Column(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      // –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ (–≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º)
                      _buildSimpleAgreementCheckbox(
                        value: _privacyPolicyAccepted,
                        onChanged: (value) => setState(() => _privacyPolicyAccepted = value ?? false),
                        text: localizations.translate('i_agree_to') ?? '–Ø —Å–æ–≥–ª–∞—Å–µ–Ω —Å',
                        linkText: localizations.translate('privacy_policy') ?? '–ü–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏',
                        onLinkTap: _showPrivacyPolicy,
                      ),

                      const SizedBox(height: 16),

                      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ (–≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º)
                      _buildSimpleAgreementCheckbox(
                        value: _termsOfServiceAccepted,
                        onChanged: (value) => setState(() => _termsOfServiceAccepted = value ?? false),
                        text: localizations.translate('i_agree_to') ?? '–Ø —Å–æ–≥–ª–∞—Å–µ–Ω —Å',
                        linkText: localizations.translate('terms_of_service') ?? '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º',
                        onLinkTap: _showTermsOfService,
                      ),

                      const SizedBox(height: 24),

                      // ‚úÖ –£–ü–†–û–©–ï–ù–ù–´–ï –∫–Ω–æ–ø–∫–∏
                      Row(
                        children: [
                          // –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã (–ø—Ä–æ—Å—Ç–∞—è)
                          Expanded(
                            child: OutlinedButton(
                              onPressed: _isProcessing ? null : _handleDeclineAgreements,
                              style: OutlinedButton.styleFrom(
                                side: BorderSide(color: Colors.red.withOpacity(0.7)),
                                padding: const EdgeInsets.symmetric(vertical: 12),
                                shape: RoundedRectangleBorder(
                                  borderRadius: BorderRadius.circular(8),
                                ),
                              ),
                              child: Text(
                                widget.isRegistration
                                    ? (localizations.translate('exit_app') ?? '–í—ã–π—Ç–∏ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è')
                                    : (localizations.translate('decline') ?? '–û—Ç–∫–ª–æ–Ω–∏—Ç—å'),
                                style: TextStyle(
                                  color: Colors.red,
                                  fontSize: 16 * (textScaler.scale(1.0) > 1.2 ? 1.2 / textScaler.scale(1.0) : 1),
                                  fontWeight: FontWeight.w600,
                                ),
                              ),
                            ),
                          ),

                          const SizedBox(width: 12),

                          // –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è (–ø—Ä–æ—Å—Ç–∞—è)
                          Expanded(
                            child: ElevatedButton(
                              onPressed: (_isProcessing || !_canAccept()) ? null : _handleAcceptAgreements,
                              style: ElevatedButton.styleFrom(
                                backgroundColor: AppConstants.primaryColor,
                                disabledBackgroundColor: AppConstants.primaryColor.withOpacity(0.3),
                                padding: const EdgeInsets.symmetric(vertical: 12),
                                shape: RoundedRectangleBorder(
                                  borderRadius: BorderRadius.circular(8),
                                ),
                              ),
                              child: _isProcessing
                                  ? const SizedBox(
                                width: 20,
                                height: 20,
                                child: CircularProgressIndicator(
                                  strokeWidth: 2,
                                  valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                                ),
                              )
                                  : Text(
                                localizations.translate('accept') ?? '–ü—Ä–∏–Ω—è—Ç—å',
                                style: TextStyle(
                                  color: Colors.white,
                                  fontSize: 16 * (textScaler.scale(1.0) > 1.2 ? 1.2 / textScaler.scale(1.0) : 1),
                                  fontWeight: FontWeight.bold,
                                ),
                                textAlign: TextAlign.center,
                              ),
                            ),
                          ),
                        ],
                      ),
                    ],
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  /// ‚úÖ –£–ü–†–û–©–ï–ù–ù–´–ô –≤–∏–¥–∂–µ—Ç checkbox –±–µ–∑ —Å–ª–æ–∂–Ω–æ–π –ª–æ–≥–∏–∫–∏ –≤–µ—Ä—Å–∏–π
  Widget _buildSimpleAgreementCheckbox({
    required bool value,
    required ValueChanged<bool?> onChanged,
    required String text,
    required String linkText,
    required VoidCallback onLinkTap,
  }) {
    final textScaler = MediaQuery.of(context).textScaler;

    return Container(
      padding: const EdgeInsets.all(8),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Checkbox
          Transform.scale(
            scale: 1.2,
            child: Checkbox(
              value: value,
              onChanged: onChanged,
              activeColor: AppConstants.primaryColor,
              checkColor: Colors.white,
              side: BorderSide(
                color: AppConstants.textColor.withOpacity(0.5),
                width: 1.5,
              ),
            ),
          ),

          const SizedBox(width: 12),

          // –ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç —Å —Å—Å—ã–ª–∫–æ–π
          Expanded(
            child: Padding(
              padding: const EdgeInsets.only(top: 12),
              child: RichText(
                text: TextSpan(
                  style: TextStyle(
                    color: AppConstants.textColor,
                    fontSize: 14 * (textScaler.scale(1.0) > 1.2 ? 1.2 / textScaler.scale(1.0) : 1),
                    height: 1.4,
                  ),
                  children: [
                    TextSpan(text: text),
                    const TextSpan(text: ' '),
                    TextSpan(
                      text: linkText,
                      style: TextStyle(
                        color: AppConstants.primaryColor,
                        decoration: TextDecoration.underline,
                        fontWeight: FontWeight.w500,
                      ),
                      recognizer: TapGestureRecognizer()..onTap = onLinkTap,
                    ),
                  ],
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }
}