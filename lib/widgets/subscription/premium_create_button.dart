// –ü—É—Ç—å: lib/widgets/subscription/premium_create_button.dart

import 'package:flutter/material.dart';
import '../../models/subscription_model.dart';
import '../../constants/subscription_constants.dart';
import '../../services/subscription/subscription_service.dart';
import '../../services/firebase/firebase_service.dart';
import '../../screens/subscription/paywall_screen.dart';
import '../../localization/app_localizations.dart';
import '../../constants/app_constants.dart';
import 'usage_badge.dart' as badge_widgets; // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º alias –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞

/// ‚úÖ –£–ü–†–û–©–ï–ù–ù–ê–Ø —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ª–∏–º–∏—Ç–æ–≤
class PremiumCreateButton extends StatefulWidget {
  final ContentType contentType;
  final VoidCallback onCreatePressed;
  final String? customText;
  final IconData? customIcon;
  final bool showUsageBadge;
  final Color? backgroundColor;
  final Color? foregroundColor;
  final double? borderRadius;
  final EdgeInsets? padding;
  final ButtonVariant variant;

  const PremiumCreateButton({
    super.key,
    required this.contentType,
    required this.onCreatePressed,
    this.customText,
    this.customIcon,
    this.showUsageBadge = true,
    this.backgroundColor,
    this.foregroundColor,
    this.borderRadius = 12,
    this.padding,
    this.variant = ButtonVariant.regular,
  });

  @override
  State<PremiumCreateButton> createState() => _PremiumCreateButtonState();
}

class _PremiumCreateButtonState extends State<PremiumCreateButton> {
  final SubscriptionService _subscriptionService = SubscriptionService();
  final FirebaseService _firebaseService = FirebaseService();

  bool _canCreate = false;
  bool _isLoading = true;
  int _currentUsage = 0;
  int _limit = 0;

  @override
  void initState() {
    super.initState();
    _checkLimits();
  }

  /// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é Firebase —Å–∏—Å—Ç–µ–º—É
  Future<void> _checkLimits() async {
    try {
      // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø
      if (_subscriptionService.hasPremiumAccess()) {
        if (mounted) {
          setState(() {
            _canCreate = true;
            _isLoading = false;
          });
        }
        return;
      }

      // 2. –î–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –≥–ª—É–±–∏–Ω –∏ –æ–±–º–µ–Ω–∞ –∫–∞—Ä—Ç–∞–º–∏ - —Ç–æ–ª—å–∫–æ –ø—Ä–µ–º–∏—É–º
      if (widget.contentType == ContentType.depthChart ||
          widget.contentType == ContentType.markerMapSharing) { // üöÄ –ù–û–í–û–ï
        if (mounted) {
          setState(() {
            _canCreate = false;
            _isLoading = false;
          });
        }
        return;
      }

      // 3. ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é Firebase —Å–∏—Å—Ç–µ–º—É
      final limitCheck = await _firebaseService.canCreateItem(_getFirebaseKey(widget.contentType));

      final canCreate = limitCheck['canProceed'] ?? false;
      final currentUsage = limitCheck['currentCount'] ?? 0;
      final maxLimit = limitCheck['maxLimit'] ?? 0;

      if (mounted) {
        setState(() {
          _canCreate = canCreate;
          _currentUsage = currentUsage;
          _limit = maxLimit;
          _isLoading = false;
        });
      }
    } catch (e) {
      debugPrint('‚ùå PremiumCreateButton: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤: $e');

      if (mounted) {
        setState(() {
          _canCreate = false;
          _isLoading = false;
        });
      }
    }
  }

  /// üöÄ –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω case –¥–ª—è markerMapSharing
  String _getFirebaseKey(ContentType contentType) {
    switch (contentType) {
      case ContentType.fishingNotes:
        return 'notesCount';
      case ContentType.markerMaps:
        return 'markerMapsCount';
      case ContentType.budgetNotes: // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –±—ã–ª–æ expenses
        return 'budgetNotesCount';
      case ContentType.depthChart:
        return 'depthChartCount';
      case ContentType.markerMapSharing: // üöÄ –ù–û–í–û–ï
        return 'markerMapsCount'; // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ—Ç –∂–µ –ª–∏–º–∏—Ç —á—Ç–æ –∏ –º–∞—Ä–∫–µ—Ä–Ω—ã–µ –∫–∞—Ä—Ç—ã
    }
  }

  @override
  Widget build(BuildContext context) {
    return StreamBuilder<SubscriptionModel>(
      stream: _subscriptionService.subscriptionStream,
      builder: (context, snapshot) {
        final localizations = AppLocalizations.of(context);

        if (_isLoading) {
          return _buildLoadingButton(context, localizations);
        }

        switch (widget.variant) {
          case ButtonVariant.regular:
            return _buildRegularButton(context, localizations);
          case ButtonVariant.compact:
            return _buildCompactButton(context, localizations);
          case ButtonVariant.fab:
            return _buildFloatingActionButton(context, localizations);
        }
      },
    );
  }

  Widget _buildLoadingButton(BuildContext context, AppLocalizations localizations) {
    switch (widget.variant) {
      case ButtonVariant.fab:
        return FloatingActionButton(
          onPressed: null,
          backgroundColor: Colors.grey,
          child: const SizedBox(
            width: 20,
            height: 20,
            child: CircularProgressIndicator(strokeWidth: 2, color: Colors.white),
          ),
        );
      case ButtonVariant.compact:
        return ElevatedButton(
          onPressed: null,
          style: ElevatedButton.styleFrom(
            backgroundColor: Colors.grey,
            padding: const EdgeInsets.symmetric(vertical: 12, horizontal: 16),
          ),
          child: const SizedBox(
            width: 16,
            height: 16,
            child: CircularProgressIndicator(strokeWidth: 2, color: Colors.white),
          ),
        );
      case ButtonVariant.regular:
        return ElevatedButton(
          onPressed: null,
          style: ElevatedButton.styleFrom(
            backgroundColor: Colors.grey,
            minimumSize: const Size(double.infinity, 56),
          ),
          child: const SizedBox(
            width: 20,
            height: 20,
            child: CircularProgressIndicator(strokeWidth: 2, color: Colors.white),
          ),
        );
    }
  }

  Widget _buildFloatingActionButton(
      BuildContext context,
      AppLocalizations localizations,
      ) {
    return Column(
      mainAxisSize: MainAxisSize.min,
      children: [
        if (widget.showUsageBadge && !_subscriptionService.hasPremiumAccess()) ...[
          // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º alias –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π BadgeVariant
          badge_widgets.UsageBadge(
            contentType: widget.contentType,
            variant: badge_widgets.BadgeVariant.compact,
          ),
          const SizedBox(height: 8),
        ],
        FloatingActionButton(
          onPressed: _canCreate
              ? () => _handleCreatePress(context)
              : () => _showPaywall(context),
          backgroundColor: _canCreate
              ? (widget.backgroundColor ?? AppConstants.primaryColor)
              : Colors.grey.withOpacity(0.7),
          foregroundColor: _canCreate
              ? (widget.foregroundColor ?? Colors.white)
              : Colors.white70,
          child: Stack(
            children: [
              Icon(
                _canCreate
                    ? (widget.customIcon ?? Icons.add)
                    : Icons.lock,
                size: 28,
              ),
              if (!_canCreate)
                Positioned(
                  top: 0,
                  right: 0,
                  child: Container(
                    width: 12,
                    height: 12,
                    decoration: const BoxDecoration(
                      color: Colors.red,
                      shape: BoxShape.circle,
                    ),
                    child: const Icon(
                      Icons.close,
                      size: 8,
                      color: Colors.white,
                    ),
                  ),
                ),
            ],
          ),
        ),
      ],
    );
  }

  Widget _buildRegularButton(
      BuildContext context,
      AppLocalizations localizations,
      ) {
    final buttonText = _getButtonText(localizations, _canCreate);
    final buttonIcon = _getButtonIcon(_canCreate);

    return Column(
      crossAxisAlignment: CrossAxisAlignment.stretch,
      children: [
        ElevatedButton.icon(
          onPressed: _canCreate
              ? () => _handleCreatePress(context)
              : () => _showPaywall(context),
          icon: Icon(buttonIcon),
          label: Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Expanded(
                child: Text(
                  buttonText,
                  style: const TextStyle(
                    fontSize: 16,
                    fontWeight: FontWeight.w600,
                  ),
                ),
              ),
              if (widget.showUsageBadge)
              // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º alias –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π BadgeVariant
                badge_widgets.UsageBadge(
                  contentType: widget.contentType,
                  variant: badge_widgets.BadgeVariant.compact,
                ),
            ],
          ),
          style: ElevatedButton.styleFrom(
            backgroundColor: _canCreate
                ? (widget.backgroundColor ?? AppConstants.primaryColor)
                : Colors.grey.withOpacity(0.5),
            foregroundColor: _canCreate
                ? (widget.foregroundColor ?? Colors.white)
                : Colors.white70,
            padding: widget.padding ?? const EdgeInsets.symmetric(
              vertical: 16,
              horizontal: 20,
            ),
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(widget.borderRadius ?? 12),
              side: !_canCreate
                  ? const BorderSide(color: Colors.orange, width: 2)
                  : BorderSide.none,
            ),
            minimumSize: const Size(double.infinity, 56),
          ),
        ),
        if (!_canCreate) ...[
          const SizedBox(height: 8),
          _buildLimitWarning(context, localizations),
        ],
      ],
    );
  }

  Widget _buildCompactButton(
      BuildContext context,
      AppLocalizations localizations,
      ) {
    final buttonText = _getButtonText(localizations, _canCreate);
    final buttonIcon = _getButtonIcon(_canCreate);

    return ElevatedButton.icon(
      onPressed: _canCreate
          ? () => _handleCreatePress(context)
          : () => _showPaywall(context),
      icon: Icon(buttonIcon, size: 20),
      label: Text(
        buttonText,
        style: const TextStyle(
          fontSize: 14,
          fontWeight: FontWeight.w600,
        ),
      ),
      style: ElevatedButton.styleFrom(
        backgroundColor: _canCreate
            ? (widget.backgroundColor ?? AppConstants.primaryColor)
            : Colors.grey.withOpacity(0.5),
        foregroundColor: _canCreate
            ? (widget.foregroundColor ?? Colors.white)
            : Colors.white70,
        padding: const EdgeInsets.symmetric(vertical: 12, horizontal: 16),
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(8),
          side: !_canCreate
              ? const BorderSide(color: Colors.orange, width: 1)
              : BorderSide.none,
        ),
      ),
    );
  }

  Widget _buildLimitWarning(
      BuildContext context,
      AppLocalizations localizations,
      ) {
    return Container(
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: Colors.orange.withOpacity(0.1),
        borderRadius: BorderRadius.circular(8),
        border: Border.all(color: Colors.orange, width: 1),
      ),
      child: Row(
        children: [
          const Icon(
            Icons.warning_amber_rounded,
            color: Colors.orange,
            size: 20,
          ),
          const SizedBox(width: 8),
          Expanded(
            child: Text(
              '${localizations.translate('limit_reached_description') ?? '–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç'} ($_currentUsage/$_limit)',
              style: TextStyle(
                color: Colors.orange[700],
                fontSize: 14,
                fontWeight: FontWeight.w500,
              ),
            ),
          ),
          TextButton(
            onPressed: () => _showPaywall(context),
            style: TextButton.styleFrom(
              foregroundColor: Colors.orange,
              padding: const EdgeInsets.symmetric(horizontal: 8),
            ),
            child: Text(
              localizations.translate('upgrade_now') ?? '–û–±–Ω–æ–≤–∏—Ç—å',
              style: const TextStyle(
                fontWeight: FontWeight.bold,
                fontSize: 12,
              ),
            ),
          ),
        ],
      ),
    );
  }

  /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è
  Future<void> _handleCreatePress(BuildContext context) async {
    // –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–ª–±—ç–∫
    // –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ —Å–∞–º–∏—Ö —ç–∫—Ä–∞–Ω–∞—Ö —Å–æ–∑–¥–∞–Ω–∏—è
    widget.onCreatePressed();
  }

  /// üöÄ –û–ë–ù–û–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω case –¥–ª—è markerMapSharing
  String _getButtonText(AppLocalizations localizations, bool canCreate) {
    if (widget.customText != null) return widget.customText!;

    if (!canCreate) {
      return localizations.translate('limit_reached_short') ?? '–õ–∏–º–∏—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç';
    }

    switch (widget.contentType) {
      case ContentType.fishingNotes:
        return localizations.translate('create_fishing_note') ?? '–°–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É';
      case ContentType.markerMaps:
        return localizations.translate('create_marker_map') ?? '–°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç—É';
      case ContentType.budgetNotes: // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –±—ã–ª–æ expenses
        return localizations.translate('add_budget_note') ?? '–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –±—é–¥–∂–µ—Ç–∞';
      case ContentType.depthChart:
        return localizations.translate('view_depth_chart') ?? '–ì—Ä–∞—Ñ–∏–∫ –≥–ª—É–±–∏–Ω';
      case ContentType.markerMapSharing: // üöÄ –ù–û–í–û–ï
        return localizations.translate('share_map') ?? '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–∞—Ä—Ç–æ–π';
    }
  }

  /// üöÄ –û–ë–ù–û–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω case –¥–ª—è markerMapSharing
  IconData _getButtonIcon(bool canCreate) {
    if (widget.customIcon != null) return widget.customIcon!;

    if (!canCreate) return Icons.lock;

    switch (widget.contentType) {
      case ContentType.fishingNotes:
        return Icons.note_add;
      case ContentType.markerMaps:
        return Icons.add_location;
      case ContentType.budgetNotes: // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –±—ã–ª–æ expenses
        return Icons.account_balance_wallet;
      case ContentType.depthChart:
        return Icons.trending_up;
      case ContentType.markerMapSharing: // üöÄ –ù–û–í–û–ï
        return Icons.share;
    }
  }

  void _showPaywall(BuildContext context) {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => PaywallScreen(
          contentType: widget.contentType.name,
        ),
      ),
    );
  }
}

/// ‚úÖ –£–ü–†–û–©–ï–ù–ù–ê–Ø —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞ FAB –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
class PremiumFloatingActionButton extends StatelessWidget {
  final ContentType contentType;
  final VoidCallback onPressed;
  final String? heroTag;
  final Color? backgroundColor;
  final Color? foregroundColor;

  const PremiumFloatingActionButton({
    super.key,
    required this.contentType,
    required this.onPressed,
    this.heroTag,
    this.backgroundColor,
    this.foregroundColor,
  });

  @override
  Widget build(BuildContext context) {
    return PremiumCreateButton(
      contentType: contentType,
      onCreatePressed: onPressed,
      variant: ButtonVariant.fab,
      backgroundColor: backgroundColor,
      foregroundColor: foregroundColor,
      showUsageBadge: true,
    );
  }
}

/// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–Ω–æ–ø–æ–∫ –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞
enum ButtonVariant {
  regular,    // –æ–±—ã—á–Ω–∞—è –∫–Ω–æ–ø–∫–∞
  compact,    // –∫–æ–º–ø–∞–∫—Ç–Ω–∞—è –¥–ª—è —Å–ø–∏—Å–∫–æ–≤
  fab,        // floating action button
}