// –ü—É—Ç—å: lib/main.dart

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:provider/provider.dart';
import 'package:intl/date_symbol_data_local.dart';
import 'package:flutter_localizations/flutter_localizations.dart';
import 'package:quick_actions/quick_actions.dart';
import 'package:app_links/app_links.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:permission_handler/permission_handler.dart';
import 'dart:async';
import 'dart:convert';
import 'dart:io';
import 'screens/splash_screen.dart';
import 'constants/app_constants.dart';
import 'screens/auth/auth_selection_screen.dart';
import 'screens/auth/login_screen.dart';
import 'screens/auth/register_screen.dart';
import 'screens/home_screen.dart';
import 'screens/auth/forgot_password_screen.dart';
import 'screens/help/help_contact_screen.dart';
import 'screens/fishing_note/fishing_type_selection_screen.dart';
import 'screens/fishing_note/fishing_notes_list_screen.dart';
import 'screens/settings/accepted_agreements_screen.dart';
import 'screens/timer/timers_screen.dart';
import 'providers/timer_provider.dart';
import 'providers/language_provider.dart';
import 'providers/subscription_provider.dart';
import 'localization/app_localizations.dart';
import 'firebase_options.dart';
import 'package:firebase_app_check/firebase_app_check.dart';
import 'providers/statistics_provider.dart';
import 'services/offline/offline_storage_service.dart';
import 'services/offline/sync_service.dart';
import 'utils/network_utils.dart';
import 'services/weather_notification_service.dart';
import 'services/notification_service.dart';
import 'services/local_push_notification_service.dart';
import 'services/weather_settings_service.dart';
import 'services/firebase/firebase_service.dart';
import 'services/user_consent_service.dart';
import 'services/scheduled_reminder_service.dart';
import 'services/tournament_service.dart';
import 'services/timer/timer_service.dart';
import 'screens/tournaments/tournament_detail_screen.dart';
import 'services/location_service.dart';
// ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –Ω–æ–≤—ã—Ö Isar —Å–µ—Ä–≤–∏—Å–æ–≤
import 'services/isar_service.dart';
import 'repositories/fishing_note_repository.dart';
import 'repositories/budget_notes_repository.dart';
import 'repositories/marker_map_repository.dart';

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è flutter_local_notifications
final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin = FlutterLocalNotificationsPlugin();

void main() async {
  WidgetsFlutterBinding.ensureInitialized();

  // ‚úÖ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û: –¢–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ UI
  await _initializeCriticalOnly();

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LanguageProvider –î–û —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  final languageProvider = LanguageProvider();
  await languageProvider.initialize();

  // ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –°–†–ê–ó–£ - –æ—Å—Ç–∞–ª—å–Ω–æ–µ –≤ —Ñ–æ–Ω–µ
  runApp(
    MultiProvider(
      providers: [
        ChangeNotifierProvider(create: (context) => TimerProvider()),
        ChangeNotifierProvider(create: (context) => StatisticsProvider()),
        ChangeNotifierProvider.value(value: languageProvider),
        ChangeNotifierProvider(create: (context) => SubscriptionProvider()),
      ],
      child: DriftNotesApp(consentService: UserConsentService()),
    ),
  );
}

// ‚úÖ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –¢–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
Future<void> _initializeCriticalOnly() async {
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–∫–∞–ª–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç
    await initializeDateFormatting('ru_RU', null);
    await initializeDateFormatting('en_US', null);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é —ç–∫—Ä–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ –ø–æ—Ä—Ç—Ä–µ—Ç–Ω—ã–π —Ä–µ–∂–∏–º
    await SystemChrome.setPreferredOrientations([
      DeviceOrientation.portraitUp,
      DeviceOrientation.portraitDown,
    ]);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    SystemChrome.setEnabledSystemUIMode(SystemUiMode.manual, overlays: SystemUiOverlay.values);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è - –¢–û–õ–¨–ö–û FIREBASE
    if (Firebase.apps.isEmpty) {
      await Firebase.initializeApp(
        options: DefaultFirebaseOptions.currentPlatform,
      );
    }

    debugPrint('‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–µ—Ä–≤–∏—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
  } catch (e) {
    debugPrint('‚ùå –û—à–∏–±–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: $e');
  }
}

// ‚úÖ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ —Ñ–æ–Ω–µ
Future<void> _initializeAllServicesAsync() async {
  try {
    debugPrint('üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å–µ—Ä–≤–∏—Å–æ–≤...');

    // –≠—Ç–∞–ø 1: –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –∏ –±–∞–∑–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã)
    await _initializeCriticalServices();

    // –≠—Ç–∞–ø 2: App Check –∏ debug —Ç–µ—Å—Ç—ã (–≤–∞–∂–Ω–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
    await _initializeSecurityServices();

    // –≠—Ç–∞–ø 3: –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ)
    await _initializeDatabaseServices();

    // –≠—Ç–∞–ø 4: –°–µ—Ä–≤–∏—Å—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏)
    await _initializeApplicationServices();

    // –≠—Ç–∞–ø 5: –û—Ñ–ª–∞–π–Ω —Å–µ—Ä–≤–∏—Å—ã –∏ —Å–µ—Ç—å (–ø–æ—Å–ª–µ–¥–Ω–∏–º–∏)
    await _initializeNetworkServices();

    debugPrint('‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ');
  } catch (e) {
    debugPrint('‚ùå –û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: $e');
  }
}

// –≠—Ç–∞–ø 1: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è –±–∞–∑–æ–≤–æ–π —Ä–∞–±–æ—Ç—ã
Future<void> _initializeCriticalServices() async {
  try {
    debugPrint('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...');

    // –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    await _requestNotificationPermissions();

    // –ë–∞–∑–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    await _initializeNotifications();

    debugPrint('‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–µ—Ä–≤–∏—Å—ã –≥–æ—Ç–æ–≤—ã');
  } catch (e) {
    debugPrint('‚ùå –û—à–∏–±–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤: $e');
  }
}

// –≠—Ç–∞–ø 2: –°–µ—Ä–≤–∏—Å—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
Future<void> _initializeSecurityServices() async {
  try {
    debugPrint('üîê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...');

    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: App Check –≤ –º–∏–∫—Ä–æ—Ç–∞—Å–∫–µ —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å UI
    Future.microtask(() async {
      await _initializeAppCheck();
    });

    // Debug —Ç–µ—Å—Ç—ã —Ç–æ–∂–µ –≤ –º–∏–∫—Ä–æ—Ç–∞—Å–∫–µ
    if (kDebugMode) {
      Future.microtask(() async {
        await _testFirebaseAuthentication();
        try {
          final firestore = FirebaseFirestore.instance;
          await firestore.enableNetwork();
        } catch (e) {
          // Silent error handling
        }
      });
    }

    debugPrint('‚úÖ –°–µ—Ä–≤–∏—Å—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≥–æ—Ç–æ–≤—ã');
  } catch (e) {
    debugPrint('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: $e');
  }
}

// –≠—Ç–∞–ø 3: –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ)
Future<void> _initializeDatabaseServices() async {
  try {
    debugPrint('üóÑÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö...');

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –ë–î –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    final futures = [
      _initializeIsarServices(),
      _initializeOfflineServices(),
    ];

    await Future.wait(futures, eagerError: false);
    debugPrint('‚úÖ –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤—ã');
  } catch (e) {
    debugPrint('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: $e');
  }
}

// –≠—Ç–∞–ø 4: –°–µ—Ä–≤–∏—Å—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–≤—Å–µ –≤ –º–∏–∫—Ä–æ—Ç–∞—Å–∫–∞—Ö)
Future<void> _initializeApplicationServices() async {
  try {
    debugPrint('‚öôÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');

    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –≤ –º–∏–∫—Ä–æ—Ç–∞—Å–∫–∞—Ö —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
    final criticalServices = [
          () async {
        await Future.delayed(Duration(milliseconds: 10));
        await LocalPushNotificationService().initialize();
      },
          () async {
        await Future.delayed(Duration(milliseconds: 20));
        await NotificationService().initialize();
      },
    ];

    final secondaryServices = [
          () async {
        await Future.delayed(Duration(milliseconds: 30));
        await TimerService().initialize();
      },
          () async {
        await Future.delayed(Duration(milliseconds: 40));
        await WeatherNotificationService().initialize();
      },
          () async {
        await Future.delayed(Duration(milliseconds: 50));
        await WeatherSettingsService().initialize();
      },
          () async {
        await Future.delayed(Duration(milliseconds: 60));
        await ScheduledReminderService().initialize();
      },
          () async {
        await Future.delayed(Duration(milliseconds: 70));
        await LocationService().initialize();
      },
    ];

    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–º–µ–Ω–∏–ª forEach –Ω–∞ –æ–±—ã—á–Ω—ã–π for loop
    for (final service in criticalServices) {
      Future.microtask(service);
    }

    for (final service in secondaryServices) {
      Future.microtask(service);
    }

    // –ñ–¥–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ (–Ω–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º UI)
    await Future.delayed(Duration(milliseconds: 100));

    debugPrint('‚úÖ –°–µ—Ä–≤–∏—Å—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≥–æ—Ç–æ–≤—ã');
  } catch (e) {
    debugPrint('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: $e');
  }
}

// –≠—Ç–∞–ø 5: –°–µ—Ç–µ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã
Future<void> _initializeNetworkServices() async {
  try {
    debugPrint('üåê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ç–µ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...');

    // –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–µ—Ç–∏ (–Ω–µ –±–ª–æ–∫–∏—Ä—É—é—â–∏–π)
    _startNetworkMonitoring();

    debugPrint('‚úÖ –°–µ—Ç–µ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã –≥–æ—Ç–æ–≤—ã');
  } catch (e) {
    debugPrint('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤: $e');
  }
}

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Isar —Å–µ—Ä–≤–∏—Å–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π MarkerMap
Future<void> _initializeIsarServices() async {
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è IsarService (—Ç–µ–ø–µ—Ä—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç MarkerMap)
    await IsarService.instance.init();

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    final repoFutures = [
      FishingNoteRepository().initialize(),
      BudgetNotesRepository().initialize(),
    ];

    await Future.wait(repoFutures, eagerError: false);

    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MarkerMapRepository (—Å–æ–∑–¥–∞–¥–∏–º –µ—Å–ª–∏ –Ω–µ—Ç)
    try {
      await MarkerMapRepository().initialize();
    } catch (e) {
      // Silent error handling - markers may use legacy system
    }

  } catch (e) {
    // Silent error handling for production
  }
}

// ‚úÖ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è App Check
Future<void> _initializeAppCheck() async {
  try {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ —Å–±–æ—Ä–∫–∏
    if (kDebugMode) {
      // DEBUG —Ä–µ–∂–∏–º: –ò—Å–ø–æ–ª—å–∑—É–µ–º Debug Provider –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
      await FirebaseAppCheck.instance.activate(
        androidProvider: AndroidProvider.debug,
        appleProvider: AppleProvider.debug,
      );
    } else {
      // RELEASE —Ä–µ–∂–∏–º: –ò—Å–ø–æ–ª—å–∑—É–µ–º Play Integrity –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
      await FirebaseAppCheck.instance.activate(
        androidProvider: AndroidProvider.playIntegrity,
        appleProvider: AppleProvider.deviceCheck,
      );
    }

    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±—Ä–∞–ª –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é token
    await FirebaseAppCheck.instance.getToken();

  } catch (e) {
    // Silent error handling for production
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ñ–ª–∞–π–Ω —Å–µ—Ä–≤–∏—Å–æ–≤ (–°–¢–ê–†–´–ï - –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
Future<void> _initializeOfflineServices() async {
  try {
    final offlineStorage = OfflineStorageService();
    await offlineStorage.initialize();
  } catch (e) {
    // Silent error handling for production
  }
}

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–µ—Ç–∏ —Å –Ω–æ–≤—ã–º SyncService
void _startNetworkMonitoring() {
  try {
    final networkMonitor = NetworkUtils();
    networkMonitor.startNetworkMonitoring();

    networkMonitor.addConnectionListener((isConnected) {
      if (isConnected) {
        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π SyncService.instance –¥–ª—è Isar
        SyncService.instance.fullSync().then((_) {
          // Silent success
        }).catchError((e) {
          // Silent error handling
        });
      }
    });

    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π SyncService
    SyncService.instance.startPeriodicSync();

  } catch (e) {
    // Silent error handling for production
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Firebase Authentication
Future<void> _testFirebaseAuthentication() async {
  if (!kDebugMode) return;

  try {
    final auth = FirebaseAuth.instance;

    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±—Ä–∞–ª –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é currentUser
    auth.currentUser;

    // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±—Ä–∞–ª–∏ deprecated fetchSignInMethodsForEmail
    // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —É—Å—Ç–∞—Ä–µ–ª –ø–æ —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (–∑–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è email)
    // –î–ª—è debug —Ü–µ–ª–µ–π –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ Auth –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ Firebase Auth –¥–æ—Å—Ç—É–ø–µ–Ω
    if (auth.app.name.isNotEmpty) {
      // Firebase Auth —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    }

  } catch (e) {
    // Silent error handling
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
Future<void> _requestNotificationPermissions() async {
  try {
    if (Platform.isAndroid) {
      // –î–ª—è Android 13+ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      await Permission.notification.request();

      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —Ç–æ—á–Ω—ã–µ –±—É–¥–∏–ª—å–Ω–∏–∫–∏
      if (Platform.isAndroid) {
        try {
          await Permission.scheduleExactAlarm.request();
        } catch (e) {
          // Silent error handling - not supported on all Android versions
        }
      }
    } else if (Platform.isIOS) {
      // –î–ª—è iOS –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ flutter_local_notifications
      await flutterLocalNotificationsPlugin
          .resolvePlatformSpecificImplementation<IOSFlutterLocalNotificationsPlugin>()
          ?.requestPermissions(
        alert: true,
        badge: true,
        sound: true,
        critical: true,
      );
    }
  } catch (e) {
    // Silent error handling for production
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ flutter_local_notifications
Future<void> _initializeNotifications() async {
  try {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Android
    const AndroidInitializationSettings androidSettings = AndroidInitializationSettings('@mipmap/launcher_icon');

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è iOS
    const DarwinInitializationSettings iosSettings = DarwinInitializationSettings(
      requestAlertPermission: true,
      requestBadgePermission: true,
      requestSoundPermission: true,
      requestCriticalPermission: true,
    );

    // –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    const InitializationSettings initializationSettings = InitializationSettings(
      android: androidSettings,
      iOS: iosSettings,
      macOS: iosSettings,
    );

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–≥–∏–Ω —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –Ω–∞–∂–∞—Ç–∏–π
    await flutterLocalNotificationsPlugin.initialize(
      initializationSettings,
      onDidReceiveNotificationResponse: _onNotificationTap,
    );

    // –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è Android
    if (Platform.isAndroid) {
      await _createNotificationChannel();
    }
  } catch (e) {
    // Silent error handling for production
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è Android
Future<void> _createNotificationChannel() async {
  try {
    const AndroidNotificationChannel channel = AndroidNotificationChannel(
      'timer_channel', // id
      '–¢–∞–π–º–µ—Ä—ã —Ä—ã–±–∞–ª–∫–∏', // name
      description: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç–∞–π–º–µ—Ä–æ–≤ —Ä—ã–±–∞–ª–∫–∏',
      importance: Importance.high,
      playSound: true,
      enableVibration: true,
      enableLights: true,
      ledColor: Color(0xFF2E7D32),
    );

    await flutterLocalNotificationsPlugin
        .resolvePlatformSpecificImplementation<AndroidFlutterLocalNotificationsPlugin>()
        ?.createNotificationChannel(channel);
  } catch (e) {
    // Silent error handling for production
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
void _onNotificationTap(NotificationResponse notificationResponse) {
  try {
    if (notificationResponse.payload != null) {
      final payload = notificationResponse.payload!;

      try {
        final payloadData = json.decode(payload);
        final notificationType = payloadData['type'];

        if (notificationType == 'timer_finished') {
          // –ù–∞–≤–∏–≥–∏—Ä—É–µ–º –∫ —ç–∫—Ä–∞–Ω—É —Ç–∞–π–º–µ—Ä–æ–≤
          _navigateToTimers();
        }
      } catch (e) {
        // Silent error handling for malformed payload
      }
    }
  } catch (e) {
    // Silent error handling for production
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
final GlobalKey<NavigatorState> globalNavigatorKey = GlobalKey<NavigatorState>();

void _navigateToTimers() {
  try {
    final navigator = globalNavigatorKey.currentState;
    if (navigator != null) {
      navigator.pushNamed('/timers');
    }
  } catch (e) {
    // Silent error handling for production
  }
}

class DriftNotesApp extends StatefulWidget {
  final UserConsentService? consentService;

  const DriftNotesApp({super.key, this.consentService});

  @override
  State<DriftNotesApp> createState() => _DriftNotesAppState();
}

class _DriftNotesAppState extends State<DriftNotesApp>
    with WidgetsBindingObserver {
  final _firebaseService = FirebaseService();

  String? _pendingAction;
  StreamSubscription<Uri>? _linkSubscription;

  @override
  void initState() {
    super.initState();

    // ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å–µ—Ä–≤–∏—Å–æ–≤ –í –§–û–ù–ï
    _initializeAllServicesInBackground();

    WeatherNotificationService.setNavigatorKey(globalNavigatorKey);

    _initializeQuickActions();
    _initializeDeepLinkHandling();
    _checkDocumentUpdatesAfterAuth();
    _setupNotificationHandlers();

    WidgetsBinding.instance.addPostFrameCallback((_) {
      _initializeScheduledReminderContext();
      _initializeSubscriptionProvider();
    });
  }

  // ‚úÖ –ù–û–í–´–ô –ú–ï–¢–û–î: –§–æ–Ω–æ–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ UI
  void _initializeAllServicesInBackground() {
    // –ó–∞–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ –º–∏–∫—Ä–æ—Ç–∞—Å–∫ —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–≤—ã–π –∫–∞–¥—Ä
    Future.microtask(() async {
      await _initializeAllServicesAsync();
    });
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SubscriptionProvider
  void _initializeSubscriptionProvider() {
    try {
      final subscriptionProvider = Provider.of<SubscriptionProvider>(context, listen: false);

      // ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º FirebaseService –ü–ï–†–ï–î –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
      subscriptionProvider.setFirebaseService(_firebaseService);

      subscriptionProvider.initialize().then((_) {
        // Silent success
      }).catchError((error) {
        // Silent error handling
      });
    } catch (e) {
      // Silent error handling for production
    }
  }

  @override
  void dispose() {
    _linkSubscription?.cancel();

    try {
      NotificationService().dispose();
      LocalPushNotificationService().dispose();
      WeatherNotificationService().dispose();
      ScheduledReminderService().dispose();
      TimerService().dispose();
    } catch (e) {
      // Silent error handling for production
    }

    super.dispose();
  }

  void _initializeScheduledReminderContext() {
    try {
      if (globalNavigatorKey.currentContext != null) {
        ScheduledReminderService().setContext(globalNavigatorKey.currentContext!);
        _ensureNotificationHandlerIsActive();
      }
    } catch (e) {
      // Silent error handling for production
    }
  }

  void _ensureNotificationHandlerIsActive() {
    try {
      _setupNotificationHandlers();
    } catch (e) {
      // Silent error handling for production
    }
  }

  void _setupNotificationHandlers() {
    try {
      final pushService = LocalPushNotificationService();

      pushService.notificationTapStream.listen(
            (payload) {
          _handleNotificationTap(payload);
        },
        onError: (error) {
          // Silent error handling
        },
      );
    } catch (e) {
      _setupAlternativeNotificationHandler();
    }
  }

  void _setupAlternativeNotificationHandler() {
    Future.delayed(const Duration(seconds: 1), () {
      try {
        final pushService = LocalPushNotificationService();
        pushService.notificationTapStream.listen((payload) {
          _handleNotificationTap(payload);
        });
      } catch (e) {
        // Silent error handling for production
      }
    });
  }

  void _handleNotificationTap(String payload) {
    try {
      if (globalNavigatorKey.currentContext == null) {
        return;
      }

      try {
        final payloadData = json.decode(payload);
        final notificationType = payloadData['type'];
        final notificationId = payloadData['id'];

        if (notificationType == 'timer_finished') {
          _handleTimerNotification(payloadData);
        } else if (notificationType == 'NotificationType.tournamentReminder') {
          _handleTournamentNotification(notificationId);
        } else if (notificationType == 'NotificationType.fishingReminder') {
          _navigateToFishingCalendar();
        } else {
          _navigateToNotifications();
        }
      } catch (e) {
        _navigateToNotifications();
      }
    } catch (e) {
      // Silent error handling for production
    }
  }

  void _handleTimerNotification(Map<String, dynamic> payloadData) {
    try {
      _navigateToTimers();
    } catch (e) {
      _navigateToNotifications();
    }
  }

  void _navigateToTimers() {
    globalNavigatorKey.currentState?.pushNamed('/timers');
  }

  void _handleTournamentNotification(String notificationId) {
    try {
      final notificationService = NotificationService();
      final notifications = notificationService.getAllNotifications();

      final notification = notifications.firstWhere(
            (n) => n.id == notificationId,
        orElse: () => throw Exception('Notification not found'),
      );

      final sourceId = notification.data['sourceId'] as String?;

      if (sourceId != null && sourceId.isNotEmpty) {
        _navigateToTournamentDetail(sourceId);
      } else {
        _navigateToNotifications();
      }
    } catch (e) {
      _navigateToNotifications();
    }
  }

  void _navigateToNotifications() {
    globalNavigatorKey.currentState?.pushNamed('/notifications');
  }

  void _navigateToTournamentDetail(String tournamentId) {
    try {
      final tournamentService = TournamentService();
      final tournament = tournamentService.getTournamentById(tournamentId);

      if (tournament == null) {
        _navigateToNotifications();
        return;
      }

      if (globalNavigatorKey.currentContext == null) {
        return;
      }

      Navigator.of(globalNavigatorKey.currentContext!).push(
        MaterialPageRoute(
          builder: (context) => TournamentDetailScreen(tournament: tournament),
        ),
      );
    } catch (e) {
      _navigateToNotifications();
    }
  }

  void _navigateToFishingCalendar() {
    globalNavigatorKey.currentState?.pushNamed('/fishing_calendar');
  }

  void _checkDocumentUpdatesAfterAuth() {
    FirebaseAuth.instance.authStateChanges().listen((user) {
      if (user != null && widget.consentService != null) {
        WidgetsBinding.instance.addPostFrameCallback((_) {
          _initializeScheduledReminderContext();
        });
      }
    });
  }

  void _initializeQuickActions() {
    try {
      const QuickActions quickActions = QuickActions();

      quickActions.setShortcutItems(<ShortcutItem>[
        const ShortcutItem(
          type: 'create_note',
          localizedTitle: '–°–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É',
        ),
        const ShortcutItem(type: 'view_notes', localizedTitle: '–ú–æ–∏ –∑–∞–º–µ—Ç–∫–∏'),
        const ShortcutItem(type: 'timers', localizedTitle: '–¢–∞–π–º–µ—Ä—ã'),
      ]).catchError((error) {
        // Silent error handling
      });

      quickActions.initialize((String shortcutType) {
        _handleShortcutAction(shortcutType);
      });
    } catch (e) {
      // Silent error handling for production
    }
  }

  void _initializeDeepLinkHandling() {
    final appLinks = AppLinks();

    appLinks.uriLinkStream.listen(
          (Uri uri) {
        _handleDeepLink(uri);
      },
      onError: (err) {
        // Silent error handling
      },
    );

    _handleInitialLink();
  }

  Future<void> _handleInitialLink() async {
    try {
      final appLinks = AppLinks();
      final initialLink = await appLinks.getInitialLink();
      if (initialLink != null) {
        _handleDeepLink(initialLink);
      }
    } catch (e) {
      // Silent error handling for production
    }
  }

  void _handleDeepLink(Uri uri) {
    if (uri.scheme == 'driftnotes') {
      switch (uri.host) {
        case 'create_note':
          _handleShortcutAction('create_note');
          break;
        case 'view_notes':
          _handleShortcutAction('view_notes');
          break;
        case 'timers':
          _handleShortcutAction('timers');
          break;
      }
    }
  }

  void _handleShortcutAction(String actionType) {
    if (globalNavigatorKey.currentContext == null) {
      _pendingAction = actionType;
      return;
    }

    if (!_firebaseService.isUserLoggedIn) {
      _pendingAction = actionType;
      globalNavigatorKey.currentState?.pushNamedAndRemoveUntil(
        '/auth_selection',
            (route) => false,
      );
      return;
    }

    _executeAction(actionType);
  }

  void _executeAction(String actionType) {
    switch (actionType) {
      case 'create_note':
        _navigateToCreateNote();
        break;
      case 'view_notes':
        _navigateToViewNotes();
        break;
      case 'timers':
        _navigateToTimersFromShortcut();
        break;
    }

    _pendingAction = null;
  }

  void _navigateToCreateNote() {
    globalNavigatorKey.currentState?.pushNamedAndRemoveUntil(
      '/home',
          (route) => false,
    );

    Future.delayed(const Duration(milliseconds: 500), () {
      if (globalNavigatorKey.currentContext != null) {
        Navigator.of(globalNavigatorKey.currentContext!).push(
          MaterialPageRoute(
            builder: (context) => const FishingTypeSelectionScreen(),
          ),
        );
      }
    });
  }

  void _navigateToViewNotes() {
    globalNavigatorKey.currentState?.pushNamedAndRemoveUntil(
      '/home',
          (route) => false,
    );

    Future.delayed(const Duration(milliseconds: 500), () {
      if (globalNavigatorKey.currentContext != null) {
        Navigator.of(globalNavigatorKey.currentContext!).push(
          MaterialPageRoute(
            builder: (context) => const FishingNotesListScreen(),
          ),
        );
      }
    });
  }

  void _navigateToTimersFromShortcut() {
    globalNavigatorKey.currentState?.pushNamedAndRemoveUntil(
      '/home',
          (route) => false,
    );

    Future.delayed(const Duration(milliseconds: 500), () {
      if (globalNavigatorKey.currentContext != null) {
        Navigator.of(globalNavigatorKey.currentContext!).push(
          MaterialPageRoute(
            builder: (context) => const TimersScreen(),
          ),
        );
      }
    });
  }

  void executePendingAction() {
    if (_pendingAction != null) {
      final action = _pendingAction!;
      _pendingAction = null;

      Future.delayed(const Duration(milliseconds: 1000), () {
        _executeAction(action);
      });
    }
  }

  @override
  void didChangeAppLifecycleState(AppLifecycleState state) {
    super.didChangeAppLifecycleState(state);

    switch (state) {
      case AppLifecycleState.resumed:
        _onAppResumed();
        break;
      case AppLifecycleState.paused:
        _onAppPaused();
        break;
      case AppLifecycleState.detached:
        _onAppDetached();
        break;
      default:
        break;
    }
  }

  void _onAppResumed() {
    try {
      final notificationService = NotificationService();
      final unreadCount = notificationService.getUnreadCount();

      if (unreadCount == 0) {
        final pushService = LocalPushNotificationService();
        pushService.clearBadge();
      }

      _initializeScheduledReminderContext();
    } catch (e) {
      // Silent error handling for production
    }
  }

  void _onAppPaused() {
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –ø–∞—É–∑–µ
  }

  void _onAppDetached() {
    // –†–µ—Å—É—Ä—Å—ã –æ—Å–≤–æ–±–æ–∂–¥–∞—é—Ç—Å—è –≤ dispose()
  }

  @override
  Widget build(BuildContext context) {
    return Consumer<LanguageProvider>(
      builder: (context, languageProvider, child) {
        return MaterialApp(
          navigatorKey: globalNavigatorKey,
          title: 'Drift Notes',
          debugShowCheckedModeBanner: false,

          // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
          locale: languageProvider.currentLocale,
          supportedLocales: AppLocalizations.supportedLocales(),
          localizationsDelegates: const [
            AppLocalizations.delegate,
            GlobalMaterialLocalizations.delegate,
            GlobalWidgetsLocalizations.delegate,
            GlobalCupertinoLocalizations.delegate,
          ],

          builder: (context, widget) {
            WidgetsBinding.instance.addPostFrameCallback((_) {
              try {
                ScheduledReminderService().setContext(context);
              } catch (e) {
                // Silent error handling for production
              }
            });

            return widget ?? const SizedBox();
          },

          theme: ThemeData(
            primaryColor: AppConstants.primaryColor,
            scaffoldBackgroundColor: AppConstants.backgroundColor,
            textTheme: GoogleFonts.montserratTextTheme(
              Theme.of(context).textTheme.apply(
                bodyColor: AppConstants.textColor,
                displayColor: AppConstants.textColor,
              ),
            ),
            appBarTheme: AppBarTheme(
              backgroundColor: Colors.transparent,
              foregroundColor: AppConstants.textColor,
              elevation: 0,
              systemOverlayStyle: SystemUiOverlayStyle.light,
              titleTextStyle: GoogleFonts.montserrat(
                fontSize: 24,
                fontWeight: FontWeight.bold,
                color: AppConstants.textColor,
              ),
              iconTheme: IconThemeData(color: AppConstants.textColor),
            ),
            cardTheme: CardThemeData(
              color: AppConstants.cardColor,
              elevation: 4,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(
                  AppConstants.borderRadiusMedium,
                ),
              ),
              shadowColor: Colors.black.withValues(alpha: 0.2),
            ),
            colorScheme: ColorScheme.dark(
              primary: AppConstants.primaryColor,
              secondary: AppConstants.accentColor,
              surface: AppConstants.surfaceColor,
              onPrimary: AppConstants.textColor,
              onSecondary: Colors.black,
              onSurface: AppConstants.textColor,
              surfaceContainerHighest: AppConstants.backgroundColor,
            ),
            elevatedButtonTheme: ElevatedButtonThemeData(
              style: ElevatedButton.styleFrom(
                backgroundColor: AppConstants.primaryColor,
                foregroundColor: AppConstants.textColor,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(
                    AppConstants.borderRadiusMedium,
                  ),
                ),
                padding: const EdgeInsets.symmetric(vertical: 16),
                elevation: 0,
              ),
            ),
            textButtonTheme: TextButtonThemeData(
              style: TextButton.styleFrom(
                foregroundColor: AppConstants.textColor,
                textStyle: const TextStyle(fontWeight: FontWeight.w500),
              ),
            ),
            inputDecorationTheme: InputDecorationTheme(
              filled: true,
              fillColor: AppConstants.surfaceColor,
              hintStyle: TextStyle(
                color: AppConstants.textColor.withValues(alpha: 0.5),
              ),
              border: OutlineInputBorder(
                borderRadius: BorderRadius.circular(
                  AppConstants.borderRadiusSmall,
                ),
                borderSide: BorderSide.none,
              ),
              focusedBorder: OutlineInputBorder(
                borderRadius: BorderRadius.circular(
                  AppConstants.borderRadiusSmall,
                ),
                borderSide: BorderSide(color: AppConstants.textColor),
              ),
              errorBorder: OutlineInputBorder(
                borderRadius: BorderRadius.circular(
                  AppConstants.borderRadiusSmall,
                ),
                borderSide: const BorderSide(color: Colors.redAccent),
              ),
              contentPadding: const EdgeInsets.symmetric(
                horizontal: 16,
                vertical: 16,
              ),
            ),
            pageTransitionsTheme: const PageTransitionsTheme(
              builders: {
                TargetPlatform.android: CupertinoPageTransitionsBuilder(),
                TargetPlatform.iOS: CupertinoPageTransitionsBuilder(),
              },
            ),
          ),

          home: SplashScreenWithPendingAction(
            onAppReady: () {
              if (_pendingAction != null) {
                Future.delayed(const Duration(milliseconds: 500), () {
                  _handleShortcutAction(_pendingAction!);
                });
              }
            },
          ),

          routes: {
            '/splash': (context) => const SplashScreen(),
            '/auth_selection': (context) => AuthSelectionScreenWithCallback(
              onAuthSuccess: () => executePendingAction(),
            ),
            '/login': (context) => LoginScreenWithCallback(
              onAuthSuccess: () => executePendingAction(),
            ),
            '/register': (context) => RegisterScreenWithCallback(
              onAuthSuccess: () => executePendingAction(),
            ),
            '/home': (context) => const HomeScreen(),
            '/forgot_password': (context) => const ForgotPasswordScreen(),
            '/help_contact': (context) => const HelpContactScreen(),
            '/settings/accepted_agreements': (context) => const AcceptedAgreementsScreen(),
            '/timers': (context) => const TimersScreen(),
          },
        );
      },
    );
  }
}

// –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è SplashScreen —Å –∫–æ–ª–ª–±—ç–∫–æ–º
class SplashScreenWithPendingAction extends StatefulWidget {
  final VoidCallback onAppReady;

  const SplashScreenWithPendingAction({super.key, required this.onAppReady});

  @override
  State<SplashScreenWithPendingAction> createState() =>
      _SplashScreenWithPendingActionState();
}

class _SplashScreenWithPendingActionState
    extends State<SplashScreenWithPendingAction> {
  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addPostFrameCallback((_) {
      widget.onAppReady();
    });
  }

  @override
  Widget build(BuildContext context) {
    return const SplashScreen();
  }
}

// –û–±–µ—Ä—Ç–∫–∏ –¥–ª—è —ç–∫—Ä–∞–Ω–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å –∫–æ–ª–ª–±—ç–∫–∞–º–∏
class AuthSelectionScreenWithCallback extends StatelessWidget {
  final VoidCallback onAuthSuccess;

  const AuthSelectionScreenWithCallback({
    super.key,
    required this.onAuthSuccess,
  });

  @override
  Widget build(BuildContext context) {
    return AuthSelectionScreen(onAuthSuccess: onAuthSuccess);
  }
}

class LoginScreenWithCallback extends StatelessWidget {
  final VoidCallback onAuthSuccess;

  const LoginScreenWithCallback({super.key, required this.onAuthSuccess});

  @override
  Widget build(BuildContext context) {
    return LoginScreen(onAuthSuccess: onAuthSuccess);
  }
}

class RegisterScreenWithCallback extends StatelessWidget {
  final VoidCallback onAuthSuccess;

  const RegisterScreenWithCallback({super.key, required this.onAuthSuccess});

  @override
  Widget build(BuildContext context) {
    return RegisterScreen(onAuthSuccess: onAuthSuccess);
  }
}