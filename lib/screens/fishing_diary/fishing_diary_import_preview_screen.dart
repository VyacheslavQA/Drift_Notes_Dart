// –ü—É—Ç—å: lib/screens/fishing_diary/fishing_diary_import_preview_screen.dart

import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import 'package:provider/provider.dart';
import '../../constants/app_constants.dart';
import '../../models/fishing_diary_model.dart';
import '../../services/fishing_diary_share/fishing_diary_sharing_service.dart';
import '../../repositories/fishing_diary_repository.dart';
import '../../providers/subscription_provider.dart';
import '../../localization/app_localizations.dart';
import '../../widgets/loading_overlay.dart';
import '../subscription/paywall_screen.dart';
import '../../constants/subscription_constants.dart';
import 'fishing_diary_list_screen.dart';

class FishingDiaryImportPreviewScreen extends StatefulWidget {
  final DiaryImportResult importResult;
  final String sourceFilePath;

  const FishingDiaryImportPreviewScreen({
    super.key,
    required this.importResult,
    required this.sourceFilePath,
  });

  @override
  State<FishingDiaryImportPreviewScreen> createState() => _FishingDiaryImportPreviewScreenState();
}

class _FishingDiaryImportPreviewScreenState extends State<FishingDiaryImportPreviewScreen> {
  final _fishingDiaryRepository = FishingDiaryRepository();
  final _nameController = TextEditingController();

  bool _isLoading = false;
  bool _nameConflict = false;
  List<FishingDiaryModel> _existingEntries = [];

  @override
  void initState() {
    super.initState();
    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º title –≤–º–µ—Å—Ç–æ waterBodyName
    _nameController.text = widget.importResult.diaryEntry?.title ?? '';
    _loadExistingEntries();
    _checkPremiumAccess();
  }

  @override
  void dispose() {
    _nameController.dispose();
    super.dispose();
  }

  /// üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ Premium –¥–æ—Å—Ç—É–ø–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  void _checkPremiumAccess() {
    WidgetsBinding.instance.addPostFrameCallback((_) {
      final subscriptionProvider = Provider.of<SubscriptionProvider>(context, listen: false);

      if (!subscriptionProvider.hasPremiumAccess) {
        debugPrint('üö´ –î–æ—Å—Ç—É–ø –∫ –∏–º–ø–æ—Ä—Ç—É –∑–∞–ø–∏—Å–µ–π –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º PaywallScreen');

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º PaywallScreen –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∑–∞–ø–∏—Å–µ–π
        Navigator.pushReplacement(
          context,
          MaterialPageRoute(
            builder: (context) => const PaywallScreen(
              contentType: 'fishing_diary_sharing',
              blockedFeature: '–ò–º–ø–æ—Ä—Ç –∑–∞–ø–∏—Å–µ–π –¥–Ω–µ–≤–Ω–∏–∫–∞',
            ),
          ),
        );
      }
    });
  }

  /// –ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –∏–º–µ–Ω
  Future<void> _loadExistingEntries() async {
    try {
      setState(() => _isLoading = true);

      // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞
      _existingEntries = await _fishingDiaryRepository.getUserFishingDiaryEntries();
      _checkNameConflict();

    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π: $e');
    } finally {
      setState(() => _isLoading = false);
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –∏–º–µ–Ω
  void _checkNameConflict() {
    final currentName = _nameController.text.trim();
    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º title –≤–º–µ—Å—Ç–æ waterBodyName
    final hasConflict = _existingEntries.any((entry) =>
    entry.title.toLowerCase() == currentName.toLowerCase());

    setState(() {
      _nameConflict = hasConflict;
    });
  }

  /// üöÄ –ò–º–ø–æ—Ä—Ç –∑–∞–ø–∏—Å–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
  Future<void> _importEntry() async {
    final localizations = AppLocalizations.of(context);

    if (_nameController.text.trim().isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏–∑–º–µ–Ω–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
          content: Text(localizations.translate('enter_entry_title')),
          backgroundColor: Colors.red,
        ),
      );
      return;
    }

    // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ Premium –¥–æ—Å—Ç—É–ø–∞
    final subscriptionProvider = Provider.of<SubscriptionProvider>(context, listen: false);
    if (!subscriptionProvider.hasPremiumAccess) {
      Navigator.pushReplacement(
        context,
        MaterialPageRoute(
          builder: (context) => const PaywallScreen(
            contentType: 'fishing_diary_sharing',
            blockedFeature: '–ò–º–ø–æ—Ä—Ç –∑–∞–ø–∏—Å–µ–π –¥–Ω–µ–≤–Ω–∏–∫–∞',
          ),
        ),
      );
      return;
    }

    setState(() => _isLoading = true);

    try {
      // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º title –≤–º–µ—Å—Ç–æ waterBodyName
      final updatedEntry = widget.importResult.diaryEntry!.copyWith(
        title: _nameController.text.trim(),
      );

      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
      final success = await FishingDiarySharingService.importDiaryEntry(
        diaryEntry: updatedEntry,
        onImport: (entry) async {
          // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞
          await _fishingDiaryRepository.addFishingDiaryEntry(entry);
        },
      );

      if (success && mounted) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
        try {
          await subscriptionProvider.refreshUsageData();
        } catch (e) {
          debugPrint('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏: $e');
        }

        debugPrint('‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ø–∏—Å–∫—É –∑–∞–ø–∏—Å–µ–π');

        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ø–∏—Å–∫—É –∑–∞–ø–∏—Å–µ–π
        Navigator.pushAndRemoveUntil(
          context,
          MaterialPageRoute(
            builder: (context) => const FishingDiaryListScreen(),
          ),
              (route) => false, // –û—á–∏—â–∞–µ–º –≤–µ—Å—å —Å—Ç–µ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        );

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∏–º–ø–æ—Ä—Ç–µ
        Future.delayed(const Duration(milliseconds: 500), () {
          if (mounted) {
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(
                content: Text(localizations.translate('entry_imported_successfully')),
                backgroundColor: Colors.green,
                duration: const Duration(seconds: 3),
              ),
            );
          }
        });

      } else if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(localizations.translate('import_error')),
            backgroundColor: Colors.red,
          ),
        );
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: $e');
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('${localizations.translate('import_error')}: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    } finally {
      if (mounted) {
        setState(() => _isLoading = false);
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    final localizations = AppLocalizations.of(context);
    final importResult = widget.importResult;

    if (!importResult.isSuccess || importResult.diaryEntry == null) {
      return Scaffold(
        backgroundColor: AppConstants.backgroundColor,
        appBar: AppBar(
          title: Text(
            localizations.translate('import_error'),
            style: TextStyle(color: AppConstants.textColor),
          ),
          backgroundColor: AppConstants.backgroundColor,
          elevation: 0,
        ),
        body: Center(
          child: Padding(
            padding: const EdgeInsets.all(20),
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Icon(
                  Icons.error_outline,
                  color: Colors.red,
                  size: 64,
                ),
                const SizedBox(height: 20),
                Text(
                  importResult.error ?? localizations.translate('unknown_error'),
                  style: TextStyle(
                    color: AppConstants.textColor,
                    fontSize: 16,
                  ),
                  textAlign: TextAlign.center,
                ),
                const SizedBox(height: 30),
                ElevatedButton(
                  onPressed: () => Navigator.pop(context),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: AppConstants.primaryColor,
                  ),
                  child: Text(
                    localizations.translate('close'),
                    style: TextStyle(color: AppConstants.textColor),
                  ),
                ),
              ],
            ),
          ),
        ),
      );
    }

    final diaryEntry = importResult.diaryEntry!;

    return Scaffold(
      backgroundColor: AppConstants.backgroundColor,
      appBar: AppBar(
        title: Text(
          localizations.translate('import_diary_entry'),
          style: TextStyle(
            color: AppConstants.textColor,
            fontWeight: FontWeight.bold,
          ),
        ),
        backgroundColor: AppConstants.backgroundColor,
        elevation: 0,
        leading: IconButton(
          icon: Icon(Icons.arrow_back, color: AppConstants.textColor),
          onPressed: () => Navigator.pop(context, false),
        ),
      ),
      body: LoadingOverlay(
        isLoading: _isLoading,
        message: localizations.translate('importing_entry'),
        child: SingleChildScrollView(
          padding: const EdgeInsets.all(16),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // üìã –ö–∞—Ä—Ç–æ—á–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∞–π–ª–µ
              _buildFileInfoCard(),

              const SizedBox(height: 16),

              // ‚úèÔ∏è –ü–æ–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
              _buildNameEditField(),

              const SizedBox(height: 20),

              // üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø–∏—Å–∏
              _buildEntryStatistics(),

              const SizedBox(height: 20),

              // üìù –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
              if (diaryEntry.description.isNotEmpty)
                _buildDescriptionCard(),

              const SizedBox(height: 100), // –û—Ç—Å—Ç—É–ø –¥–ª—è –∫–Ω–æ–ø–∫–∏
            ],
          ),
        ),
      ),
      floatingActionButton: FloatingActionButton.extended(
        onPressed: _nameController.text.trim().isNotEmpty ? _importEntry : null,
        backgroundColor: _nameController.text.trim().isNotEmpty
            ? AppConstants.primaryColor
            : Colors.grey,
        foregroundColor: AppConstants.textColor,
        icon: const Icon(Icons.download),
        label: Text(
          localizations.translate('import_entry'),
          style: const TextStyle(fontWeight: FontWeight.bold),
        ),
      ),
    );
  }

  /// üìã –ö–∞—Ä—Ç–æ—á–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∞–π–ª–µ
  Widget _buildFileInfoCard() {
    final localizations = AppLocalizations.of(context);
    final importResult = widget.importResult;

    return Card(
      color: AppConstants.cardColor,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Container(
                  padding: const EdgeInsets.all(8),
                  decoration: BoxDecoration(
                    color: AppConstants.primaryColor.withOpacity(0.2),
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: Icon(
                    Icons.file_download,
                    color: AppConstants.primaryColor,
                    size: 24,
                  ),
                ),
                const SizedBox(width: 12),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        localizations.translate('received_diary_entry'),
                        style: TextStyle(
                          color: AppConstants.textColor,
                          fontSize: 18,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      if (importResult.originalFileName != null)
                        Text(
                          importResult.originalFileName!,
                          style: TextStyle(
                            color: AppConstants.textColor.withOpacity(0.7),
                            fontSize: 14,
                          ),
                        ),
                    ],
                  ),
                ),
              ],
            ),

            if (importResult.exportDate != null) ...[
              const SizedBox(height: 12),
              Row(
                children: [
                  Icon(
                    Icons.schedule,
                    color: AppConstants.textColor.withOpacity(0.7),
                    size: 16,
                  ),
                  const SizedBox(width: 6),
                  Text(
                    '${localizations.translate('exported')}: ${DateFormat('dd.MM.yyyy HH:mm').format(importResult.exportDate!)}',
                    style: TextStyle(
                      color: AppConstants.textColor.withOpacity(0.7),
                      fontSize: 14,
                    ),
                  ),
                ],
              ),
            ],
          ],
        ),
      ),
    );
  }

  /// ‚úèÔ∏è –ü–æ–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
  Widget _buildNameEditField() {
    final localizations = AppLocalizations.of(context);

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏–∑–º–µ–Ω–∏–ª–∏ label
        Text(
          localizations.translate('entry_title'),
          style: TextStyle(
            color: AppConstants.textColor,
            fontSize: 16,
            fontWeight: FontWeight.w600,
          ),
        ),
        const SizedBox(height: 8),
        TextField(
          controller: _nameController,
          style: TextStyle(color: AppConstants.textColor),
          decoration: InputDecoration(
            // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏–∑–º–µ–Ω–∏–ª–∏ hint
            hintText: localizations.translate('enter_entry_title'),
            hintStyle: TextStyle(
              color: AppConstants.textColor.withOpacity(0.5),
            ),
            filled: true,
            fillColor: AppConstants.cardColor,
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(8),
              borderSide: BorderSide(
                color: _nameConflict ? Colors.orange : AppConstants.primaryColor.withOpacity(0.3),
              ),
            ),
            enabledBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(8),
              borderSide: BorderSide(
                color: _nameConflict ? Colors.orange : AppConstants.primaryColor.withOpacity(0.3),
              ),
            ),
            focusedBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(8),
              borderSide: BorderSide(
                color: _nameConflict ? Colors.orange : AppConstants.primaryColor,
              ),
            ),
            contentPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
          ),
          onChanged: (_) => _checkNameConflict(),
        ),
        if (_nameConflict) ...[
          const SizedBox(height: 4),
          Row(
            children: [
              Icon(
                Icons.warning_amber_rounded,
                color: Colors.orange,
                size: 16,
              ),
              const SizedBox(width: 6),
              Expanded(
                child: Text(
                  localizations.translate('entry_name_exists'),
                  style: TextStyle(
                    color: Colors.orange,
                    fontSize: 12,
                  ),
                ),
              ),
            ],
          ),
        ],
      ],
    );
  }

  /// üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø–∏—Å–∏
  Widget _buildEntryStatistics() {
    final localizations = AppLocalizations.of(context);
    final diaryEntry = widget.importResult.diaryEntry!;

    return Card(
      color: AppConstants.cardColor,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              localizations.translate('entry_information'),
              style: TextStyle(
                color: AppConstants.textColor,
                fontSize: 16,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 12),

            // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –º–æ–¥–µ–ª–∏
            _buildStatItem(
              icon: Icons.calendar_today,
              label: localizations.translate('created'),
              value: DateFormat('dd.MM.yyyy').format(diaryEntry.createdAt),
            ),

            _buildStatItem(
              icon: Icons.update,
              label: localizations.translate('updated'),
              value: DateFormat('dd.MM.yyyy').format(diaryEntry.updatedAt),
            ),

            if (diaryEntry.isFavorite)
              _buildStatItem(
                icon: Icons.star,
                label: localizations.translate('favorite'),
                value: localizations.translate('yes'),
              ),
          ],
        ),
      ),
    );
  }

  /// üìä –≠–ª–µ–º–µ–Ω—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  Widget _buildStatItem({
    required IconData icon,
    required String label,
    required String value,
  }) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 4),
      child: Row(
        children: [
          Icon(
            icon,
            color: AppConstants.textColor.withOpacity(0.7),
            size: 18,
          ),
          const SizedBox(width: 12),
          Text(
            '$label: ',
            style: TextStyle(
              color: AppConstants.textColor.withOpacity(0.7),
              fontSize: 14,
            ),
          ),
          Expanded(
            child: Text(
              value,
              style: TextStyle(
                color: AppConstants.textColor,
                fontSize: 14,
                fontWeight: FontWeight.w500,
              ),
            ),
          ),
        ],
      ),
    );
  }

  /// üìù –ö–∞—Ä—Ç–æ—á–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è
  Widget _buildDescriptionCard() {
    final localizations = AppLocalizations.of(context);
    final description = widget.importResult.diaryEntry!.description;

    return Card(
      color: AppConstants.cardColor,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Icon(
                  Icons.description,
                  color: AppConstants.primaryColor,
                  size: 20,
                ),
                const SizedBox(width: 8),
                Text(
                  localizations.translate('description'),
                  style: TextStyle(
                    color: AppConstants.textColor,
                    fontSize: 16,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ],
            ),
            const SizedBox(height: 12),
            Text(
              description,
              style: TextStyle(
                color: AppConstants.textColor,
                fontSize: 14,
                height: 1.4,
              ),
            ),
          ],
        ),
      ),
    );
  }
}