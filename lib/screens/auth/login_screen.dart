// –ü—É—Ç—å: lib/screens/auth/login_screen.dart

import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:crypto/crypto.dart';
import 'dart:convert';
import '../../constants/app_constants.dart';
import '../../services/firebase/firebase_service.dart';
import '../../utils/validators.dart';
import '../../localization/app_localizations.dart';

class LoginScreen extends StatefulWidget {
  final VoidCallback? onAuthSuccess;

  const LoginScreen({
    super.key,
    this.onAuthSuccess,
  });

  @override
  State<LoginScreen> createState() => _LoginScreenState();
}

class _LoginScreenState extends State<LoginScreen> {
  final _formKey = GlobalKey<FormState>();
  final _emailController = TextEditingController();
  final _passwordController = TextEditingController();
  final _firebaseService = FirebaseService();

  bool _isLoading = false;
  bool _obscurePassword = true;
  bool _rememberMe = false;
  String _errorMessage = '';

  // –ö–ª—é—á–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
  static const String _keyRememberMe = 'remember_me';
  static const String _keySavedEmail = 'saved_email';
  static const String _keySavedPassword = 'saved_password';

  @override
  void initState() {
    super.initState();
    _loadSavedCredentials();
  }

  @override
  void dispose() {
    _emailController.dispose();
    _passwordController.dispose();
    super.dispose();
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —ç–∫—Ä–∞–Ω–∞
  Future<void> _loadSavedCredentials() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final rememberMe = prefs.getBool(_keyRememberMe) ?? false;

      if (rememberMe) {
        final savedEmail = prefs.getString(_keySavedEmail) ?? '';
        final savedPasswordHash = prefs.getString(_keySavedPassword) ?? '';

        if (savedEmail.isNotEmpty && savedPasswordHash.isNotEmpty) {
          // –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –ø–∞—Ä–æ–ª—å (–≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ base64 –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ)
          try {
            final decodedPassword = utf8.decode(base64Decode(savedPasswordHash));

            setState(() {
              _emailController.text = savedEmail;
              _passwordController.text = decodedPassword;
              _rememberMe = true;
            });
          } catch (e) {
            debugPrint('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è: $e');
            // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å, –æ—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            await _clearSavedCredentials();
          }
        }
      }
    } catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: $e');
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Ö–æ–¥–∞
  Future<void> _saveCredentials(String email, String password) async {
    try {
      final prefs = await SharedPreferences.getInstance();

      if (_rememberMe) {
        // –®–∏—Ñ—Ä—É–µ–º –ø–∞—Ä–æ–ª—å (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ base64 –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ)
        final encodedPassword = base64Encode(utf8.encode(password));

        await prefs.setBool(_keyRememberMe, true);
        await prefs.setString(_keySavedEmail, email);
        await prefs.setString(_keySavedPassword, encodedPassword);

        debugPrint('–î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
      } else {
        // –ï—Å–ª–∏ —á–µ–∫–±–æ–∫—Å –Ω–µ –æ—Ç–º–µ—á–µ–Ω, –æ—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        await _clearSavedCredentials();
      }
    } catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Ö–æ–¥–∞: $e');
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  Future<void> _clearSavedCredentials() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.remove(_keyRememberMe);
      await prefs.remove(_keySavedEmail);
      await prefs.remove(_keySavedPassword);
      debugPrint('–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –æ—á–∏—â–µ–Ω—ã');
    } catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: $e');
    }
  }

  Future<void> _login() async {
    // –°–∫—Ä—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    FocusScope.of(context).unfocus();

    if (!_formKey.currentState!.validate()) return;

    setState(() {
      _isLoading = true;
      _errorMessage = '';
    });

    try {
      final email = _emailController.text.trim();
      final password = _passwordController.text;

      await _firebaseService.signInWithEmailAndPassword(
        email,
        password,
        context,
      );

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏
      await _saveCredentials(email, password);

      if (mounted) {
        final localizations = AppLocalizations.of(context);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –≤—Ö–æ–¥–µ
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(localizations.translate('login_successful')),
            backgroundColor: Colors.green,
            duration: Duration(seconds: 2),
          ),
        );

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–ª–ª–±—ç–∫ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
        if (widget.onAuthSuccess != null) {
          debugPrint('üéØ –í—ã–∑—ã–≤–∞–µ–º –∫–æ–ª–ª–±—ç–∫ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
          // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
          Navigator.of(context).pushReplacementNamed('/home');
          // –í—ã–∑—ã–≤–∞–µ–º –∫–æ–ª–ª–±—ç–∫ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
          Future.delayed(const Duration(milliseconds: 500), () {
            widget.onAuthSuccess!();
          });
        } else {
          // –û–±—ã—á–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –±–µ–∑ –∫–æ–ª–ª–±—ç–∫–∞
          Future.delayed(const Duration(milliseconds: 500), () {
            if (mounted) {
              Navigator.of(context).pushReplacementNamed('/home');
            }
          });
        }
      }
    } catch (e) {
      if (mounted) {
        setState(() {
          // –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±–∏—Ä–∞–µ–º –ø—Ä–∏—Å—Ç–∞–≤–∫—É "–û—à–∏–±–∫–∞:" –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á–∏—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          _errorMessage = e.toString();
        });
      }
    } finally {
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —ç–∫—Ä–∞–Ω–∞ –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏
    final size = MediaQuery.of(context).size;
    final textScale = MediaQuery.of(context).textScaler.scale(1.0);
    final adaptiveTextScale = textScale > 1.2 ? 1.2 / textScale : 1.0;
    final localizations = AppLocalizations.of(context);

    return Scaffold(
      body: Container(
        width: double.infinity,
        height: double.infinity,
        decoration: const BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
            colors: [
              Color(0xFF0A1F1C),  // –¢—ë–º–Ω–æ-–∑–µ–ª–µ–Ω—ã–π
              Color(0xFF071714),  // –ë–æ–ª–µ–µ —Ç—ë–º–Ω—ã–π –æ—Ç—Ç–µ–Ω–æ–∫
            ],
          ),
        ),
        child: SafeArea(
          child: Padding(
            padding: const EdgeInsets.symmetric(horizontal: 24),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" - —É–º–µ–Ω—å—à–µ–Ω–Ω—ã–π –æ—Ç—Å—Ç—É–ø
                const SizedBox(height: 16),
                IconButton(
                  icon: Icon(Icons.arrow_back, color: AppConstants.textColor),
                  onPressed: () => Navigator.pop(context),
                  padding: EdgeInsets.zero,
                  constraints: const BoxConstraints(),
                ),

                // –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤ Expanded –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
                Expanded(
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                    children: [
                      // –í–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å: –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –ª–æ–≥–æ—Ç–∏–ø
                      Column(
                        children: [
                          // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —ç–∫—Ä–∞–Ω–∞ - —É–º–µ–Ω—å—à–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä
                          Text(
                            localizations.translate('login_with_email_title'),
                            style: TextStyle(
                              fontSize: 24 * adaptiveTextScale,
                              fontWeight: FontWeight.bold,
                              color: AppConstants.textColor,
                            ),
                          ),

                          const SizedBox(height: 24),

                          // –õ–æ–≥–æ—Ç–∏–ø - –±–µ–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
                          Image.asset(
                            'assets/images/app_logo.png',
                            width: size.width * 0.22,
                            height: size.width * 0.22,
                          ),

                          const SizedBox(height: 16),

                          // –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è - —É–º–µ–Ω—å—à–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä
                          Text(
                            'Drift Notes',
                            style: TextStyle(
                              fontSize: 30 * adaptiveTextScale,
                              fontWeight: FontWeight.bold,
                              color: AppConstants.textColor,
                            ),
                          ),
                        ],
                      ),

                      // –°—Ä–µ–¥–Ω—è—è —á–∞—Å—Ç—å: —Ñ–æ—Ä–º–∞ –≤—Ö–æ–¥–∞
                      Form(
                        key: _formKey,
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            // Email –ø–æ–ª–µ - –∫–æ–º–ø–∞–∫—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è
                            TextFormField(
                              controller: _emailController,
                              style: const TextStyle(
                                color: AppConstants.textColor,
                                fontSize: 16,
                              ),
                              decoration: InputDecoration(
                                hintText: localizations.translate('email'),
                                hintStyle: TextStyle(
                                  color: AppConstants.textColor.withValues(alpha: 0.5),
                                ),
                                filled: true,
                                fillColor: const Color(0xFF12332E),
                                prefixIcon: Icon(Icons.email, color: AppConstants.textColor),
                                enabledBorder: OutlineInputBorder(
                                  borderRadius: BorderRadius.circular(12),
                                  borderSide: BorderSide.none,
                                ),
                                focusedBorder: OutlineInputBorder(
                                  borderRadius: BorderRadius.circular(12),
                                  borderSide: BorderSide(
                                    color: AppConstants.textColor,
                                    width: 1.5,
                                  ),
                                ),
                                errorBorder: OutlineInputBorder(
                                  borderRadius: BorderRadius.circular(12),
                                  borderSide: const BorderSide(
                                    color: Colors.redAccent,
                                    width: 1.5,
                                  ),
                                ),
                                focusedErrorBorder: OutlineInputBorder(
                                  borderRadius: BorderRadius.circular(12),
                                  borderSide: const BorderSide(
                                    color: Colors.redAccent,
                                    width: 1.5,
                                  ),
                                ),
                                errorStyle: const TextStyle(color: Colors.redAccent),
                                contentPadding: const EdgeInsets.symmetric(
                                  horizontal: 20,
                                  vertical: 14, // –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–π padding
                                ),
                              ),
                              validator: (value) => Validators.validateEmail(value, context),
                              textInputAction: TextInputAction.next,
                            ),

                            const SizedBox(height: 16), // –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–π –æ—Ç—Å—Ç—É–ø

                            // Password –ø–æ–ª–µ - –∫–æ–º–ø–∞–∫—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è
                            TextFormField(
                              controller: _passwordController,
                              style: const TextStyle(
                                color: AppConstants.textColor,
                                fontSize: 16,
                              ),
                              decoration: InputDecoration(
                                hintText: localizations.translate('password'),
                                hintStyle: TextStyle(
                                  color: AppConstants.textColor.withValues(alpha: 0.5),
                                ),
                                filled: true,
                                fillColor: const Color(0xFF12332E),
                                prefixIcon: Icon(Icons.lock, color: AppConstants.textColor),
                                suffixIcon: IconButton(
                                  icon: Icon(
                                    _obscurePassword ? Icons.visibility : Icons.visibility_off,
                                    color: AppConstants.textColor,
                                  ),
                                  onPressed: () {
                                    setState(() {
                                      _obscurePassword = !_obscurePassword;
                                    });
                                  },
                                ),
                                enabledBorder: OutlineInputBorder(
                                  borderRadius: BorderRadius.circular(12),
                                  borderSide: BorderSide.none,
                                ),
                                focusedBorder: OutlineInputBorder(
                                  borderRadius: BorderRadius.circular(12),
                                  borderSide: BorderSide(
                                    color: AppConstants.textColor,
                                    width: 1.5,
                                  ),
                                ),
                                errorBorder: OutlineInputBorder(
                                  borderRadius: BorderRadius.circular(12),
                                  borderSide: const BorderSide(
                                    color: Colors.redAccent,
                                    width: 1.5,
                                  ),
                                ),
                                focusedErrorBorder: OutlineInputBorder(
                                  borderRadius: BorderRadius.circular(12),
                                  borderSide: const BorderSide(
                                    color: Colors.redAccent,
                                    width: 1.5,
                                  ),
                                ),
                                errorStyle: const TextStyle(color: Colors.redAccent),
                                contentPadding: const EdgeInsets.symmetric(
                                  horizontal: 20,
                                  vertical: 14, // –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–π padding
                                ),
                              ),
                              obscureText: _obscurePassword,
                              validator: (value) => Validators.validatePassword(value, context),
                              textInputAction: TextInputAction.done,
                              onFieldSubmitted: (_) => _login(),
                            ),

                            const SizedBox(height: 12), // –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–π –æ—Ç—Å—Ç—É–ø

                            // –ß–µ–∫–±–æ–∫—Å "–ó–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è" –∏ "–ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?" –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
                            Row(
                              mainAxisAlignment: MainAxisAlignment.spaceBetween,
                              children: [
                                // –ß–µ–∫–±–æ–∫—Å "–ó–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è"
                                Row(
                                  mainAxisSize: MainAxisSize.min,
                                  children: [
                                    SizedBox(
                                      width: 20,
                                      height: 20,
                                      child: Checkbox(
                                        value: _rememberMe,
                                        onChanged: (value) {
                                          setState(() {
                                            _rememberMe = value ?? false;
                                          });
                                        },
                                        activeColor: AppConstants.primaryColor,
                                        checkColor: AppConstants.textColor,
                                        side: BorderSide(
                                          color: AppConstants.textColor.withValues(alpha: 0.5),
                                          width: 1.5,
                                        ),
                                      ),
                                    ),
                                    const SizedBox(width: 6),
                                    GestureDetector(
                                      onTap: () {
                                        setState(() {
                                          _rememberMe = !_rememberMe;
                                        });
                                      },
                                      child: Text(
                                        localizations.translate('remember_me'),
                                        style: TextStyle(
                                          color: AppConstants.textColor,
                                          fontSize: 13 * adaptiveTextScale,
                                        ),
                                      ),
                                    ),
                                  ],
                                ),

                                // –°—Å—ã–ª–∫–∞ "–ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?"
                                TextButton(
                                  onPressed: () {
                                    Navigator.pushNamed(context, '/forgot_password');
                                  },
                                  style: TextButton.styleFrom(
                                    foregroundColor: AppConstants.textColor,
                                    padding: EdgeInsets.zero,
                                    minimumSize: Size.zero,
                                    tapTargetSize: MaterialTapTargetSize.shrinkWrap,
                                  ),
                                  child: Text(
                                    localizations.translate('forgot_password'),
                                    style: TextStyle(
                                      fontSize: 13 * adaptiveTextScale,
                                    ),
                                  ),
                                ),
                              ],
                            ),
                          ],
                        ),
                      ),

                      // –ù–∏–∂–Ω—è—è —á–∞—Å—Ç—å: –æ—à–∏–±–∫–∞ –∏ –∫–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞
                      Column(
                        children: [
                          // –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ - –∫–æ–º–ø–∞–∫—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è
                          if (_errorMessage.isNotEmpty)
                            Container(
                              padding: const EdgeInsets.all(10),
                              margin: const EdgeInsets.only(bottom: 16),
                              decoration: BoxDecoration(
                                color: Colors.red.withValues(alpha: 0.1),
                                borderRadius: BorderRadius.circular(10),
                              ),
                              child: Text(
                                _errorMessage,
                                style: TextStyle(
                                  color: Colors.redAccent,
                                  fontSize: 13 * adaptiveTextScale,
                                ),
                                textAlign: TextAlign.center,
                              ),
                            ),

                          // –ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞ - –∫–æ–º–ø–∞–∫—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è
                          SizedBox(
                            width: double.infinity,
                            height: 50, // –£–º–µ–Ω—å—à–µ–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞
                            child: ElevatedButton(
                              onPressed: _isLoading ? null : _login,
                              style: ElevatedButton.styleFrom(
                                backgroundColor: Colors.transparent,
                                foregroundColor: AppConstants.textColor,
                                side: BorderSide(color: AppConstants.textColor),
                                shape: RoundedRectangleBorder(
                                  borderRadius: BorderRadius.circular(25),
                                ),
                                padding: EdgeInsets.zero,
                                disabledBackgroundColor: Colors.transparent,
                                elevation: 0,
                              ),
                              child: _isLoading
                                  ? SizedBox(
                                width: 20,
                                height: 20,
                                child: CircularProgressIndicator(
                                  strokeWidth: 2,
                                  valueColor: AlwaysStoppedAnimation<Color>(
                                    AppConstants.textColor,
                                  ),
                                ),
                              )
                                  : Text(
                                localizations.translate('login'),
                                style: TextStyle(
                                  fontSize: 16 * adaptiveTextScale,
                                  fontWeight: FontWeight.bold,
                                ),
                              ),
                            ),
                          ),

                          const SizedBox(height: 16),

                          // –°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
                          Row(
                            mainAxisAlignment: MainAxisAlignment.center,
                            children: [
                              Text(
                                localizations.translate('no_account_register').split('?')[0] + '? ',
                                style: TextStyle(
                                  color: AppConstants.textColor.withValues(alpha: 0.7),
                                  fontSize: 14 * adaptiveTextScale,
                                ),
                              ),
                              GestureDetector(
                                onTap: () {
                                  Navigator.pushReplacementNamed(context, '/register');
                                },
                                child: Text(
                                  localizations.translate('no_account_register').split('? ')[1],
                                  style: TextStyle(
                                    color: AppConstants.textColor,
                                    fontSize: 14 * adaptiveTextScale,
                                    fontWeight: FontWeight.bold,
                                    decoration: TextDecoration.underline,
                                  ),
                                ),
                              ),
                            ],
                          ),
                        ],
                      ),
                    ],
                  ),
                ),

                const SizedBox(height: 16), // –ù–∏–∂–Ω–∏–π –æ—Ç—Å—Ç—É–ø
              ],
            ),
          ),
        ),
      ),
    );
  }
}