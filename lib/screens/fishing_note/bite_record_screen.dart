// –ü—É—Ç—å: lib/screens/fishing_note/bite_record_screen.dart

import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import 'package:uuid/uuid.dart';
import '../../constants/app_constants.dart';
import '../../constants/responsive_constants.dart';
import '../../utils/responsive_utils.dart';
import '../../models/fishing_note_model.dart';
import '../../widgets/loading_overlay.dart';
import '../../services/firebase/firebase_service.dart';
import '../../localization/app_localizations.dart';

class BiteRecordScreen extends StatefulWidget {
  final BiteRecord? initialRecord; // –ü–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  final int dayIndex; // –î–æ–±–∞–≤–ª–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–Ω—è
  final DateTime? fishingStartDate; // –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ —Ä—ã–±–∞–ª–∫–∏
  final DateTime?
  fishingEndDate; // –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä—ã–±–∞–ª–∫–∏ (–º–æ–∂–µ—Ç –±—ã—Ç—å null –¥–ª—è –æ–¥–Ω–æ–¥–Ω–µ–≤–Ω–æ–π)
  final bool isMultiDay; // –§–ª–∞–≥ –º–Ω–æ–≥–æ–¥–Ω–µ–≤–Ω–æ–π —Ä—ã–±–∞–ª–∫–∏

  const BiteRecordScreen({
    super.key,
    this.initialRecord,
    this.dayIndex = 0,
    this.fishingStartDate,
    this.fishingEndDate,
    this.isMultiDay = false,
  });

  @override
  State<BiteRecordScreen> createState() => _BiteRecordScreenState();
}

class _BiteRecordScreenState extends State<BiteRecordScreen>
    with WidgetsBindingObserver {
  final _formKey = GlobalKey<FormState>();
  late TextEditingController _fishTypeController;
  late TextEditingController _weightController;
  late TextEditingController _lengthController;
  late TextEditingController _notesController;
  final _firebaseService = FirebaseService();

  DateTime _selectedTime = DateTime.now();
  bool _isLoading = false;
  bool _isEditing = false;

  // –ù–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –¥–Ω–µ–π
  late int _selectedDayIndex;
  final List<DateTime> _fishingDays = [];
  int _totalFishingDays = 1;

  // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–π –¥–∞—Ç—ã
  DateTime? _lastCheckedDate;

  @override
  void initState() {
    super.initState();
    _isEditing = widget.initialRecord != null;

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∑–∞ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    WidgetsBinding.instance.addObserver(this);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤
    _fishTypeController = TextEditingController(
      text: _isEditing ? widget.initialRecord!.fishType : '',
    );

    _weightController = TextEditingController(
      text:
      _isEditing && widget.initialRecord!.weight > 0
          ? widget.initialRecord!.weight.toString()
          : '',
    );

    _lengthController = TextEditingController(
      text:
      _isEditing && widget.initialRecord!.length > 0
          ? widget.initialRecord!.length.toString()
          : '',
    );

    _notesController = TextEditingController(
      text: _isEditing ? widget.initialRecord!.notes : '',
    );

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
    if (_isEditing) {
      _selectedTime = widget.initialRecord!.time;
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–Ω–µ–π —Ä—ã–±–∞–ª–∫–∏ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –¥–Ω—è
    _initializeFishingDays();

    // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
    _lastCheckedDate = DateTime.now();
  }

  @override
  void dispose() {
    // –£–¥–∞–ª—è–µ–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏ –≤–∏–¥–∂–µ—Ç–∞
    WidgetsBinding.instance.removeObserver(this);
    _fishTypeController.dispose();
    _weightController.dispose();
    _lengthController.dispose();
    _notesController.dispose();
    super.dispose();
  }

  // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  @override
  void didChangeAppLifecycleState(AppLifecycleState state) {
    super.didChangeAppLifecycleState(state);

    // –ö–æ–≥–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if (state == AppLifecycleState.resumed) {
      _checkForDateChange();
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–º–µ–Ω—ã –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –¥–Ω—è
  void _checkForDateChange() {
    if (_lastCheckedDate == null || _isEditing) return;

    final now = DateTime.now();
    final nowDate = DateTime(now.year, now.month, now.day);
    final lastDate = DateTime(
      _lastCheckedDate!.year,
      _lastCheckedDate!.month,
      _lastCheckedDate!.day,
    );

    // –ï—Å–ª–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –¥–µ–Ω—å –∏–∑–º–µ–Ω–∏–ª—Å—è
    if (!nowDate.isAtSameMomentAs(lastDate)) {
      debugPrint(
        'üóìÔ∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å–º–µ–Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –¥–Ω—è: ${DateFormat('dd.MM.yyyy').format(lastDate)} ‚Üí ${DateFormat('dd.MM.yyyy').format(nowDate)}',
      );

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—É—é –¥–∞—Ç—É
      _lastCheckedDate = now;

      // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å —Ä—ã–±–∞–ª–∫–∏
      final newDayIndex = _determineCurrentFishingDay();

      // –ï—Å–ª–∏ –¥–µ–Ω—å –∏–∑–º–µ–Ω–∏–ª—Å—è, –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
      if (newDayIndex != _selectedDayIndex) {
        setState(() {
          _selectedDayIndex = newDayIndex;
        });
        debugPrint(
          'üóìÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –¥–µ–Ω—å ${_selectedDayIndex + 1}',
        );
      }
    }
  }

  // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–Ω–µ–π —Ä—ã–±–∞–ª–∫–∏
  void _initializeFishingDays() {
    if (widget.fishingStartDate != null) {
      _fishingDays.clear();
      DateTime currentDay = DateTime(
        widget.fishingStartDate!.year,
        widget.fishingStartDate!.month,
        widget.fishingStartDate!.day,
      );

      if (widget.isMultiDay && widget.fishingEndDate != null) {
        // –ú–Ω–æ–≥–æ–¥–Ω–µ–≤–Ω–∞—è —Ä—ã–±–∞–ª–∫–∞
        DateTime endDay = DateTime(
          widget.fishingEndDate!.year,
          widget.fishingEndDate!.month,
          widget.fishingEndDate!.day,
        );

        while (!currentDay.isAfter(endDay)) {
          _fishingDays.add(currentDay);
          currentDay = currentDay.add(const Duration(days: 1));
        }
        _totalFishingDays = _fishingDays.length;
      } else {
        // –û–¥–Ω–æ–¥–Ω–µ–≤–Ω–∞—è —Ä—ã–±–∞–ª–∫–∞
        _fishingDays.add(currentDay);
        _totalFishingDays = 1;
      }

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –¥–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
      _selectedDayIndex = _determineCurrentFishingDay();
    } else {
      // –ï—Å–ª–∏ –¥–∞—Ç—ã —Ä—ã–±–∞–ª–∫–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π dayIndex
      _selectedDayIndex = widget.dayIndex;
      _totalFishingDays = 1;
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è —Ä—ã–±–∞–ª–∫–∏
  int _determineCurrentFishingDay() {
    if (_isEditing) {
      // –ü—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–Ω—å –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏
      return widget.initialRecord!.dayIndex;
    }

    final today = DateTime.now();
    final todayDate = DateTime(today.year, today.month, today.day);

    // –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –¥–µ–Ω—å –≤ —Å–ø–∏—Å–∫–µ –¥–Ω–µ–π —Ä—ã–±–∞–ª–∫–∏
    for (int i = 0; i < _fishingDays.length; i++) {
      if (_fishingDays[i].isAtSameMomentAs(todayDate)) {
        debugPrint(
          'üóìÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞–Ω –¥–µ–Ω—å ${i + 1} (${DateFormat('dd.MM.yyyy').format(_fishingDays[i])})',
        );
        return i;
      }
    }

    // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –¥–Ω–µ–π —Ä—ã–±–∞–ª–∫–∏
    if (_fishingDays.isNotEmpty) {
      // –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –¥–æ –Ω–∞—á–∞–ª–∞ —Ä—ã–±–∞–ª–∫–∏ - –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å
      if (todayDate.isBefore(_fishingDays.first)) {
        debugPrint('üóìÔ∏è –°–µ–≥–æ–¥–Ω—è –¥–æ –Ω–∞—á–∞–ª–∞ —Ä—ã–±–∞–ª–∫–∏, –≤—ã–±—Ä–∞–Ω –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å');
        return 0;
      }
      // –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä—ã–±–∞–ª–∫–∏ - –≤—ã–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å
      else if (todayDate.isAfter(_fishingDays.last)) {
        debugPrint(
          'üóìÔ∏è –°–µ–≥–æ–¥–Ω—è –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä—ã–±–∞–ª–∫–∏, –≤—ã–±—Ä–∞–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å',
        );
        return _fishingDays.length - 1;
      }
    }

    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π dayIndex –∏–ª–∏ 0
    return widget.dayIndex.clamp(0, _totalFishingDays - 1);
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –¥–Ω—è
  String _getDayName(int index) {
    final localizations = AppLocalizations.of(context);
    if (_fishingDays.isNotEmpty && index < _fishingDays.length) {
      final date = _fishingDays[index];
      return '${localizations.translate('day_fishing')} ${index + 1} (${DateFormat('dd.MM.yyyy').format(date)})';
    }
    return '${localizations.translate('day_fishing')} ${index + 1}';
  }

  Future<void> _selectTime(BuildContext context) async {
    final TimeOfDay? picked = await showTimePicker(
      context: context,
      initialTime: TimeOfDay.fromDateTime(_selectedTime),
      builder: (context, child) {
        return Theme(
          data: Theme.of(context).copyWith(
            colorScheme: ColorScheme.dark(
              primary: AppConstants.primaryColor,
              onPrimary: AppConstants.textColor,
              surface: AppConstants.surfaceColor,
              onSurface: AppConstants.textColor,
            ),
          ),
          child: child!,
        );
      },
    );

    if (picked != null) {
      setState(() {
        _selectedTime = DateTime(
          _selectedTime.year,
          _selectedTime.month,
          _selectedTime.day,
          picked.hour,
          picked.minute,
        );
      });
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –ø–æ–∫–ª—ë–≤–∫–µ
  Future<void> _saveBiteRecord() async {
    final localizations = AppLocalizations.of(context);

    if (!_formKey.currentState!.validate()) {
      return;
    }

    setState(() => _isLoading = true);

    try {
      double weight = 0.0;
      if (_weightController.text.isNotEmpty) {
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–∞–ø—è—Ç—É—é –≤ —Ç–æ—á–∫—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
        final weightText = _weightController.text.replaceAll(',', '.');
        weight = double.tryParse(weightText) ?? 0.0;
      }

      double length = 0.0;
      if (_lengthController.text.isNotEmpty) {
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–∞–ø—è—Ç—É—é –≤ —Ç–æ—á–∫—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
        final lengthText = _lengthController.text.replaceAll(',', '.');
        length = double.tryParse(lengthText) ?? 0.0;
      }

      final biteRecord = BiteRecord(
        id: _isEditing ? widget.initialRecord!.id : const Uuid().v4(),
        time: _selectedTime,
        fishType: _fishTypeController.text.trim(),
        weight: weight,
        length: length,
        notes: _notesController.text.trim(),
        dayIndex: _selectedDayIndex, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å
        spotIndex: _isEditing ? widget.initialRecord!.spotIndex : 0,
        photoUrls: [], // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ —Ñ–æ—Ç–æ
      );

      // ‚úÖ –î–û–ë–ê–í–ò–¢–¨ –≠–¢–û–¢ –õ–û–ì:
      debugPrint('üêõ –°–û–ó–î–ê–ù–ò–ï –ü–û–ö–õ–ï–í–ö–ò: dayIndex=${_selectedDayIndex}, selectedDay=${_selectedDayIndex + 1}');

      if (mounted) {
        Navigator.pop(context, biteRecord);
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('${localizations.translate('error_saving')}: $e'),
          ),
        );
      }
    } finally {
      if (mounted) {
        setState(() => _isLoading = false);
      }
    }
  }

  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
  void _confirmDelete() {
    final localizations = AppLocalizations.of(context);

    showDialog(
      context: context,
      builder:
          (BuildContext context) => AlertDialog(
        backgroundColor: AppConstants.surfaceColor,
        title: Text(
          localizations.translate('delete_bite_record'),
          style: TextStyle(
            color: AppConstants.textColor,
            fontWeight: FontWeight.bold,
          ),
        ),
        content: Text(
          localizations.translate('delete_bite_confirmation'),
          style: TextStyle(color: AppConstants.textColor),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text(
              localizations.translate('cancel'),
              style: TextStyle(color: AppConstants.textColor),
            ),
          ),
          TextButton(
            onPressed: () {
              Navigator.pop(context); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
              Navigator.pop(
                context,
                'delete',
              ); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–º–∞–Ω–¥—É —É–¥–∞–ª–µ–Ω–∏—è
            },
            style: TextButton.styleFrom(foregroundColor: Colors.red),
            child: Text(localizations.translate('delete')),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    final localizations = AppLocalizations.of(context);
    final isSmallScreen = ResponsiveUtils.isSmallScreen(context);
    final isTablet = ResponsiveUtils.isTablet(context);
    final isLandscape = ResponsiveUtils.isLandscape(context);
    final screenWidth = MediaQuery.of(context).size.width;
    final screenHeight = ResponsiveUtils.getAvailableHeight(context);

    // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ layout –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    final shouldUseCompactLayout = isSmallScreen || (isLandscape && !isTablet);
    final contentWidth = isTablet
        ? (screenWidth > 800 ? 600.0 : screenWidth * 0.8)
        : screenWidth;
    final horizontalPadding = ResponsiveUtils.getHorizontalPadding(context);

    return Scaffold(
      backgroundColor: AppConstants.backgroundColor,
      appBar: AppBar(
        title: Text(
          _isEditing
              ? localizations.translate('edit_bite')
              : localizations.translate('new_bite'),
          style: TextStyle(
            color: AppConstants.textColor,
            fontSize: ResponsiveUtils.getOptimalFontSize(context, 22),
            fontWeight: FontWeight.bold,
          ),
        ),
        backgroundColor: Colors.transparent,
        elevation: 0,
        leading: IconButton(
          icon: Icon(
            Icons.arrow_back,
            color: AppConstants.textColor,
            size: ResponsiveUtils.getIconSize(context),
          ),
          onPressed: () => Navigator.pop(context),
        ),
        actions: [
          // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è, –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å
          if (_isEditing)
            IconButton(
              icon: Icon(
                Icons.delete,
                color: Colors.red,
                size: ResponsiveUtils.getIconSize(context),
              ),
              onPressed: _confirmDelete,
            ),
          IconButton(
            icon: Icon(
              Icons.check,
              color: AppConstants.textColor,
              size: ResponsiveUtils.getIconSize(context),
            ),
            onPressed: _saveBiteRecord,
          ),
        ],
      ),
      body: LoadingOverlay(
        isLoading: _isLoading,
        message: localizations.translate('saving'),
        child: SafeArea(
          child: Center(
            child: ConstrainedBox(
              constraints: BoxConstraints(
                maxWidth: contentWidth,
                maxHeight: screenHeight,
              ),
              child: Form(
                key: _formKey,
                child: ListView(
                  padding: EdgeInsets.symmetric(
                    horizontal: horizontalPadding,
                    vertical: ResponsiveUtils.getVerticalPadding(context),
                  ),
                  children: [
                    // –°–µ–ª–µ–∫—Ç–æ—Ä –¥–Ω—è —Ä—ã–±–∞–ª–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –º–Ω–æ–≥–æ–¥–Ω–µ–≤–Ω–æ–π —Ä—ã–±–∞–ª–∫–∏)
                    if (_totalFishingDays > 1) ...[
                      _buildSectionHeader(localizations.translate('day_fishing')),
                      Container(
                        width: double.infinity,
                        constraints: BoxConstraints(
                          minHeight: ResponsiveConstants.minTouchTarget,
                        ),
                        decoration: BoxDecoration(
                          color: const Color(0xFF12332E),
                          borderRadius: BorderRadius.circular(
                            ResponsiveUtils.getBorderRadius(context, baseRadius: 12),
                          ),
                        ),
                        padding: EdgeInsets.symmetric(
                          horizontal: ResponsiveConstants.spacingM,
                        ),
                        child: DropdownButtonHideUnderline(
                          child: DropdownButton<int>(
                            value: _selectedDayIndex,
                            isExpanded: true,
                            dropdownColor: const Color(0xFF12332E),
                            style: TextStyle(
                              color: AppConstants.textColor,
                              fontSize: ResponsiveUtils.getOptimalFontSize(context, 16),
                              fontWeight: FontWeight.w500,
                            ),
                            icon: Icon(
                              Icons.arrow_drop_down,
                              color: AppConstants.textColor,
                              size: ResponsiveUtils.getIconSize(context),
                            ),
                            items: List.generate(_totalFishingDays, (index) {
                              final isToday =
                                  _fishingDays.isNotEmpty &&
                                      index < _fishingDays.length &&
                                      _isToday(_fishingDays[index]);

                              return DropdownMenuItem<int>(
                                value: index,
                                child: Row(
                                  children: [
                                    Expanded(
                                      child: Text(
                                        _getDayName(index),
                                        style: TextStyle(
                                          color: AppConstants.textColor,
                                          fontWeight:
                                          isToday
                                              ? FontWeight.bold
                                              : FontWeight.normal,
                                        ),
                                        overflow: TextOverflow.ellipsis,
                                        maxLines: 1,
                                      ),
                                    ),
                                    if (isToday)
                                      Container(
                                        padding: EdgeInsets.symmetric(
                                          horizontal: ResponsiveConstants.spacingXS,
                                          vertical: 2,
                                        ),
                                        decoration: BoxDecoration(
                                          color: Colors.green.withValues(
                                            alpha: 0.2,
                                          ),
                                          borderRadius: BorderRadius.circular(4),
                                        ),
                                        child: Text(
                                          localizations.translate('today'),
                                          style: TextStyle(
                                            color: Colors.green,
                                            fontSize: ResponsiveUtils.getOptimalFontSize(context, 12),
                                            fontWeight: FontWeight.bold,
                                          ),
                                        ),
                                      ),
                                  ],
                                ),
                              );
                            }),
                            onChanged: (int? value) {
                              if (value != null) {
                                setState(() {
                                  _selectedDayIndex = value;
                                });
                              }
                            },
                          ),
                        ),
                      ),
                      SizedBox(height: ResponsiveConstants.spacingL),
                    ] else ...[
                      // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–Ω–µ (–¥–ª—è –æ–¥–Ω–æ–¥–Ω–µ–≤–Ω–æ–π —Ä—ã–±–∞–ª–∫–∏)
                      Padding(
                        padding: EdgeInsets.only(bottom: ResponsiveConstants.spacingM),
                        child: Text(
                          _getDayName(_selectedDayIndex),
                          style: TextStyle(
                            color: AppConstants.textColor.withValues(alpha: 0.7),
                            fontSize: ResponsiveUtils.getOptimalFontSize(context, 16),
                            fontStyle: FontStyle.italic,
                          ),
                        ),
                      ),
                    ],

                    // –í—Ä–µ–º—è –ø–æ–∫–ª–µ–≤–∫–∏
                    _buildSectionHeader('${localizations.translate('bite_time')}*'),
                    GestureDetector(
                      onTap: () => _selectTime(context),
                      child: Container(
                        constraints: BoxConstraints(
                          minHeight: ResponsiveConstants.minTouchTarget,
                        ),
                        padding: EdgeInsets.symmetric(
                          vertical: ResponsiveConstants.spacingS,
                          horizontal: ResponsiveConstants.spacingM,
                        ),
                        decoration: BoxDecoration(
                          color: const Color(0xFF12332E),
                          borderRadius: BorderRadius.circular(
                            ResponsiveUtils.getBorderRadius(context, baseRadius: 12),
                          ),
                        ),
                        child: Row(
                          children: [
                            Icon(
                              Icons.access_time,
                              color: AppConstants.textColor,
                              size: ResponsiveUtils.getIconSize(context),
                            ),
                            SizedBox(width: ResponsiveConstants.spacingS),
                            Expanded(
                              child: Text(
                                DateFormat('HH:mm').format(_selectedTime),
                                style: TextStyle(
                                  color: AppConstants.textColor,
                                  fontSize: ResponsiveUtils.getOptimalFontSize(context, 18),
                                  fontWeight: FontWeight.w500,
                                ),
                              ),
                            ),
                            Icon(
                              Icons.arrow_drop_down,
                              color: AppConstants.textColor,
                              size: ResponsiveUtils.getIconSize(context),
                            ),
                          ],
                        ),
                      ),
                    ),

                    SizedBox(height: ResponsiveConstants.spacingL),

                    // –í–∏–¥ —Ä—ã–±—ã
                    _buildSectionHeader(localizations.translate('fish_type')),
                    TextFormField(
                      controller: _fishTypeController,
                      style: TextStyle(
                        color: AppConstants.textColor,
                        fontSize: ResponsiveUtils.getOptimalFontSize(context, 16),
                      ),
                      decoration: InputDecoration(
                        fillColor: const Color(0xFF12332E),
                        filled: true,
                        hintText: localizations.translate('specify_fish_type'),
                        hintStyle: TextStyle(
                          color: AppConstants.textColor.withValues(alpha: 0.5),
                          fontSize: ResponsiveUtils.getOptimalFontSize(context, 16),
                        ),
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(
                            ResponsiveUtils.getBorderRadius(context, baseRadius: 12),
                          ),
                          borderSide: BorderSide.none,
                        ),
                        prefixIcon: Icon(
                          Icons.set_meal,
                          color: AppConstants.textColor,
                          size: ResponsiveUtils.getIconSize(context),
                        ),
                        contentPadding: EdgeInsets.symmetric(
                          horizontal: ResponsiveConstants.spacingM,
                          vertical: ResponsiveConstants.spacingM,
                        ),
                      ),
                    ),

                    SizedBox(height: ResponsiveConstants.spacingL),

                    // –†—è–¥ –¥–ª—è –≤–µ—Å–∞ –∏ –¥–ª–∏–Ω—ã - –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π layout
                    _buildWeightLengthSection(localizations, shouldUseCompactLayout),

                    SizedBox(height: ResponsiveConstants.spacingL),

                    // –ó–∞–º–µ—Ç–∫–∏
                    _buildSectionHeader(localizations.translate('notes')),
                    TextFormField(
                      controller: _notesController,
                      style: TextStyle(
                        color: AppConstants.textColor,
                        fontSize: ResponsiveUtils.getOptimalFontSize(context, 16),
                      ),
                      decoration: InputDecoration(
                        fillColor: const Color(0xFF12332E),
                        filled: true,
                        hintText: localizations.translate(
                          'additional_notes_fishing',
                        ),
                        hintStyle: TextStyle(
                          color: AppConstants.textColor.withValues(alpha: 0.5),
                          fontSize: ResponsiveUtils.getOptimalFontSize(context, 16),
                        ),
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(
                            ResponsiveUtils.getBorderRadius(context, baseRadius: 12),
                          ),
                          borderSide: BorderSide.none,
                        ),
                        contentPadding: EdgeInsets.all(ResponsiveConstants.spacingM),
                      ),
                      maxLines: 3,
                    ),

                    SizedBox(height: ResponsiveUtils.getVerticalPadding(context)),

                    // –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è - –∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è —à–∏—Ä–∏–Ω–∞
                    _buildSaveButton(localizations),
                  ],
                ),
              ),
            ),
          ),
        ),
      ),
    );
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π
  bool _isToday(DateTime date) {
    final today = DateTime.now();
    return date.year == today.year &&
        date.month == today.month &&
        date.day == today.day;
  }

  Widget _buildSectionHeader(String title) {
    return Padding(
      padding: EdgeInsets.only(bottom: ResponsiveConstants.spacingXS),
      child: Text(
        title,
        style: TextStyle(
          color: AppConstants.textColor,
          fontSize: ResponsiveUtils.getOptimalFontSize(context, 18),
          fontWeight: FontWeight.bold,
        ),
      ),
    );
  }

  // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è —Å–µ–∫—Ü–∏—è –¥–ª—è –≤–µ—Å–∞ –∏ –¥–ª–∏–Ω—ã
  Widget _buildWeightLengthSection(AppLocalizations localizations, bool useCompactLayout) {
    if (useCompactLayout) {
      return Column(
        children: [
          _buildWeightField(localizations),
          SizedBox(height: ResponsiveConstants.spacingM),
          _buildLengthField(localizations),
        ],
      );
    }

    return Row(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Expanded(child: _buildWeightField(localizations)),
        SizedBox(width: ResponsiveConstants.spacingM),
        Expanded(child: _buildLengthField(localizations)),
      ],
    );
  }

  // –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  Widget _buildSaveButton(AppLocalizations localizations) {
    final isTablet = ResponsiveUtils.isTablet(context);

    return Center(
      child: ConstrainedBox(
        constraints: BoxConstraints(
          maxWidth: isTablet ? 400 : double.infinity,
        ),
        child: ElevatedButton(
          onPressed: _isLoading ? null : _saveBiteRecord,
          style: ElevatedButton.styleFrom(
            backgroundColor: AppConstants.primaryColor,
            foregroundColor: AppConstants.textColor,
            minimumSize: Size(
              double.infinity,
              ResponsiveUtils.getButtonHeight(context),
            ),
            padding: EdgeInsets.symmetric(
              vertical: ResponsiveConstants.spacingM,
              horizontal: ResponsiveConstants.spacingL,
            ),
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(
                ResponsiveUtils.getBorderRadius(context, baseRadius: 24),
              ),
            ),
          ),
          child: Text(
            _isEditing
                ? localizations.translate('save_changes_btn')
                : localizations.translate('add_bite_btn'),
            style: TextStyle(
              fontSize: ResponsiveUtils.getOptimalFontSize(context, 18),
              fontWeight: FontWeight.bold,
            ),
            textAlign: TextAlign.center,
          ),
        ),
      ),
    );
  }

  // –í–∏–¥–∂–µ—Ç –¥–ª—è –ø–æ–ª—è –≤–µ—Å–∞
  Widget _buildWeightField(AppLocalizations localizations) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        _buildSectionHeader(
          localizations.translate('weight_kg'),
        ),
        TextFormField(
          controller: _weightController,
          style: TextStyle(
            color: AppConstants.textColor,
            fontSize: ResponsiveUtils.getOptimalFontSize(context, 16),
          ),
          decoration: InputDecoration(
            fillColor: const Color(0xFF12332E),
            filled: true,
            hintText: localizations.translate('weight'),
            hintStyle: TextStyle(
              color: AppConstants.textColor.withValues(alpha: 0.5),
              fontSize: ResponsiveUtils.getOptimalFontSize(context, 16),
            ),
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(
                ResponsiveUtils.getBorderRadius(context, baseRadius: 12),
              ),
              borderSide: BorderSide.none,
            ),
            prefixIcon: Icon(
              Icons.scale,
              color: AppConstants.textColor,
              size: ResponsiveUtils.getIconSize(context),
            ),
            contentPadding: EdgeInsets.symmetric(
              horizontal: ResponsiveConstants.spacingM,
              vertical: ResponsiveConstants.spacingM,
            ),
          ),
          keyboardType: const TextInputType.numberWithOptions(
            decimal: true,
          ),
          validator: (value) {
            if (value != null && value.isNotEmpty) {
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ
              final weightText = value.replaceAll(',', '.');
              if (double.tryParse(weightText) == null) {
                return localizations.translate(
                  'enter_correct_number',
                );
              }
            }
            return null;
          },
        ),
      ],
    );
  }

  // –í–∏–¥–∂–µ—Ç –¥–ª—è –ø–æ–ª—è –¥–ª–∏–Ω—ã
  Widget _buildLengthField(AppLocalizations localizations) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        _buildSectionHeader(
          localizations.translate('length_cm'),
        ),
        TextFormField(
          controller: _lengthController,
          style: TextStyle(
            color: AppConstants.textColor,
            fontSize: ResponsiveUtils.getOptimalFontSize(context, 16),
          ),
          decoration: InputDecoration(
            fillColor: const Color(0xFF12332E),
            filled: true,
            hintText: localizations.translate('length'),
            hintStyle: TextStyle(
              color: AppConstants.textColor.withValues(alpha: 0.5),
              fontSize: ResponsiveUtils.getOptimalFontSize(context, 16),
            ),
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(
                ResponsiveUtils.getBorderRadius(context, baseRadius: 12),
              ),
              borderSide: BorderSide.none,
            ),
            prefixIcon: Icon(
              Icons.straighten,
              color: AppConstants.textColor,
              size: ResponsiveUtils.getIconSize(context),
            ),
            contentPadding: EdgeInsets.symmetric(
              horizontal: ResponsiveConstants.spacingM,
              vertical: ResponsiveConstants.spacingM,
            ),
          ),
          keyboardType: const TextInputType.numberWithOptions(
            decimal: true,
          ),
          validator: (value) {
            if (value != null && value.isNotEmpty) {
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—è—Ç—É—é –≤ —Ç–æ—á–∫—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
              final lengthText = value.replaceAll(',', '.');
              if (double.tryParse(lengthText) == null) {
                return localizations.translate(
                  'enter_correct_number',
                );
              }
            }
            return null;
          },
        ),
      ],
    );
  }
}