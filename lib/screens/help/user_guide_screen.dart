// –ü—É—Ç—å: lib/screens/help/user_guide_screen.dart

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import '../../constants/app_constants.dart';
import '../../localization/app_localizations.dart';

class UserGuideScreen extends StatefulWidget {
  const UserGuideScreen({super.key});

  @override
  State<UserGuideScreen> createState() => _UserGuideScreenState();
}

class _UserGuideScreenState extends State<UserGuideScreen> {
  String _guideText = '';
  bool _isLoading = true;
  bool _hasLoadedOnce = false; // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
    if (!_hasLoadedOnce) {
      _hasLoadedOnce = true;
      _loadUserGuide();
    }
  }

  Future<void> _loadUserGuide() async {
    try {
      final localizations = AppLocalizations.of(context);
      final languageCode = localizations.locale.languageCode;

      // –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      print('üîç Language code: $languageCode');
      print('üîç Full locale: ${localizations.locale}');

      // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —è–∑—ã–∫–∞
      final fileName = 'assets/user_guide/user_guide_$languageCode.txt';
      print('üîç Trying to load file: $fileName');

      String guideText;
      try {
        guideText = await rootBundle.loadString(fileName);
        print('‚úÖ Successfully loaded $fileName');
      } catch (e) {
        print('‚ùå Failed to load $fileName: $e');
        // –ï—Å–ª–∏ —Ñ–∞–π–ª –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —è–∑—ã–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        guideText = await _loadFallbackGuide(languageCode);
      }

      if (mounted) {
        setState(() {
          _guideText = guideText;
          _isLoading = false;
        });
      }
    } catch (e) {
      print('üí• Critical error in _loadUserGuide: $e');
      if (mounted) {
        setState(() {
          _guideText = _getErrorMessage();
          _isLoading = false;
        });
      }
    }
  }

  Future<String> _loadFallbackGuide(String languageCode) async {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ fallback –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞
    List<String> fallbackOrder;

    switch (languageCode) {
      case 'kk': // –ö–∞–∑–∞—Ö—Å–∫–∏–π
        fallbackOrder = ['ru', 'en']; // –î–ª—è –∫–∞–∑–∞—Ö—Å–∫–æ–≥–æ —Å–Ω–∞—á–∞–ª–∞ —Ä—É—Å—Å–∫–∏–π, –ø–æ—Ç–æ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
        break;
      case 'ru': // –†—É—Å—Å–∫–∏–π
        fallbackOrder = ['en', 'kk']; // –î–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —Å–Ω–∞—á–∞–ª–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π, –ø–æ—Ç–æ–º –∫–∞–∑–∞—Ö—Å–∫–∏–π
        break;
      case 'en': // –ê–Ω–≥–ª–∏–π—Å–∫–∏–π
        fallbackOrder = ['ru', 'kk']; // –î–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —Å–Ω–∞—á–∞–ª–∞ —Ä—É—Å—Å–∫–∏–π, –ø–æ—Ç–æ–º –∫–∞–∑–∞—Ö—Å–∫–∏–π
        break;
      default:
        fallbackOrder = ['ru', 'en', 'kk']; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        break;
    }

    // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    for (String fallbackLang in fallbackOrder) {
      try {
        final fallbackFileName = 'assets/user_guide/user_guide_$fallbackLang.txt';
        print('üîÑ Trying fallback file: $fallbackFileName');

        final guideText = await rootBundle.loadString(fallbackFileName);
        print('‚úÖ Successfully loaded fallback $fallbackFileName');
        return guideText;
      } catch (e) {
        print('‚ùå Failed to load fallback $fallbackLang: $e');
        continue;
      }
    }

    // –ï—Å–ª–∏ –≤—Å–µ —Ñ–∞–π–ª—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
    throw Exception('Cannot load any user guide file');
  }

  String _getErrorMessage() {
    final localizations = AppLocalizations.of(context);
    final languageCode = localizations.locale.languageCode;

    switch (languageCode) {
      case 'kk':
        return '–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã –Ω“±—Å“õ–∞—É–ª—ã“ì—ã–Ω –∂“Ø–∫—Ç–µ—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã\n\n–ö–µ–π—ñ–Ω—ñ—Ä–µ–∫ “õ–∞–π—Ç–∞ –∫”©—Ä—ñ“£—ñ–∑ –Ω–µ–º–µ—Å–µ —Ç–µ—Ö–Ω–∏–∫–∞–ª—ã“õ “õ–æ–ª–¥–∞—É“ì–∞ —Ö–∞–±–∞—Ä–ª–∞—Å—ã“£—ã–∑: support@driftnotes.com';
      case 'en':
        return 'Error loading user guide\n\nPlease try again later or contact technical support: support@driftnotes.com';
      default: // ru
        return '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É: support@driftnotes.com';
    }
  }

  @override
  Widget build(BuildContext context) {
    final localizations = AppLocalizations.of(context);
    final mediaQuery = MediaQuery.of(context);

    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø–∞–Ω–µ–ª–µ–π
    final bottomPadding = mediaQuery.padding.bottom;
    final topPadding = mediaQuery.padding.top;

    return Scaffold(
      backgroundColor: AppConstants.backgroundColor,
      appBar: AppBar(
        title: Text(
          localizations.translate('user_guide'),
          style: TextStyle(
            color: AppConstants.textColor,
            fontSize: 22,
            fontWeight: FontWeight.bold,
          ),
        ),
        backgroundColor: Colors.transparent,
        elevation: 0,
        leading: IconButton(
          icon: Icon(Icons.arrow_back, color: AppConstants.textColor),
          onPressed: () => Navigator.pop(context),
        ),
      ),
      body: SafeArea(
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º SafeArea –¥–ª—è –±–∞–∑–æ–≤–æ–π –∑–∞—â–∏—Ç—ã
        child: _isLoading
            ? Center(
          child: CircularProgressIndicator(
            valueColor: AlwaysStoppedAnimation<Color>(
              AppConstants.textColor,
            ),
          ),
        )
            : Column(
          children: [
            Expanded(
              child: SingleChildScrollView(
                padding: EdgeInsets.only(
                  left: 16,
                  right: 16,
                  top: 16,
                  // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç—Å—Ç—É–ø —Å–Ω–∏–∑—É –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
                  bottom: 16 + (bottomPadding > 0 ? 8 : 16),
                ),
                child: Container(
                  padding: const EdgeInsets.all(20),
                  decoration: BoxDecoration(
                    color: Colors.black.withValues(alpha: 0.2),
                    borderRadius: BorderRadius.circular(16),
                    border: Border.all(
                      color: AppConstants.textColor.withValues(alpha: 0.1),
                      width: 1,
                    ),
                  ),
                  child: Text(
                    _guideText,
                    style: TextStyle(
                      color: AppConstants.textColor,
                      fontSize: 16,
                      height: 1.6,
                    ),
                  ),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}