// –ü—É—Ç—å: lib/screens/marker_maps/marker_map_screen.dart

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:intl/intl.dart';
import 'package:uuid/uuid.dart';
import '../../constants/app_constants.dart';
import '../../models/marker_map_model.dart';
import '../../services/firebase/firebase_service.dart';
import '../../widgets/loading_overlay.dart';
import 'dart:math' as math;
import 'dart:ui' as ui;
import '../../localization/app_localizations.dart';
import 'depth_chart_screen.dart';
// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è –ø—Ä–µ–º–∏—É–º —Å–∏—Å—Ç–µ–º—ã
import '../../services/subscription/subscription_service.dart';
import '../../constants/subscription_constants.dart';
import '../../models/offline_usage_result.dart';
import '../subscription/paywall_screen.dart';
// üî• –î–û–ë–ê–í–õ–ï–ù–û: –ò–º–ø–æ—Ä—Ç Repository –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞
import '../../repositories/marker_map_repository.dart';

class MarkerMapScreen extends StatefulWidget {
  final MarkerMapModel markerMap;

  const MarkerMapScreen({super.key, required this.markerMap});

  @override
  MarkerMapScreenState createState() => MarkerMapScreenState();
}

class MarkerMapScreenState extends State<MarkerMapScreen> {
  final _firebaseService = FirebaseService();
  final _depthController = TextEditingController();
  final _notesController = TextEditingController();
  final _distanceController = TextEditingController();

  // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –°–µ—Ä–≤–∏—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤
  final _subscriptionService = SubscriptionService();

  final _markerMapRepository = MarkerMapRepository();

  late MarkerMapModel _markerMap;
  bool _isLoading = false;

  // üî• –î–û–ë–ê–í–õ–ï–ù–û: –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  bool _isAutoSaving = false;
  String _saveMessage = '';

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ª—É—á–∞
  int _lastSelectedRayIndex = 0;

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª—É—á–µ–π
  final int _raysCount = 5;
  final double _maxDistance = 200.0;
  final double _distanceStep = 10.0;

  // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —É–≥–ª–∞ –ª—É—á–µ–π (—Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)
  final double _leftAngle = 105.0;
  final double _rightAngle = 75.0;

  // –¢–∏–ø—ã –¥–Ω–∞ –¥–ª—è –º–∞—Ä–∫–µ—Ä–æ–≤
  final List<String> _bottomTypes = [
    '–∏–ª',
    '–≥–ª—É–±–æ–∫–∏–π_–∏–ª',
    '—Ä–∞–∫—É—à–∫–∞',
    '—Ä–æ–≤–Ω–æ_—Ç–≤–µ—Ä–¥–æ',
    '–∫–∞–º–Ω–∏',
    '—Ç—Ä–∞–≤–∞_–≤–æ–¥–æ—Ä–æ—Å–ª–∏',
    '–∑–∞—Ü–µ–ø',
    '–±—É–≥–æ—Ä',
    '—Ç–æ—á–∫–∞_–∫–æ—Ä–º–ª–µ–Ω–∏—è',
  ];

  // –¢–µ–∫—É—â–∏–π —Ç–∏–ø –¥–Ω–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–∞—Ä–∫–µ—Ä–∞
  String _currentBottomType = '–∏–ª';

  // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —Ç–∏–ø–æ–≤ –¥–Ω–∞ –º–∞—Ä–∫–µ—Ä–æ–≤
  final Map<String, Color> _bottomTypeColors = {
    '–∏–ª': Color(0xFFD4A574), // –°–≤–µ—Ç–ª–æ —è—Ä–∫–æ –∫–æ—Ä–∏—á–Ω–µ–≤—ã–π
    '–≥–ª—É–±–æ–∫–∏–π_–∏–ª': Color(0xFF8B4513), // –¢–µ–º–Ω–æ –∫–æ—Ä–∏—á–Ω–µ–≤—ã–π
    '—Ä–∞–∫—É—à–∫–∞': Colors.white, // –ë–µ–ª—ã–π
    '—Ä–æ–≤–Ω–æ_—Ç–≤–µ—Ä–¥–æ': Colors.yellow, // –ñ–µ–ª—Ç—ã–π
    '–∫–∞–º–Ω–∏': Colors.grey, // –°–µ—Ä—ã–π
    '—Ç—Ä–∞–≤–∞_–≤–æ–¥–æ—Ä–æ—Å–ª–∏': Color(0xFF90EE90), // –°–≤–µ—Ç–ª–æ –∑–µ–ª–µ–Ω—ã–π
    '–∑–∞—Ü–µ–ø': Colors.red, // –ö—Ä–∞—Å–Ω—ã–π
    '–±—É–≥–æ—Ä': Color(0xFFFF8C00), // –Ø—Ä–∫–æ –æ—Ä–∞–Ω–∂–µ–≤—ã–π
    '—Ç–æ—á–∫–∞_–∫–æ—Ä–º–ª–µ–Ω–∏—è': Color(0xFF00BFFF), // –Ø—Ä–∫–æ –≥–æ–ª—É–±–æ–π
    'default': Colors.blue, // –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  };

  final Map<String, IconData> _bottomTypeIcons = {
    '–∏–ª': Icons.view_headline, // –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ –¥–ª—è –∏–ª–∞
    '–≥–ª—É–±–æ–∫–∏–π_–∏–ª': Icons.waves_outlined,
    '—Ä–∞–∫—É—à–∫–∞': Icons.wifi, // –≤–æ–ª–Ω–∏—Å—Ç—ã–µ –ª–∏–Ω–∏–∏ WiFi –¥–ª—è —Ä–∞–∫—É—à–∫–∏
    '—Ä–æ–≤–Ω–æ_—Ç–≤–µ—Ä–¥–æ': Icons.remove,
    '–∫–∞–º–Ω–∏': Icons.more_horiz,
    '—Ç—Ä–∞–≤–∞_–≤–æ–¥–æ—Ä–æ—Å–ª–∏': Icons.grass,
    '–∑–∞—Ü–µ–ø': Icons.warning,
    '–±—É–≥–æ—Ä': Icons.landscape,
    '—Ç–æ—á–∫–∞_–∫–æ—Ä–º–ª–µ–Ω–∏—è': Icons.gps_fixed,
    'default': Icons.location_on,
  };

  @override
  void initState() {
    super.initState();
    _markerMap = widget.markerMap;

    // –°–∫—Ä—ã–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–∞–Ω–µ–ª–∏ –¥–ª—è –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
    SystemChrome.setEnabledSystemUIMode(SystemUiMode.immersive);

    debugPrint('üó∫Ô∏è MarkerMapScreen: –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É –º–∞—Ä–∫–µ—Ä–æ–≤ ID: ${_markerMap.id}');
  }

  @override
  void dispose() {
    _depthController.dispose();
    _notesController.dispose();
    _distanceController.dispose();

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–∞–Ω–µ–ª–∏ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
    SystemChrome.setEnabledSystemUIMode(SystemUiMode.edgeToEdge);
    super.dispose();
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∏–ø–∞ –¥–Ω–∞
  String _getBottomTypeName(String? type) {
    final localizations = AppLocalizations.of(context);
    if (type == null) return localizations.translate('silt');

    switch (type) {
      case '–∏–ª':
        return localizations.translate('silt');
      case '–≥–ª—É–±–æ–∫–∏–π_–∏–ª':
        return localizations.translate('deep_silt');
      case '—Ä–∞–∫—É—à–∫–∞':
        return localizations.translate('shell');
      case '—Ä–æ–≤–Ω–æ_—Ç–≤–µ—Ä–¥–æ':
        return localizations.translate('firm_bottom');
      case '–∫–∞–º–Ω–∏':
        return localizations.translate('stones');
      case '—Ç—Ä–∞–≤–∞_–≤–æ–¥–æ—Ä–æ—Å–ª–∏':
        return localizations.translate('grass_algae');
      case '–∑–∞—Ü–µ–ø':
        return localizations.translate('snag');
      case '–±—É–≥–æ—Ä':
        return localizations.translate('hill');
      case '—Ç–æ—á–∫–∞_–∫–æ—Ä–º–ª–µ–Ω–∏—è':
        return localizations.translate('feeding_spot');
    // –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º–∏ —Ç–∏–ø–∞–º–∏
      case 'dropoff':
        return localizations.translate('hill');
      case 'weed':
        return localizations.translate('grass_algae');
      case 'sandbar':
        return localizations.translate('firm_bottom');
      case 'structure':
        return localizations.translate('snag');
      case 'default':
        return localizations.translate('silt');
      default:
        return localizations.translate('silt');
    }
  }

  // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å—Ç–∞—Ä—ã—Ö —Ç–∏–ø–æ–≤ –≤ –Ω–æ–≤—ã–µ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
  String _convertLegacyTypeToNew(String? type) {
    if (type == null) return '–∏–ª';

    switch (type) {
      case 'dropoff':
        return '–±—É–≥–æ—Ä';
      case 'weed':
        return '—Ç—Ä–∞–≤–∞_–≤–æ–¥–æ—Ä–æ—Å–ª–∏';
      case 'sandbar':
        return '—Ä–æ–≤–Ω–æ_—Ç–≤–µ—Ä–¥–æ';
      case 'structure':
        return '–∑–∞—Ü–µ–ø';
      case 'default':
        return '–∏–ª';
      default:
        return type; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å, –µ—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π —Ç–∏–ø
    }
  }

  // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —É–≥–ª–∞ –ª—É—á–∞
  double _calculateRayAngle(int rayIndex) {
    // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ª—É—á–∏ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç _leftAngle –¥–æ _rightAngle (–≥–¥–µ 90¬∞ - –ø—Ä—è–º–æ –≤–≤–µ—Ä—Ö)
    // 0-–π –ª—É—á –±—É–¥–µ—Ç —Å–∞–º—ã–º –ª–µ–≤—ã–º, –ø–æ—Å–ª–µ–¥–Ω–∏–π - —Å–∞–º—ã–º –ø—Ä–∞–≤—ã–º
    final totalAngle = _leftAngle - _rightAngle; // –æ–±—â–∏–π —É–≥–æ–ª –æ—Ö–≤–∞—Ç–∞ –≤ –≥—Ä–∞–¥—É—Å–∞—Ö
    final angleStep = totalAngle / (_raysCount - 1);
    return (_leftAngle - (rayIndex * angleStep)) *
        (math.pi / 180); // –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ä–∞–¥–∏–∞–Ω—ã
  }

  // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ë–ï–ó –ø–æ–ª–µ–π —Å–≤—è–∑–µ–π —Å –∑–∞–º–µ—Ç–∫–∞–º–∏
  Future<void> _autoSaveChanges(String action) async {
    if (!mounted) return;

    try {
      setState(() {
        _isAutoSaving = true;
        _saveMessage = action;
      });

      debugPrint('üíæ –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: $action');

      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—É—é –∫–æ–ø–∏—é –º–æ–¥–µ–ª–∏ –∫–∞—Ä—Ç—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      final markerMapToSave = _markerMap.copyWith(
        // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–ª—è —Å –æ–±—ä–µ–∫—Ç–∞–º–∏ Offset –∏–∑ –º–∞—Ä–∫–µ—Ä–æ–≤
        markers: _markerMap.markers.map((marker) {
          // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –º–∞—Ä–∫–µ—Ä–∞ –±–µ–∑ –ø–æ–ª–µ–π –¥–ª—è UI
          final cleanMarker = Map<String, dynamic>.from(marker);
          // –£–¥–∞–ª—è–µ–º –ø–æ–ª—è —Ö–∏—Ç–±–æ–∫—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –¥–æ–ª–∂–Ω—ã —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è
          cleanMarker.remove('_hitboxCenter');
          cleanMarker.remove('_hitboxRadius');
          return cleanMarker;
        }).toList(),
      );

      // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –∫–∞—Ä—Ç—ã –ë–ï–ó –ø—Ä–∏–≤—è–∑–æ–∫ –∫ –∑–∞–º–µ—Ç–∫–∞–º
      final mapData = {
        'name': markerMapToSave.name,                    // –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã
        'date': markerMapToSave.date.millisecondsSinceEpoch, // –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
        'sector': markerMapToSave.sector,                // –°–µ–∫—Ç–æ—Ä
        'markers': markerMapToSave.markers,              // –°–ø–∏—Å–æ–∫ –º–∞—Ä–∫–µ—Ä–æ–≤
        'userId': markerMapToSave.userId,                // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        'createdAt': markerMapToSave.date.millisecondsSinceEpoch, // –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è
        'updatedAt': DateTime.now().millisecondsSinceEpoch, // –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      };

      await _markerMapRepository.updateMarkerMap(markerMapToSave);

      // üî• –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—á–∏—â–∞–µ–º –∫—ç—à Repository –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      try {
        MarkerMapRepository.clearCache();
        debugPrint('üíæ –ö—ç—à Repository –æ—á–∏—â–µ–Ω –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
      } catch (e) {
        debugPrint('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∫—ç—à Repository: $e');
      }

      if (mounted) {
        setState(() {
          _isAutoSaving = false;
          _saveMessage = '';
        });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
        ScaffoldMessenger.of(context).clearSnackBars();
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('$action - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ'),
            backgroundColor: Colors.green,
            duration: const Duration(seconds: 1),
          ),
        );

        debugPrint('‚úÖ –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: $action');
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: $e');
      if (mounted) {
        setState(() {
          _isAutoSaving = false;
          _saveMessage = '';
        });

        ScaffoldMessenger.of(context).clearSnackBars();
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${e.toString()}'),
            backgroundColor: Colors.red,
            duration: const Duration(seconds: 2),
          ),
        );
      }
    }
  }

  // –ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—Ä–∫–µ—Ä–∞—Ö
  void _showMarkerInfo() {
    final localizations = AppLocalizations.of(context);

    showDialog(
      context: context,
      builder: (BuildContext context) {
        return Dialog(
          backgroundColor: AppConstants.cardColor,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(16),
          ),
          child: Container(
            constraints: BoxConstraints(
              maxWidth: MediaQuery.of(context).size.width * 0.9,
              maxHeight: MediaQuery.of(context).size.height * 0.8,
            ),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                // –ó–∞–≥–æ–ª–æ–≤–æ–∫
                Container(
                  padding: const EdgeInsets.all(20),
                  decoration: BoxDecoration(
                    color: AppConstants.primaryColor.withValues(alpha: 0.1),
                    borderRadius: const BorderRadius.only(
                      topLeft: Radius.circular(16),
                      topRight: Radius.circular(16),
                    ),
                  ),
                  child: Row(
                    children: [
                      Icon(
                        Icons.info_outline,
                        color: AppConstants.primaryColor,
                        size: 24,
                      ),
                      const SizedBox(width: 12),
                      Expanded(
                        child: Text(
                          localizations.translate('marker_info'),
                          style: TextStyle(
                            color: AppConstants.textColor,
                            fontSize: 20,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ),
                    ],
                  ),
                ),

                // –°–æ–¥–µ—Ä–∂–∏–º–æ–µ
                Flexible(
                  child: SingleChildScrollView(
                    padding: const EdgeInsets.all(20),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        // –°–µ–∫—Ü–∏—è "–¢–∏–ø—ã –º–∞—Ä–∫–µ—Ä–æ–≤"
                        Text(
                          localizations.translate('marker_types'),
                          style: TextStyle(
                            color: AppConstants.textColor,
                            fontSize: 18,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                        const SizedBox(height: 12),

                        // –°–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ –º–∞—Ä–∫–µ—Ä–æ–≤ —Å —Ü–≤–µ—Ç–Ω—ã–º–∏ —Ç–æ—á–∫–∞–º–∏
                        ...(_bottomTypes.map((type) {
                          return Padding(
                            padding: const EdgeInsets.symmetric(vertical: 4),
                            child: Row(
                              children: [
                                // –¶–≤–µ—Ç–Ω–∞—è —Ç–æ—á–∫–∞
                                Container(
                                  width: 16,
                                  height: 16,
                                  decoration: BoxDecoration(
                                    color:
                                    _bottomTypeColors[type] ?? Colors.blue,
                                    shape: BoxShape.circle,
                                  ),
                                ),
                                const SizedBox(width: 12),
                                // –ò–∫–æ–Ω–∫–∞
                                Icon(
                                  _bottomTypeIcons[type] ?? Icons.location_on,
                                  color: AppConstants.textColor.withValues(
                                    alpha: 0.7,
                                  ),
                                  size: 18,
                                ),
                                const SizedBox(width: 8),
                                // –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞
                                Expanded(
                                  child: Text(
                                    _getBottomTypeName(type),
                                    style: TextStyle(
                                      color: AppConstants.textColor,
                                      fontSize: 16,
                                    ),
                                  ),
                                ),
                              ],
                            ),
                          );
                        }).toList()),

                        const SizedBox(height: 24),

                        // –°–µ–∫—Ü–∏—è "–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è"
                        Text(
                          localizations.translate('how_to_use'),
                          style: TextStyle(
                            color: AppConstants.textColor,
                            fontSize: 18,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                        const SizedBox(height: 12),

                        // –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
                        _buildInstructionItem(
                          icon: Icons.add_location,
                          title: localizations.translate('adding_marker'),
                          description: localizations.translate(
                            'adding_marker_desc',
                          ),
                        ),

                        _buildInstructionItem(
                          icon: Icons.visibility,
                          title: localizations.translate('view_details'),
                          description: localizations.translate(
                            'view_details_desc',
                          ),
                        ),

                        _buildInstructionItem(
                          icon: Icons.edit,
                          title: localizations.translate('editing'),
                          description: localizations.translate('editing_desc'),
                        ),
                      ],
                    ),
                  ),
                ),

                // –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
                Container(
                  padding: const EdgeInsets.all(20),
                  decoration: BoxDecoration(
                    border: Border(
                      top: BorderSide(
                        color: AppConstants.textColor.withValues(alpha: 0.1),
                        width: 1,
                      ),
                    ),
                  ),
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.end,
                    children: [
                      ElevatedButton(
                        onPressed: () {
                          Navigator.pop(context);
                        },
                        style: ElevatedButton.styleFrom(
                          backgroundColor: AppConstants.primaryColor,
                        ),
                        child: Text(
                          localizations.translate('close'),
                          style: TextStyle(color: AppConstants.textColor),
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),
        );
      },
    );
  }

  // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—É–Ω–∫—Ç–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
  Widget _buildInstructionItem({
    required IconData icon,
    required String title,
    required String description,
  }) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Icon(icon, color: AppConstants.primaryColor, size: 24),
          const SizedBox(width: 12),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  title,
                  style: TextStyle(
                    color: AppConstants.textColor,
                    fontSize: 16,
                    fontWeight: FontWeight.w600,
                  ),
                ),
                const SizedBox(height: 4),
                Text(
                  description,
                  style: TextStyle(
                    color: AppConstants.textColor.withValues(alpha: 0.7),
                    fontSize: 14,
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  // –ü–æ–∫–∞–∑ –¥–∏–∞–ª–æ–≥–∞ —Å –¥–µ—Ç–∞–ª—è–º–∏ –º–∞—Ä–∫–µ—Ä–∞
  void _showMarkerDetails(Map<String, dynamic> marker) {
    final localizations = AppLocalizations.of(context);

    showModalBottomSheet(
      context: context,
      backgroundColor: AppConstants.cardColor,
      shape: const RoundedRectangleBorder(
        borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
      ),
      builder: (context) {
        return Container(
          padding: const EdgeInsets.all(20),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                marker['name'] ?? localizations.translate('marker'),
                style: TextStyle(
                  color: AppConstants.textColor,
                  fontSize: 22,
                  fontWeight: FontWeight.bold,
                ),
              ),
              const SizedBox(height: 10),

              // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª—É—á–∞ –∏ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏
              Row(
                children: [
                  Icon(Icons.straighten, color: AppConstants.textColor),
                  const SizedBox(width: 8),
                  Text(
                    '${localizations.translate('ray')} ${(marker['rayIndex'] + 1).toInt()}, ${marker['distance'].toInt()} ${localizations.translate('distance_m')}',
                    style: TextStyle(
                      color: AppConstants.textColor,
                      fontSize: 16,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 8),

              // –ì–ª—É–±–∏–Ω–∞
              if (marker['depth'] != null) ...[
                Row(
                  children: [
                    Icon(Icons.waves, color: AppConstants.textColor),
                    const SizedBox(width: 8),
                    Text(
                      '${localizations.translate('depth')}: ${marker['depth']} –º',
                      style: TextStyle(
                        color: AppConstants.textColor,
                        fontSize: 16,
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 8),
              ],

              // –¢–∏–ø –¥–Ω–∞
              if (marker['bottomType'] != null || marker['type'] != null) ...[
                Row(
                  children: [
                    Icon(
                      _getBottomTypeIcon(
                        marker['bottomType'] ?? marker['type'],
                      ),
                      color: AppConstants.textColor,
                    ),
                    const SizedBox(width: 8),
                    Text(
                      '${localizations.translate('marker_type')}: ${_getBottomTypeName(marker['bottomType'] ?? marker['type'])}',
                      style: TextStyle(
                        color: AppConstants.textColor,
                        fontSize: 16,
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 8),
              ],

              // –û–ø–∏—Å–∞–Ω–∏–µ
              if (marker['notes'] != null && marker['notes'].isNotEmpty) ...[
                Row(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Icon(Icons.description, color: AppConstants.textColor),
                    const SizedBox(width: 8),
                    Expanded(
                      child: Text(
                        marker['notes'],
                        style: TextStyle(
                          color: AppConstants.textColor,
                          fontSize: 16,
                        ),
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 8),
              ] else if (marker['description'] != null &&
                  marker['description'].isNotEmpty) ...[
                // –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                Row(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Icon(Icons.description, color: AppConstants.textColor),
                    const SizedBox(width: 8),
                    Expanded(
                      child: Text(
                        marker['description'],
                        style: TextStyle(
                          color: AppConstants.textColor,
                          fontSize: 16,
                        ),
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 8),
              ],

              const SizedBox(height: 16),

              // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
              Row(
                mainAxisAlignment: MainAxisAlignment.end,
                children: [
                  // –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                  TextButton.icon(
                    icon: const Icon(Icons.edit, size: 18),
                    label: Text(localizations.translate('edit')),
                    style: TextButton.styleFrom(
                      foregroundColor: AppConstants.primaryColor,
                    ),
                    onPressed: () {
                      Navigator.pop(context);
                      _showEditMarkerDialog(marker);
                    },
                  ),
                  const SizedBox(width: 16),
                  // –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
                  TextButton.icon(
                    icon: const Icon(Icons.delete, size: 18),
                    label: Text(localizations.translate('delete')),
                    style: TextButton.styleFrom(foregroundColor: Colors.red),
                    onPressed: () {
                      Navigator.pop(context);
                      _confirmDeleteMarker(marker);
                    },
                  ),
                ],
              ),
            ],
          ),
        );
      },
    );
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Ç–∏–ø–∞ –¥–Ω–∞
  IconData _getBottomTypeIcon(String? type) {
    if (type == null) return Icons.terrain;

    // –ü—Ä–æ–±—É–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–π —Ç–∏–ø –≤ –Ω–æ–≤—ã–π
    final newType = _convertLegacyTypeToNew(type);

    return _bottomTypeIcons[newType] ?? Icons.terrain;
  }

  // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –º–∞—Ä–∫–µ—Ä–∞ —Å –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
  Future<void> _showAddMarkerDialog() async {
    final localizations = AppLocalizations.of(context);

    debugPrint('‚úÖ –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–∞ —Å –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º');

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã
    _depthController.text = '';
    _notesController.text = '';
    _distanceController.text = '';

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ª—É—á –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    int selectedRayIndex = _lastSelectedRayIndex;
    String selectedBottomType = _currentBottomType;

    showDialog(
      context: context,
      builder: (BuildContext context) {
        return StatefulBuilder(
          builder: (context, setState) {
            return AlertDialog(
              backgroundColor: AppConstants.cardColor,
              title: Text(
                localizations.translate('add_marker'),
                style: TextStyle(
                  color: AppConstants.textColor,
                  fontWeight: FontWeight.bold,
                ),
              ),
              content: SingleChildScrollView(
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    // –í—ã–±–æ—Ä –ª—É—á–∞ —á–µ—Ä–µ–∑ –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫
                    Row(
                      children: [
                        Text(
                          '${localizations.translate('ray')}:',
                          style: TextStyle(
                            color: AppConstants.textColor.withValues(
                              alpha: 0.7,
                            ),
                            fontSize: 14,
                          ),
                        ),
                        const SizedBox(width: 8),
                        Expanded(
                          child: DropdownButtonHideUnderline(
                            child: DropdownButton<int>(
                              value: selectedRayIndex,
                              dropdownColor: AppConstants.surfaceColor,
                              style: TextStyle(color: AppConstants.textColor),
                              items: List.generate(_raysCount, (index) {
                                return DropdownMenuItem<int>(
                                  value: index,
                                  child: Text(
                                    '${localizations.translate('ray')} ${index + 1}',
                                  ),
                                );
                              }),
                              onChanged: (value) {
                                if (value != null) {
                                  setState(() {
                                    selectedRayIndex = value;
                                  });
                                  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ª—É—á
                                  _lastSelectedRayIndex = value;
                                }
                              },
                            ),
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 16),

                    // –í–≤–æ–¥ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏ —Ü–∏—Ñ—Ä–∞–º–∏
                    TextField(
                      controller: _distanceController,
                      style: TextStyle(color: AppConstants.textColor),
                      decoration: InputDecoration(
                        labelText: localizations.translate('distance_m'),
                        labelStyle: TextStyle(
                          color: AppConstants.textColor.withValues(alpha: 0.7),
                        ),
                        enabledBorder: UnderlineInputBorder(
                          borderSide: BorderSide(
                            color: AppConstants.textColor.withValues(
                              alpha: 0.5,
                            ),
                          ),
                        ),
                        focusedBorder: UnderlineInputBorder(
                          borderSide: BorderSide(
                            color: AppConstants.primaryColor,
                          ),
                        ),
                      ),
                      keyboardType: TextInputType.number,
                    ),
                    const SizedBox(height: 16),

                    // –ì–ª—É–±–∏–Ω–∞
                    TextField(
                      controller: _depthController,
                      style: TextStyle(color: AppConstants.textColor),
                      decoration: InputDecoration(
                        labelText: localizations.translate('depth_m'),
                        labelStyle: TextStyle(
                          color: AppConstants.textColor.withValues(alpha: 0.7),
                        ),
                        enabledBorder: UnderlineInputBorder(
                          borderSide: BorderSide(
                            color: AppConstants.textColor.withValues(
                              alpha: 0.5,
                            ),
                          ),
                        ),
                        focusedBorder: UnderlineInputBorder(
                          borderSide: BorderSide(
                            color: AppConstants.primaryColor,
                          ),
                        ),
                      ),
                      keyboardType: TextInputType.numberWithOptions(
                        decimal: true,
                      ),
                    ),
                    const SizedBox(height: 16),

                    // –¢–∏–ø –¥–Ω–∞
                    Text(
                      '${localizations.translate('marker_type')}:',
                      style: TextStyle(
                        color: AppConstants.textColor.withValues(alpha: 0.7),
                        fontSize: 14,
                      ),
                    ),
                    const SizedBox(height: 8),

                    Wrap(
                      spacing: 8,
                      runSpacing: 8,
                      children:
                      _bottomTypes.map((type) {
                        return ChoiceChip(
                          label: Text(_getBottomTypeName(type)),
                          selected: selectedBottomType == type,
                          backgroundColor:
                          _bottomTypeColors[type] ?? Colors.grey,
                          selectedColor:
                          _bottomTypeColors[type] ?? Colors.grey,
                          labelStyle: TextStyle(
                            color: Colors.black,
                            fontWeight:
                            selectedBottomType == type
                                ? FontWeight.bold
                                : FontWeight.normal,
                          ),
                          avatar: Icon(
                            _bottomTypeIcons[type],
                            color: Colors.black,
                            size: 18,
                          ),
                          onSelected: (bool selected) {
                            if (selected) {
                              setState(() {
                                selectedBottomType = type;
                              });
                            }
                          },
                        );
                      }).toList(),
                    ),
                    const SizedBox(height: 16),

                    // –ó–∞–º–µ—Ç–∫–∏
                    TextField(
                      controller: _notesController,
                      style: TextStyle(color: AppConstants.textColor),
                      decoration: InputDecoration(
                        labelText: localizations.translate('notes'),
                        labelStyle: TextStyle(
                          color: AppConstants.textColor.withValues(alpha: 0.7),
                        ),
                        enabledBorder: UnderlineInputBorder(
                          borderSide: BorderSide(
                            color: AppConstants.textColor.withValues(
                              alpha: 0.5,
                            ),
                          ),
                        ),
                        focusedBorder: UnderlineInputBorder(
                          borderSide: BorderSide(
                            color: AppConstants.primaryColor,
                          ),
                        ),
                      ),
                      maxLines: 3,
                    ),
                  ],
                ),
              ),
              actions: [
                TextButton(
                  onPressed: () {
                    Navigator.pop(context);
                  },
                  child: Text(
                    localizations.translate('cancel'),
                    style: TextStyle(color: AppConstants.textColor),
                  ),
                ),
                ElevatedButton(
                  style: ElevatedButton.styleFrom(
                    backgroundColor: AppConstants.primaryColor,
                    foregroundColor: AppConstants.textColor,
                  ),
                  onPressed: () async {
                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –≤–≤–æ–¥–∞
                    if (_distanceController.text.isEmpty) {
                      ScaffoldMessenger.of(context).showSnackBar(
                        SnackBar(
                          content: Text(
                            localizations.translate('enter_distance'),
                          ),
                          backgroundColor: Colors.red,
                        ),
                      );
                      return;
                    }

                    // –ü–∞—Ä—Å–∏–º –≤–≤–µ–¥–µ–Ω–Ω—É—é –¥–∏—Å—Ç–∞–Ω—Ü–∏—é
                    double? distance = double.tryParse(
                      _distanceController.text,
                    );
                    if (distance == null) {
                      ScaffoldMessenger.of(context).showSnackBar(
                        SnackBar(
                          content: Text(
                            localizations.translate('enter_valid_distance'),
                          ),
                          backgroundColor: Colors.red,
                        ),
                      );
                      return;
                    }

                    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
                    if (distance > _maxDistance) {
                      distance = _maxDistance;
                    } else if (distance < 0) {
                      distance = 0;
                    }

                    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Ä–∫–µ—Ä
                    final newMarker = {
                      'id': const Uuid().v4(),
                      'rayIndex': selectedRayIndex.toDouble(),
                      'distance': distance,
                      'name': localizations.translate(
                        'marker',
                      ), // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
                      'depth':
                      _depthController.text.isEmpty
                          ? null
                          : double.tryParse(_depthController.text),
                      'notes': _notesController.text.trim(),
                      'bottomType': selectedBottomType,
                      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞–∫–∂–µ —É–≥–æ–ª –∏ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                      'angle': _calculateRayAngle(selectedRayIndex),
                      'ratio': distance / _maxDistance,
                    };

                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ª—É—á –∏ —Ç–∏–ø –¥–Ω–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
                    _lastSelectedRayIndex = selectedRayIndex;
                    _currentBottomType = selectedBottomType;

                    // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Å–ø–∏—Å–∫–∞ –º–∞—Ä–∫–µ—Ä–æ–≤ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –º–∞—Ä–∫–µ—Ä
                    final updatedMarkers = List<Map<String, dynamic>>.from(
                      _markerMap.markers,
                    );
                    updatedMarkers.add(newMarker);

                    this.setState(() {
                      // –í–º–µ—Å—Ç–æ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å
                      _markerMap = _markerMap.copyWith(markers: updatedMarkers);
                    });

                    Navigator.pop(context);

                    debugPrint('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –º–∞—Ä–∫–µ—Ä: ${newMarker['id']}');

                    // üî• –ê–í–¢–û–°–û–•–†–ê–ù–ï–ù–ò–ï: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–∞
                    await _autoSaveChanges('–ú–∞—Ä–∫–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω');

                    // –û–±–Ω–æ–≤–ª—è–µ–º UI
                    Future.microtask(() => this.setState(() {}));
                  },
                  child: Text(
                    localizations.translate('add'),
                    style: TextStyle(fontWeight: FontWeight.bold),
                  ),
                ),
              ],
            );
          },
        );
      },
    );
  }

  // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–∏–∞–ª–æ–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Ä–∫–µ—Ä–∞ —Å –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
  void _showEditMarkerDialog(Map<String, dynamic> marker) {
    final localizations = AppLocalizations.of(context);
    _depthController.text =
    marker['depth'] != null ? marker['depth'].toString() : '';
    _notesController.text = marker['notes'] ?? marker['description'] ?? '';
    _distanceController.text = marker['distance'].toString();

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–Ω–∞ (—Å —É—á–µ—Ç–æ–º –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    String selectedBottomType =
        marker['bottomType'] ?? _convertLegacyTypeToNew(marker['type']) ?? '–∏–ª';

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ª—É—á–∞
    int currentRayIndex = marker['rayIndex'].toInt();

    showDialog(
      context: context,
      builder: (BuildContext context) {
        return StatefulBuilder(
          builder: (context, setState) {
            return AlertDialog(
              backgroundColor: AppConstants.cardColor,
              title: Text(
                localizations.translate('edit_marker'),
                style: TextStyle(
                  color: AppConstants.textColor,
                  fontWeight: FontWeight.bold,
                ),
              ),
              content: SingleChildScrollView(
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    // –í—ã–±–æ—Ä –ª—É—á–∞
                    Row(
                      children: [
                        Text(
                          '${localizations.translate('ray')}:',
                          style: TextStyle(
                            color: AppConstants.textColor.withValues(
                              alpha: 0.7,
                            ),
                            fontSize: 14,
                          ),
                        ),
                        const SizedBox(width: 8),
                        Expanded(
                          child: DropdownButtonHideUnderline(
                            child: DropdownButton<int>(
                              value: currentRayIndex,
                              dropdownColor: AppConstants.surfaceColor,
                              style: TextStyle(color: AppConstants.textColor),
                              items: List.generate(_raysCount, (index) {
                                return DropdownMenuItem<int>(
                                  value: index,
                                  child: Text(
                                    '${localizations.translate('ray')} ${index + 1}',
                                  ),
                                );
                              }),
                              onChanged: (value) {
                                if (value != null) {
                                  setState(() {
                                    currentRayIndex = value;
                                  });
                                  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ª—É—á –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –¥–æ–±–∞–≤–ª–µ–Ω–∏–π
                                  _lastSelectedRayIndex = value;
                                }
                              },
                            ),
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 16),

                    // –í–≤–æ–¥ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏ —Ü–∏—Ñ—Ä–∞–º–∏
                    TextField(
                      controller: _distanceController,
                      style: TextStyle(color: AppConstants.textColor),
                      decoration: InputDecoration(
                        labelText: localizations.translate('distance_m'),
                        labelStyle: TextStyle(
                          color: AppConstants.textColor.withValues(alpha: 0.7),
                        ),
                        enabledBorder: UnderlineInputBorder(
                          borderSide: BorderSide(
                            color: AppConstants.textColor.withValues(
                              alpha: 0.5,
                            ),
                          ),
                        ),
                        focusedBorder: UnderlineInputBorder(
                          borderSide: BorderSide(
                            color: AppConstants.primaryColor,
                          ),
                        ),
                      ),
                      keyboardType: TextInputType.number,
                    ),
                    const SizedBox(height: 16),

                    // –ì–ª—É–±–∏–Ω–∞
                    TextField(
                      controller: _depthController,
                      style: TextStyle(color: AppConstants.textColor),
                      decoration: InputDecoration(
                        labelText: localizations.translate('depth_m'),
                        labelStyle: TextStyle(
                          color: AppConstants.textColor.withValues(alpha: 0.7),
                        ),
                        enabledBorder: UnderlineInputBorder(
                          borderSide: BorderSide(
                            color: AppConstants.textColor.withValues(
                              alpha: 0.5,
                            ),
                          ),
                        ),
                        focusedBorder: UnderlineInputBorder(
                          borderSide: BorderSide(
                            color: AppConstants.primaryColor,
                          ),
                        ),
                      ),
                      keyboardType: TextInputType.numberWithOptions(
                        decimal: true,
                      ),
                    ),
                    const SizedBox(height: 16),

                    // –¢–∏–ø –¥–Ω–∞ –º–∞—Ä–∫–µ—Ä–∞
                    Text(
                      localizations.translate('marker_type'),
                      style: TextStyle(
                        color: AppConstants.textColor.withValues(alpha: 0.7),
                        fontSize: 14,
                      ),
                    ),
                    const SizedBox(height: 8),

                    Wrap(
                      spacing: 8,
                      runSpacing: 8,
                      children:
                      _bottomTypes.map((type) {
                        return ChoiceChip(
                          label: Text(_getBottomTypeName(type)),
                          selected: selectedBottomType == type,
                          backgroundColor:
                          _bottomTypeColors[type] ?? Colors.grey,
                          selectedColor:
                          _bottomTypeColors[type] ?? Colors.grey,
                          labelStyle: TextStyle(
                            color: Colors.black,
                            fontWeight:
                            selectedBottomType == type
                                ? FontWeight.bold
                                : FontWeight.normal,
                          ),
                          avatar: Icon(
                            _bottomTypeIcons[type],
                            color: Colors.black,
                            size: 18,
                          ),
                          onSelected: (bool selected) {
                            if (selected) {
                              setState(() {
                                selectedBottomType = type;
                              });
                              // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –¥–Ω–∞
                              _currentBottomType = type;
                            }
                          },
                        );
                      }).toList(),
                    ),
                    const SizedBox(height: 16),

                    // –ó–∞–º–µ—Ç–∫–∏
                    TextField(
                      controller: _notesController,
                      style: TextStyle(color: AppConstants.textColor),
                      decoration: InputDecoration(
                        labelText: localizations.translate('notes'),
                        labelStyle: TextStyle(
                          color: AppConstants.textColor.withValues(alpha: 0.7),
                        ),
                        enabledBorder: UnderlineInputBorder(
                          borderSide: BorderSide(
                            color: AppConstants.textColor.withValues(
                              alpha: 0.5,
                            ),
                          ),
                        ),
                        focusedBorder: UnderlineInputBorder(
                          borderSide: BorderSide(
                            color: AppConstants.primaryColor,
                          ),
                        ),
                      ),
                      maxLines: 3,
                    ),
                  ],
                ),
              ),
              actions: [
                TextButton(
                  onPressed: () {
                    Navigator.pop(context);
                  },
                  child: Text(
                    localizations.translate('cancel'),
                    style: TextStyle(color: AppConstants.textColor),
                  ),
                ),
                ElevatedButton(
                  style: ElevatedButton.styleFrom(
                    backgroundColor: AppConstants.primaryColor,
                    foregroundColor: AppConstants.textColor,
                  ),
                  onPressed: () async {
                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –≤–≤–æ–¥–∞
                    if (_distanceController.text.isEmpty) {
                      ScaffoldMessenger.of(context).showSnackBar(
                        SnackBar(
                          content: Text(
                            localizations.translate('enter_distance'),
                          ),
                          backgroundColor: Colors.red,
                        ),
                      );
                      return;
                    }

                    // –ü–∞—Ä—Å–∏–º –≤–≤–µ–¥–µ–Ω–Ω—É—é –¥–∏—Å—Ç–∞–Ω—Ü–∏—é
                    double? distance = double.tryParse(
                      _distanceController.text,
                    );
                    if (distance == null) {
                      ScaffoldMessenger.of(context).showSnackBar(
                        SnackBar(
                          content: Text(
                            localizations.translate('enter_valid_distance'),
                          ),
                          backgroundColor: Colors.red,
                        ),
                      );
                      return;
                    }

                    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
                    if (distance > _maxDistance) {
                      distance = _maxDistance;
                    } else if (distance < 0) {
                      distance = 0;
                    }

                    // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä
                    final updatedMarker = {
                      ...marker,
                      'rayIndex': currentRayIndex.toDouble(),
                      'distance': distance,
                      'depth':
                      _depthController.text.isEmpty
                          ? null
                          : double.tryParse(_depthController.text),
                      'notes': _notesController.text.trim(),
                      'bottomType': selectedBottomType,
                      // –û–±–Ω–æ–≤–ª—è–µ–º —É–≥–æ–ª –∏ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ
                      'angle': _calculateRayAngle(currentRayIndex),
                      'ratio': distance / _maxDistance,
                    };

                    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
                    updatedMarker.remove('type');
                    updatedMarker.remove('description');

                    // –û–±–Ω–æ–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–∫–µ
                    _updateMarker(marker['id'], updatedMarker);

                    Navigator.pop(context);

                    debugPrint('‚úÖ –ú–∞—Ä–∫–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω: ${marker['id']}');

                    // üî• –ê–í–¢–û–°–û–•–†–ê–ù–ï–ù–ò–ï: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Ä–∫–µ—Ä–∞
                    await _autoSaveChanges('–ú–∞—Ä–∫–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω');

                    // –û–±–Ω–æ–≤–ª—è–µ–º UI
                    Future.microtask(() => this.setState(() {}));
                  },
                  child: Text(
                    localizations.translate('save'),
                    style: TextStyle(fontWeight: FontWeight.bold),
                  ),
                ),
              ],
            );
          },
        );
      },
    );
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–∞
  void _updateMarker(String markerId, Map<String, dynamic> updatedMarker) {
    final index = _markerMap.markers.indexWhere((m) => m['id'] == markerId);
    if (index != -1) {
      final updatedMarkers = List<Map<String, dynamic>>.from(
        _markerMap.markers,
      );
      updatedMarkers[index] = updatedMarker;

      setState(() {
        _markerMap = _markerMap.copyWith(markers: updatedMarkers);
      });
    }
  }

  // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–∞ —Å –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
  void _confirmDeleteMarker(Map<String, dynamic> marker) {
    final localizations = AppLocalizations.of(context);
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          backgroundColor: AppConstants.cardColor,
          title: Text(
            localizations.translate('delete_marker'),
            style: TextStyle(
              color: AppConstants.textColor,
              fontWeight: FontWeight.bold,
            ),
          ),
          content: Text(
            localizations.translate('delete_marker_confirmation'),
            style: TextStyle(color: AppConstants.textColor),
          ),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.of(context).pop();
              },
              child: Text(
                localizations.translate('cancel'),
                style: TextStyle(color: AppConstants.textColor),
              ),
            ),
            TextButton(
              onPressed: () async {
                Navigator.of(context).pop();

                // –£–¥–∞–ª—è–µ–º –º–∞—Ä–∫–µ—Ä
                _deleteMarker(marker);

                debugPrint('üóëÔ∏è –ú–∞—Ä–∫–µ—Ä —É–¥–∞–ª–µ–Ω: ${marker['id']}');

                // üî• –ê–í–¢–û–°–û–•–†–ê–ù–ï–ù–ò–ï: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–∞
                await _autoSaveChanges('–ú–∞—Ä–∫–µ—Ä —É–¥–∞–ª–µ–Ω');

                // –û–±–Ω–æ–≤–ª—è–µ–º UI
                Future.microtask(() => setState(() {}));
              },
              child: Text(
                localizations.translate('delete'),
                style: TextStyle(color: Colors.redAccent),
              ),
            ),
          ],
        );
      },
    );
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–∞
  void _deleteMarker(Map<String, dynamic> marker) {
    final updatedMarkers = List<Map<String, dynamic>>.from(_markerMap.markers);
    updatedMarkers.removeWhere((item) => item['id'] == marker['id']);

    setState(() {
      _markerMap = _markerMap.copyWith(markers: updatedMarkers);
    });
  }

  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ—Ö–æ–¥ –∫ —ç–∫—Ä–∞–Ω—É –≥—Ä–∞—Ñ–∏–∫–æ–≤ –≥–ª—É–±–∏–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
  Future<void> _showDepthCharts() async {
    try {
      final localizations = AppLocalizations.of(context);

      debugPrint('üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –≥—Ä–∞—Ñ–∏–∫–∞–º –≥–ª—É–±–∏–Ω—ã...');

      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π getter
      final hasActiveSubscription = _subscriptionService.isPremium;

      debugPrint('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: $hasActiveSubscription');

      if (hasActiveSubscription) {
        debugPrint('‚úÖ –ï—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ - –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ –≥–ª—É–±–∏–Ω—ã');

        // –ï—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞ - –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
        Navigator.push(
          context,
          MaterialPageRoute(
            builder: (context) => DepthChartScreen(markerMap: _markerMap),
          ),
        );
      } else {
        debugPrint('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º Paywall');

        // –ù–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º Paywall
        _showPremiumRequired(ContentType.depthChart);
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –≥—Ä–∞—Ñ–∏–∫—É –≥–ª—É–±–∏–Ω—ã: $e');
      // –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º Paywall (–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–æ–¥—Ö–æ–¥)
      _showPremiumRequired(ContentType.depthChart);
    }
  }

  // –ï–¥–∏–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∫–∞–∑–∞ PaywallScreen
  void _showPremiumRequired(ContentType contentType) {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => PaywallScreen(
          contentType: contentType.name,
        ),
      ),
    );
  }

  // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ—Å—Ç–æ–π –≤—ã—Ö–æ–¥ –±–µ–∑ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  Future<void> _exitScreen() async {
    debugPrint('üö™ –í—ã—Ö–æ–¥–∏–º –∏–∑ —ç–∫—Ä–∞–Ω–∞ –º–∞—Ä–∫–µ—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã (–∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)');
    if (mounted) {
      Navigator.pop(context, true);
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color(0xFF0B1F1D), // –¢–µ–º–Ω–æ-–∑–µ–ª–µ–Ω—ã–π —Ñ–æ–Ω –∫–∞–∫ –≤ HTML
      body: LoadingOverlay(
        isLoading: _isLoading,
        message: AppLocalizations.of(context).translate('please_wait'),
        child: Stack(
          children: [
            // –ö–∞—Ä—Ç–∞ –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω —Å —É—á–µ—Ç–æ–º —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –æ—Ç—Å—Ç—É–ø–æ–≤
            Positioned(
              top: 0,
              left: 0,
              right: 0,
              bottom: MediaQuery.of(context).padding.bottom,
              child: Container(
                decoration: const BoxDecoration(
                  gradient: LinearGradient(
                    begin: Alignment.topLeft,
                    end: Alignment.bottomRight,
                    colors: [Color(0xFF0B1F1D), Color(0xFF0F2823)],
                  ),
                ),
                child: CustomPaint(
                  size: Size.infinite,
                  painter: FullscreenMarkerMapPainter(
                    rayCount: _raysCount,
                    maxDistance: _maxDistance,
                    distanceStep: _distanceStep,
                    markers: _markerMap.markers,
                    bottomTypeColors: _bottomTypeColors,
                    bottomTypeIcons: _bottomTypeIcons,
                    onMarkerTap: _showMarkerDetails,
                    context: context,
                    leftAngle: _leftAngle,
                    rightAngle: _rightAngle,
                  ),
                ),
              ),
            ),

            // üî• –î–û–ë–ê–í–õ–ï–ù–û: –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ü–µ–Ω—Ç—Ä–µ
            if (_isAutoSaving)
              Positioned(
                top: MediaQuery.of(context).padding.top + 20,
                left: 0,
                right: 0,
                child: Center(
                  child: Container(
                    padding: const EdgeInsets.symmetric(
                      horizontal: 16,
                      vertical: 8,
                    ),
                    decoration: BoxDecoration(
                      color: AppConstants.primaryColor.withValues(alpha: 0.9),
                      borderRadius: BorderRadius.circular(20),
                      boxShadow: [
                        BoxShadow(
                          color: Colors.black.withValues(alpha: 0.3),
                          blurRadius: 8,
                          offset: const Offset(0, 2),
                        ),
                      ],
                    ),
                    child: Row(
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        SizedBox(
                          width: 16,
                          height: 16,
                          child: CircularProgressIndicator(
                            strokeWidth: 2,
                            valueColor: AlwaysStoppedAnimation<Color>(
                              Colors.white,
                            ),
                          ),
                        ),
                        const SizedBox(width: 8),
                        Text(
                          '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...',
                          style: TextStyle(
                            color: Colors.white,
                            fontSize: 14,
                            fontWeight: FontWeight.w500,
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
              ),

            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –≤ –ª–µ–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É
            Positioned(
              left: 16,
              bottom:
              55 +
                  MediaQuery.of(
                    context,
                  ).padding.bottom, // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
              child: FloatingActionButton(
                heroTag: "info_button",
                onPressed: _showMarkerInfo,
                backgroundColor: AppConstants.primaryColor.withValues(
                  alpha: 0.9,
                ),
                foregroundColor: Colors.white,
                child: const Icon(Icons.info_outline),
              ),
            ),

            // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –¢—Ä–∏ –∫–Ω–æ–ø–∫–∏ —Å–ø—Ä–∞–≤–∞ —Å —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–º–∏ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞–º–∏ –∏ —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –∏–∫–æ–Ω–∫–∞–º–∏
            Positioned(
              right: 16,
              bottom:
              205 + MediaQuery.of(context).padding.bottom, // –í–µ—Ä—Ö–Ω—è—è –∫–Ω–æ–ø–∫–∞ (130 + 75 = 205)
              child: FloatingActionButton(
                heroTag: "exit_button",
                onPressed: _exitScreen, // üî• –ò–ó–ú–ï–ù–ï–ù–û: –ø—Ä–æ—Å—Ç–æ–π –≤—ã—Ö–æ–¥ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                backgroundColor: AppConstants.primaryColor.withValues(
                  alpha: 0.9,
                ),
                foregroundColor: Colors.white,
                child: const Icon(Icons.arrow_back), // üî• –ò–ó–ú–ï–ù–ï–ù–û: –±–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω–∞—è –∏–∫–æ–Ω–∫–∞ –≤—ã—Ö–æ–¥–∞
              ),
            ),

            Positioned(
              right: 16,
              bottom:
              130 + MediaQuery.of(context).padding.bottom, // –°—Ä–µ–¥–Ω—è—è –∫–Ω–æ–ø–∫–∞ (55 + 75 = 130)
              child: FloatingActionButton(
                heroTag: "charts_button",
                onPressed: _showDepthCharts,
                backgroundColor: AppConstants.primaryColor.withValues(
                  alpha: 0.9,
                ),
                foregroundColor: Colors.white,
                child: const Icon(Icons.bar_chart),
              ),
            ),

            // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–∞ –Ω–∞ —Ç–æ–º –∂–µ —É—Ä–æ–≤–Ω–µ —á—Ç–æ –∏ –∫–Ω–æ–ø–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å –∏–∫–æ–Ω–∫–æ–π –º–∞—Ä–∫–µ—Ä–∞
            Positioned(
              right: 16,
              bottom:
              55 + MediaQuery.of(context).padding.bottom, // –ù–∞ —Ç–æ–º –∂–µ —É—Ä–æ–≤–Ω–µ —á—Ç–æ –∏ –∫–Ω–æ–ø–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (left: 55)
              child: FloatingActionButton(
                heroTag: "add_marker_button",
                onPressed: _showAddMarkerDialog,
                backgroundColor: AppConstants.primaryColor.withValues(
                  alpha: 0.9,
                ),
                foregroundColor: Colors.white,
                child: const Icon(Icons.add_location), // üî• –ò–ó–ú–ï–ù–ï–ù–û: –∏–∫–æ–Ω–∫–∞ –º–∞—Ä–∫–µ—Ä–∞ –≤–º–µ—Å—Ç–æ –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–ª—é—Å–∞
              ),
            ),
          ],
        ),
      ),
    );
  }
}

// –ù–æ–≤—ã–π painter –¥–ª—è –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã
class FullscreenMarkerMapPainter extends CustomPainter {
  final int rayCount;
  final double maxDistance;
  final double distanceStep;
  final List<Map<String, dynamic>> markers;
  final Map<String, Color> bottomTypeColors;
  final Map<String, IconData> bottomTypeIcons;
  final Function(Map<String, dynamic>) onMarkerTap;
  final BuildContext context;
  final double leftAngle;
  final double rightAngle;

  FullscreenMarkerMapPainter({
    required this.rayCount,
    required this.maxDistance,
    required this.distanceStep,
    required this.markers,
    required this.bottomTypeColors,
    required this.bottomTypeIcons,
    required this.onMarkerTap,
    required this.context,
    this.leftAngle = 105.0,
    this.rightAngle = 75.0,
  });

  @override
  void paint(Canvas canvas, Size size) {
    final paint = Paint();
    final centerX = size.width / 2;
    final originY = size.height - 5; // –ü–æ—á—Ç–∏ –≤ —Å–∞–º–æ–º –Ω–∏–∑—É
    final pixelsPerMeter = size.height / (maxDistance * 1.1);

    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø–æ–ª—É–∫—Ä—É–≥–æ–≤ (–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –¥—É–≥) —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –º–µ–ª–∫–∏–º –ø—É–Ω–∫—Ç–∏—Ä–æ–º
    paint.style = PaintingStyle.stroke;
    paint.strokeWidth = 1.0;
    paint.color = Colors.white.withValues(alpha: 0.3);

    for (int distance = 10; distance <= maxDistance.toInt(); distance += 10) {
      final radius = distance * pixelsPerMeter;

      // –†–∏—Å—É–µ–º –ø—É–Ω–∫—Ç–∏—Ä–Ω—É—é –¥—É–≥—É —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –æ—Ç—Ä–µ–∑–∫–∞–º–∏ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
      final path = Path();
      final dashLengthPx = 3.0; // –î–ª–∏–Ω–∞ —à—Ç—Ä–∏—Ö–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
      final gapLengthPx = 6.0; // –î–ª–∏–Ω–∞ –ø—Ä–æ–±–µ–ª–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
      final circumference = math.pi * radius; // –î–ª–∏–Ω–∞ –ø–æ–ª—É–∫—Ä—É–≥–∞
      final segmentLength = dashLengthPx + gapLengthPx;
      final numSegments = (circumference / segmentLength).floor();

      for (int i = 0; i < numSegments; i++) {
        // –í—ã—á–∏—Å–ª—è–µ–º —É–≥–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —à—Ç—Ä–∏—Ö–∞
        final startAngle = math.pi + (i * segmentLength / radius);
        final endAngle =
            math.pi + ((i * segmentLength + dashLengthPx) / radius);

        if (endAngle > math.pi * 2) break; // –ù–µ –≤—ã—Ö–æ–¥–∏–º –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –ø–æ–ª—É–∫—Ä—É–≥–∞

        final startX = centerX + radius * math.cos(startAngle);
        final startY = originY + radius * math.sin(startAngle);
        final endX = centerX + radius * math.cos(endAngle);
        final endY = originY + radius * math.sin(endAngle);

        path.moveTo(startX, startY);
        path.arcToPoint(Offset(endX, endY), radius: Radius.circular(radius));
      }

      canvas.drawPath(path, paint);
    }

    final rayAngles = <double>[];
    for (int i = 0; i < rayCount; i++) {
      final totalAngle = leftAngle - rightAngle;
      final angleStep = totalAngle / (rayCount - 1);
      final angleDegrees = leftAngle - (i * angleStep);
      final angleRadians = angleDegrees * (math.pi / 180);
      rayAngles.add(angleRadians);
    }

    for (final angle in rayAngles) {
      final rayLength = maxDistance * pixelsPerMeter;
      final endX = centerX + rayLength * math.cos(angle);
      final endY = originY - rayLength * math.sin(angle);

      canvas.drawLine(Offset(centerX, originY), Offset(endX, endY), paint);
    }

    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ç–æ—á–µ–∫ –Ω–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è—Ö
    paint.style = PaintingStyle.fill;
    paint.color = Colors.white.withValues(alpha: 0.5);

    for (final angle in rayAngles) {
      for (int distance = 10; distance <= maxDistance.toInt(); distance += 10) {
        final radius = distance * pixelsPerMeter;
        final pointX = centerX + radius * math.cos(angle);
        final pointY = originY - radius * math.sin(angle);

        if (pointY > 30) {
          // –ù–µ —Ä–∏—Å—É–µ–º —Ç–æ—á–∫–∏ —Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ –∫ –≤–µ—Ä—Ö—É
          canvas.drawCircle(Offset(pointX, pointY), 1.5, paint);
        }
      }
    }

    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø–æ–¥–ø–∏—Å–µ–π –¥–∏—Å—Ç–∞–Ω—Ü–∏–π
    _drawDistanceLabels(canvas, size, centerX, originY, pixelsPerMeter);

    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø–æ–¥–ø–∏—Å–µ–π –ª—É—á–µ–π
    _drawRayLabels(canvas, size, centerX, originY, pixelsPerMeter, rayAngles);

    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –º–∞—Ä–∫–µ—Ä–æ–≤ —Å –ø–æ–¥–ø–∏—Å—è–º–∏
    _drawMarkersWithLabels(
      canvas,
      size,
      centerX,
      originY,
      pixelsPerMeter,
      rayAngles,
    );
  }

  void _drawDistanceLabels(
      Canvas canvas,
      Size size,
      double centerX,
      double originY,
      double pixelsPerMeter,
      ) {
    final textPainter = TextPainter(textDirection: ui.TextDirection.ltr);

    // –ü–æ–¥–ø–∏—Å–∏ 10-50–º (–ø–æ–ø–µ—Ä–µ–∫ –≤–Ω–∏–∑—É —Å –ø–æ–≤–æ—Ä–æ—Ç–æ–º) - –°–î–í–ò–ù–£–¢–û –ü–†–ê–í–ï–ï
    for (int distance = 10; distance <= 50; distance += 10) {
      textPainter.text = TextSpan(
        text: distance.toString(),
        style: TextStyle(
          color: Colors.white.withValues(alpha: 0.9),
          fontSize: 13,
          fontWeight: FontWeight.w600,
          shadows: [
            Shadow(
              offset: const Offset(1, 1),
              blurRadius: 3,
              color: Colors.black.withValues(alpha: 0.8),
            ),
          ],
        ),
      );
      textPainter.layout();

      canvas.save();
      canvas.translate(
        centerX -
            distance * pixelsPerMeter +
            4, // –ò–ó–ú–ï–ù–ï–ù–û: –±—ã–ª–æ -4, —Å—Ç–∞–ª–æ +10 (—Å–¥–≤–∏–≥ –Ω–∞ 14px –ø—Ä–∞–≤–µ–µ)
        originY - 20,
      );
      canvas.rotate(-math.pi / 2); // –ü–æ–≤–æ—Ä–æ—Ç –Ω–∞ 270¬∞
      textPainter.paint(
        canvas,
        Offset(-textPainter.width / 2, -textPainter.height / 2),
      );
      canvas.restore();
    }

    // –ü–æ–¥–ø–∏—Å–∏ 60-200–º (–ø–æ –ª–µ–≤–æ–º—É –∫—Ä–∞—é) - —Ç–æ—á–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∫–∞–∫ –≤ HTML
    final distancePositions = [
      {'distance': 60, 'offset': 95.0},
      {'distance': 70, 'offset': 70.0},
      {'distance': 80, 'offset': 55.0},
      {'distance': 90, 'offset': 50.0},
      {'distance': 100, 'offset': 40.0},
      {'distance': 110, 'offset': 35.0},
      {'distance': 120, 'offset': 30.0},
      {'distance': 130, 'offset': 25.0},
      {'distance': 140, 'offset': 22.0},
      {'distance': 150, 'offset': 22.0},
      {'distance': 160, 'offset': 18.0},
      {'distance': 170, 'offset': 18.0},
      {'distance': 180, 'offset': 15.0},
      {'distance': 190, 'offset': 15.0},
      {'distance': 200, 'offset': 15.0},
    ];

    for (final pos in distancePositions) {
      final distance = pos['distance'] as int;
      final offset = pos['offset'] as double;

      textPainter.text = TextSpan(
        text: distance.toString(),
        style: TextStyle(
          color: Colors.white.withValues(alpha: 0.9),
          fontSize: 13,
          fontWeight: FontWeight.w600,
          shadows: [
            Shadow(
              offset: const Offset(1, 1),
              blurRadius: 3,
              color: Colors.black.withValues(alpha: 0.8),
            ),
          ],
        ),
      );
      textPainter.layout();

      textPainter.paint(
        canvas,
        Offset(8, originY - distance * pixelsPerMeter + offset),
      );
    }
  }

  void _drawRayLabels(
      Canvas canvas,
      Size size,
      double centerX,
      double originY,
      double pixelsPerMeter,
      List<double> rayAngles,
      ) {
    final localizations = AppLocalizations.of(context);
    final textPainter = TextPainter(textDirection: ui.TextDirection.ltr);

    // –†–∞–∑–º–µ—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –ª—É—á–µ–π —Ç–æ—á–Ω–æ –Ω–∞–¥ –∫–∞–∂–¥—ã–º –ª—É—á–æ–º –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏
    for (int i = 0; i < rayAngles.length && i < rayCount; i++) {
      final angle = rayAngles[i];

      // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –≤–µ—Ä—Ö–∞ —ç–∫—Ä–∞–Ω–∞ —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞–º–∏
      double labelY = 50.0; // –ë–∞–∑–æ–≤—ã–π –æ—Ç—Å—Ç—É–ø –æ—Ç –≤–µ—Ä—Ö–∞ —ç–∫—Ä–∞–Ω–∞

      // –í—ã—á–∏—Å–ª—è–µ–º X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–≥–ª–∞ –ª—É—á–∞
      final rayAtLabelY = (originY - labelY);
      double labelX = centerX + rayAtLabelY / math.tan(angle);

      // –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ª—É—á–∞
      switch (i) {
        case 0: // –õ—É—á 1 - –µ—â–µ –Ω–µ–º–Ω–æ–≥–æ –ª–µ–≤–µ–µ
          labelY += 20.0; // –ï—â–µ —á—É—Ç—å –Ω–∏–∂–µ
          labelX -= 50.0; // –ï—â–µ –Ω–µ–º–Ω–æ–≥–æ –ª–µ–≤–µ–µ (–±—ã–ª–æ 45.0)
          labelX = math.max(labelX, 35.0); // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Ç—Å—Ç—É–ø –æ—Ç –ª–µ–≤–æ–≥–æ –∫—Ä–∞—è
          break;
        case 1: // –õ—É—á 2 - —á—É—Ç–∫–∞ –Ω–∏–∂–µ
          labelY += 5.0; // –ß—É—Ç–∫–∞ –Ω–∏–∂–µ
          break;
        case 2: // –õ—É—á 3 - –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
          break;
        case 3: // –õ—É—á 4 - —á—É—Ç–∫–∞ –Ω–∏–∂–µ
          labelY += 5.0; // –ß—É—Ç–∫–∞ –Ω–∏–∂–µ
          break;
        case 4: // –õ—É—á 5 - –µ—â–µ –Ω–µ–º–Ω–æ–≥–æ –ø—Ä–∞–≤–µ–µ
          labelY += 20.0; // –ß—É—Ç–∫–∞ –Ω–∏–∂–µ
          labelX += 50.0; // –ï—â–µ –Ω–µ–º–Ω–æ–≥–æ –ø—Ä–∞–≤–µ–µ (–±—ã–ª–æ 45.0)
          labelX = math.min(
            labelX,
            size.width - 35.0,
          ); // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ—Ç—Å—Ç—É–ø –æ—Ç –ø—Ä–∞–≤–æ–≥–æ –∫—Ä–∞—è
          break;
      }

      textPainter.text = TextSpan(
        text:
        '${localizations.translate('ray')} ${i + 1}', // –ò–°–ü–†–ê–í–õ–ï–ù–û: —Ç–µ–ø–µ—Ä—å —á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—é
        style: TextStyle(
          color: Colors.white.withValues(alpha: 0.8),
          fontSize: 12,
          shadows: [
            Shadow(
              offset: const Offset(1, 1),
              blurRadius: 3,
              color: Colors.black.withValues(alpha: 0.8),
            ),
          ],
        ),
      );
      textPainter.layout();

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è —É—á–µ—Ç–∞ —à–∏—Ä–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞
      if (i == 0) {
        // –õ—É—á 1
        labelX = math.max(labelX, textPainter.width / 2 + 10);
      } else if (i == rayCount - 1) {
        // –õ—É—á 5
        labelX = math.min(labelX, size.width - textPainter.width / 2 - 10);
      }

      // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∑–∏—Ü–∏–∏
      textPainter.paint(
        canvas,
        Offset(labelX - textPainter.width / 2, labelY - textPainter.height / 2),
      );
    }
  }

  void _drawMarkersWithLabels(
      Canvas canvas,
      Size size,
      double centerX,
      double originY,
      double pixelsPerMeter,
      List<double> rayAngles,
      ) {
    for (final marker in markers) {
      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≤ –º–∞—Ä–∫–µ—Ä–µ –¥–∞–Ω–Ω—ã—Ö
      final rayIndex = (marker['rayIndex'] as double? ?? 0).toInt();
      final distance = marker['distance'] as double? ?? 0;

      if (rayIndex >= rayAngles.length) continue;

      // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –º–∞—Ä–∫–µ—Ä–∞
      final angle = rayAngles[rayIndex];
      final ratio = distance / maxDistance;
      final maxRayLength = maxDistance * pixelsPerMeter;

      final dx = centerX + maxRayLength * ratio * math.cos(angle);
      final dy = originY - maxRayLength * ratio * math.sin(angle);

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –ø–æ —Ç–∏–ø—É –¥–Ω–∞ (—Å —É—á–µ—Ç–æ–º –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
      String bottomType = marker['bottomType'] ?? 'default';
      if (bottomType == 'default' && marker['type'] != null) {
        // –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        switch (marker['type']) {
          case 'dropoff':
            bottomType = '–±—É–≥–æ—Ä';
            break;
          case 'weed':
            bottomType = '—Ç—Ä–∞–≤–∞_–≤–æ–¥–æ—Ä–æ—Å–ª–∏';
            break;
          case 'sandbar':
            bottomType = '—Ä–æ–≤–Ω–æ_—Ç–≤–µ—Ä–¥–æ';
            break;
          case 'structure':
            bottomType = '–∑–∞—Ü–µ–ø';
            break;
          default:
            bottomType = '–∏–ª';
        }
      }

      final markerColor = bottomTypeColors[bottomType] ?? Colors.blue;

      // –†–∏—Å—É–µ–º –º–∞—Ä–∫–µ—Ä
      final markerPaint =
      Paint()
        ..color = markerColor
        ..style = PaintingStyle.fill;

      // –†–∏—Å—É–µ–º –∫—Ä—É–∂–æ–∫ –±–µ–∑ –æ–±–≤–æ–¥–∫–∏
      canvas.drawCircle(Offset(dx, dy), 8, markerPaint);

      // –î–æ–±–∞–≤–ª—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é —Ç–æ—á–∫—É
      final centerDotPaint =
      Paint()
        ..color = Colors.white
        ..style = PaintingStyle.fill;

      canvas.drawCircle(Offset(dx, dy), 2, centerDotPaint);

      // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø–æ–¥–ø–∏—Å–µ–π —Å–ø—Ä–∞–≤–∞ –æ—Ç –ª—É—á–∞
      final textPainter = TextPainter(textDirection: ui.TextDirection.ltr);

      // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Å–ø—Ä–∞–≤–∞ –æ—Ç –ª—É—á–∞
      final labelOffsetX = 15.0; // –û—Ç—Å—Ç—É–ø –æ—Ç –º–∞—Ä–∫–µ—Ä–∞
      final labelX = dx + labelOffsetX;

      // –ü–æ–¥–ø–∏—Å—å –≥–ª—É–±–∏–Ω—ã —Å–≤–µ—Ä—Ö—É (–∂–µ–ª—Ç—ã–π —Ü–≤–µ—Ç)
      if (marker['depth'] != null) {
        textPainter.text = TextSpan(
          text: '${marker['depth'].toStringAsFixed(1)}–º',
          style: TextStyle(
            color: Colors.yellow.shade300,
            fontSize: 11,
            fontWeight: FontWeight.bold,
            shadows: [
              Shadow(
                offset: const Offset(1, 1),
                blurRadius: 2,
                color: Colors.black.withValues(alpha: 0.8),
              ),
            ],
          ),
        );
        textPainter.layout();

        // –†–∞–∑–º–µ—â–∞–µ–º –≥–ª—É–±–∏–Ω—É —Å–≤–µ—Ä—Ö—É
        textPainter.paint(
          canvas,
          Offset(labelX, dy - 10), // –í—ã—à–µ –º–∞—Ä–∫–µ—Ä–∞
        );
      }

      // –ü–æ–¥–ø–∏—Å—å –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏ —Å–Ω–∏–∑—É (–±–µ–ª—ã–π —Ü–≤–µ—Ç)
      textPainter.text = TextSpan(
        text: '${distance.toInt()}–º',
        style: TextStyle(
          color: Colors.white,
          fontSize: 11,
          fontWeight: FontWeight.bold,
          shadows: [
            Shadow(
              offset: const Offset(1, 1),
              blurRadius: 2,
              color: Colors.black.withValues(alpha: 0.8),
            ),
          ],
        ),
      );
      textPainter.layout();

      // –†–∞–∑–º–µ—â–∞–µ–º –¥–∏—Å—Ç–∞–Ω—Ü–∏—é —Å–Ω–∏–∑—É
      textPainter.paint(
        canvas,
        Offset(labelX, dy + 2), // –ù–∏–∂–µ –º–∞—Ä–∫–µ—Ä–∞
      );

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é –º–∞—Ä–∫–µ—Ä–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∞–ø–æ–≤ (—Ö–∏—Ç–±–æ–∫—Å)
      marker['_hitboxCenter'] = Offset(dx, dy);
      marker['_hitboxRadius'] = 15.0; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–æ–Ω—É –Ω–∞–∂–∞—Ç–∏—è
    }
  }

  @override
  bool shouldRepaint(covariant CustomPainter oldDelegate) {
    return true;
  }

  @override
  bool? hitTest(Offset position) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–∂–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –º–∞—Ä–∫–µ—Ä
    for (final marker in markers) {
      if (marker.containsKey('_hitboxCenter') &&
          marker.containsKey('_hitboxRadius')) {
        final center = marker['_hitboxCenter'] as Offset;
        final radius = marker['_hitboxRadius'] as double;

        if ((center - position).distance <= radius) {
          // –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –º–∞—Ä–∫–µ—Ä
          onMarkerTap(marker);
          return true;
        }
      }
    }
    return null;
  }
}