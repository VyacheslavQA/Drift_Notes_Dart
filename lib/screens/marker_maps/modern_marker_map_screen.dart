// –ü—É—Ç—å: lib/screens/marker_maps/modern_marker_map_screen.dart

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:intl/intl.dart';
import 'package:uuid/uuid.dart';
import 'package:provider/provider.dart';
import '../../constants/app_constants.dart';
import '../../models/marker_map_model.dart';
import '../../services/firebase/firebase_service.dart';
import '../../widgets/loading_overlay.dart';
import 'dart:math' as math;
import '../../localization/app_localizations.dart';
import 'depth_chart_screen.dart';
import '../../services/subscription/subscription_service.dart';
import '../../constants/subscription_constants.dart';
import '../subscription/paywall_screen.dart';
import '../../repositories/marker_map_repository.dart';
import '../../providers/subscription_provider.dart';

// –ò–º–ø–æ—Ä—Ç—ã —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
import 'components/modern_map_background.dart';
import 'components/modern_map_grid.dart';
import 'components/modern_map_rays.dart';
import 'components/modern_map_labels.dart';
import 'components/modern_map_markers.dart';
import 'utils/map_calculations.dart';

class ModernMarkerMapScreen extends StatefulWidget {
  final MarkerMapModel markerMap;

  const ModernMarkerMapScreen({super.key, required this.markerMap});

  @override
  ModernMarkerMapScreenState createState() => ModernMarkerMapScreenState();
}

class ModernMarkerMapScreenState extends State<ModernMarkerMapScreen>
    with TickerProviderStateMixin {
  final _firebaseService = FirebaseService();
  final _depthController = TextEditingController();
  final _notesController = TextEditingController();
  final _distanceController = TextEditingController();
  final _subscriptionService = SubscriptionService();
  final _markerMapRepository = MarkerMapRepository();

  late MarkerMapModel _markerMap;
  bool _isLoading = false;
  bool _isAutoSaving = false;
  String _saveMessage = '';

  // üî• –§–ª–∞–≥ disposed –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —É—Ç–µ—á–µ–∫
  bool _isDisposed = false;

  // üé¨ –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã –∞–Ω–∏–º–∞—Ü–∏–π
  late AnimationController _fadeController;
  late AnimationController _staggerController;
  late Animation<double> _fadeAnimation;

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ª—É—á–∞
  int _lastSelectedRayIndex = 0;

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Ä—Ç—ã (—Ç–µ –∂–µ —á—Ç–æ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ)
  final int _raysCount = 5;
  final double _maxDistance = 200.0;
  final double _distanceStep = 10.0;
  final double _leftAngle = 105.0;
  final double _rightAngle = 75.0;

  // –¢–∏–ø—ã –¥–Ω–∞ –¥–ª—è –º–∞—Ä–∫–µ—Ä–æ–≤ (—Ç–µ –∂–µ —á—Ç–æ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ)
  final List<String> _bottomTypes = [
    '–∏–ª',
    '–≥–ª—É–±–æ–∫–∏–π_–∏–ª',
    '—Ä–∞–∫—É—à–∫–∞',
    '—Ä–æ–≤–Ω–æ_—Ç–≤–µ—Ä–¥–æ',
    '–∫–∞–º–Ω–∏',
    '—Ç—Ä–∞–≤–∞_–≤–æ–¥–æ—Ä–æ—Å–ª–∏',
    '–∑–∞—Ü–µ–ø',
    '–±—É–≥–æ—Ä',
    '—Ç–æ—á–∫–∞_–∫–æ—Ä–º–ª–µ–Ω–∏—è',
  ];

  String _currentBottomType = '–∏–ª';

  // –¶–≤–µ—Ç–∞ –∏ –∏–∫–æ–Ω–∫–∏ (—Ç–µ –∂–µ —á—Ç–æ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ)
  final Map<String, Color> _bottomTypeColors = {
    '–∏–ª': Color(0xFFD4A574),
    '–≥–ª—É–±–æ–∫–∏–π_–∏–ª': Color(0xFF8B4513),
    '—Ä–∞–∫—É—à–∫–∞': Colors.white,
    '—Ä–æ–≤–Ω–æ_—Ç–≤–µ—Ä–¥–æ': Colors.yellow,
    '–∫–∞–º–Ω–∏': Colors.grey,
    '—Ç—Ä–∞–≤–∞_–≤–æ–¥–æ—Ä–æ—Å–ª–∏': Color(0xFF90EE90),
    '–∑–∞—Ü–µ–ø': Colors.red,
    '–±—É–≥–æ—Ä': Color(0xFFFF8C00),
    '—Ç–æ—á–∫–∞_–∫–æ—Ä–º–ª–µ–Ω–∏—è': Color(0xFF00BFFF),
    'default': Colors.blue,
  };

  final Map<String, IconData> _bottomTypeIcons = {
    '–∏–ª': Icons.view_headline,
    '–≥–ª—É–±–æ–∫–∏–π_–∏–ª': Icons.waves_outlined,
    '—Ä–∞–∫—É—à–∫–∞': Icons.wifi,
    '—Ä–æ–≤–Ω–æ_—Ç–≤–µ—Ä–¥–æ': Icons.remove,
    '–∫–∞–º–Ω–∏': Icons.more_horiz,
    '—Ç—Ä–∞–≤–∞_–≤–æ–¥–æ—Ä–æ—Å–ª–∏': Icons.grass,
    '–∑–∞—Ü–µ–ø': Icons.warning,
    '–±—É–≥–æ—Ä': Icons.landscape,
    '—Ç–æ—á–∫–∞_–∫–æ—Ä–º–ª–µ–Ω–∏—è': Icons.gps_fixed,
    'default': Icons.location_on,
  };

  @override
  void initState() {
    super.initState();
    _markerMap = widget.markerMap;
    SystemChrome.setEnabledSystemUIMode(SystemUiMode.immersive);

    // üé¨ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–π
    _fadeController = AnimationController(
      duration: const Duration(milliseconds: 800),
      vsync: this,
    );

    _staggerController = AnimationController(
      duration: const Duration(milliseconds: 1200),
      vsync: this,
    );

    _fadeAnimation = Tween<double>(
      begin: 0.0,
      end: 1.0,
    ).animate(CurvedAnimation(
      parent: _fadeController,
      curve: Curves.easeInOut,
    ));

    // üé¨ –ó–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏
    _fadeController.forward();
    _staggerController.forward();

    debugPrint('üó∫Ô∏è ModernMarkerMapScreen: –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–∞—Ä—Ç—É –º–∞—Ä–∫–µ—Ä–æ–≤ ID: ${_markerMap.id}');
  }

  @override
  void dispose() {
    debugPrint('üó∫Ô∏è ModernMarkerMapScreen: –ù–∞—á–∏–Ω–∞–µ–º dispose...');

    _isDisposed = true;

    // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã
    _depthController.dispose();
    _notesController.dispose();
    _distanceController.dispose();

    // üé¨ –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã –∞–Ω–∏–º–∞—Ü–∏–π
    _fadeController.dispose();
    _staggerController.dispose();

    // –û—á–∏—â–∞–µ–º –∫—ç—à Repository
    try {
      MarkerMapRepository.clearCache();
      debugPrint('üó∫Ô∏è –ö—ç—à Repository –æ—á–∏—â–µ–Ω –≤ dispose');
    } catch (e) {
      debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ Repository: $e');
    }

    SystemChrome.setEnabledSystemUIMode(SystemUiMode.edgeToEdge);
    debugPrint('üó∫Ô∏è ModernMarkerMapScreen: dispose –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    super.dispose();
  }

  // üî• –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π setState —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π disposed
  void _safeSetState(VoidCallback fn) {
    if (!_isDisposed && mounted) {
      setState(fn);
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∏–ø–∞ –¥–Ω–∞
  String _getBottomTypeName(String? type) {
    final localizations = AppLocalizations.of(context);
    if (type == null) return localizations.translate('silt');

    switch (type) {
      case '–∏–ª':
        return localizations.translate('silt');
      case '–≥–ª—É–±–æ–∫–∏–π_–∏–ª':
        return localizations.translate('deep_silt');
      case '—Ä–∞–∫—É—à–∫–∞':
        return localizations.translate('shell');
      case '—Ä–æ–≤–Ω–æ_—Ç–≤–µ—Ä–¥–æ':
        return localizations.translate('firm_bottom');
      case '–∫–∞–º–Ω–∏':
        return localizations.translate('stones');
      case '—Ç—Ä–∞–≤–∞_–≤–æ–¥–æ—Ä–æ—Å–ª–∏':
        return localizations.translate('grass_algae');
      case '–∑–∞—Ü–µ–ø':
        return localizations.translate('snag');
      case '–±—É–≥–æ—Ä':
        return localizations.translate('hill');
      case '—Ç–æ—á–∫–∞_–∫–æ—Ä–º–ª–µ–Ω–∏—è':
        return localizations.translate('feeding_spot');
      case 'dropoff':
        return localizations.translate('hill');
      case 'weed':
        return localizations.translate('grass_algae');
      case 'sandbar':
        return localizations.translate('firm_bottom');
      case 'structure':
        return localizations.translate('snag');
      case 'default':
        return localizations.translate('silt');
      default:
        return localizations.translate('silt');
    }
  }

  // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —É–≥–ª–∞ –ª—É—á–∞
  double _calculateRayAngle(int rayIndex) {
    final totalAngle = _leftAngle - _rightAngle;
    final angleStep = totalAngle / (_raysCount - 1);
    return (_leftAngle - (rayIndex * angleStep)) * (math.pi / 180);
  }

  // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π disposed
  Future<void> _autoSaveChanges(String action) async {
    if (_isDisposed || !mounted) return;

    try {
      _safeSetState(() {
        _isAutoSaving = true;
        _saveMessage = action;
      });

      debugPrint('üíæ –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: $action');

      final markerMapToSave = _markerMap.copyWith(
        markers: _markerMap.markers.map((marker) {
          final cleanMarker = Map<String, dynamic>.from(marker);
          cleanMarker.remove('_hitboxCenter');
          cleanMarker.remove('_hitboxRadius');
          return cleanMarker;
        }).toList(),
      );

      await _markerMapRepository.updateMarkerMap(markerMapToSave);

      MarkerMapRepository.clearCache();

      if (!_isDisposed && mounted) {
        _safeSetState(() {
          _isAutoSaving = false;
          _saveMessage = '';
        });

        final localizations = AppLocalizations.of(context);
        ScaffoldMessenger.of(context).clearSnackBars();
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('${action} - ${localizations.translate('saved')}'),
            backgroundColor: Colors.green,
            duration: const Duration(seconds: 1),
          ),
        );
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: $e');
      if (!_isDisposed && mounted) {
        _safeSetState(() {
          _isAutoSaving = false;
          _saveMessage = '';
        });

        final localizations = AppLocalizations.of(context);
        ScaffoldMessenger.of(context).clearSnackBars();
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('${localizations.translate('save_error')}: ${e.toString()}'),
            backgroundColor: Colors.red,
            duration: const Duration(seconds: 2),
          ),
        );
      }
    }
  }

  // –ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—Ä–∫–µ—Ä–∞—Ö —Å —Ç–∏–ø–∞–º–∏ –¥–Ω–∞
  void _showMarkerInfo() {
    if (_isDisposed) return;

    final localizations = AppLocalizations.of(context);

    showDialog(
      context: context,
      builder: (BuildContext context) {
        return Dialog(
          backgroundColor: AppConstants.cardColor,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(16),
          ),
          child: Container(
            constraints: BoxConstraints(
              maxWidth: MediaQuery.of(context).size.width * 0.9,
              maxHeight: MediaQuery.of(context).size.height * 0.8,
            ),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                // –ó–∞–≥–æ–ª–æ–≤–æ–∫
                Container(
                  padding: const EdgeInsets.all(20),
                  decoration: BoxDecoration(
                    color: AppConstants.primaryColor.withOpacity(0.1),
                    borderRadius: const BorderRadius.only(
                      topLeft: Radius.circular(16),
                      topRight: Radius.circular(16),
                    ),
                  ),
                  child: Row(
                    children: [
                      Icon(
                        Icons.info_outline,
                        color: AppConstants.primaryColor,
                        size: 24,
                      ),
                      const SizedBox(width: 12),
                      Expanded(
                        child: Text(
                          '–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –∫–∞—Ä—Ç—ã –º–∞—Ä–∫–µ—Ä–æ–≤',
                          style: TextStyle(
                            color: AppConstants.textColor,
                            fontSize: 20,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ),
                    ],
                  ),
                ),

                // –°–æ–¥–µ—Ä–∂–∏–º–æ–µ
                Flexible(
                  child: SingleChildScrollView(
                    padding: const EdgeInsets.all(20),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        // üìã –ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ
                        Text(
                          localizations.translate('how_to_use_guide'),
                          style: TextStyle(
                            color: AppConstants.textColor,
                            fontSize: 18,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                        const SizedBox(height: 12),
                        _buildInstructionItem(
                          icon: Icons.add_location,
                          title: localizations.translate('adding_marker_title'),
                          description: localizations.translate('adding_marker_instruction'),
                        ),
                        _buildInstructionItem(
                          icon: Icons.touch_app,
                          title: localizations.translate('view_details_title'),
                          description: localizations.translate('view_details_instruction'),
                        ),
                        _buildInstructionItem(
                          icon: Icons.palette,
                          title: localizations.translate('marker_colors_title'),
                          description: localizations.translate('marker_colors_instruction'),
                        ),

                        const SizedBox(height: 24),

                        // üé® –¢–ò–ü–´ –î–ù–ê
                        Text(
                          localizations.translate('bottom_types_guide'),
                          style: TextStyle(
                            color: AppConstants.textColor,
                            fontSize: 18,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                        const SizedBox(height: 16),

                        // –°–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ –¥–Ω–∞ —Å —Ü–≤–µ—Ç–Ω—ã–º–∏ –∫—Ä—É–∂–∫–∞–º–∏ –∏ –∏–∫–æ–Ω–∫–∞–º–∏
                        ...(_bottomTypes.map((type) {
                          return Padding(
                            padding: const EdgeInsets.symmetric(vertical: 6),
                            child: Row(
                              children: [
                                // –¶–≤–µ—Ç–Ω–æ–π –∫—Ä—É–∂–æ–∫ —Å –∏–∫–æ–Ω–∫–æ–π (–∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π –º–∞—Ä–∫–µ—Ä)
                                Container(
                                  width: 24,
                                  height: 24,
                                  decoration: BoxDecoration(
                                    color: _bottomTypeColors[type] ?? Colors.blue,
                                    shape: BoxShape.circle,
                                    border: Border.all(
                                      color: Colors.white.withOpacity(0.3),
                                      width: 1,
                                    ),
                                    boxShadow: [
                                      BoxShadow(
                                        color: Colors.black.withOpacity(0.2),
                                        blurRadius: 3,
                                        offset: const Offset(0, 1),
                                      ),
                                    ],
                                  ),
                                  child: Icon(
                                    _bottomTypeIcons[type] ?? Icons.location_on,
                                    color: Colors.black87,
                                    size: 14,
                                  ),
                                ),
                                const SizedBox(width: 16),

                                // –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –¥–Ω–∞
                                Expanded(
                                  child: Text(
                                    _getBottomTypeName(type),
                                    style: TextStyle(
                                      color: AppConstants.textColor,
                                      fontSize: 16,
                                      fontWeight: FontWeight.w500,
                                    ),
                                  ),
                                ),

                                // –¶–≤–µ—Ç–Ω–∞—è –º–µ—Ç–∫–∞ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
                                Container(
                                  width: 12,
                                  height: 12,
                                  decoration: BoxDecoration(
                                    color: _bottomTypeColors[type] ?? Colors.blue,
                                    shape: BoxShape.circle,
                                  ),
                                ),
                              ],
                            ),
                          );
                        }).toList()),

                        const SizedBox(height: 24),

                        // üí° –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –°–û–í–ï–¢–´
                        Container(
                          padding: const EdgeInsets.all(16),
                          decoration: BoxDecoration(
                            color: AppConstants.primaryColor.withOpacity(0.1),
                            borderRadius: BorderRadius.circular(12),
                            border: Border.all(
                              color: AppConstants.primaryColor.withOpacity(0.3),
                              width: 1,
                            ),
                          ),
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Row(
                                children: [
                                  Icon(
                                    Icons.lightbulb_outline,
                                    color: AppConstants.primaryColor,
                                    size: 20,
                                  ),
                                  const SizedBox(width: 8),
                                  Text(
                                    localizations.translate('useful_tips_title'),
                                    style: TextStyle(
                                      color: AppConstants.textColor,
                                      fontSize: 16,
                                      fontWeight: FontWeight.bold,
                                    ),
                                  ),
                                ],
                              ),
                              const SizedBox(height: 12),
                              Text(
                                localizations.translate('useful_tips_content'),
                                style: TextStyle(
                                  color: AppConstants.textColor.withOpacity(0.8),
                                  fontSize: 14,
                                  height: 1.4,
                                ),
                              ),
                            ],
                          ),
                        ),
                      ],
                    ),
                  ),
                ),

                // –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
                Container(
                  padding: const EdgeInsets.all(20),
                  decoration: BoxDecoration(
                    border: Border(
                      top: BorderSide(
                        color: AppConstants.textColor.withOpacity(0.1),
                        width: 1,
                      ),
                    ),
                  ),
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.end,
                    children: [
                      ElevatedButton(
                        onPressed: () => Navigator.pop(context),
                        style: ElevatedButton.styleFrom(
                          backgroundColor: AppConstants.primaryColor,
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(8),
                          ),
                        ),
                        child: Text(
                          localizations.translate('close'),
                          style: TextStyle(
                            color: AppConstants.textColor,
                            fontWeight: FontWeight.w600,
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),
        );
      },
    );
  }

  // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—É–Ω–∫—Ç–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
  Widget _buildInstructionItem({
    required IconData icon,
    required String title,
    required String description,
  }) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Container(
            padding: const EdgeInsets.all(8),
            decoration: BoxDecoration(
              color: AppConstants.primaryColor.withOpacity(0.2),
              borderRadius: BorderRadius.circular(8),
            ),
            child: Icon(
              icon,
              color: AppConstants.primaryColor,
              size: 20,
            ),
          ),
          const SizedBox(width: 12),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  title,
                  style: TextStyle(
                    color: AppConstants.textColor,
                    fontSize: 16,
                    fontWeight: FontWeight.w600,
                  ),
                ),
                const SizedBox(height: 4),
                Text(
                  description,
                  style: TextStyle(
                    color: AppConstants.textColor.withOpacity(0.7),
                    fontSize: 14,
                    height: 1.3,
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  // –ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π –º–∞—Ä–∫–µ—Ä–∞
  void _showMarkerDetails(Map<String, dynamic> marker) {
    if (_isDisposed) return;

    final localizations = AppLocalizations.of(context);

    showModalBottomSheet(
      context: context,
      backgroundColor: AppConstants.cardColor,
      shape: const RoundedRectangleBorder(
        borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
      ),
      builder: (context) {
        return Container(
          padding: const EdgeInsets.all(20),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                marker['name'] ?? localizations.translate('marker'),
                style: TextStyle(
                  color: AppConstants.textColor,
                  fontSize: 22,
                  fontWeight: FontWeight.bold,
                ),
              ),
              const SizedBox(height: 10),
              Text(
                '${localizations.translate('ray')} ${(marker['rayIndex'] + 1).toInt()}, ${marker['distance'].toInt()} ${localizations.translate('distance_m')}',
                style: TextStyle(
                  color: AppConstants.textColor,
                  fontSize: 16,
                ),
              ),
              if (marker['depth'] != null) ...[
                const SizedBox(height: 8),
                Text(
                  '${localizations.translate('depth')}: ${marker['depth']} ${localizations.translate('meters')}',
                  style: TextStyle(
                    color: AppConstants.textColor,
                    fontSize: 16,
                  ),
                ),
              ],
              if (marker['notes'] != null && marker['notes'].isNotEmpty) ...[
                const SizedBox(height: 8),
                Text(
                  marker['notes'],
                  style: TextStyle(
                    color: AppConstants.textColor,
                    fontSize: 16,
                  ),
                ),
              ],
              const SizedBox(height: 16),
              Row(
                mainAxisAlignment: MainAxisAlignment.end,
                children: [
                  TextButton(
                    onPressed: () => Navigator.pop(context),
                    child: Text(localizations.translate('close')),
                  ),
                ],
              ),
            ],
          ),
        );
      },
    );
  }

  // üî• –ù–û–í–´–ô –î–ò–ê–õ–û–ì –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ú–ê–†–ö–ï–†–ê –í –ü–†–ê–í–ò–õ–¨–ù–û–ú –ü–û–†–Ø–î–ö–ï
  Future<void> _showAddMarkerDialog() async {
    if (_isDisposed) return;

    final localizations = AppLocalizations.of(context);

    _depthController.text = '';
    _notesController.text = '';
    _distanceController.text = '';

    int selectedRayIndex = _lastSelectedRayIndex;
    String selectedBottomType = _currentBottomType;

    showDialog(
      context: context,
      builder: (BuildContext context) {
        return StatefulBuilder(
          builder: (context, setDialogState) {
            return Dialog(
              backgroundColor: AppConstants.cardColor,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(16),
              ),
              child: Container(
                width: MediaQuery.of(context).size.width * 0.9,
                constraints: BoxConstraints(
                  maxHeight: MediaQuery.of(context).size.height * 0.8,
                ),
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
                    Container(
                      padding: const EdgeInsets.all(20),
                      decoration: BoxDecoration(
                        color: AppConstants.primaryColor.withOpacity(0.1),
                        borderRadius: const BorderRadius.only(
                          topLeft: Radius.circular(16),
                          topRight: Radius.circular(16),
                        ),
                      ),
                      child: Row(
                        children: [
                          Icon(
                            Icons.add_location,
                            color: AppConstants.primaryColor,
                            size: 24,
                          ),
                          const SizedBox(width: 12),
                          Expanded(
                            child: Text(
                              localizations.translate('add_marker'),
                              style: TextStyle(
                                color: AppConstants.textColor,
                                fontSize: 20,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                          ),
                        ],
                      ),
                    ),

                    // –°–æ–¥–µ—Ä–∂–∏–º–æ–µ
                    Flexible(
                      child: SingleChildScrollView(
                        padding: const EdgeInsets.all(20),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            // 1Ô∏è‚É£ –í–´–ë–û–† –õ–£–ß–ê
                            Text(
                              '1. ${localizations.translate('ray_selection')}',
                              style: TextStyle(
                                color: AppConstants.textColor,
                                fontSize: 16,
                                fontWeight: FontWeight.w600,
                              ),
                            ),
                            const SizedBox(height: 8),
                            Container(
                              width: double.infinity,
                              padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 4),
                              decoration: BoxDecoration(
                                border: Border.all(
                                  color: AppConstants.primaryColor.withOpacity(0.3),
                                ),
                                borderRadius: BorderRadius.circular(8),
                              ),
                              child: DropdownButtonHideUnderline(
                                child: DropdownButton<int>(
                                  value: selectedRayIndex,
                                  isExpanded: true,
                                  dropdownColor: AppConstants.surfaceColor,
                                  style: TextStyle(color: AppConstants.textColor),
                                  items: List.generate(_raysCount, (index) {
                                    return DropdownMenuItem<int>(
                                      value: index,
                                      child: Text('${localizations.translate('ray')} ${index + 1}'),
                                    );
                                  }),
                                  onChanged: (value) {
                                    if (value != null) {
                                      setDialogState(() {
                                        selectedRayIndex = value;
                                      });
                                      _lastSelectedRayIndex = value;
                                    }
                                  },
                                ),
                              ),
                            ),
                            const SizedBox(height: 20),

                            // 2Ô∏è‚É£ –†–ê–°–°–¢–û–Ø–ù–ò–ï
                            Text(
                              '2. ${localizations.translate('distance_m')}',
                              style: TextStyle(
                                color: AppConstants.textColor,
                                fontSize: 16,
                                fontWeight: FontWeight.w600,
                              ),
                            ),
                            const SizedBox(height: 8),
                            TextField(
                              controller: _distanceController,
                              style: TextStyle(color: AppConstants.textColor),
                              decoration: InputDecoration(
                                hintText: localizations.translate('distance_hint'),
                                hintStyle: TextStyle(
                                  color: AppConstants.textColor.withOpacity(0.5),
                                ),
                                enabledBorder: OutlineInputBorder(
                                  borderRadius: BorderRadius.circular(8),
                                  borderSide: BorderSide(
                                    color: AppConstants.primaryColor.withOpacity(0.3),
                                  ),
                                ),
                                focusedBorder: OutlineInputBorder(
                                  borderRadius: BorderRadius.circular(8),
                                  borderSide: BorderSide(
                                    color: AppConstants.primaryColor,
                                  ),
                                ),
                                contentPadding: const EdgeInsets.symmetric(horizontal: 12, vertical: 12),
                              ),
                              keyboardType: TextInputType.number,
                            ),
                            const SizedBox(height: 20),

                            // 3Ô∏è‚É£ –ì–õ–£–ë–ò–ù–ê
                            Text(
                              '3. ${localizations.translate('depth_m')}',
                              style: TextStyle(
                                color: AppConstants.textColor,
                                fontSize: 16,
                                fontWeight: FontWeight.w600,
                              ),
                            ),
                            const SizedBox(height: 8),
                            TextField(
                              controller: _depthController,
                              style: TextStyle(color: AppConstants.textColor),
                              decoration: InputDecoration(
                                hintText: localizations.translate('depth_hint'),
                                hintStyle: TextStyle(
                                  color: AppConstants.textColor.withOpacity(0.5),
                                ),
                                enabledBorder: OutlineInputBorder(
                                  borderRadius: BorderRadius.circular(8),
                                  borderSide: BorderSide(
                                    color: AppConstants.primaryColor.withOpacity(0.3),
                                  ),
                                ),
                                focusedBorder: OutlineInputBorder(
                                  borderRadius: BorderRadius.circular(8),
                                  borderSide: BorderSide(
                                    color: AppConstants.primaryColor,
                                  ),
                                ),
                                contentPadding: const EdgeInsets.symmetric(horizontal: 12, vertical: 12),
                              ),
                              keyboardType: TextInputType.numberWithOptions(decimal: true),
                            ),
                            const SizedBox(height: 20),

                            // 4Ô∏è‚É£ –ó–ê–ú–ï–¢–ö–ò
                            Text(
                              '4. ${localizations.translate('notes')}',
                              style: TextStyle(
                                color: AppConstants.textColor,
                                fontSize: 16,
                                fontWeight: FontWeight.w600,
                              ),
                            ),
                            const SizedBox(height: 8),
                            TextField(
                              controller: _notesController,
                              style: TextStyle(color: AppConstants.textColor),
                              decoration: InputDecoration(
                                hintText: localizations.translate('notes_hint'),
                                hintStyle: TextStyle(
                                  color: AppConstants.textColor.withOpacity(0.5),
                                ),
                                enabledBorder: OutlineInputBorder(
                                  borderRadius: BorderRadius.circular(8),
                                  borderSide: BorderSide(
                                    color: AppConstants.primaryColor.withOpacity(0.3),
                                  ),
                                ),
                                focusedBorder: OutlineInputBorder(
                                  borderRadius: BorderRadius.circular(8),
                                  borderSide: BorderSide(
                                    color: AppConstants.primaryColor,
                                  ),
                                ),
                                contentPadding: const EdgeInsets.symmetric(horizontal: 12, vertical: 12),
                              ),
                              maxLines: 3,
                              minLines: 1,
                            ),
                            const SizedBox(height: 20),

                            // 5Ô∏è‚É£ –í–´–ë–û–† –¢–ò–ü–ê –î–ù–ê
                            Text(
                              '5. ${localizations.translate('marker_type')}',
                              style: TextStyle(
                                color: AppConstants.textColor,
                                fontSize: 16,
                                fontWeight: FontWeight.w600,
                              ),
                            ),
                            const SizedBox(height: 12),
                            Wrap(
                              spacing: 8,
                              runSpacing: 8,
                              children: _bottomTypes.map((type) {
                                final isSelected = selectedBottomType == type;
                                return GestureDetector(
                                  onTap: () {
                                    setDialogState(() {
                                      selectedBottomType = type;
                                    });
                                  },
                                  child: Container(
                                    padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                                    decoration: BoxDecoration(
                                      color: isSelected
                                          ? _bottomTypeColors[type] ?? Colors.grey
                                          : _bottomTypeColors[type]?.withOpacity(0.3) ?? Colors.grey.withOpacity(0.3),
                                      borderRadius: BorderRadius.circular(20),
                                      border: Border.all(
                                        color: isSelected
                                            ? _bottomTypeColors[type] ?? Colors.grey
                                            : Colors.transparent,
                                        width: 2,
                                      ),
                                    ),
                                    child: Row(
                                      mainAxisSize: MainAxisSize.min,
                                      children: [
                                        Icon(
                                          _bottomTypeIcons[type],
                                          color: isSelected ? Colors.black : AppConstants.textColor,
                                          size: 16,
                                        ),
                                        const SizedBox(width: 6),
                                        Text(
                                          _getBottomTypeName(type),
                                          style: TextStyle(
                                            color: isSelected ? Colors.black : AppConstants.textColor,
                                            fontWeight: isSelected ? FontWeight.bold : FontWeight.normal,
                                            fontSize: 12,
                                          ),
                                        ),
                                      ],
                                    ),
                                  ),
                                );
                              }).toList(),
                            ),
                          ],
                        ),
                      ),
                    ),

                    // –ö–Ω–æ–ø–∫–∏
                    Container(
                      padding: const EdgeInsets.all(20),
                      decoration: BoxDecoration(
                        border: Border(
                          top: BorderSide(
                            color: AppConstants.textColor.withOpacity(0.1),
                            width: 1,
                          ),
                        ),
                      ),
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.end,
                        children: [
                          TextButton(
                            onPressed: () => Navigator.pop(context),
                            child: Text(
                              localizations.translate('cancel'),
                              style: TextStyle(color: AppConstants.textColor),
                            ),
                          ),
                          const SizedBox(width: 16),
                          ElevatedButton(
                            style: ElevatedButton.styleFrom(
                              backgroundColor: AppConstants.primaryColor,
                              foregroundColor: AppConstants.textColor,
                              shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(8),
                              ),
                            ),
                            onPressed: () async {
                              // –í–∞–ª–∏–¥–∞—Ü–∏—è
                              if (_distanceController.text.isEmpty) {
                                ScaffoldMessenger.of(context).showSnackBar(
                                  SnackBar(
                                    content: Text(localizations.translate('enter_distance')),
                                    backgroundColor: Colors.red,
                                  ),
                                );
                                return;
                              }

                              double? distance = double.tryParse(_distanceController.text);
                              if (distance == null || distance <= 0) {
                                ScaffoldMessenger.of(context).showSnackBar(
                                  SnackBar(
                                    content: Text(localizations.translate('enter_valid_distance')),
                                    backgroundColor: Colors.red,
                                  ),
                                );
                                return;
                              }

                              if (distance > _maxDistance) {
                                distance = _maxDistance;
                              }

                              // –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–∞
                              final newMarker = {
                                'id': const Uuid().v4(),
                                'rayIndex': selectedRayIndex.toDouble(),
                                'distance': distance,
                                'name': localizations.translate('marker'),
                                'depth': _depthController.text.isEmpty
                                    ? null
                                    : double.tryParse(_depthController.text),
                                'notes': _notesController.text.trim(),
                                'bottomType': selectedBottomType,
                                'angle': _calculateRayAngle(selectedRayIndex),
                                'ratio': distance / _maxDistance,
                              };

                              _lastSelectedRayIndex = selectedRayIndex;
                              _currentBottomType = selectedBottomType;

                              final updatedMarkers = List<Map<String, dynamic>>.from(_markerMap.markers);
                              updatedMarkers.add(newMarker);

                              if (!_isDisposed) {
                                _safeSetState(() {
                                  _markerMap = _markerMap.copyWith(markers: updatedMarkers);
                                });
                              }

                              Navigator.pop(context);

                              await _autoSaveChanges(localizations.translate('marker_added'));
                            },
                            child: Text(
                              localizations.translate('add'),
                              style: const TextStyle(fontWeight: FontWeight.bold),
                            ),
                          ),
                        ],
                      ),
                    ),
                  ],
                ),
              ),
            );
          },
        );
      },
    );
  }

  // üöÄ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ì–†–ê–§–ò–ö–û–í –ì–õ–£–ë–ò–ù–´ - –° –ü–†–û–í–ï–†–ö–û–ô –ü–û–î–ü–ò–°–ö–ò
  Future<void> _showDepthCharts() async {
    if (_isDisposed) return;

    debugPrint('üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –≥—Ä–∞—Ñ–∏–∫–∞–º –≥–ª—É–±–∏–Ω—ã...');

    // üîí –ü–†–û–í–ï–†–ö–ê –ü–û–î–ü–ò–°–ö–ò
    final subscriptionProvider = Provider.of<SubscriptionProvider>(context, listen: false);

    if (!subscriptionProvider.hasPremiumAccess) {
      debugPrint('üö´ –î–æ—Å—Ç—É–ø –∫ –≥—Ä–∞—Ñ–∏–∫–∞–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º PaywallScreen');

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º PaywallScreen –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –≥–ª—É–±–∏–Ω—ã
      Navigator.push(
        context,
        MaterialPageRoute(
          builder: (context) => const PaywallScreen(
            contentType: 'depth_charts',
            blockedFeature: '–ì—Ä–∞—Ñ–∏–∫–∏ –≥–ª—É–±–∏–Ω—ã',
          ),
        ),
      );
      return;
    }

    debugPrint('‚úÖ Premium –¥–æ—Å—Ç—É–ø –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≥—Ä–∞—Ñ–∏–∫–∞–º –≥–ª—É–±–∏–Ω—ã —Å ${_markerMap.markers.length} –º–∞—Ä–∫–µ—Ä–∞–º–∏');

    // üé¨ –ü–†–û–°–¢–ê–Ø –ê–ù–ò–ú–ê–¶–ò–Ø slide —Å–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ
    Navigator.push(
      context,
      PageRouteBuilder(
        pageBuilder: (context, animation, _) => DepthChartScreen(markerMap: _markerMap),
        transitionsBuilder: (context, animation, _, child) {
          return SlideTransition(
            position: Tween<Offset>(
              begin: const Offset(1.0, 0.0), // —Å–ø—Ä–∞–≤–∞
              end: Offset.zero,
            ).animate(CurvedAnimation(
              parent: animation,
              curve: Curves.easeOut,
            )),
            child: child,
          );
        },
        transitionDuration: const Duration(milliseconds: 300),
      ),
    );
  }

  Future<void> _exitScreen() async {
    debugPrint('üö™ –í—ã—Ö–æ–¥–∏–º –∏–∑ —ç–∫—Ä–∞–Ω–∞ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã');
    if (mounted && !_isDisposed) {
      Navigator.pop(context, true);
    }
  }

  @override
  Widget build(BuildContext context) {
    if (_isDisposed) {
      return const SizedBox.shrink();
    }

    return Scaffold(
      backgroundColor: const Color(0xFF0B1F1D),
      body: LoadingOverlay(
        isLoading: _isLoading,
        message: AppLocalizations.of(context).translate('please_wait'),
        child: AnimatedBuilder(
          animation: _fadeAnimation,
          builder: (context, child) {
            return Opacity(
              opacity: _fadeAnimation.value,
              child: Stack(
                children: [
                  // üé® 1. –°–û–í–†–ï–ú–ï–ù–ù–´–ô –§–û–ù
                  const ModernMapBackground(),

                  // üé® 2. –û–°–ù–û–í–ù–ê–Ø –ö–ê–†–¢–ê
                  Positioned.fill(
                    child: LayoutBuilder(
                      builder: (context, constraints) {
                        // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –£—á–∏—Ç—ã–≤–∞–µ–º –Ω–∏–∂–Ω—é—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é
                        final bottomPadding = MediaQuery.of(context).padding.bottom;
                        final availableHeight = constraints.maxHeight - bottomPadding;
                        final screenSize = Size(constraints.maxWidth, availableHeight);

                        return Stack(
                          children: [
                            // üé® 3. –°–ï–¢–ö–ê –ö–û–ù–¶–ï–ù–¢–†–ò–ß–ï–°–ö–ò–• –û–ö–†–£–ñ–ù–û–°–¢–ï–ô
                            ModernMapGrid(
                              maxDistance: _maxDistance,
                              distanceStep: _distanceStep,
                              screenSize: screenSize,
                            ),

                            // üé® 4. –õ–£–ß–ò
                            ModernMapRays(
                              rayCount: _raysCount,
                              maxDistance: _maxDistance,
                              leftAngle: _leftAngle,
                              rightAngle: _rightAngle,
                              screenSize: screenSize,
                            ),

                            // üé® 5. –ü–û–î–ü–ò–°–ò –†–ê–°–°–¢–û–Ø–ù–ò–ô –ò –õ–£–ß–ï–ô
                            ModernMapLabels(
                              maxDistance: _maxDistance,
                              rayCount: _raysCount,
                              leftAngle: _leftAngle,
                              rightAngle: _rightAngle,
                              screenSize: screenSize,
                            ),

                            // üé® 6. –ú–ê–†–ö–ï–†–´ –° –ê–ù–ò–ú–ê–¶–ò–Ø–ú–ò
                            ModernMapMarkers(
                              markers: _markerMap.markers,
                              bottomTypeColors: _bottomTypeColors,
                              bottomTypeIcons: _bottomTypeIcons,
                              onMarkerTap: _showMarkerDetails,
                              maxDistance: _maxDistance,
                              rayCount: _raysCount,
                              leftAngle: _leftAngle,
                              rightAngle: _rightAngle,
                              screenSize: screenSize,
                            ),
                          ],
                        );
                      },
                    ),
                  ),

                  // üé® 7. –ò–ù–î–ò–ö–ê–¢–û–† –ê–í–¢–û–°–û–•–†–ê–ù–ï–ù–ò–Ø
                  if (_isAutoSaving)
                    Positioned(
                      top: MediaQuery.of(context).padding.top + 20,
                      left: 0,
                      right: 0,
                      child: Center(
                        child: _buildModernSaveIndicator(),
                      ),
                    ),

                  // üé® 8. –°–û–í–†–ï–ú–ï–ù–ù–´–ï FLOATING –ö–ù–û–ü–ö–ò
                  ..._buildModernFloatingButtons(context),
                ],
              ),
            );
          },
        ),
      ),
    );
  }

  /// üé® –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  Widget _buildModernSaveIndicator() {
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 12),
      decoration: BoxDecoration(
        color: AppConstants.primaryColor.withOpacity(0.95),
        borderRadius: BorderRadius.circular(25),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.3),
            blurRadius: 12,
            offset: const Offset(0, 4),
          ),
          BoxShadow(
            color: AppConstants.primaryColor.withOpacity(0.3),
            blurRadius: 20,
            offset: const Offset(0, 0),
          ),
        ],
      ),
      child: Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          SizedBox(
            width: 20,
            height: 20,
            child: CircularProgressIndicator(
              strokeWidth: 2.5,
              valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
            ),
          ),
          const SizedBox(width: 12),
          Text(
            AppLocalizations.of(context).translate('saving'),
            style: TextStyle(
              color: Colors.white,
              fontSize: 16,
              fontWeight: FontWeight.w600,
            ),
          ),
        ],
      ),
    );
  }

  /// üé® –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ floating –∫–Ω–æ–ø–∫–∏ —Å glassmorphism
  List<Widget> _buildModernFloatingButtons(BuildContext context) {
    final buttons = <Widget>[];
    final bottomPadding = MediaQuery.of(context).padding.bottom;

    // –ö–Ω–æ–ø–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    buttons.add(_buildSingleFloatingButton(
      left: 20,
      bottom: 70 + bottomPadding,
      icon: Icons.info_outline,
      heroTag: "info_button",
      onPressed: _showMarkerInfo,
      delay: 0,
    ));

    // –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞
    buttons.add(_buildSingleFloatingButton(
      right: 20,
      bottom: 220 + bottomPadding,
      icon: Icons.arrow_back,
      heroTag: "exit_button",
      onPressed: _exitScreen,
      delay: 100,
    ));

    // –ö–Ω–æ–ø–∫–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤ (–¢–ï–ü–ï–†–¨ –° –ü–†–û–í–ï–†–ö–û–ô –ü–û–î–ü–ò–°–ö–ò!)
    buttons.add(_buildSingleFloatingButton(
      right: 20,
      bottom: 145 + bottomPadding,
      icon: Icons.bar_chart,
      heroTag: "charts_button",
      onPressed: _showDepthCharts,
      delay: 200,
      isPremiumFeature: true, // üîí –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ Premium —Ñ—É–Ω–∫—Ü–∏—é
      tooltip: AppLocalizations.of(context).translate('depth_charts'), // üìã –ü–æ–¥—Å–∫–∞–∑–∫–∞
    ));

    // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–∞
    buttons.add(_buildSingleFloatingButton(
      right: 20,
      bottom: 70 + bottomPadding,
      icon: Icons.add_location,
      heroTag: "add_marker_button",
      onPressed: _showAddMarkerDialog,
      delay: 300,
      isPrimary: true,
    ));

    return buttons;
  }

  /// üé® –û—Ç–¥–µ–ª—å–Ω–∞—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è floating –∫–Ω–æ–ø–∫–∞
  Widget _buildSingleFloatingButton({
    double? left,
    double? right,
    double? top,
    double? bottom,
    required IconData icon,
    required String heroTag,
    required VoidCallback onPressed,
    required int delay,
    bool isPrimary = false,
    bool isPremiumFeature = false, // üîí –ù–û–í–´–ô –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è Premium —Ñ—É–Ω–∫—Ü–∏–π
    String? tooltip, // üìã –ù–û–í–´–ô –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫
  }) {
    return Positioned(
      left: left,
      right: right,
      top: top,
      bottom: bottom,
      child: AnimatedBuilder(
        animation: _staggerController,
        builder: (context, child) {
          final delayedAnimation = Tween<double>(
            begin: 0.0,
            end: 1.0,
          ).animate(CurvedAnimation(
            parent: _staggerController,
            curve: Interval(
              delay / 1000,
              (delay + 300) / 1000,
              curve: Curves.elasticOut,
            ),
          ));

          return Transform.scale(
            scale: delayedAnimation.value,
            child: Consumer<SubscriptionProvider>(
              builder: (context, subscriptionProvider, _) {
                // üîí –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∑–∞–º–æ—á–µ–∫ –¥–ª—è Premium —Ñ—É–Ω–∫—Ü–∏–π
                final showLock = isPremiumFeature && !subscriptionProvider.hasPremiumAccess;

                Widget buttonWidget = Stack(
                  children: [
                    Container(
                      width: 60,
                      height: 60,
                      decoration: BoxDecoration(
                        shape: BoxShape.circle,
                        gradient: LinearGradient(
                          begin: Alignment.topLeft,
                          end: Alignment.bottomRight,
                          colors: isPrimary
                              ? [
                            AppConstants.primaryColor,
                            AppConstants.primaryColor.withOpacity(0.8),
                          ]
                              : showLock
                              ? [
                            Colors.orange.withOpacity(0.9),
                            Colors.orange.withOpacity(0.7),
                          ]
                              : [
                            AppConstants.primaryColor.withOpacity(0.9),
                            AppConstants.primaryColor.withOpacity(0.7),
                          ],
                        ),
                        boxShadow: [
                          BoxShadow(
                            color: Colors.black.withOpacity(0.3),
                            blurRadius: 12,
                            offset: const Offset(0, 6),
                          ),
                          BoxShadow(
                            color: (showLock ? Colors.orange : AppConstants.primaryColor).withOpacity(0.4),
                            blurRadius: 20,
                            offset: const Offset(0, 0),
                          ),
                        ],
                        border: Border.all(
                          color: Colors.white.withOpacity(0.2),
                          width: 1,
                        ),
                      ),
                      child: Material(
                        color: Colors.transparent,
                        child: InkWell(
                          borderRadius: BorderRadius.circular(30),
                          onTap: () {
                            HapticFeedback.lightImpact();
                            onPressed();
                          },
                          child: Hero(
                            tag: heroTag,
                            child: Stack(
                              alignment: Alignment.center,
                              children: [
                                // üéØ –í–°–ï–ì–î–ê –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–∫–æ–Ω–∫—É
                                Icon(
                                  icon,
                                  color: Colors.white,
                                  size: isPrimary ? 28 : 24,
                                ),

                                // üîí –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –∑–∞–º–æ—á–µ–∫ –ü–û–í–ï–†–• –¥–ª—è Premium —Ñ—É–Ω–∫—Ü–∏–π
                                if (showLock)
                                  Positioned(
                                    bottom: -2,
                                    right: -2,
                                    child: Container(
                                      width: 16,
                                      height: 16,
                                      decoration: BoxDecoration(
                                        color: Colors.white,
                                        shape: BoxShape.circle,
                                        border: Border.all(
                                          color: Colors.orange,
                                          width: 1.5,
                                        ),
                                      ),
                                      child: const Icon(
                                        Icons.lock,
                                        color: Colors.orange,
                                        size: 10,
                                      ),
                                    ),
                                  ),
                              ],
                            ),
                          ),
                        ),
                      ),
                    ),

                    // üîí –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä Premium –¥–ª—è –ø–ª–∞—Ç–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
                    if (showLock)
                      Positioned(
                        top: 0,
                        right: 0,
                        child: Container(
                          width: 18,
                          height: 18,
                          decoration: const BoxDecoration(
                            color: Colors.orange,
                            shape: BoxShape.circle,
                          ),
                          child: const Icon(
                            Icons.star,
                            color: Colors.white,
                            size: 12,
                          ),
                        ),
                      ),
                  ],
                );

                // üìã –î–æ–±–∞–≤–ª—è–µ–º Tooltip –µ—Å–ª–∏ –∑–∞–¥–∞–Ω
                if (tooltip != null) {
                  return Tooltip(
                    message: showLock
                        ? '${tooltip} - Premium'
                        : tooltip,
                    decoration: BoxDecoration(
                      color: Colors.black87,
                      borderRadius: BorderRadius.circular(8),
                    ),
                    textStyle: const TextStyle(
                      color: Colors.white,
                      fontSize: 12,
                    ),
                    child: buttonWidget,
                  );
                }

                return buttonWidget;
              },
            ),
          );
        },
      ),
    );
  }
}