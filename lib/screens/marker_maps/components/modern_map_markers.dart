// –ü—É—Ç—å: lib/screens/marker_maps/components/modern_map_markers.dart

import 'package:flutter/material.dart';
import 'dart:math' as math;
import 'modern_marker_widget.dart';

/// –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã –∫–∞—Ä—Ç—ã
/// –ó–∞–º–µ–Ω—è–µ—Ç Canvas –æ—Ç—Ä–∏—Å–æ–≤–∫—É –Ω–∞ AnimatedPositioned —Å Hero –∞–Ω–∏–º–∞—Ü–∏—è–º–∏
class ModernMapMarkers extends StatelessWidget {
  final List<Map<String, dynamic>> markers;
  final Map<String, Color> bottomTypeColors;
  final Map<String, IconData> bottomTypeIcons;
  final Function(Map<String, dynamic>) onMarkerTap;
  final double maxDistance;
  final int rayCount;
  final double leftAngle;
  final double rightAngle;
  final Size screenSize;

  const ModernMapMarkers({
    super.key,
    required this.markers,
    required this.bottomTypeColors,
    required this.bottomTypeIcons,
    required this.onMarkerTap,
    required this.maxDistance,
    required this.rayCount,
    required this.leftAngle,
    required this.rightAngle,
    required this.screenSize,
  });

  @override
  Widget build(BuildContext context) {
    final centerX = screenSize.width / 2;
    final originY = screenSize.height - 20; // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –æ—Ç—Å—Ç—É–ø –æ—Ç –Ω–∏–∑–∞ —ç–∫—Ä–∞–Ω–∞
    final pixelsPerMeter = screenSize.height / (maxDistance * 1.1);

    return RepaintBoundary(
      child: Stack(
        children: [
          // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–∞—Ä–∫–µ—Ä—ã —Å –∞–Ω–∏–º–∞—Ü–∏—è–º–∏
          for (final marker in markers)
            _buildAnimatedMarker(
              marker: marker,
              centerX: centerX,
              originY: originY,
              pixelsPerMeter: pixelsPerMeter,
            ),
        ],
      ),
    );
  }

  /// –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–∞—Ä–∫–µ—Ä–∞
  Widget _buildAnimatedMarker({
    required Map<String, dynamic> marker,
    required double centerX,
    required double originY,
    required double pixelsPerMeter,
  }) {
    final rayIndex = (marker['rayIndex'] as double? ?? 0).toInt();
    final distance = marker['distance'] as double? ?? 0;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏–Ω–¥–µ–∫—Å–∞ –ª—É—á–∞
    if (rayIndex >= rayCount || rayIndex < 0) {
      return const SizedBox.shrink();
    }

    // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –º–∞—Ä–∫–µ—Ä–∞
    final angle = _calculateRayAngle(rayIndex);
    final ratio = distance / maxDistance;
    final maxRayLength = maxDistance * pixelsPerMeter;

    final dx = centerX + maxRayLength * ratio * math.cos(angle);
    final dy = originY - maxRayLength * ratio * math.sin(angle);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –º–∞—Ä–∫–µ—Ä–∞ (–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å—Ç–∞—Ä—ã—Ö —Ç–∏–ø–æ–≤)
    String bottomType = marker['bottomType'] ?? 'default';
    if (bottomType == 'default' && marker['type'] != null) {
      switch (marker['type']) {
        case 'dropoff':
          bottomType = '–±—É–≥–æ—Ä';
          break;
        case 'weed':
          bottomType = '—Ç—Ä–∞–≤–∞_–≤–æ–¥–æ—Ä–æ—Å–ª–∏';
          break;
        case 'sandbar':
          bottomType = '—Ä–æ–≤–Ω–æ_—Ç–≤–µ—Ä–¥–æ';
          break;
        case 'structure':
          bottomType = '–∑–∞—Ü–µ–ø';
          break;
        default:
          bottomType = '–∏–ª';
      }
    }

    final markerColor = bottomTypeColors[bottomType] ?? Colors.blue;
    final markerIcon = bottomTypeIcons[bottomType] ?? Icons.location_on;

    return AnimatedPositioned(
      duration: const Duration(milliseconds: 300),
      curve: Curves.easeOutBack,
      left: dx - 7, // üî• –ò–°–ü–†–ê–í–ò–õ–ò —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ (–±—ã–ª–æ -20, —Å—Ç–∞–ª–æ -7 –¥–ª—è –º–∞—Ä–∫–µ—Ä–∞ 14px)
      top: dy - 7,
      child: Hero(
        tag: marker['id'] ?? 'marker_${rayIndex}_$distance',
        child: ModernMarkerWidget(
          marker: marker,
          color: markerColor,
          icon: markerIcon,
          onTap: () => onMarkerTap(marker),
        ),
      ),
    );
  }

  /// –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —É–≥–ª–∞ –ª—É—á–∞ (—Ç–∞ –∂–µ –ª–æ–≥–∏–∫–∞ —á—Ç–æ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ)
  double _calculateRayAngle(int rayIndex) {
    final totalAngle = leftAngle - rightAngle;
    final angleStep = totalAngle / (rayCount - 1);
    final angleDegrees = leftAngle - (rayIndex * angleStep);
    return angleDegrees * (math.pi / 180);
  }
}