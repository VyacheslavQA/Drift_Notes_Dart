// –ü—É—Ç—å: lib/screens/marker_maps/components/modern_map_labels.dart

import 'package:flutter/material.dart';
import 'dart:math' as math;
import '../../../localization/app_localizations.dart';
import '../../../constants/app_constants.dart';

/// –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∏ –∫–∞—Ä—Ç—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤
class ModernMapLabels extends StatelessWidget {
  final double maxDistance;
  final int rayCount;
  final double leftAngle;
  final double rightAngle;
  final Size screenSize;
  final Map<String, dynamic> rayLandmarks; // üî• –ù–û–í–´–ô –ø–∞—Ä–∞–º–µ—Ç—Ä - –æ—Ä–∏–µ–Ω—Ç–∏—Ä—ã –ª—É—á–µ–π
  final Function(int rayIndex)? onRayLabelTap; // üî• –ù–û–í–´–ô –ø–∞—Ä–∞–º–µ—Ç—Ä - –∫–æ–ª–±—ç–∫ –∫–ª–∏–∫–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å—å –ª—É—á–∞
  final Function(int rayIndex)? onLandmarkTap; // üî• –ù–û–í–´–ô –ø–∞—Ä–∞–º–µ—Ç—Ä - –∫–æ–ª–±—ç–∫ –∫–ª–∏–∫–∞ –Ω–∞ –æ—Ä–∏–µ–Ω—Ç–∏—Ä
  final List<bool> rayVisibility; // üî• –ù–û–í–´–ô –ü–ê–†–ê–ú–ï–¢–† –¥–ª—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ª—É—á–µ–π

  const ModernMapLabels({
    super.key,
    required this.maxDistance,
    required this.rayCount,
    required this.leftAngle,
    required this.rightAngle,
    required this.screenSize,
    this.rayLandmarks = const {}, // üî• –ù–û–í–´–ô –ø–∞—Ä–∞–º–µ—Ç—Ä —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
    this.onRayLabelTap, // üî• –ù–û–í–´–ô –ø–∞—Ä–∞–º–µ—Ç—Ä
    this.onLandmarkTap, // üî• –ù–û–í–´–ô –ø–∞—Ä–∞–º–µ—Ç—Ä
    required this.rayVisibility, // üî• –ù–û–í–´–ô –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ô –ü–ê–†–ê–ú–ï–¢–†
  });

  /// üéØ –°–õ–û–í–ê–†–¨ –ò–ö–û–ù–û–ö –û–†–ò–ï–ù–¢–ò–†–û–í
  static const Map<String, IconData> _landmarkIcons = {
    'tree': Icons.park,              // –î–µ—Ä–µ–≤–æ
    'reed': Icons.grass,             // –ö–∞–º—ã—à
    'forest': Icons.forest,          // –•–≤–æ–π–Ω—ã–π –ª–µ—Å
    'dry_trees': Icons.eco,          // –°—É—Ö–∏–µ –¥–µ—Ä–µ–≤—å—è
    'rock': Icons.terrain,           // –°–∫–∞–ª–∞
    'mountain': Icons.landscape,     // –ì–æ—Ä–∞
    'power_line': Icons.electric_bolt, // –õ–≠–ü
    'factory': Icons.factory,        // –ó–∞–≤–æ–¥
    'house': Icons.home,             // –î–æ–º
    'radio_tower': Icons.cell_tower, // –†–∞–¥–∏–æ–≤—ã—à–∫–∞
    'lamp_post': Icons.lightbulb,    // –§–æ–Ω–∞—Ä—å
    'gazebo': Icons.cottage,         // –ë–µ—Å–µ–¥–∫–∞
    'internet_tower': Icons.wifi,    // –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –≤—ã—à–∫–∞
    'bridge': Icons.straighten,         // üåâ –ù–û–í–ê–Ø –°–¢–†–û–ö–ê - –ú–æ—Å—Ç/–ø–æ–º–æ—Å—Ç
    'exact_location': Icons.gps_fixed, // –¢–æ—á–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è
  };

  @override
  Widget build(BuildContext context) {
    final localizations = AppLocalizations.of(context);
    final centerX = screenSize.width / 2;
    final originY = screenSize.height - 20; // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –æ—Ç—Å—Ç—É–ø –æ—Ç –Ω–∏–∑–∞ —ç–∫—Ä–∞–Ω–∞
    final pixelsPerMeter = screenSize.height / (maxDistance * 1.1);

    return RepaintBoundary(
      child: Stack(
        children: [
          // üìê –ü–æ–¥–ø–∏—Å–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π (10-50–º)
          ..._buildDistanceLabels(centerX, originY, pixelsPerMeter),

          // üìê –ü–æ–¥–ø–∏—Å–∏ –±–æ–ª—å—à–∏—Ö —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π (60-200–º)
          ..._buildLargeDistanceLabels(centerX, originY, pixelsPerMeter),

          // üéØ –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –ø–æ–¥–ø–∏—Å–∏ –ª—É—á–µ–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤
          ..._buildRayLabelsWithLandmarks(localizations, centerX, originY),
        ],
      ),
    );
  }

  /// üî• –ù–û–í–´–ô –ú–ï–¢–û–î - –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª—É—á
  bool _shouldShowRay(int rayIndex) {
    if (rayIndex < 0 || rayIndex >= rayVisibility.length) {
      return true; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—Å–ª–∏ –∏–Ω–¥–µ–∫—Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
    }
    return rayVisibility[rayIndex];
  }

  /// –ü–æ–¥–ø–∏—Å–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π 10-50–º (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞)
  List<Widget> _buildDistanceLabels(double centerX, double originY, double pixelsPerMeter) {
    return List.generate(5, (index) {
      final distance = (index + 1) * 10; // 10, 20, 30, 40, 50

      return Positioned(
        left: centerX - distance * pixelsPerMeter + 4,
        top: originY - 35, // üî• –û–ü–£–°–ö–ê–ï–ú –ù–ò–ñ–ï (–±—ã–ª–æ -80, —Å—Ç–∞–ª–æ -35)
        child: Transform.rotate(
          angle: -math.pi / 2, // –ü–æ–≤–æ—Ä–æ—Ç –Ω–∞ 90 –≥—Ä–∞–¥—É—Å–æ–≤
          child: Text(
            distance.toString(),
            style: TextStyle(
              color: Colors.white.withOpacity(0.9),
              fontSize: 13,
              fontWeight: FontWeight.w600,
              shadows: [
                Shadow(
                  offset: const Offset(1, 1),
                  blurRadius: 3,
                  color: Colors.black.withOpacity(0.8),
                ),
              ],
            ),
          ),
        ),
      );
    });
  }

  /// –ü–æ–¥–ø–∏—Å–∏ –±–æ–ª—å—à–∏—Ö —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞)
  List<Widget> _buildLargeDistanceLabels(double centerX, double originY, double pixelsPerMeter) {
    final distancePositions = [
      {'distance': 60, 'offset': 95.0},
      {'distance': 70, 'offset': 70.0},
      {'distance': 80, 'offset': 55.0},
      {'distance': 90, 'offset': 50.0},
      {'distance': 100, 'offset': 40.0},
      {'distance': 110, 'offset': 35.0},
      {'distance': 120, 'offset': 30.0},
      {'distance': 130, 'offset': 25.0},
      {'distance': 140, 'offset': 22.0},
      {'distance': 150, 'offset': 22.0},
      {'distance': 160, 'offset': 18.0},
      {'distance': 170, 'offset': 18.0},
      {'distance': 180, 'offset': 15.0},
      {'distance': 190, 'offset': 15.0},
      {'distance': 200, 'offset': 15.0},
    ];

    return distancePositions.map((pos) {
      final distance = pos['distance'] as int;
      final offset = pos['offset'] as double;

      return Positioned(
        left: 8,
        top: originY - distance * pixelsPerMeter + offset,
        child: Text(
          distance.toString(),
          style: TextStyle(
            color: Colors.white.withOpacity(0.9),
            fontSize: 13,
            fontWeight: FontWeight.w600,
            shadows: [
              Shadow(
                offset: const Offset(1, 1),
                blurRadius: 3,
                color: Colors.black.withOpacity(0.8),
              ),
            ],
          ),
        ),
      );
    }).toList();
  }

  /// üî• –ù–û–í–´–ô –ú–ï–¢–û–î - –ü–æ–¥–ø–∏—Å–∏ –ª—É—á–µ–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤
  List<Widget> _buildRayLabelsWithLandmarks(AppLocalizations localizations, double centerX, double originY) {
    return List.generate(rayCount, (i) {
      final angle = _calculateRayAngle(i);

      // –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (—Ç–∞ –∂–µ –ª–æ–≥–∏–∫–∞ —á—Ç–æ —Ä–∞–Ω—å—à–µ)
      double labelY = 30.0;
      final rayAtLabelY = (originY - labelY);
      double labelX = centerX + rayAtLabelY / math.tan(angle);

      // –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ª—É—á–∞ (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞)
      switch (i) {
        case 0:
          labelY += 20.0;
          labelX -= 60.0;
          labelX = math.max(labelX, 30.0);
          break;
        case 1:
          labelY += 5.0;
          break;
        case 2:
          break;
        case 3:
          labelY += 5.0;
          break;
        case 4:
          labelY += 20.0;
          labelX += 40.0;
          labelX = math.min(labelX, screenSize.width - 30.0);
          break;
      }

      // üî• –ü–†–û–í–ï–†–ö–ê –í–ò–î–ò–ú–û–°–¢–ò - –µ—Å–ª–∏ –ª—É—á —Å–∫—Ä—ã—Ç, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –ø–æ–¥–ø–∏—Å—å –∏ –æ—Ä–∏–µ–Ω—Ç–∏—Ä
      final isRayVisible = _shouldShowRay(i);

      // üî• –ü–†–û–í–ï–†–Ø–ï–ú –µ—Å—Ç—å –ª–∏ –æ—Ä–∏–µ–Ω—Ç–∏—Ä –¥–ª—è —ç—Ç–æ–≥–æ –ª—É—á–∞
      final landmarkKey = i.toString(); // –ö–ª—é—á –≤ rayLandmarks (0, 1, 2, 3, 4)
      final hasLandmark = rayLandmarks.containsKey(landmarkKey);
      final landmark = hasLandmark ? rayLandmarks[landmarkKey] : null;

      return Positioned(
        left: labelX - 30, // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        top: labelY - 10,
        child: SizedBox(
          width: 60,
          height: 40, // üî• –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –¥–ª—è –ª—É—á—à–µ–≥–æ —Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥–∞
          child: Stack(
            alignment: Alignment.center,
            children: [
              // üéØ 1. –ü–û–ö–ê–ó–´–í–ê–ï–ú –ü–û–î–ü–ò–°–¨ –¢–û–õ–¨–ö–û –ï–°–õ–ò –õ–£–ß –í–ò–î–ò–ú
              if (isRayVisible) ...[
                Text(
                  '${localizations.translate('ray')} ${i + 1}',
                  textAlign: TextAlign.center,
                  style: TextStyle(
                    color: Colors.white.withOpacity(0.8),
                    fontSize: 12,
                    shadows: [
                      Shadow(
                        offset: const Offset(1, 1),
                        blurRadius: 3,
                        color: Colors.black.withOpacity(0.8),
                      ),
                    ],
                  ),
                ),

                // üéØ 2. –ö–õ–ò–ö–ê–ë–ï–õ–¨–ù–´–ô –°–õ–û–ô –¢–û–õ–¨–ö–û –î–õ–Ø –í–ò–î–ò–ú–´–• –õ–£–ß–ï–ô
                if (!hasLandmark) ...[
                  // üî• –ö–õ–ò–ö–ê–ë–ï–õ–¨–ù–ê–Ø –ü–û–î–ü–ò–°–¨ –õ–£–ß–ê (–µ—Å–ª–∏ –Ω–µ—Ç –æ—Ä–∏–µ–Ω—Ç–∏—Ä–∞)
                  Positioned.fill(
                    child: Material(
                      color: Colors.transparent,
                      child: InkWell(
                        borderRadius: BorderRadius.circular(8),
                        onTap: () {
                          debugPrint('üéØ –ö–ª–∏–∫ –Ω–∞ –ª—É—á ${i + 1}');
                          onRayLabelTap?.call(i);
                        },
                        child: Container(
                          decoration: BoxDecoration(
                            borderRadius: BorderRadius.circular(8),
                          ),
                          child: Center(
                            child: Text(
                              '${localizations.translate('ray')} ${i + 1}',
                              textAlign: TextAlign.center,
                              style: TextStyle(
                                color: Colors.white.withOpacity(0.9),
                                fontSize: 12,
                                fontWeight: FontWeight.w600, // üî• –ß—É—Ç—å –∂–∏—Ä–Ω–µ–µ –¥–ª—è –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏
                                shadows: [
                                  Shadow(
                                    offset: const Offset(1, 1),
                                    blurRadius: 3,
                                    color: Colors.black.withOpacity(0.8),
                                  ),
                                ],
                              ),
                            ),
                          ),
                        ),
                      ),
                    ),
                  ),
                ] else ...[
                  // üèóÔ∏è –ò–ö–û–ù–ö–ê –û–†–ò–ï–ù–¢–ò–†–ê (–µ—Å–ª–∏ –æ—Ä–∏–µ–Ω—Ç–∏—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
                  Positioned.fill(
                    child: Material(
                      color: Colors.transparent,
                      child: InkWell(
                        borderRadius: BorderRadius.circular(20),
                        onTap: () {
                          debugPrint('üèóÔ∏è –ö–ª–∏–∫ –Ω–∞ –æ—Ä–∏–µ–Ω—Ç–∏—Ä –ª—É—á–∞ ${i + 1}: ${landmark['type']}');
                          onLandmarkTap?.call(i);
                        },
                        child: Container(
                          decoration: BoxDecoration(
                            color: AppConstants.primaryColor.withOpacity(0.9),
                            shape: BoxShape.circle,
                            border: Border.all(
                              color: Colors.white.withOpacity(0.3),
                              width: 2,
                            ),
                            boxShadow: [
                              BoxShadow(
                                color: Colors.black.withOpacity(0.3),
                                blurRadius: 6,
                                offset: const Offset(0, 2),
                              ),
                              BoxShadow(
                                color: AppConstants.primaryColor.withOpacity(0.4),
                                blurRadius: 12,
                                offset: const Offset(0, 0),
                              ),
                            ],
                          ),
                          child: Center(
                            child: Icon(
                              _landmarkIcons[landmark['type']] ?? Icons.place,
                              color: Colors.white,
                              size: 20,
                            ),
                          ),
                        ),
                      ),
                    ),
                  ),
                ],
              ],
            ],
          ),
        ),
      );
    });
  }

  /// –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —É–≥–ª–∞ –ª—É—á–∞ (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞)
  double _calculateRayAngle(int rayIndex) {
    final totalAngle = leftAngle - rightAngle;
    final angleStep = totalAngle / (rayCount - 1);
    final angleDegrees = leftAngle - (rayIndex * angleStep);
    return angleDegrees * (math.pi / 180);
  }
}