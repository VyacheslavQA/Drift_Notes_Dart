// –ü—É—Ç—å: lib/screens/marker_maps/components/modern_map_rays.dart

import 'package:flutter/material.dart';
import 'dart:math' as math;

/// –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ª—É—á–∏ –∫–∞—Ä—Ç—ã
/// –ó–∞–º–µ–Ω—è–µ—Ç Canvas –ª–∏–Ω–∏–∏ –Ω–∞ –ø—Ä–æ—Å—Ç—ã–µ –ª–∏–Ω–∏–∏ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –¥–æ –∫—Ä–∞–µ–≤
class ModernMapRays extends StatelessWidget {
  final int rayCount;
  final double maxDistance;
  final double leftAngle;
  final double rightAngle;
  final Size screenSize;
  final List<bool> rayVisibility; // üî• –ù–û–í–´–ô –ü–ê–†–ê–ú–ï–¢–† –¥–ª—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ª—É—á–µ–π

  const ModernMapRays({
    super.key,
    required this.rayCount,
    required this.maxDistance,
    required this.leftAngle,
    required this.rightAngle,
    required this.screenSize,
    required this.rayVisibility, // üî• –ù–û–í–´–ô –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ô –ü–ê–†–ê–ú–ï–¢–†
  });

  @override
  Widget build(BuildContext context) {
    final centerX = screenSize.width / 2;
    final originY = screenSize.height - 20; // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –æ—Ç—Å—Ç—É–ø –æ—Ç –Ω–∏–∑–∞ —ç–∫—Ä–∞–Ω–∞
    final pixelsPerMeter = screenSize.height / (maxDistance * 1.1);
    final rayLength = maxDistance * pixelsPerMeter;

    return RepaintBoundary(
      child: Stack(
        children: [
          // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ª—É—á–∏
          for (int i = 0; i < rayCount; i++)
          // üî• –ù–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê –í–ò–î–ò–ú–û–°–¢–ò
            if (_shouldShowRay(i))
              _buildRayLine(
                centerX: centerX,
                originY: originY,
                rayLength: rayLength,
                rayIndex: i,
              ),
        ],
      ),
    );
  }

  /// üî• –ù–û–í–´–ô –ú–ï–¢–û–î - –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª—É—á
  bool _shouldShowRay(int rayIndex) {
    if (rayIndex < 0 || rayIndex >= rayVisibility.length) {
      return true; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—Å–ª–∏ –∏–Ω–¥–µ–∫—Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
    }
    return rayVisibility[rayIndex];
  }

  /// –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –ª—É—á–∞ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –¥–æ –∫—Ä–∞—è
  Widget _buildRayLine({
    required double centerX,
    required double originY,
    required double rayLength,
    required int rayIndex,
  }) {
    final angle = _calculateRayAngle(rayIndex);

    // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–Ω–µ—á–Ω—É—é —Ç–æ—á–∫—É –ª—É—á–∞
    final endX = centerX + rayLength * math.cos(angle);
    final endY = originY - rayLength * math.sin(angle);

    return CustomPaint(
      size: screenSize,
      painter: _RayPainter(
        startX: centerX,
        startY: originY,
        endX: endX,
        endY: endY,
      ),
    );
  }

  /// –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —É–≥–ª–∞ –ª—É—á–∞ (—Ç–∞ –∂–µ –ª–æ–≥–∏–∫–∞ —á—Ç–æ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ)
  double _calculateRayAngle(int rayIndex) {
    final totalAngle = leftAngle - rightAngle;
    final angleStep = totalAngle / (rayCount - 1);
    final angleDegrees = leftAngle - (rayIndex * angleStep);
    return angleDegrees * (math.pi / 180);
  }
}

/// –ü—Ä–æ—Å—Ç–æ–π painter –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è –æ–¥–Ω–æ–π –ª–∏–Ω–∏–∏
class _RayPainter extends CustomPainter {
  final double startX;
  final double startY;
  final double endX;
  final double endY;

  _RayPainter({
    required this.startX,
    required this.startY,
    required this.endX,
    required this.endY,
  });

  @override
  void paint(Canvas canvas, Size size) {
    final paint = Paint()
      ..color = Colors.black.withOpacity(0.6) // üî• –£–í–ï–õ–ò–ß–ò–õ–ò –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –¥–ª—è –≤–∏–¥–∏–º–æ—Å—Ç–∏
      ..strokeWidth = 1.5 // üî• –£–í–ï–õ–ò–ß–ò–õ–ò —Ç–æ–ª—â–∏–Ω—É –ª–∏–Ω–∏–∏
      ..style = PaintingStyle.stroke;

    canvas.drawLine(
      Offset(startX, startY),
      Offset(endX, endY),
      paint,
    );
  }

  @override
  bool shouldRepaint(covariant CustomPainter oldDelegate) => false;
}