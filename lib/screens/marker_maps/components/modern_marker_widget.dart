// –ü—É—Ç—å: lib/screens/marker_maps/components/modern_marker_widget.dart

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';

/// –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –≤–∏–¥–∂–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –º–∞—Ä–∫–µ—Ä–∞
/// –í–∫–ª—é—á–∞–µ—Ç –∞–Ω–∏–º–∞—Ü–∏–∏, —Ç–∞–∫—Ç–∏–ª—å–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
class ModernMarkerWidget extends StatefulWidget {
  final Map<String, dynamic> marker;
  final Color color;
  final IconData icon;
  final VoidCallback onTap;

  const ModernMarkerWidget({
    super.key,
    required this.marker,
    required this.color,
    required this.icon,
    required this.onTap,
  });

  @override
  State<ModernMarkerWidget> createState() => _ModernMarkerWidgetState();
}

class _ModernMarkerWidgetState extends State<ModernMarkerWidget>
    with SingleTickerProviderStateMixin {
  late AnimationController _animationController;
  late Animation<double> _scaleAnimation;
  late Animation<double> _pulseAnimation;

  bool _isPressed = false;

  @override
  void initState() {
    super.initState();

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–π
    _animationController = AnimationController(
      duration: const Duration(milliseconds: 1200),
      vsync: this,
    );

    _scaleAnimation = Tween<double>(
      begin: 0.0,
      end: 1.0,
    ).animate(CurvedAnimation(
      parent: _animationController,
      curve: Curves.elasticOut,
    ));

    _pulseAnimation = Tween<double>(
      begin: 1.0,
      end: 1.3,
    ).animate(CurvedAnimation(
      parent: _animationController,
      curve: Curves.easeInOut,
    ));

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ—è–≤–ª–µ–Ω–∏—è
    _animationController.forward();
  }

  @override
  void dispose() {
    _animationController.dispose();
    super.dispose();
  }

  void _handleTap() {
    // –¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
    HapticFeedback.lightImpact();

    // –ê–Ω–∏–º–∞—Ü–∏—è –Ω–∞–∂–∞—Ç–∏—è
    _animationController.reset();
    _animationController.forward();

    // –í—ã–∑—ã–≤–∞–µ–º –∫–æ–ª–±—ç–∫
    widget.onTap();
  }

  void _handleTapDown() {
    setState(() {
      _isPressed = true;
    });
  }

  void _handleTapUp() {
    setState(() {
      _isPressed = false;
    });
  }

  @override
  Widget build(BuildContext context) {
    final distance = widget.marker['distance'] as double? ?? 0;
    final depth = widget.marker['depth'] as double?;
    final bottomType = widget.marker['bottomType'] as String? ?? '–∏–ª';

    return AnimatedBuilder(
      animation: _animationController,
      builder: (context, child) {
        return Transform.scale(
          scale: _scaleAnimation.value * (_isPressed ? 0.9 : 1.0),
          child: GestureDetector(
            onTap: _handleTap,
            onTapDown: (_) => _handleTapDown(),
            onTapUp: (_) => _handleTapUp(),
            onTapCancel: () => _handleTapUp(),
            child: Container(
              width: 14, // üî• –£–ú–ï–ù–¨–®–ò–õ–ò –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
              height: 14,
              child: Stack(
                clipBehavior: Clip.none, // –ü–æ–∑–≤–æ–ª—è–µ–º –ø–æ–¥–ø–∏—Å—è–º –≤—ã—Ö–æ–¥–∏—Ç—å –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã
                children: [
                  // –û—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ä–∫–µ—Ä –ë–ï–ó –±–µ–ª–æ–π —Ç–æ—á–∫–∏ –∏ –≤ 3 —Ä–∞–∑–∞ –º–µ–Ω—å—à–µ
                  Container(
                    width: 14, // üî• –£–ú–ï–ù–¨–®–ò–õ–ò –≤ 3 —Ä–∞–∑–∞ (–±—ã–ª–æ 40, —Å—Ç–∞–ª–æ ~14)
                    height: 14,
                    decoration: BoxDecoration(
                      shape: BoxShape.circle,
                      color: widget.color.withOpacity(0.9),
                      boxShadow: [
                        BoxShadow(
                          color: Colors.black.withOpacity(0.3),
                          blurRadius: 4, // –£–º–µ–Ω—å—à–∏–ª–∏ —Ç–µ–Ω—å
                          offset: const Offset(0, 2),
                        ),
                        BoxShadow(
                          color: widget.color.withOpacity(0.5),
                          blurRadius: 8, // –£–º–µ–Ω—å—à–∏–ª–∏ —Å–≤–µ—á–µ–Ω–∏–µ
                          offset: const Offset(0, 0),
                        ),
                      ],
                      border: Border.all(
                        color: Colors.white.withOpacity(0.3),
                        width: 1,
                      ),
                    ),
                    child: Icon(
                      widget.icon,
                      color: Colors.black87,
                      size: 8, // –£–º–µ–Ω—å—à–∏–ª–∏ –∏–∫–æ–Ω–∫—É
                    ),
                  ),

                  // üî• –£–ë–†–ê–õ–ò –ë–ï–õ–£–Æ –¢–û–ß–ö–£ –ü–û–°–ï–†–ï–î–ò–ù–ï

                  // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –¢–æ–ª—å–∫–æ –≥–ª—É–±–∏–Ω–∞ —Ä—è–¥–æ–º —Å –º–∞—Ä–∫–µ—Ä–æ–º
                  Positioned(
                    left: 18, // –°–ø—Ä–∞–≤–∞ –æ—Ç –º–∞—Ä–∫–µ—Ä–∞
                    top: -4, // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
                    child:
                    // –ü–æ–¥–ø–∏—Å—å –≥–ª—É–±–∏–Ω—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
                    depth != null
                        ? Container(
                      padding: const EdgeInsets.symmetric(
                        horizontal: 4,
                        vertical: 1,
                      ),
                      decoration: BoxDecoration(
                        color: Colors.yellow.shade300.withOpacity(0.9),
                        borderRadius: BorderRadius.circular(4),
                        boxShadow: [
                          BoxShadow(
                            color: Colors.black.withOpacity(0.3),
                            blurRadius: 2,
                            offset: const Offset(0, 1),
                          ),
                        ],
                      ),
                      child: Text(
                        '${depth.toStringAsFixed(1)}–º',
                        style: const TextStyle(
                          color: Colors.black87,
                          fontSize: 9,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    )
                        : const SizedBox.shrink(), // –ü—É—Å—Ç–æ–π –≤–∏–¥–∂–µ—Ç –µ—Å–ª–∏ –≥–ª—É–±–∏–Ω—ã –Ω–µ—Ç
                  ),
                ],
              ),
            ),
          ),
        );
      },
    );
  }
}