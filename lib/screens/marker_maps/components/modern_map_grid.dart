// –ü—É—Ç—å: lib/screens/marker_maps/components/modern_map_grid.dart

import 'package:flutter/material.dart';
import 'dart:math' as math;

/// –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Å–µ—Ç–∫–∞ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–µ–π
/// –ó–∞–º–µ–Ω—è–µ—Ç Canvas –¥—É–≥–∏ –Ω–∞ Stack –∏–∑ Container —Å borders
class ModernMapGrid extends StatelessWidget {
  final double maxDistance;
  final double distanceStep;
  final Size screenSize;

  const ModernMapGrid({
    super.key,
    required this.maxDistance,
    required this.distanceStep,
    required this.screenSize,
  });

  @override
  Widget build(BuildContext context) {
    final centerX = screenSize.width / 2;
    final originY = screenSize.height - 20; // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –æ—Ç—Å—Ç—É–ø –æ—Ç –Ω–∏–∑–∞ —ç–∫—Ä–∞–Ω–∞
    final pixelsPerMeter = screenSize.height / (maxDistance * 1.1);

    return RepaintBoundary(
      child: Stack(
        children: [
          // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—É–∫—Ä—É–≥–∏
          for (int distance = 10; distance <= maxDistance.toInt(); distance += 10)
            _buildGridCircle(
              centerX: centerX,
              originY: originY,
              distance: distance,
              pixelsPerMeter: pixelsPerMeter,
            ),
        ],
      ),
    );
  }

  /// –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—É–∫—Ä—É–≥–∞ —Å–µ—Ç–∫–∏ —Å –ø—É–Ω–∫—Ç–∏—Ä–æ–º
  Widget _buildGridCircle({
    required double centerX,
    required double originY,
    required int distance,
    required double pixelsPerMeter,
  }) {
    final radius = distance * pixelsPerMeter;

    return Positioned(
      left: centerX - radius,
      top: originY - radius,
      child: CustomPaint(
        size: Size(radius * 2, radius * 2),
        painter: _DashedCirclePainter(
          radius: radius,
          color: Colors.white.withOpacity(0.3),
          strokeWidth: 1.0,
          dashLength: 3.0, // üî• –ú–ï–õ–ö–ò–ô –ø—É–Ω–∫—Ç–∏—Ä
          gapLength: 3.0,
        ),
      ),
    );
  }
}

/// üî• –î–û–ë–ê–í–ò–õ–ò: Painter –¥–ª—è –ø—É–Ω–∫—Ç–∏—Ä–Ω—ã—Ö –ø–æ–ª—É–∫—Ä—É–≥–æ–≤
class _DashedCirclePainter extends CustomPainter {
  final double radius;
  final Color color;
  final double strokeWidth;
  final double dashLength;
  final double gapLength;

  _DashedCirclePainter({
    required this.radius,
    required this.color,
    required this.strokeWidth,
    required this.dashLength,
    required this.gapLength,
  });

  @override
  void paint(Canvas canvas, Size size) {
    final paint = Paint()
      ..color = color
      ..strokeWidth = strokeWidth
      ..style = PaintingStyle.stroke;

    final center = Offset(radius, radius);

    // –†–∏—Å—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–∏–∂–Ω—é—é –ø–æ–ª–æ–≤–∏–Ω—É –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏ (–ø–æ–ª—É–∫—Ä—É–≥) –ø—É–Ω–∫—Ç–∏—Ä–æ–º
    final path = Path();

    // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é –¥–ª–∏–Ω—É –ø–æ–ª—É–∫—Ä—É–≥–∞
    final semicircleLength = math.pi * radius;
    final dashCount = (semicircleLength / (dashLength + gapLength)).floor();

    for (int i = 0; i < dashCount; i++) {
      final startAngle = math.pi + (i * (dashLength + gapLength) / radius);
      final endAngle = math.pi + ((i * (dashLength + gapLength) + dashLength) / radius);

      if (endAngle > 2 * math.pi) break;

      final startX = center.dx + radius * math.cos(startAngle);
      final startY = center.dy + radius * math.sin(startAngle);
      final endX = center.dx + radius * math.cos(endAngle);
      final endY = center.dy + radius * math.sin(endAngle);

      path.moveTo(startX, startY);
      path.arcToPoint(
        Offset(endX, endY),
        radius: Radius.circular(radius),
      );
    }

    canvas.drawPath(path, paint);
  }

  @override
  bool shouldRepaint(covariant CustomPainter oldDelegate) => false;
}