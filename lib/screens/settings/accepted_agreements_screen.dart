// –ü—É—Ç—å: lib/screens/settings/accepted_agreements_screen.dart

import 'package:flutter/material.dart';
import '../../constants/app_constants.dart';
import '../../localization/app_localizations.dart';
import '../../services/user_consent_service.dart';
import '../../models/user_consent_models.dart';
import '../../screens/help/privacy_policy_screen.dart';
import '../../screens/help/terms_of_service_screen.dart';
import 'document_version_history_screen.dart';

class AcceptedAgreementsScreen extends StatefulWidget {
  const AcceptedAgreementsScreen({super.key});

  @override
  State<AcceptedAgreementsScreen> createState() => _AcceptedAgreementsScreenState();
}

class _AcceptedAgreementsScreenState extends State<AcceptedAgreementsScreen> {
  final UserConsentService _consentService = UserConsentService();

  bool _isLoading = true;
  bool _isProcessing = false;
  UserConsentStatus? _consentStatus;
  String _privacyPolicyVersion = '';
  String _termsOfServiceVersion = '';
  bool _hasUpdates = false;

  @override
  void initState() {
    super.initState();
    _loadConsentStatus();
  }

  Future<void> _loadConsentStatus() async {
    try {
      // –£–ë–†–ê–ù–û –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ü–†–ò–ù–Ø–¢–ò–ï - –ø—Ä–æ—Å—Ç–æ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å
      final status = await _consentService.getUserConsentStatus();
      final privacyVersion = await _consentService.getCurrentPrivacyPolicyVersion();
      final termsVersion = await _consentService.getCurrentTermsOfServiceVersion();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      final isVersionCurrent = await _consentService.isConsentVersionCurrent();

      debugPrint('üìã –ó–∞–≥—Ä—É–∂–µ–Ω —Å—Ç–∞—Ç—É—Å —Å–æ–≥–ª–∞—Å–∏–π: –≤–µ—Ä—Å–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–∞ = $isVersionCurrent');

      if (mounted) {
        setState(() {
          _consentStatus = status;
          _privacyPolicyVersion = privacyVersion;
          _termsOfServiceVersion = termsVersion;
          _hasUpdates = !isVersionCurrent;
          _isLoading = false;
        });
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–≥–ª–∞—à–µ–Ω–∏–π: $e');
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
      }
    }
  }

  /// –ù–û–í–´–ô –ú–ï–¢–û–î: –ü—Ä–∏–Ω—è—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–≥–ª–∞—Å–∏–π
  Future<void> _acceptUpdatedAgreements() async {
    setState(() {
      _isProcessing = true;
    });

    try {
      final success = await _consentService.saveUserConsents(
        privacyPolicyAccepted: true,
        termsOfServiceAccepted: true,
      );

      if (success) {
        debugPrint('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å–æ–≥–ª–∞—Å–∏—è –ø—Ä–∏–Ω—è—Ç—ã —É—Å–ø–µ—à–Ω–æ');

        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å
        await _loadConsentStatus();

        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('–°–æ–≥–ª–∞—Å–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã'),
              backgroundColor: Colors.green,
            ),
          );
        }
      } else {
        throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–≥–ª–∞—Å–∏—è');
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Å–æ–≥–ª–∞—Å–∏–π: $e');
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–≥–ª–∞—Å–∏–π: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    } finally {
      if (mounted) {
        setState(() {
          _isProcessing = false;
        });
      }
    }
  }

  /// –ù–û–í–´–ô –ú–ï–¢–û–î: –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–≥–ª–∞—Å–∏–π (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º)
  Future<void> _declineUpdatedAgreements() async {
    final localizations = AppLocalizations.of(context);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º
    final confirmed = await showDialog<bool>(
      context: context,
      builder: (context) => AlertDialog(
        backgroundColor: AppConstants.cardColor,
        title: Text(
          '–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º',
          style: TextStyle(
            color: AppConstants.textColor,
            fontWeight: FontWeight.bold,
          ),
        ),
        content: Text(
          '–ï—Å–ª–∏ –≤—ã –Ω–µ –ø—Ä–∏–º–µ—Ç–µ –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é —Å–æ–≥–ª–∞—à–µ–Ω–∏–π, –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ:\n\n'
              '‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–º–µ—Ç–æ–∫\n'
              '‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∑–∞–º–µ—Ç–æ–∫\n'
              '‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ\n'
              '‚ùå –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è\n\n'
              '–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω—è—Ç—å —Å–æ–≥–ª–∞—à–µ–Ω–∏—è –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.',
          style: TextStyle(
            color: AppConstants.textColor,
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context, false),
            child: Text(
              '–û—Ç–º–µ–Ω–∞',
              style: TextStyle(color: AppConstants.textColor),
            ),
          ),
          ElevatedButton(
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.orange,
            ),
            onPressed: () => Navigator.pop(context, true),
            child: Text('–ü–µ—Ä–µ–π—Ç–∏ –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º'),
          ),
        ],
      ),
    );

    if (confirmed == true) {
      debugPrint('üîí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º');
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–ª–∞–≥–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
      // –ù–∞–ø—Ä–∏–º–µ—Ä, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ SharedPreferences —Ñ–ª–∞–≥ "limited_mode"

      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º'),
            backgroundColor: Colors.orange,
          ),
        );
        Navigator.pop(context); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    final localizations = AppLocalizations.of(context);

    return Scaffold(
      backgroundColor: AppConstants.backgroundColor,
      appBar: AppBar(
        title: Text(
          localizations.translate('accepted_agreements') ?? '–ü—Ä–∏–Ω—è—Ç—ã–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è',
          style: TextStyle(
            color: AppConstants.textColor,
            fontSize: 22,
            fontWeight: FontWeight.bold,
          ),
        ),
        backgroundColor: Colors.transparent,
        elevation: 0,
        leading: IconButton(
          icon: Icon(Icons.arrow_back, color: AppConstants.textColor),
          onPressed: () => Navigator.pop(context),
        ),
      ),
      body: _isLoading
          ? Center(
        child: CircularProgressIndicator(
          color: AppConstants.primaryColor,
        ),
      )
          : _buildContent(localizations),
    );
  }

  Widget _buildContent(AppLocalizations localizations) {
    if (_consentStatus == null) {
      return Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(
              Icons.error_outline,
              size: 64,
              color: AppConstants.textColor.withOpacity(0.5),
            ),
            const SizedBox(height: 16),
            Text(
              localizations.translate('error_loading_consents') ?? '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–≥–ª–∞—à–µ–Ω–∏–π',
              style: TextStyle(
                color: AppConstants.textColor.withOpacity(0.7),
                fontSize: 16,
              ),
            ),
            const SizedBox(height: 16),
            ElevatedButton(
              onPressed: _loadConsentStatus,
              child: Text(localizations.translate('try_again') ?? '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å'),
            ),
          ],
        ),
      );
    }

    return ListView(
      padding: const EdgeInsets.all(16),
      children: [
        // –ù–û–í–´–ô –ë–õ–û–ö: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö
        if (_hasUpdates) ...[
          _buildUpdateNotificationCard(localizations),
          const SizedBox(height: 16),
        ],

        // –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        _buildStatusCard(localizations),
        const SizedBox(height: 16),

        // –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
        _buildDocumentCard(
          title: localizations.translate('privacy_policy') ?? '–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏',
          accepted: _consentStatus!.privacyPolicyAccepted,
          currentVersion: _privacyPolicyVersion,
          onTap: () => _showPrivacyPolicy(),
          onViewHistory: () => _showPrivacyPolicyHistory(),
          localizations: localizations,
        ),
        const SizedBox(height: 12),

        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ
        _buildDocumentCard(
          title: localizations.translate('terms_of_service') ?? '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ',
          accepted: _consentStatus!.termsOfServiceAccepted,
          currentVersion: _termsOfServiceVersion,
          onTap: () => _showTermsOfService(),
          onViewHistory: () => _showTermsOfServiceHistory(),
          localizations: localizations,
        ),
        const SizedBox(height: 16),

        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏
        _buildVersionInfo(localizations),
      ],
    );
  }

  /// –ù–û–í–´–ô –í–ò–î–ñ–ï–¢: –ö–∞—Ä—Ç–æ—á–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö
  Widget _buildUpdateNotificationCard(AppLocalizations localizations) {
    return Card(
      color: Colors.orange.withOpacity(0.1),
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(12),
        side: BorderSide(color: Colors.orange, width: 1),
      ),
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Icon(
                  Icons.notification_important,
                  color: Colors.orange,
                  size: 24,
                ),
                const SizedBox(width: 12),
                Expanded(
                  child: Text(
                    '–î–æ—Å—Ç—É–ø–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è —Å–æ–≥–ª–∞—à–µ–Ω–∏–π',
                    style: TextStyle(
                      color: AppConstants.textColor,
                      fontSize: 16,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ),
              ],
            ),
            const SizedBox(height: 8),
            Text(
              '–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è–º–∏ –∏ –ø—Ä–∏–Ω—è—Ç—å –∏—Ö.',
              style: TextStyle(
                color: AppConstants.textColor.withOpacity(0.8),
                fontSize: 14,
              ),
            ),
            const SizedBox(height: 16),

            // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
            Row(
              children: [
                Expanded(
                  child: OutlinedButton(
                    onPressed: _isProcessing ? null : _declineUpdatedAgreements,
                    style: OutlinedButton.styleFrom(
                      side: BorderSide(color: Colors.orange),
                      padding: const EdgeInsets.symmetric(vertical: 12),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(8),
                      ),
                    ),
                    child: Text(
                      '–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º',
                      style: TextStyle(
                        color: Colors.orange,
                        fontSize: 14,
                      ),
                      textAlign: TextAlign.center,
                    ),
                  ),
                ),
                const SizedBox(width: 12),
                Expanded(
                  child: ElevatedButton(
                    onPressed: _isProcessing ? null : _acceptUpdatedAgreements,
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.orange,
                      padding: const EdgeInsets.symmetric(vertical: 12),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(8),
                      ),
                    ),
                    child: _isProcessing
                        ? SizedBox(
                      width: 16,
                      height: 16,
                      child: CircularProgressIndicator(
                        strokeWidth: 2,
                        valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                      ),
                    )
                        : Text(
                      '–ü—Ä–∏–Ω—è—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è',
                      style: TextStyle(
                        color: Colors.white,
                        fontSize: 14,
                        fontWeight: FontWeight.bold,
                      ),
                      textAlign: TextAlign.center,
                    ),
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildStatusCard(AppLocalizations localizations) {
    final hasAllConsents = _consentStatus!.hasAllConsents && !_hasUpdates;

    return Card(
      color: AppConstants.cardColor,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(12),
      ),
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Icon(
                  hasAllConsents ? Icons.check_circle : Icons.warning,
                  color: hasAllConsents ? Colors.green : Colors.orange,
                  size: 24,
                ),
                const SizedBox(width: 12),
                Expanded(
                  child: Text(
                    hasAllConsents
                        ? (localizations.translate('all_agreements_accepted') ?? '–í—Å–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è –ø—Ä–∏–Ω—è—Ç—ã')
                        : (_hasUpdates
                        ? '–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–π'
                        : (localizations.translate('agreements_require_attention') ?? '–°–æ–≥–ª–∞—à–µ–Ω–∏—è —Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è')),
                    style: TextStyle(
                      color: AppConstants.textColor,
                      fontSize: 16,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ),
              ],
            ),
            if (!hasAllConsents) ...[
              const SizedBox(height: 8),
              Text(
                _hasUpdates
                    ? '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è–º–∏'
                    : (localizations.translate('please_review_and_accept') ?? '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∏ –ø—Ä–∏–º–∏—Ç–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è'),
                style: TextStyle(
                  color: AppConstants.textColor.withOpacity(0.7),
                  fontSize: 14,
                ),
              ),
            ],
          ],
        ),
      ),
    );
  }

  Widget _buildDocumentCard({
    required String title,
    required bool accepted,
    required String currentVersion,
    required VoidCallback onTap,
    required VoidCallback onViewHistory,
    required AppLocalizations localizations,
  }) {
    return Card(
      color: AppConstants.cardColor,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(12),
      ),
      child: Column(
        children: [
          ListTile(
            contentPadding: const EdgeInsets.all(16),
            title: Text(
              title,
              style: TextStyle(
                color: AppConstants.textColor,
                fontSize: 16,
                fontWeight: FontWeight.w600,
              ),
            ),
            subtitle: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const SizedBox(height: 8),
                Row(
                  children: [
                    Icon(
                      accepted ? Icons.check_circle : Icons.cancel,
                      color: accepted ? Colors.green : Colors.red,
                      size: 20,
                    ),
                    const SizedBox(width: 8),
                    Text(
                      accepted
                          ? (localizations.translate('accepted') ?? '–ü—Ä–∏–Ω—è—Ç–æ')
                          : (localizations.translate('not_accepted') ?? '–ù–µ –ø—Ä–∏–Ω—è—Ç–æ'),
                      style: TextStyle(
                        color: accepted ? Colors.green : Colors.red,
                        fontSize: 14,
                        fontWeight: FontWeight.w500,
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 4),
                Text(
                  '${localizations.translate('version') ?? '–í–µ—Ä—Å–∏—è'}: $currentVersion',
                  style: TextStyle(
                    color: AppConstants.textColor.withOpacity(0.6),
                    fontSize: 12,
                  ),
                ),
                if (_consentStatus!.consentTimestamp != null) ...[
                  const SizedBox(height: 4),
                  Text(
                    '${localizations.translate('accepted_date') ?? '–î–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∏—è'}: ${_formatDate(_consentStatus!.consentTimestamp!)}',
                    style: TextStyle(
                      color: AppConstants.textColor.withOpacity(0.6),
                      fontSize: 12,
                    ),
                  ),
                ],
              ],
            ),
            trailing: Icon(
              Icons.arrow_forward_ios,
              color: AppConstants.textColor.withOpacity(0.5),
              size: 16,
            ),
            onTap: onTap,
          ),

          // –ù–û–í–´–ô –ë–õ–û–ö: –ö–Ω–æ–ø–∫–∞ "–ò—Å—Ç–æ—Ä–∏—è –≤–µ—Ä—Å–∏–π"
          const Divider(height: 1, color: Colors.white10),
          ListTile(
            contentPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
            leading: Icon(
              Icons.history,
              color: AppConstants.textColor.withOpacity(0.7),
              size: 20,
            ),
            title: Text(
              '–ò—Å—Ç–æ—Ä–∏—è –≤–µ—Ä—Å–∏–π',
              style: TextStyle(
                color: AppConstants.textColor.withOpacity(0.8),
                fontSize: 14,
              ),
            ),
            trailing: Icon(
              Icons.arrow_forward_ios,
              color: AppConstants.textColor.withOpacity(0.5),
              size: 14,
            ),
            onTap: onViewHistory,
          ),
        ],
      ),
    );
  }

  Widget _buildVersionInfo(AppLocalizations localizations) {
    return Card(
      color: AppConstants.cardColor,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(12),
      ),
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              localizations.translate('version_info') ?? '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏',
              style: TextStyle(
                color: AppConstants.textColor,
                fontSize: 16,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 12),
            _buildInfoRow(
              localizations.translate('consent_version') ?? '–í–µ—Ä—Å–∏—è —Å–æ–≥–ª–∞—à–µ–Ω–∏–π',
              _consentStatus!.consentVersion ?? '–ù–µ —É–∫–∞–∑–∞–Ω–∞',
            ),
            _buildInfoRow(
              localizations.translate('current_version') ?? '–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è',
              _consentStatus!.currentVersion ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞',
            ),
            _buildInfoRow(
              localizations.translate('language') ?? '–Ø–∑—ã–∫',
              _consentStatus!.consentLanguage ?? 'ru',
            ),
            _buildInfoRow(
              localizations.translate('version_status') ?? '–°—Ç–∞—Ç—É—Å –≤–µ—Ä—Å–∏–∏',
              !_hasUpdates
                  ? (localizations.translate('current') ?? '–ê–∫—Ç—É–∞–ª—å–Ω–∞—è')
                  : (localizations.translate('outdated') ?? '–£—Å—Ç–∞—Ä–µ–≤—à–∞—è'),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildInfoRow(String label, String value) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 4),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          SizedBox(
            width: 120,
            child: Text(
              '$label:',
              style: TextStyle(
                color: AppConstants.textColor.withOpacity(0.7),
                fontSize: 14,
              ),
            ),
          ),
          Expanded(
            child: Text(
              value,
              style: TextStyle(
                color: AppConstants.textColor,
                fontSize: 14,
                fontWeight: FontWeight.w500,
              ),
            ),
          ),
        ],
      ),
    );
  }

  void _showPrivacyPolicy() {
    Navigator.of(context).push(
      MaterialPageRoute(
        builder: (context) => const PrivacyPolicyScreen(),
      ),
    );
  }

  void _showTermsOfService() {
    Navigator.of(context).push(
      MaterialPageRoute(
        builder: (context) => const TermsOfServiceScreen(),
      ),
    );
  }

  void _showPrivacyPolicyHistory() {
    Navigator.of(context).push(
      MaterialPageRoute(
        builder: (context) => const DocumentVersionHistoryScreen(
          documentType: 'privacy_policy',
        ),
      ),
    );
  }

  void _showTermsOfServiceHistory() {
    Navigator.of(context).push(
      MaterialPageRoute(
        builder: (context) => const DocumentVersionHistoryScreen(
          documentType: 'terms_of_service',
        ),
      ),
    );
  }

  String _formatDate(DateTime date) {
    return '${date.day.toString().padLeft(2, '0')}.${date.month.toString().padLeft(2, '0')}.${date.year}';
  }
}