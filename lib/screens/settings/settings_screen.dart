// –ü—É—Ç—å: lib/screens/settings/settings_screen.dart

import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:intl/intl.dart';
import '../../constants/app_constants.dart';
import '../../constants/subscription_constants.dart';
import '../../localization/app_localizations.dart';
import '../../providers/subscription_provider.dart';
import '../../models/subscription_model.dart';
import '../subscription/paywall_screen.dart';
import '../subscription/subscription_management_screen.dart';
import 'language_settings_screen.dart';
import 'change_password_screen.dart';
import 'weather_notifications_settings_screen.dart';
import 'notification_sound_settings_screen.dart';
import 'weather_settings_screen.dart';

class SettingsScreen extends StatefulWidget {
  const SettingsScreen({super.key});

  @override
  SettingsScreenState createState() => SettingsScreenState();
}

class SettingsScreenState extends State<SettingsScreen> {

  @override
  Widget build(BuildContext context) {
    final localizations = AppLocalizations.of(context);

    return Scaffold(
      backgroundColor: AppConstants.backgroundColor,
      appBar: AppBar(
        title: Text(
          localizations.translate('settings'),
          style: const TextStyle(fontSize: 22, fontWeight: FontWeight.bold),
        ),
        backgroundColor: Colors.transparent,
        elevation: 0,
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —è–∑—ã–∫–∞
            _buildSectionHeader(localizations.translate('language')),
            Card(
              color: AppConstants.cardColor,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(12),
              ),
              child: ListTile(
                leading: const Icon(Icons.language, color: Colors.blue),
                title: Text(localizations.translate('language')),
                subtitle: Text(localizations.translate('select_language')),
                trailing: const Icon(Icons.arrow_forward_ios, size: 16),
                onTap: () {
                  Navigator.push(
                    context,
                    MaterialPageRoute(
                      builder: (context) => const LanguageSettingsScreen(),
                    ),
                  );
                },
              ),
            ),

            const SizedBox(height: 20),

            // üÜï –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –°–ï–ö–¶–ò–Ø –ü–û–î–ü–ò–°–ö–ò
            _buildSectionHeader(localizations.translate('subscription')),
            Consumer<SubscriptionProvider>(
              builder: (context, provider, child) {
                final isPremium = provider.isPremium;
                final subscription = provider.subscription; // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É—é subscription –≤–º–µ—Å—Ç–æ currentSubscription

                return Card(
                  color: AppConstants.cardColor,
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(12),
                    side: isPremium
                        ? BorderSide(color: Colors.amber.withOpacity(0.3), width: 1)
                        : BorderSide.none,
                  ),
                  child: ListTile(
                    leading: Container(
                      padding: const EdgeInsets.all(8),
                      decoration: BoxDecoration(
                        color: isPremium
                            ? Colors.amber.withOpacity(0.2)
                            : Colors.grey.withOpacity(0.2),
                        borderRadius: BorderRadius.circular(8),
                      ),
                      child: Icon(
                        isPremium ? Icons.diamond : Icons.diamond_outlined,
                        color: isPremium ? Colors.amber : Colors.grey,
                        size: 20,
                      ),
                    ),
                    title: Text(
                      isPremium
                          ? localizations.translate('premium_active')
                          : localizations.translate('upgrade_to_premium'),
                      style: const TextStyle(
                        fontWeight: FontWeight.w600,
                      ),
                    ),
                    subtitle: Text(
                      isPremium
                          ? _getSubscriptionStatusText(subscription, localizations)
                          : localizations.translate('unlock_all_features'),
                      style: TextStyle(
                        color: isPremium ? Colors.green : Colors.white60,
                        fontSize: 14,
                      ),
                    ),
                    trailing: Icon(
                      isPremium ? Icons.settings : Icons.arrow_forward_ios,
                      color: isPremium ? Colors.white70 : Colors.white30,
                      size: isPremium ? 20 : 16,
                    ),
                    onTap: () {
                      if (isPremium) {
                        // üÜï –ù–û–í–û–ï: –û—Ç–∫—Ä—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–æ–π
                        Navigator.push(
                          context,
                          MaterialPageRoute(
                            builder: (context) => const SubscriptionManagementScreen(),
                          ),
                        );
                      } else {
                        // –û—Ç–∫—Ä—ã–≤–∞–µ–º PaywallScreen –¥–ª—è –ø–æ–∫—É–ø–∫–∏
                        Navigator.push(
                          context,
                          MaterialPageRoute(
                            builder: (context) => const PaywallScreen(),
                          ),
                        );
                      }
                    },
                  ),
                );
              },
            ),

            const SizedBox(height: 20),

            // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            _buildSectionHeader(localizations.translate('notifications')),
            Card(
              color: AppConstants.cardColor,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(12),
              ),
              child: Column(
                children: [
                  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–≤—É–∫–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                  ListTile(
                    leading: const Icon(Icons.volume_up, color: Colors.green),
                    title: Text(
                      AppLocalizations.of(context).translate('notification_sounds'),
                    ),
                    subtitle: Text(
                      AppLocalizations.of(context).translate('sound_vibration_badge_settings'),
                    ),
                    trailing: const Icon(Icons.arrow_forward_ios, size: 16),
                    onTap: () {
                      Navigator.push(
                        context,
                        MaterialPageRoute(
                          builder: (context) => const NotificationSoundSettingsScreen(),
                        ),
                      );
                    },
                  ),

                  const Divider(height: 1, color: Colors.white10),

                  // –ü–æ–≥–æ–¥–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                  ListTile(
                    leading: const Icon(
                      Icons.notifications_active,
                      color: Colors.amber,
                    ),
                    title: Text(
                      localizations.translate('weather_notifications'),
                    ),
                    subtitle: Text(
                      localizations.translate('weather_notifications_desc'),
                    ),
                    trailing: const Icon(Icons.arrow_forward_ios, size: 16),
                    onTap: () {
                      Navigator.push(
                        context,
                        MaterialPageRoute(
                          builder: (context) => const WeatherNotificationsSettingsScreen(),
                        ),
                      );
                    },
                  ),
                ],
              ),
            ),

            const SizedBox(height: 20),

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–≥–æ–¥—ã
            _buildSectionHeader(localizations.translate('weather_settings')),
            Card(
              color: AppConstants.cardColor,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(12),
              ),
              child: ListTile(
                leading: const Icon(Icons.cloud, color: Colors.blue),
                title: Text(localizations.translate('weather_settings')),
                subtitle: Text(
                  localizations.translate('units_and_calibration'),
                ),
                trailing: const Icon(Icons.arrow_forward_ios, size: 16),
                onTap: () {
                  Navigator.push(
                    context,
                    MaterialPageRoute(
                      builder: (context) => const WeatherSettingsScreen(),
                    ),
                  );
                },
              ),
            ),

            const SizedBox(height: 20),

            // –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å (—Ç–æ–ª—å–∫–æ —Å–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è)
            _buildSectionHeader(localizations.translate('security')),
            Card(
              color: AppConstants.cardColor,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(12),
              ),
              child: ListTile(
                leading: const Icon(Icons.security, color: Colors.blue),
                title: Text(localizations.translate('change_password')),
                subtitle: Text(
                  localizations.translate('change_your_account_password'),
                ),
                trailing: const Icon(Icons.arrow_forward_ios, size: 16),
                onTap: () {
                  Navigator.push(
                    context,
                    MaterialPageRoute(
                      builder: (context) => const ChangePasswordScreen(),
                    ),
                  );
                },
              ),
            ),

            const SizedBox(height: 40),
          ],
        ),
      ),
    );
  }

  Widget _buildSectionHeader(String title) {
    return Padding(
      padding: const EdgeInsets.only(left: 8, bottom: 8),
      child: Text(
        title,
        style: TextStyle(
          color: AppConstants.textColor,
          fontSize: 18,
          fontWeight: FontWeight.bold,
        ),
      ),
    );
  }

  // ========================================
  // üÜï –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
  // ========================================

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
  String _getSubscriptionStatusText(SubscriptionModel? subscription, AppLocalizations localizations) {
    if (subscription == null) return localizations.translate('status_unknown') ?? '–°—Ç–∞—Ç—É—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω';

    if (subscription.isActive) {
      return localizations.translate('active_tap_to_manage') ?? '–ê–∫—Ç–∏–≤–Ω–∞ ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è';
    }

    switch (subscription.status) {
      case SubscriptionStatus.expired:
        return localizations.translate('expired_renew') ?? '–ò—Å—Ç–µ–∫–ª–∞ ‚Ä¢ –û–±–Ω–æ–≤–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É';
      case SubscriptionStatus.canceled:
        final dateText = _formatShortDate(subscription.expirationDate);
        return localizations.translate('canceled_until') ?? '–û—Ç–º–µ–Ω–µ–Ω–∞ ‚Ä¢ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ $dateText';
      case SubscriptionStatus.pending:
        return localizations.translate('pending_payment') ?? '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã';
      case SubscriptionStatus.active:
        final dateText = _formatShortDate(subscription.expirationDate);
        return localizations.translate('expires_on') ?? '–ò—Å—Ç–µ–∫–∞–µ—Ç ‚Ä¢ $dateText';
      case SubscriptionStatus.none: // üîß –î–û–ë–ê–í–õ–ï–ù–û: –æ–±—Ä–∞–±–æ—Ç–∫–∞ SubscriptionStatus.none
        return localizations.translate('no_subscription') ?? '–ù–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏';
    }
  }

  /// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–π –¥–∞—Ç—ã
  String _formatShortDate(DateTime? date) {
    if (date == null) return '';

    final now = DateTime.now();
    final difference = date.difference(now).inDays;

    if (difference < 0) return '–∏—Å—Ç–µ–∫–ª–∞';
    if (difference == 0) return '—Å–µ–≥–æ–¥–Ω—è';
    if (difference == 1) return '–∑–∞–≤—Ç—Ä–∞';
    if (difference < 7) return '$difference –¥–Ω.';

    try {
      return DateFormat('d MMM', 'ru_RU').format(date);
    } catch (e) {
      // –§–æ–ª–ª–±—ç–∫ –¥–ª—è —Å–ª—É—á–∞—è –µ—Å–ª–∏ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
      return DateFormat('d MMM').format(date);
    }
  }
}