// –ü—É—Ç—å: lib/screens/settings/settings_screen.dart

import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:intl/intl.dart';
import '../../constants/app_constants.dart';
import '../../constants/subscription_constants.dart';
import '../../localization/app_localizations.dart';
import '../../providers/subscription_provider.dart';
import '../../models/subscription_model.dart';
import '../subscription/paywall_screen.dart';
import '../subscription/subscription_management_screen.dart';
import 'language_settings_screen.dart';
import 'change_password_screen.dart';
import 'weather_notifications_settings_screen.dart';
import 'notification_sound_settings_screen.dart';
import 'weather_settings_screen.dart';
import '../../services/data_export_service.dart';

class SettingsScreen extends StatefulWidget {
  const SettingsScreen({super.key});

  @override
  SettingsScreenState createState() => SettingsScreenState();
}

class SettingsScreenState extends State<SettingsScreen> {
  final DataExportService _exportService = DataExportService();
  bool _isExporting = false;

  @override
  Widget build(BuildContext context) {
    final localizations = AppLocalizations.of(context);

    return Scaffold(
      backgroundColor: AppConstants.backgroundColor,
      appBar: AppBar(
        title: Text(
          localizations.translate('settings'),
          style: const TextStyle(fontSize: 22, fontWeight: FontWeight.bold),
        ),
        backgroundColor: Colors.transparent,
        elevation: 0,
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —è–∑—ã–∫–∞
            _buildSectionHeader(localizations.translate('language')),
            Card(
              color: AppConstants.cardColor,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(12),
              ),
              child: ListTile(
                leading: const Icon(Icons.language, color: Colors.blue),
                title: Text(localizations.translate('language')),
                subtitle: Text(localizations.translate('select_language')),
                trailing: const Icon(Icons.arrow_forward_ios, size: 16),
                onTap: () {
                  Navigator.push(
                    context,
                    MaterialPageRoute(
                      builder: (context) => const LanguageSettingsScreen(),
                    ),
                  );
                },
              ),
            ),

            const SizedBox(height: 20),

            // üÜï –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –°–ï–ö–¶–ò–Ø –ü–û–î–ü–ò–°–ö–ò
            _buildSectionHeader(localizations.translate('subscription')),
            Consumer<SubscriptionProvider>(
              builder: (context, provider, child) {
                final isPremium = provider.isPremium;
                final subscription = provider.subscription; // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É—é subscription –≤–º–µ—Å—Ç–æ currentSubscription

                return Card(
                  color: AppConstants.cardColor,
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(12),
                    side: isPremium
                        ? BorderSide(color: Colors.amber.withOpacity(0.3), width: 1)
                        : BorderSide.none,
                  ),
                  child: ListTile(
                    leading: Container(
                      padding: const EdgeInsets.all(8),
                      decoration: BoxDecoration(
                        color: isPremium
                            ? Colors.amber.withOpacity(0.2)
                            : Colors.grey.withOpacity(0.2),
                        borderRadius: BorderRadius.circular(8),
                      ),
                      child: Icon(
                        isPremium ? Icons.diamond : Icons.diamond_outlined,
                        color: isPremium ? Colors.amber : Colors.grey,
                        size: 20,
                      ),
                    ),
                    title: Text(
                      isPremium
                          ? localizations.translate('premium_active')
                          : localizations.translate('upgrade_to_premium'),
                      style: const TextStyle(
                        fontWeight: FontWeight.w600,
                      ),
                    ),
                    subtitle: Text(
                      isPremium
                          ? _getSubscriptionStatusText(subscription, localizations)
                          : localizations.translate('unlock_all_features'),
                      style: TextStyle(
                        color: isPremium ? Colors.green : Colors.white60,
                        fontSize: 14,
                      ),
                    ),
                    trailing: Icon(
                      isPremium ? Icons.settings : Icons.arrow_forward_ios,
                      color: isPremium ? Colors.white70 : Colors.white30,
                      size: isPremium ? 20 : 16,
                    ),
                    onTap: () {
                      if (isPremium) {
                        // üÜï –ù–û–í–û–ï: –û—Ç–∫—Ä—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–æ–π
                        Navigator.push(
                          context,
                          MaterialPageRoute(
                            builder: (context) => const SubscriptionManagementScreen(),
                          ),
                        );
                      } else {
                        // –û—Ç–∫—Ä—ã–≤–∞–µ–º PaywallScreen –¥–ª—è –ø–æ–∫—É–ø–∫–∏
                        Navigator.push(
                          context,
                          MaterialPageRoute(
                            builder: (context) => const PaywallScreen(),
                          ),
                        );
                      }
                    },
                  ),
                );
              },
            ),

            const SizedBox(height: 20),

            // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            _buildSectionHeader(localizations.translate('notifications')),
            Card(
              color: AppConstants.cardColor,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(12),
              ),
              child: Column(
                children: [
                  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–≤—É–∫–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                  ListTile(
                    leading: const Icon(Icons.volume_up, color: Colors.green),
                    title: Text(
                      AppLocalizations.of(context).translate('notification_sounds'),
                    ),
                    subtitle: Text(
                      AppLocalizations.of(context).translate('sound_vibration_badge_settings'),
                    ),
                    trailing: const Icon(Icons.arrow_forward_ios, size: 16),
                    onTap: () {
                      Navigator.push(
                        context,
                        MaterialPageRoute(
                          builder: (context) => const NotificationSoundSettingsScreen(),
                        ),
                      );
                    },
                  ),

                  const Divider(height: 1, color: Colors.white10),

                  // –ü–æ–≥–æ–¥–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                  ListTile(
                    leading: const Icon(
                      Icons.notifications_active,
                      color: Colors.amber,
                    ),
                    title: Text(
                      localizations.translate('weather_notifications'),
                    ),
                    subtitle: Text(
                      localizations.translate('weather_notifications_desc'),
                    ),
                    trailing: const Icon(Icons.arrow_forward_ios, size: 16),
                    onTap: () {
                      Navigator.push(
                        context,
                        MaterialPageRoute(
                          builder: (context) => const WeatherNotificationsSettingsScreen(),
                        ),
                      );
                    },
                  ),
                ],
              ),
            ),

            const SizedBox(height: 20),

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–≥–æ–¥—ã
            _buildSectionHeader(localizations.translate('weather_settings')),
            Card(
              color: AppConstants.cardColor,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(12),
              ),
              child: ListTile(
                leading: const Icon(Icons.cloud, color: Colors.blue),
                title: Text(localizations.translate('weather_settings')),
                subtitle: Text(
                  localizations.translate('units_and_calibration'),
                ),
                trailing: const Icon(Icons.arrow_forward_ios, size: 16),
                onTap: () {
                  Navigator.push(
                    context,
                    MaterialPageRoute(
                      builder: (context) => const WeatherSettingsScreen(),
                    ),
                  );
                },
              ),
            ),

            const SizedBox(height: 20),

            // –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å (—Ç–æ–ª—å–∫–æ —Å–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è)
            _buildSectionHeader(localizations.translate('security')),
            Card(
              color: AppConstants.cardColor,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(12),
              ),
              child: ListTile(
                leading: const Icon(Icons.security, color: Colors.blue),
                title: Text(localizations.translate('change_password')),
                subtitle: Text(
                  localizations.translate('change_your_account_password'),
                ),
                trailing: const Icon(Icons.arrow_forward_ios, size: 16),
                onTap: () {
                  Navigator.push(
                    context,
                    MaterialPageRoute(
                      builder: (context) => const ChangePasswordScreen(),
                    ),
                  );
                },
              ),
            ),

            const SizedBox(height: 20),

            // üÜï –ü–ï–†–ï–ú–ï–©–ï–ù–ù–ê–Ø –°–ï–ö–¶–ò–Ø: –≠–ö–°–ü–û–†–¢ –î–ê–ù–ù–´–•
            _buildSectionHeader(localizations.translate('export_data') ?? '–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö'),
            Card(
              color: AppConstants.cardColor,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(12),
              ),
              child: ListTile(
                leading: Container(
                  padding: const EdgeInsets.all(8),
                  decoration: BoxDecoration(
                    color: Colors.orange.withOpacity(0.2),
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: const Icon(
                    Icons.download,
                    color: Colors.orange,
                    size: 20,
                  ),
                ),
                title: Text(
                  localizations.translate('export_my_data') ?? '–≠–∫—Å–ø–æ—Ä—Ç –º–æ–∏—Ö –¥–∞–Ω–Ω—ã—Ö',
                  style: const TextStyle(
                    fontWeight: FontWeight.w600,
                  ),
                ),
                subtitle: Text(
                  localizations.translate('download_all_your_data') ?? '–°–∫–∞—á–∞—Ç—å –≤—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤ ZIP –∞—Ä—Ö–∏–≤–µ',
                  style: const TextStyle(
                    color: Colors.white60,
                    fontSize: 14,
                  ),
                ),
                trailing: _isExporting
                    ? const SizedBox(
                  width: 20,
                  height: 20,
                  child: CircularProgressIndicator(
                    strokeWidth: 2,
                    valueColor: AlwaysStoppedAnimation<Color>(Colors.orange),
                  ),
                )
                    : const Icon(
                  Icons.arrow_forward_ios,
                  color: Colors.white30,
                  size: 16,
                ),
                onTap: _isExporting ? null : _exportUserData,
              ),
            ),

            const SizedBox(height: 40),
          ],
        ),
      ),
    );
  }

  Widget _buildSectionHeader(String title) {
    return Padding(
      padding: const EdgeInsets.only(left: 8, bottom: 8),
      child: Text(
        title,
        style: TextStyle(
          color: AppConstants.textColor,
          fontSize: 18,
          fontWeight: FontWeight.bold,
        ),
      ),
    );
  }

  // ========================================
  // üÜï –ù–û–í–´–ô –ú–ï–¢–û–î: –≠–ö–°–ü–û–†–¢ –î–ê–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
  // ========================================

  Future<void> _exportUserData() async {
    setState(() {
      _isExporting = true;
    });

    try {
      final localizations = AppLocalizations.of(context);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
      showDialog(
        context: context,
        barrierDismissible: false,
        builder: (context) => AlertDialog(
          backgroundColor: AppConstants.surfaceColor,
          title: Row(
            children: [
              const Icon(Icons.download, color: Colors.orange),
              const SizedBox(width: 12),
              Text(
                localizations.translate('exporting_data') ?? '–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö',
                style: TextStyle(color: AppConstants.textColor),
              ),
            ],
          ),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              const CircularProgressIndicator(
                valueColor: AlwaysStoppedAnimation<Color>(Colors.orange),
              ),
              const SizedBox(height: 16),
              Text(
                localizations.translate('preparing_your_data') ?? '–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ...',
                style: TextStyle(color: AppConstants.textColor),
                textAlign: TextAlign.center,
              ),
            ],
          ),
        ),
      );

      // –í—ã–ø–æ–ª–Ω—è–µ–º —ç–∫—Å–ø–æ—Ä—Ç —Å –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–µ–π
      final localizationMap = {
        'readme_title': localizations.translate('readme_title') ?? 'DRIFT NOTES - –≠–ö–°–ü–û–†–¢ –î–ê–ù–ù–´–•',
        'readme_export_date': localizations.translate('readme_export_date') ?? '–î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:',
        'readme_user_id': localizations.translate('readme_user_id') ?? 'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:',
        'readme_app_version': localizations.translate('readme_app_version') ?? '–í–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:',
        'readme_export_version': localizations.translate('readme_export_version') ?? '–í–µ—Ä—Å–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞:',
        'readme_archive_contents': localizations.translate('readme_archive_contents') ?? '–°–û–î–ï–†–ñ–ò–ú–û–ï –ê–†–•–ò–í–ê:',
        'readme_full_data': localizations.translate('readme_full_data') ?? '–ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ',
        'readme_fishing_notes': localizations.translate('readme_fishing_notes') ?? '–ó–∞–º–µ—Ç–∫–∏ —Ä—ã–±–∞–ª–∫–∏',
        'readme_marker_maps': localizations.translate('readme_marker_maps') ?? '–ú–∞—Ä–∫–µ—Ä–Ω—ã–µ –∫–∞—Ä—Ç—ã',
        'readme_budget_notes': localizations.translate('readme_budget_notes') ?? '–ó–∞–º–µ—Ç–∫–∏ –±—é–¥–∂–µ—Ç–∞',
        'readme_detailed_expenses': localizations.translate('readme_detailed_expenses') ?? '–î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –ø–æ –≤—Å–µ–º –ø–æ–µ–∑–¥–∫–∞–º',
        'readme_description_file': localizations.translate('readme_description_file') ?? '–≠—Ç–æ—Ç —Ñ–∞–π–ª —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º',
        'readme_records': localizations.translate('readme_records') ?? '–∑–∞–ø–∏—Å–µ–π',
        'readme_rights_gdpr': localizations.translate('readme_rights_gdpr') ?? '–ü–†–ê–í–ê –ò GDPR:',
        'readme_contains_all_data': localizations.translate('readme_contains_all_data') ?? '–≠—Ç–æ—Ç –∞—Ä—Ö–∏–≤ —Å–æ–¥–µ—Ä–∂–∏—Ç –í–°–ï –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Drift Notes.',
        'readme_gdpr_compliance': localizations.translate('readme_gdpr_compliance') ?? '–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ GDPR.',
        'readme_data_usage': localizations.translate('readme_data_usage') ?? '–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –≤ –¥—Ä—É–≥–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ –¥–ª—è –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è.',
        'readme_technical_info': localizations.translate('readme_technical_info') ?? '–¢–ï–•–ù–ò–ß–ï–°–ö–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:',
        'readme_json_description': localizations.translate('readme_json_description') ?? '‚Ä¢ JSON —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ –≤—Å–µ–º–∏ –ø–æ–ª—è–º–∏',
        'readme_csv_description': localizations.translate('readme_csv_description') ?? '‚Ä¢ CSV —Ñ–∞–π–ª—ã —Å–æ–¥–µ—Ä–∂–∞—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞',
        'readme_date_format': localizations.translate('readme_date_format') ?? '‚Ä¢ –î–∞—Ç—ã —É–∫–∞–∑–∞–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ)',
        'readme_coordinates_format': localizations.translate('readme_coordinates_format') ?? '‚Ä¢ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —É–∫–∞–∑–∞–Ω—ã –≤ –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö –≥—Ä–∞–¥—É—Å–∞—Ö (WGS84)',
        'readme_contact': localizations.translate('readme_contact') ?? '–ö–æ–Ω—Ç–∞–∫—Ç:',
        'readme_website': localizations.translate('readme_website') ?? '–°–∞–π—Ç:',
      };

      final success = await _exportService.exportAllUserData(localizationMap);

      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –∑–∞–≥—Ä—É–∑–∫–∏
      if (mounted) {
        Navigator.of(context).pop();
      }

      if (success) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Row(
                children: [
                  const Icon(Icons.check_circle, color: Colors.green),
                  const SizedBox(width: 12),
                  Expanded(
                    child: Text(
                      localizations.translate('data_exported_successfully') ??
                          '–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ –ó–∞–≥—Ä—É–∑–∫–∏',
                    ),
                  ),
                ],
              ),
              backgroundColor: Colors.green,
              duration: const Duration(seconds: 4),
            ),
          );
        }
      } else {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Row(
                children: [
                  const Icon(Icons.error, color: Colors.red),
                  const SizedBox(width: 12),
                  Expanded(
                    child: Text(
                      localizations.translate('export_failed') ??
                          '–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
                    ),
                  ),
                ],
              ),
              backgroundColor: Colors.red,
              duration: const Duration(seconds: 4),
            ),
          );
        }
      }

    } catch (e) {
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –∑–∞–≥—Ä—É–∑–∫–∏ –µ—Å–ª–∏ –æ–Ω –µ—â–µ –æ—Ç–∫—Ä—ã—Ç
      if (mounted) {
        Navigator.of(context).pop();

        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: $e'),
            backgroundColor: Colors.red,
            duration: const Duration(seconds: 4),
          ),
        );
      }
    } finally {
      if (mounted) {
        setState(() {
          _isExporting = false;
        });
      }
    }
  }

  // ========================================
  // üÜï –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
  // ========================================

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
  String _getSubscriptionStatusText(SubscriptionModel? subscription, AppLocalizations localizations) {
    if (subscription == null) return localizations.translate('status_unknown') ?? '–°—Ç–∞—Ç—É—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω';

    if (subscription.isActive) {
      return localizations.translate('active_tap_to_manage') ?? '–ê–∫—Ç–∏–≤–Ω–∞ ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è';
    }

    switch (subscription.status) {
      case SubscriptionStatus.expired:
        return localizations.translate('expired_renew') ?? '–ò—Å—Ç–µ–∫–ª–∞ ‚Ä¢ –û–±–Ω–æ–≤–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É';
      case SubscriptionStatus.canceled:
        final dateText = _formatShortDate(subscription.expirationDate);
        return localizations.translate('canceled_until') ?? '–û—Ç–º–µ–Ω–µ–Ω–∞ ‚Ä¢ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ $dateText';
      case SubscriptionStatus.pending:
        return localizations.translate('pending_payment') ?? '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã';
      case SubscriptionStatus.active:
        final dateText = _formatShortDate(subscription.expirationDate);
        return localizations.translate('expires_on') ?? '–ò—Å—Ç–µ–∫–∞–µ—Ç ‚Ä¢ $dateText';
      case SubscriptionStatus.none: // üîß –î–û–ë–ê–í–õ–ï–ù–û: –æ–±—Ä–∞–±–æ—Ç–∫–∞ SubscriptionStatus.none
        return localizations.translate('no_subscription') ?? '–ù–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏';
    }
  }

  /// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–π –¥–∞—Ç—ã
  String _formatShortDate(DateTime? date) {
    if (date == null) return '';

    final now = DateTime.now();
    final difference = date.difference(now).inDays;

    if (difference < 0) return '–∏—Å—Ç–µ–∫–ª–∞';
    if (difference == 0) return '—Å–µ–≥–æ–¥–Ω—è';
    if (difference == 1) return '–∑–∞–≤—Ç—Ä–∞';
    if (difference < 7) return '$difference –¥–Ω.';

    try {
      return DateFormat('d MMM', 'ru_RU').format(date);
    } catch (e) {
      // –§–æ–ª–ª–±—ç–∫ –¥–ª—è —Å–ª—É—á–∞—è –µ—Å–ª–∏ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
      return DateFormat('d MMM').format(date);
    }
  }
}