// –ü—É—Ç—å: lib/screens/debug/openai_test_screen.dart

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'dart:convert';
import 'package:http/http.dart' as http;
import '../../constants/app_constants.dart';
import '../../services/ai_bite_prediction_service.dart';
import '../../config/api_keys.dart';

class OpenAITestScreen extends StatefulWidget {
  const OpenAITestScreen({super.key});

  @override
  State<OpenAITestScreen> createState() => _OpenAITestScreenState();
}

class _OpenAITestScreenState extends State<OpenAITestScreen> {
  final AIBitePredictionService _aiService = AIBitePredictionService();

  bool _isLoading = false;
  Map<String, dynamic>? _testResult;
  String? _directTestResult;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: AppConstants.backgroundColor,
      appBar: AppBar(
        title: const Text('–¢–µ—Å—Ç OpenAI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏'),
        backgroundColor: Colors.transparent,
        elevation: 0,
        leading: IconButton(
          icon: Icon(Icons.arrow_back, color: AppConstants.textColor),
          onPressed: () => Navigator.pop(context),
        ),
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            _buildConfigurationStatus(),

            const SizedBox(height: 24),

            // –ö–Ω–æ–ø–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            Row(
              children: [
                Expanded(
                  child: ElevatedButton.icon(
                    onPressed: _isLoading ? null : _runDirectTest,
                    icon: const Icon(Icons.science),
                    label: const Text('–ü–†–Ø–ú–û–ô –¢–ï–°–¢'),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.blue,
                      foregroundColor: Colors.white,
                      padding: const EdgeInsets.symmetric(vertical: 16),
                    ),
                  ),
                ),
                const SizedBox(width: 12),
                Expanded(
                  child: ElevatedButton.icon(
                    onPressed: _isLoading ? null : _runIntegrationTest,
                    icon: const Icon(Icons.psychology),
                    label: const Text('–¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò'),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.green,
                      foregroundColor: Colors.white,
                      padding: const EdgeInsets.symmetric(vertical: 16),
                    ),
                  ),
                ),
              ],
            ),

            const SizedBox(height: 16),

            // –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞
            SizedBox(
              width: double.infinity,
              child: ElevatedButton.icon(
                onPressed: _clearCache,
                icon: const Icon(Icons.clear_all),
                label: const Text('–û–ß–ò–°–¢–ò–¢–¨ –ö–≠–®'),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.orange,
                  foregroundColor: Colors.white,
                  padding: const EdgeInsets.symmetric(vertical: 16),
                ),
              ),
            ),

            const SizedBox(height: 24),

            // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
            if (_isLoading) _buildLoadingIndicator(),
            if (_testResult != null) _buildTestResults(),
            if (_directTestResult != null) _buildDirectTestResults(),

            const SizedBox(height: 24),

            // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
            _buildDiagnostics(),
          ],
        ),
      ),
    );
  }

  Widget _buildConfigurationStatus() {
    final apiKey = ApiKeys.openAIKey;
    final isConfigured = apiKey.isNotEmpty &&
        apiKey != 'YOUR_OPENAI_API_KEY_HERE' &&
        apiKey.startsWith('sk-') &&
        apiKey.length > 20;

    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: isConfigured ? Colors.green.withValues(alpha: 0.1) : Colors.red.withValues(alpha: 0.1),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(
          color: isConfigured ? Colors.green : Colors.red,
          width: 2,
        ),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            '–°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏',
            style: TextStyle(
              color: AppConstants.textColor,
              fontSize: 18,
              fontWeight: FontWeight.bold,
            ),
          ),
          const SizedBox(height: 12),

          Row(
            children: [
              Icon(
                isConfigured ? Icons.check_circle : Icons.error,
                color: isConfigured ? Colors.green : Colors.red,
              ),
              const SizedBox(width: 8),
              Expanded(
                child: Text(
                  isConfigured
                      ? 'OpenAI API –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω (${apiKey.length} —Å–∏–º–≤–æ–ª–æ–≤)'
                      : 'OpenAI API –∫–ª—é—á –ù–ï –Ω–∞—Å—Ç—Ä–æ–µ–Ω',
                  style: TextStyle(
                    color: isConfigured ? Colors.green : Colors.red,
                    fontWeight: FontWeight.w600,
                  ),
                ),
              ),
            ],
          ),

          const SizedBox(height: 8),

          // –î–µ—Ç–∞–ª–∏ –∫–ª—é—á–∞
          Container(
            padding: const EdgeInsets.all(12),
            decoration: BoxDecoration(
              color: AppConstants.backgroundColor.withValues(alpha: 0.5),
              borderRadius: BorderRadius.circular(8),
            ),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text('–î–µ—Ç–∞–ª–∏ –∫–ª—é—á–∞:', style: TextStyle(color: AppConstants.textColor, fontWeight: FontWeight.bold)),
                Text('‚Ä¢ –î–ª–∏–Ω–∞: ${apiKey.length} —Å–∏–º–≤–æ–ª–æ–≤', style: TextStyle(color: AppConstants.textColor)),
                Text('‚Ä¢ –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "sk-": ${apiKey.startsWith('sk-') ? '–î–∞' : '–ù–µ—Ç'}', style: TextStyle(color: AppConstants.textColor)),
                Text('‚Ä¢ –ü–µ—Ä–≤—ã–µ 10 —Å–∏–º–≤–æ–ª–æ–≤: ${apiKey.length > 10 ? apiKey.substring(0, 10) : apiKey}...', style: TextStyle(color: AppConstants.textColor)),
                Text('‚Ä¢ –ù–µ —è–≤–ª—è–µ—Ç—Å—è –∑–∞–≥–ª—É—à–∫–æ–π: ${apiKey != 'YOUR_OPENAI_API_KEY_HERE' ? '–î–∞' : '–ù–µ—Ç'}', style: TextStyle(color: AppConstants.textColor)),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildLoadingIndicator() {
    return Container(
      padding: const EdgeInsets.all(24),
      child: Center(
        child: Column(
          children: [
            CircularProgressIndicator(color: AppConstants.primaryColor),
            const SizedBox(height: 16),
            Text(
              '–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å OpenAI...',
              style: TextStyle(color: AppConstants.textColor),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildTestResults() {
    final result = _testResult!;
    final isSuccess = result['success'] == true;

    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: isSuccess ? Colors.green.withValues(alpha: 0.1) : Colors.red.withValues(alpha: 0.1),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(
          color: isSuccess ? Colors.green : Colors.red,
          width: 2,
        ),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(
                isSuccess ? Icons.check_circle : Icons.error,
                color: isSuccess ? Colors.green : Colors.red,
              ),
              const SizedBox(width: 8),
              Text(
                '–†–ï–ó–£–õ–¨–¢–ê–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–û–ì–û –¢–ï–°–¢–ê:',
                style: TextStyle(
                  fontWeight: FontWeight.bold,
                  color: isSuccess ? Colors.green : Colors.red,
                ),
              ),
            ],
          ),

          const SizedBox(height: 12),

          if (isSuccess) ...[
            Text('‚úÖ OpenAI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –†–ê–ë–û–¢–ê–ï–¢',
                style: TextStyle(color: Colors.green, fontWeight: FontWeight.bold)),
            if (result['model'] != null)
              Text('üì± –ú–æ–¥–µ–ª—å: ${result['model']}', style: TextStyle(color: AppConstants.textColor)),
            if (result['response'] != null)
              Text('üí¨ –û—Ç–≤–µ—Ç: ${result['response']}', style: TextStyle(color: AppConstants.textColor)),
            if (result['response_time'] != null)
              Text('‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${result['response_time']}–º—Å', style: TextStyle(color: AppConstants.textColor)),
          ] else ...[
            Text('‚ùå OpenAI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ù–ï –†–ê–ë–û–¢–ê–ï–¢',
                style: TextStyle(color: Colors.red, fontWeight: FontWeight.bold)),
            if (result['error'] != null)
              Text('‚ùå –û—à–∏–±–∫–∞: ${result['error']}',
                  style: TextStyle(color: Colors.red)),
            if (result['status'] != null)
              Text('üìä HTTP —Å—Ç–∞—Ç—É—Å: ${result['status']}', style: TextStyle(color: AppConstants.textColor)),
          ],

          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
          const SizedBox(height: 12),
          Text('üîß –ù–∞—Å—Ç—Ä–æ–µ–Ω: ${result['configured'] ?? 'unknown'}', style: TextStyle(color: AppConstants.textColor)),

          if (result['key_length'] != null)
            Text('üîë –î–ª–∏–Ω–∞ –∫–ª—é—á–∞: ${result['key_length']}', style: TextStyle(color: AppConstants.textColor)),
          if (result['key_format'] != null)
            Text('üîë –§–æ—Ä–º–∞—Ç –∫–ª—é—á–∞: ${result['key_format']}', style: TextStyle(color: AppConstants.textColor)),
        ],
      ),
    );
  }

  Widget _buildDirectTestResults() {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: AppConstants.surfaceColor,
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: Colors.blue, width: 2),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'üß™ –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–†–Ø–ú–û–ì–û –¢–ï–°–¢–ê:',
            style: TextStyle(
              fontWeight: FontWeight.bold,
              color: Colors.blue,
            ),
          ),
          const SizedBox(height: 12),
          Text(
            _directTestResult!,
            style: TextStyle(color: AppConstants.textColor),
          ),
        ],
      ),
    );
  }

  Widget _buildDiagnostics() {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: AppConstants.surfaceColor,
        borderRadius: BorderRadius.circular(12),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              const Icon(Icons.lightbulb, color: Colors.amber),
              const SizedBox(width: 8),
              Text(
                '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:',
                style: TextStyle(
                  color: AppConstants.textColor,
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ],
          ),
          const SizedBox(height: 12),

          Text('1. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ü–†–Ø–ú–û–ô –¢–ï–°–¢', style: TextStyle(color: AppConstants.textColor)),
          Text('2. –ï—Å–ª–∏ –ø—Ä—è–º–æ–π —Ç–µ—Å—Ç –ø—Ä–æ—à–µ–ª - –∑–∞–ø—É—Å—Ç–∏—Ç–µ –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò', style: TextStyle(color: AppConstants.textColor)),
          Text('3. –ï—Å–ª–∏ –ø—Ä—è–º–æ–π —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ platform.openai.com', style: TextStyle(color: AppConstants.textColor)),
          Text('4. –û—á–∏—â–∞–π—Ç–µ –∫—ç—à –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –Ω–æ–≤—ã–º —Ç–µ—Å—Ç–æ–º', style: TextStyle(color: AppConstants.textColor)),
        ],
      ),
    );
  }

  void _runIntegrationTest() async {
    setState(() {
      _isLoading = true;
      _testResult = null;
    });

    try {
      final result = await _aiService.testOpenAIConnection();
      setState(() {
        _testResult = result;
      });
    } catch (e) {
      setState(() {
        _testResult = {
          'success': false,
          'error': e.toString(),
          'configured': false,
        };
      });
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  void _runDirectTest() async {
    setState(() {
      _isLoading = true;
      _directTestResult = null;
    });

    try {
      const prompt = '–°–∫–∞–∂–∏ "–¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω" –µ—Å–ª–∏ –ø–æ–ª—É—á–∏–ª —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ';

      final result = await _makeDirectOpenAIRequest(prompt);

      setState(() {
        _directTestResult = '–£—Å–ø–µ—Ö: $result';
      });
    } catch (e) {
      setState(() {
        _directTestResult = '–û—à–∏–±–∫–∞: $e';
      });
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  Future<String> _makeDirectOpenAIRequest(String prompt) async {
    final apiKey = ApiKeys.openAIKey;

    if (apiKey.isEmpty || apiKey == 'YOUR_OPENAI_API_KEY_HERE') {
      throw Exception('API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }

    final response = await http.post(
      Uri.parse('https://api.openai.com/v1/chat/completions'),
      headers: {
        'Authorization': 'Bearer $apiKey',
        'Content-Type': 'application/json',
      },
      body: json.encode({
        'model': 'gpt-3.5-turbo',
        'messages': [
          {'role': 'user', 'content': prompt}
        ],
        'max_tokens': 50,
        'temperature': 0.0,
      }),
    ).timeout(const Duration(seconds: 15));

    if (response.statusCode == 200) {
      final data = json.decode(response.body);
      return data['choices'][0]['message']['content'];
    } else {
      final errorBody = response.body;
      throw Exception('HTTP ${response.statusCode}: $errorBody');
    }
  }

  void _clearCache() {
    _aiService.clearOldCache();
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: const Text('–ö—ç—à –æ—á–∏—â–µ–Ω'),
        backgroundColor: Colors.green,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }
}