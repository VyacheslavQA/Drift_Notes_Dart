// –ü—É—Ç—å: lib/screens/debug/openai_test_screen.dart

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'dart:convert';
import 'package:http/http.dart' as http;
import '../../constants/app_constants.dart';
import '../../services/ai_bite_prediction_service.dart';
import '../../services/weather/weather_api_service.dart';
import '../../config/api_keys.dart';

class OpenAITestScreen extends StatefulWidget {
  const OpenAITestScreen({super.key});

  @override
  State<OpenAITestScreen> createState() => _OpenAITestScreenState();
}

class _OpenAITestScreenState extends State<OpenAITestScreen> {
  final AIBitePredictionService _aiService = AIBitePredictionService();
  final WeatherApiService _weatherService = WeatherApiService();

  bool _isLoading = false;
  String _result = '';
  String _status = '';

  @override
  void initState() {
    super.initState();
    _checkOpenAIConfiguration();
  }

  void _checkOpenAIConfiguration() {
    setState(() {
      if (ApiKeys.openAIKey.isEmpty || ApiKeys.openAIKey == 'YOUR_OPENAI_API_KEY_HERE') {
        _status = '‚ùå OpenAI API –∫–ª—é—á –ù–ï –Ω–∞—Å—Ç—Ä–æ–µ–Ω';
      } else if (ApiKeys.openAIKey.startsWith('sk-proj') || ApiKeys.openAIKey.startsWith('sk-')) {
        _status = '‚úÖ OpenAI API –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω (${ApiKeys.openAIKey.length} —Å–∏–º–≤–æ–ª–æ–≤)';
      } else {
        _status = '‚ö†Ô∏è OpenAI API –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –Ω–æ —Ñ–æ—Ä–º–∞—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π';
      }
    });
  }

  // –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç OpenAI API
  Future<void> _testOpenAIDirectly() async {
    setState(() {
      _isLoading = true;
      _result = '–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenAI...';
    });

    try {
      final response = await http.post(
        Uri.parse('https://api.openai.com/v1/chat/completions'),
        headers: {
          'Authorization': 'Bearer ${ApiKeys.openAIKey}',
          'Content-Type': 'application/json',
        },
        body: json.encode({
          'model': 'gpt-3.5-turbo',
          'messages': [
            {
              'role': 'user',
              'content': '–û—Ç–≤–µ—Ç—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ API?',
            },
          ],
          'max_tokens': 10,
          'temperature': 0.3,
        }),
      ).timeout(const Duration(seconds: 15));

      setState(() {
        if (response.statusCode == 200) {
          final data = json.decode(response.body);
          final answer = data['choices'][0]['message']['content'] as String;
          _result = '''
‚úÖ –ü–†–Ø–ú–û–ô –¢–ï–°–¢ OpenAI –£–°–ü–ï–®–ï–ù!

üì§ –û—Ç–ø—Ä–∞–≤–∏–ª–∏: "–û—Ç–≤–µ—Ç—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ API?"
üì• –ü–æ–ª—É—á–∏–ª–∏: "$answer"

üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏:
- –°—Ç–∞—Ç—É—Å: ${response.statusCode}
- –ú–æ–¥–µ–ª—å: gpt-3.5-turbo
- –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: < 15 —Å–µ–∫

–≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ OpenAI API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!
–ü—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤–Ω—É—Ç—Ä–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
''';
        } else {
          final errorData = json.decode(response.body);
          _result = '''
‚ùå –ü–†–Ø–ú–û–ô –¢–ï–°–¢ OpenAI –ù–ï–£–°–ü–ï–®–ï–ù

üî¥ –°—Ç–∞—Ç—É—Å: ${response.statusCode}
üìù –û—à–∏–±–∫–∞: ${errorData['error']?['message'] ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}

–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
${_getErrorExplanation(response.statusCode, errorData)}
''';
        }
      });

    } catch (e) {
      setState(() {
        _result = '''
‚ùå –û–®–ò–ë–ö–ê –ü–†–Ø–ú–û–ì–û –¢–ï–°–¢–ê:

${e.toString()}

–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
- –ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
- –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–æ—Å—Ç—É–ø –∫ OpenAI
- –¢–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (>15 —Å–µ–∫)
- –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏ SSL
''';
      });
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  Future<void> _testOpenAIIntegration() async {
    setState(() {
      _isLoading = true;
      _result = '–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å OpenAI —á–µ—Ä–µ–∑ –ò–ò —Å–µ—Ä–≤–∏—Å...';
    });

    try {
      // –û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞
      _aiService.clearOldCache();

      setState(() {
        _result = '–ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–≥–æ–¥—É...';
      });

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ (–ü–∞–≤–ª–æ–¥–∞—Ä)
      final weather = await _weatherService.getCurrentWeather(
        latitude: 52.2962,
        longitude: 76.9574,
      );

      setState(() {
        _result = '–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ò–ò –ø—Ä–æ–≥–Ω–æ–∑...';
      });

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ò–ò –ø—Ä–æ–≥–Ω–æ–∑
      final prediction = await _aiService.getMultiFishingTypePrediction(
        weather: weather,
        latitude: 52.2962,
        longitude: 76.9574,
      );

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –ª–∏ OpenAI
      bool openAIUsed = false;
      String openAITip = '';

      for (final tip in prediction.bestPrediction.tips) {
        if (tip.contains('üí° –°–æ–≤–µ—Ç –ò–ò:')) {
          openAIUsed = true;
          openAITip = tip;
          break;
        }
      }

      setState(() {
        _result = '''
üéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–û–ì–û –¢–ï–°–¢–ê:

${openAIUsed ? '‚úÖ OpenAI –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –†–ê–ë–û–¢–ê–ï–¢!' : '‚ùå OpenAI –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ù–ï –†–ê–ë–û–¢–ê–ï–¢'}

üìä –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑:
- –õ—É—á—à–∏–π —Ç–∏–ø: ${prediction.bestFishingType}
- –ë–∞–ª–ª: ${prediction.bestPrediction.overallScore}/100
- –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${prediction.bestPrediction.confidencePercent}%

ü§ñ OpenAI —Å—Ç–∞—Ç—É—Å:
${openAIUsed ? '‚úÖ –°–æ–≤–µ—Ç –æ—Ç OpenAI –ø–æ–ª—É—á–µ–Ω' : '‚ùå –°–æ–≤–µ—Ç –æ—Ç OpenAI –ù–ï –ø–æ–ª—É—á–µ–Ω'}

${openAIUsed ? 'üí° –°–æ–≤–µ—Ç OpenAI:\n$openAITip' : ''}

üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏:
- –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: ${prediction.bestPrediction.dataSource}
- –í–µ—Ä—Å–∏—è –º–æ–¥–µ–ª–∏: ${prediction.bestPrediction.modelVersion}
- –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${prediction.generatedAt}
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≤–µ—Ç–æ–≤: ${prediction.bestPrediction.tips.length}

üìù –í—Å–µ —Å–æ–≤–µ—Ç—ã:
${prediction.bestPrediction.tips.join('\n')}
''';
      });

    } catch (e) {
      setState(() {
        _result = '''
‚ùå –û–®–ò–ë–ö–ê –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–û–ì–û –¢–ï–°–¢–ê:

${e.toString()}

–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
1. –ù–µ–≤–µ—Ä–Ω—ã–π OpenAI API –∫–ª—é—á
2. –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤  
3. –ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
4. –ü—Ä–æ–±–ª–µ–º—ã —Å WeatherAPI
''';
      });
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  String _getErrorExplanation(int statusCode, Map<String, dynamic>? errorData) {
    switch (statusCode) {
      case 401:
        return '‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á\n‚Ä¢ –ö–ª—é—á –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω\n‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–ª—é—á–∞';
      case 429:
        return '‚Ä¢ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤\n‚Ä¢ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É\n‚Ä¢ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç–µ –ø–ª–∞–Ω';
      case 402:
        return '‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ\n‚Ä¢ –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ platform.openai.com';
      case 403:
        return '‚Ä¢ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω\n‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ, –∫–ª—é—á –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω';
      case 500:
        return '‚Ä¢ –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ OpenAI\n‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ';
      default:
        return '‚Ä¢ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞\n‚Ä¢ –ö–æ–¥: $statusCode';
    }
  }

  void _copyResult() {
    Clipboard.setData(ClipboardData(text: _result));
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(content: Text('–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞')),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: AppConstants.backgroundColor,
      appBar: AppBar(
        title: const Text(
          '–¢–µ—Å—Ç OpenAI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏',
          style: TextStyle(color: Colors.white),
        ),
        backgroundColor: AppConstants.primaryColor,
        leading: IconButton(
          icon: const Icon(Icons.arrow_back, color: Colors.white),
          onPressed: () => Navigator.pop(context),
        ),
        actions: [
          if (_result.isNotEmpty)
            IconButton(
              icon: const Icon(Icons.copy, color: Colors.white),
              onPressed: _copyResult,
              tooltip: '–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç',
            ),
        ],
      ),
      body: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            // –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            Container(
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: AppConstants.surfaceColor,
                borderRadius: BorderRadius.circular(12),
                border: Border.all(
                  color: _status.contains('‚úÖ') ? Colors.green : Colors.red,
                  width: 2,
                ),
              ),
              child: Column(
                children: [
                  Text(
                    '–°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏',
                    style: TextStyle(
                      color: AppConstants.textColor,
                      fontSize: 18,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  const SizedBox(height: 8),
                  Text(
                    _status,
                    style: TextStyle(
                      color: _status.contains('‚úÖ') ? Colors.green : Colors.red,
                      fontSize: 16,
                      fontWeight: FontWeight.w600,
                    ),
                  ),
                ],
              ),
            ),

            const SizedBox(height: 20),

            // –ö–Ω–æ–ø–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            Row(
              children: [
                Expanded(
                  child: ElevatedButton.icon(
                    onPressed: _isLoading ? null : _testOpenAIDirectly,
                    icon: _isLoading
                        ? const SizedBox(
                      width: 20,
                      height: 20,
                      child: CircularProgressIndicator(strokeWidth: 2),
                    )
                        : const Icon(Icons.api),
                    label: const Text('–ü–†–Ø–ú–û–ô –¢–ï–°–¢'),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.blue,
                      foregroundColor: Colors.white,
                      padding: const EdgeInsets.symmetric(vertical: 12),
                    ),
                  ),
                ),
                const SizedBox(width: 12),
                Expanded(
                  child: ElevatedButton.icon(
                    onPressed: _isLoading ? null : _testOpenAIIntegration,
                    icon: _isLoading
                        ? const SizedBox(
                      width: 20,
                      height: 20,
                      child: CircularProgressIndicator(strokeWidth: 2),
                    )
                        : const Icon(Icons.psychology),
                    label: const Text('–¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò'),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: AppConstants.primaryColor,
                      foregroundColor: Colors.white,
                      padding: const EdgeInsets.symmetric(vertical: 12),
                    ),
                  ),
                ),
              ],
            ),

            const SizedBox(height: 10),

            // –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞
            ElevatedButton.icon(
              onPressed: () {
                _aiService.clearOldCache();
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(content: Text('–ö—ç—à –æ—á–∏—â–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ.')),
                );
              },
              icon: const Icon(Icons.clear_all),
              label: const Text('–û–ß–ò–°–¢–ò–¢–¨ –ö–≠–®'),
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.orange,
                foregroundColor: Colors.white,
                padding: const EdgeInsets.symmetric(vertical: 12),
              ),
            ),

            const SizedBox(height: 20),

            // –†–µ–∑—É–ª—å—Ç–∞—Ç
            Expanded(
              child: Container(
                padding: const EdgeInsets.all(16),
                decoration: BoxDecoration(
                  color: AppConstants.surfaceColor,
                  borderRadius: BorderRadius.circular(12),
                ),
                child: SingleChildScrollView(
                  child: Text(
                    _result.isEmpty ? '''
–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–µ—Å—Ç–∞:

üîµ –ü–†–Ø–ú–û–ô –¢–ï–°–¢ - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenAI API

üü¢ –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É OpenAI –≤–Ω—É—Ç—Ä–∏ –≤–∞—à–µ–≥–æ –ò–ò —Å–µ—Ä–≤–∏—Å–∞

üü† –û–ß–ò–°–¢–ò–¢–¨ –ö–≠–® - —É–¥–∞–ª—è–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞
''' : _result,
                    style: TextStyle(
                      color: AppConstants.textColor,
                      fontSize: 14,
                      fontFamily: 'monospace',
                    ),
                  ),
                ),
              ),
            ),

            const SizedBox(height: 20),

            // –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
            Container(
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.blue.withValues(alpha: 0.1),
                borderRadius: BorderRadius.circular(12),
                border: Border.all(color: Colors.blue.withValues(alpha: 0.3)),
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    'üí° –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:',
                    style: TextStyle(
                      color: AppConstants.textColor,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  const SizedBox(height: 8),
                  Text(
                    '''1. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ü–†–Ø–ú–û–ô –¢–ï–°–¢
2. –ï—Å–ª–∏ –ø—Ä—è–º–æ–π —Ç–µ—Å—Ç –ø—Ä–æ—à–µ–ª - –∑–∞–ø—É—Å—Ç–∏—Ç–µ –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò
3. –ï—Å–ª–∏ –ø—Ä—è–º–æ–π —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ platform.openai.com
4. –û—á–∏—â–∞–π—Ç–µ –∫—ç—à –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –Ω–æ–≤—ã–º —Ç–µ—Å—Ç–æ–º''',
                    style: TextStyle(
                      color: AppConstants.textColor.withValues(alpha: 0.8),
                      fontSize: 12,
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
}