// lib/screens/debug/simple_migration_page.dart
import 'package:flutter/material.dart';
import 'package:flutter/foundation.dart';
import '../../services/firebase/simplified_migration_tool.dart';
import '../../services/firebase/firebase_service.dart';
import '../../constants/app_constants.dart';

class SimpleMigrationPage extends StatefulWidget {
  @override
  _SimpleMigrationPageState createState() => _SimpleMigrationPageState();
}

class _SimpleMigrationPageState extends State<SimpleMigrationPage> {
  final SimplifiedMigrationTool _migrationTool = SimplifiedMigrationTool();
  final FirebaseService _firebaseService = FirebaseService();

  bool _isLoading = false;
  String _statusMessage = '';
  String _quickStatus = '';
  Map<String, dynamic>? _verificationResult;

  @override
  void initState() {
    super.initState();
    _checkQuickStatus();
  }

  Future<void> _checkQuickStatus() async {
    if (_isLoading) return;

    setState(() {
      _isLoading = true;
    });

    try {
      _showMessage('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å...');

      final status = await _migrationTool.getQuickStatus();
      setState(() {
        _quickStatus = status;
        _statusMessage = '‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω';
      });

      if (kDebugMode) {
        debugPrint('–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω: $status');
      }

    } catch (e) {
      setState(() {
        _quickStatus = '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: $e';
      });

      _showError('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: $e');

      if (kDebugMode) {
        debugPrint('–û—à–∏–±–∫–∞ _checkQuickStatus: $e');
      }
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  void _showMessage(String message) {
    setState(() {
      _statusMessage = message;
    });

    if (kDebugMode) {
      debugPrint(message);
    }
  }

  void _showSuccess(String message) {
    setState(() {
      _statusMessage = '‚úÖ $message';
    });

    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: Colors.green,
        duration: Duration(seconds: 3),
      ),
    );
  }

  void _showError(String error) {
    setState(() {
      _statusMessage = '‚ùå $error';
    });

    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(error),
        backgroundColor: Colors.red,
        duration: Duration(seconds: 5),
      ),
    );
  }

  Future<void> _runFullMigration() async {
    if (_isLoading) return;

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    final confirmed = await showDialog<bool>(
      context: context,
      builder: (context) => AlertDialog(
        backgroundColor: AppConstants.surfaceColor,
        title: Text(
          '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏',
          style: TextStyle(color: AppConstants.textColor, fontWeight: FontWeight.bold),
        ),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              '–ë—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–æ–ª–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É:',
              style: TextStyle(color: AppConstants.textColor),
            ),
            SizedBox(height: 8),
            Text(
              '‚Ä¢ fishing_notes ‚Üí users/{userId}/fishing_notes/',
              style: TextStyle(color: AppConstants.textColor, fontSize: 12),
            ),
            Text(
              '‚Ä¢ fishing_trips ‚Üí users/{userId}/fishing_trips/',
              style: TextStyle(color: AppConstants.textColor, fontSize: 12),
            ),
            Text(
              '‚Ä¢ marker_maps ‚Üí users/{userId}/marker_maps/',
              style: TextStyle(color: AppConstants.textColor, fontSize: 12),
            ),
            Text(
              '‚Ä¢ user_consents ‚Üí users/{userId}/user_consents/',
              style: TextStyle(color: AppConstants.textColor, fontSize: 12),
            ),
            SizedBox(height: 8),
            Text(
              '‚Ä¢ usage_limits –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)',
              style: TextStyle(color: Colors.orange, fontSize: 12),
            ),
            SizedBox(height: 12),
            Text(
              '–≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?',
              style: TextStyle(color: AppConstants.textColor, fontWeight: FontWeight.bold),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(false),
            child: Text('–û—Ç–º–µ–Ω–∞', style: TextStyle(color: AppConstants.textColor)),
          ),
          ElevatedButton(
            onPressed: () => Navigator.of(context).pop(true),
            style: ElevatedButton.styleFrom(backgroundColor: AppConstants.primaryColor),
            child: Text('–ó–∞–ø—É—Å—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é', style: TextStyle(color: Colors.white)),
          ),
        ],
      ),
    );

    if (confirmed != true) return;

    setState(() {
      _isLoading = true;
    });

    try {
      _showMessage('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—É—é –º–∏–≥—Ä–∞—Ü–∏—é...');

      final result = await _migrationTool.runCompleteMigration();

      setState(() {
        _verificationResult = result;
      });

      _showSuccess('–ü–æ–ª–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
      await _checkQuickStatus();

    } catch (e) {
      _showError('–û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏: $e');
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  Future<void> _cleanupOldData() async {
    if (_isLoading) return;

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–æ–≥–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    final confirmed = await showDialog<bool>(
      context: context,
      builder: (context) => AlertDialog(
        backgroundColor: AppConstants.surfaceColor,
        title: Row(
          children: [
            Icon(Icons.warning, color: Colors.red),
            SizedBox(width: 8),
            Text(
              '–û–ü–ê–°–ù–ê–Ø –û–ü–ï–†–ê–¶–ò–Ø',
              style: TextStyle(color: Colors.red, fontWeight: FontWeight.bold),
            ),
          ],
        ),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Text(
              '–ë—É–¥—É—Ç –ù–ê–í–°–ï–ì–î–ê —É–¥–∞–ª–µ–Ω—ã –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏:',
              style: TextStyle(color: AppConstants.textColor, fontWeight: FontWeight.bold),
            ),
            SizedBox(height: 8),
            Text(
              '‚Ä¢ fishing_notes\n‚Ä¢ fishing_trips\n‚Ä¢ marker_maps\n‚Ä¢ user_consents',
              style: TextStyle(color: Colors.red),
            ),
            SizedBox(height: 12),
            Text(
              '–£–ë–ï–î–ò–¢–ï–°–¨, —á—Ç–æ –º–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ù–ï–û–ë–†–ê–¢–ò–ú–û!',
              style: TextStyle(color: Colors.red, fontWeight: FontWeight.bold),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(false),
            child: Text('–û—Ç–º–µ–Ω–∞', style: TextStyle(color: AppConstants.textColor)),
          ),
          ElevatedButton(
            onPressed: () => Navigator.of(context).pop(true),
            style: ElevatedButton.styleFrom(backgroundColor: Colors.red),
            child: Text('–£–î–ê–õ–ò–¢–¨', style: TextStyle(color: Colors.white)),
          ),
        ],
      ),
    );

    if (confirmed != true) return;

    setState(() {
      _isLoading = true;
    });

    try {
      _showMessage('üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ...');

      await _migrationTool.cleanupOldData();

      _showSuccess('–°—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã!');
      await _checkQuickStatus();

    } catch (e) {
      _showError('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: $e');
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  Future<void> _createTestProfile() async {
    if (_isLoading) return;

    setState(() {
      _isLoading = true;
    });

    try {
      _showMessage('üë§ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å...');

      await _migrationTool.createTestProfile();

      _showSuccess('–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω!');
      await _checkQuickStatus();

    } catch (e) {
      _showError('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: $e');
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  Widget _buildVerificationResults() {
    if (_verificationResult == null) return SizedBox.shrink();

    final newData = _verificationResult!['newStructure'] as Map<String, dynamic>;
    final oldData = _verificationResult!['oldStructure'] as Map<String, dynamic>;

    return Card(
      color: AppConstants.surfaceColor,
      margin: EdgeInsets.all(16),
      child: Padding(
        padding: EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∏–≥—Ä–∞—Ü–∏–∏:',
              style: TextStyle(
                color: AppConstants.textColor,
                fontSize: 18,
                fontWeight: FontWeight.bold,
              ),
            ),
            SizedBox(height: 16),

            Text(
              '–ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ (users/{userId}/...):',
              style: TextStyle(color: Colors.green, fontWeight: FontWeight.bold),
            ),
            _buildDataRow('üìù –ó–∞–ø–∏—Å–∏ –æ —Ä—ã–±–∞–ª–∫–µ', newData['notes']),
            _buildDataRow('üé£ –ü–æ–µ–∑–¥–∫–∏', newData['trips']),
            _buildDataRow('üó∫Ô∏è –ö–∞—Ä—Ç—ã', newData['maps']),
            _buildDataRow('‚úÖ –°–æ–≥–ª–∞—Å–∏—è', newData['consents']),

            SizedBox(height: 16),

            Text(
              '–°—Ç–∞—Ä–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ (–Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å):',
              style: TextStyle(color: Colors.orange, fontWeight: FontWeight.bold),
            ),
            _buildDataRow('üìù fishing_notes', oldData['notes'], isOld: true),
            _buildDataRow('üé£ fishing_trips', oldData['trips'], isOld: true),
            _buildDataRow('üó∫Ô∏è marker_maps', oldData['maps'], isOld: true),
            _buildDataRow('‚úÖ user_consents', oldData['consents'], isOld: true),
          ],
        ),
      ),
    );
  }

  Widget _buildDataRow(String label, dynamic value, {bool isOld = false}) {
    final color = isOld && value > 0 ? Colors.orange : AppConstants.textColor;

    return Padding(
      padding: EdgeInsets.symmetric(vertical: 2),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Text(label, style: TextStyle(color: color)),
          Text('$value', style: TextStyle(color: color, fontWeight: FontWeight.bold)),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: AppConstants.backgroundColor,
      appBar: AppBar(
        title: Text(
          '–ú–∏–≥—Ä–∞—Ü–∏—è –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É "–ø–æ –ø–æ–ª–æ—á–∫–∞–º"',
          style: TextStyle(color: AppConstants.textColor),
        ),
        backgroundColor: AppConstants.surfaceColor,
        iconTheme: IconThemeData(color: AppConstants.textColor),
      ),
      body: SingleChildScrollView(
        padding: EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            Card(
              color: AppConstants.surfaceColor,
              child: Padding(
                padding: EdgeInsets.all(16),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      'üë§ –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:',
                      style: TextStyle(
                        color: AppConstants.textColor,
                        fontSize: 16,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    SizedBox(height: 8),
                    Text(
                      _firebaseService.currentUserId ?? '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω',
                      style: TextStyle(color: AppConstants.textColor),
                    ),
                    if (_firebaseService.currentUser?.email != null) ...[
                      SizedBox(height: 4),
                      Text(
                        _firebaseService.currentUser!.email!,
                        style: TextStyle(color: AppConstants.textColor.withOpacity(0.7)),
                      ),
                    ],
                  ],
                ),
              ),
            ),
            SizedBox(height: 16),

            // –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ç—É—Å
            Card(
              color: AppConstants.surfaceColor,
              child: Padding(
                padding: EdgeInsets.all(16),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      'üìã –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:',
                      style: TextStyle(
                        color: AppConstants.textColor,
                        fontSize: 16,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    SizedBox(height: 8),
                    Text(
                      _quickStatus,
                      style: TextStyle(color: AppConstants.textColor),
                    ),
                    SizedBox(height: 12),
                    Row(
                      children: [
                        Expanded(
                          child: ElevatedButton(
                            onPressed: _isLoading ? null : _checkQuickStatus,
                            style: ElevatedButton.styleFrom(
                              backgroundColor: _isLoading ? Colors.grey : Colors.blue,
                              padding: EdgeInsets.symmetric(vertical: 8),
                            ),
                            child: _isLoading
                                ? Row(
                              mainAxisAlignment: MainAxisAlignment.center,
                              children: [
                                SizedBox(
                                  width: 16,
                                  height: 16,
                                  child: CircularProgressIndicator(
                                    strokeWidth: 2,
                                    color: Colors.white,
                                  ),
                                ),
                                SizedBox(width: 8),
                                Text('–ü—Ä–æ–≤–µ—Ä—è—é...', style: TextStyle(color: Colors.white)),
                              ],
                            )
                                : Text(
                              '–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å',
                              style: TextStyle(color: Colors.white),
                            ),
                          ),
                        ),
                      ],
                    ),
                  ],
                ),
              ),
            ),
            SizedBox(height: 16),

            // –°—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–∏
            if (_statusMessage.isNotEmpty)
              Card(
                color: AppConstants.surfaceColor,
                child: Padding(
                  padding: EdgeInsets.all(16),
                  child: Text(
                    _statusMessage,
                    style: TextStyle(
                      color: _statusMessage.startsWith('‚ùå')
                          ? Colors.red
                          : _statusMessage.startsWith('‚úÖ')
                          ? Colors.green
                          : AppConstants.textColor,
                    ),
                  ),
                ),
              ),
            SizedBox(height: 16),

            // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
            ElevatedButton(
              onPressed: _isLoading ? null : _createTestProfile,
              style: ElevatedButton.styleFrom(
                backgroundColor: AppConstants.primaryColor,
                padding: EdgeInsets.symmetric(vertical: 16),
              ),
              child: Text(
                'üë§ –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å',
                style: TextStyle(color: AppConstants.textColor),
              ),
            ),
            SizedBox(height: 12),

            ElevatedButton(
              onPressed: _isLoading ? null : _runFullMigration,
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.green,
                padding: EdgeInsets.symmetric(vertical: 16),
              ),
              child: Text(
                'üöÄ –ü–û–õ–ù–ê–Ø –ú–ò–ì–†–ê–¶–ò–Ø –í SUBCOLLECTIONS',
                style: TextStyle(color: Colors.white, fontWeight: FontWeight.bold),
              ),
            ),
            SizedBox(height: 12),

            ElevatedButton(
              onPressed: _isLoading ? null : _cleanupOldData,
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.red,
                padding: EdgeInsets.symmetric(vertical: 16),
              ),
              child: Text(
                'üóëÔ∏è –£–î–ê–õ–ò–¢–¨ –°–¢–ê–†–´–ï –î–ê–ù–ù–´–ï',
                style: TextStyle(color: Colors.white, fontWeight: FontWeight.bold),
              ),
            ),

            // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            if (_isLoading) ...[
              SizedBox(height: 20),
              Center(
                child: Column(
                  children: [
                    CircularProgressIndicator(color: AppConstants.primaryColor),
                    SizedBox(height: 8),
                    Text(
                      '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–ø–µ—Ä–∞—Ü–∏—è...',
                      style: TextStyle(color: AppConstants.textColor),
                    ),
                  ],
                ),
              ),
            ],

            // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏
            _buildVerificationResults(),

            SizedBox(height: 20),
          ],
        ),
      ),
    );
  }
}