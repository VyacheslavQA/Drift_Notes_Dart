// –ü—É—Ç—å: lib/screens/home_screen.dart
// –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø —Å —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é —Å—á–µ—Ç—á–∏–∫–æ–≤

import 'package:flutter/material.dart';
import 'package:provider/provider.dart'; // üî• –î–û–ë–ê–í–õ–ï–ù–û –¥–ª—è —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
import 'package:url_launcher/url_launcher.dart';
import '../services/firebase/firebase_service.dart';
import '../repositories/fishing_note_repository.dart';
import '../repositories/user_repository.dart';
import '../models/fishing_note_model.dart';
import '../models/user_model.dart';
import '../models/subscription_model.dart';
import '../constants/app_constants.dart';
import '../utils/date_formatter.dart';
import '../utils/network_utils.dart';
import '../localization/app_localizations.dart';
import '../widgets/center_button_tooltip.dart';
import '../services/user_consent_service.dart';
import '../services/subscription/subscription_service.dart';
import '../constants/subscription_constants.dart';
import '../widgets/user_agreements_dialog.dart';
import '../widgets/subscription/usage_badge.dart';
import '../widgets/subscription/premium_create_button.dart';
import '../providers/subscription_provider.dart'; // üî• –î–û–ë–ê–í–õ–ï–ù–û –¥–ª—è —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
// –î–û–ë–ê–í–õ–ï–ù–û: –ò–º–ø–æ—Ä—Ç PaywallScreen
import 'subscription/paywall_screen.dart';
import 'timer/timers_screen.dart';
import 'fishing_note/fishing_type_selection_screen.dart';
import 'fishing_note/fishing_notes_list_screen.dart';
import 'calendar/fishing_calendar_screen.dart';
import 'profile/profile_screen.dart';
import 'map/map_screen.dart';
import 'notifications/notifications_screen.dart';
import 'statistics/statistics_screen.dart';
import 'marker_maps/marker_maps_list_screen.dart';
import 'settings/settings_screen.dart';
import 'weather/weather_screen.dart';
import 'tournaments/tournaments_screen.dart';
import 'shops/shops_screen.dart';
import 'budget/fishing_budget_screen.dart';

class HomeScreen extends StatefulWidget {
  const HomeScreen({super.key});

  @override
  State<HomeScreen> createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> with WidgetsBindingObserver {
  final _firebaseService = FirebaseService();
  final _fishingNoteRepository = FishingNoteRepository();
  final _userRepository = UserRepository();
  final _subscriptionService = SubscriptionService();
  final GlobalKey<ScaffoldState> _scaffoldKey = GlobalKey<ScaffoldState>();

  List<FishingNoteModel> _fishingNotes = [];
  bool _hasNewNotifications = true;

  // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–∏–Ω—è—Ç–∏—è –ø–æ–ª–∏—Ç–∏–∫–∏
  ConsentRestrictionResult? _policyRestrictions;
  bool _hasPolicyBeenChecked = false;

  // ===== –ù–û–í–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï –î–õ–Ø –û–§–õ–ê–ô–ù –†–ï–ñ–ò–ú–ê =====
  bool _isOfflineMode = false;
  bool _isInitialized = false;
  Map<String, dynamic>? _offlineAuthStatus;
  bool _hasNetworkConnection = true;
  String? _offlineStatusMessage;

  // üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ —Å –û–§–õ–ê–ô–ù –ø—Ä–æ–≤–µ—Ä–∫–æ–π
  SubscriptionStatus _cachedSubscriptionStatus = SubscriptionStatus.none;
  bool _hasPremiumAccess = false;
  bool _subscriptionDataLoaded = false;
  bool? _cachedCanCreateContent; // üö® –ù–û–í–û–ï: –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ñ–ª–∞–π–Ω –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤
  int? _cachedTotalUsage; // üö® –ù–û–í–û–ï: –ö—ç—à–∏—Ä—É–µ–º –æ–±—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ (—Å–µ—Ä–≤–µ—Ä–Ω–æ–µ + –æ—Ñ–ª–∞–π–Ω)
  int? _cachedLimit; // üö® –ù–û–í–û–ï: –ö—ç—à–∏—Ä—É–µ–º –ª–∏–º–∏—Ç

  int _selectedIndex = 2; // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ (—Ä—ã–±–∫–∞) –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–±—Ä–∞–Ω–∞

  // –•–ê–†–î–ö–û–†: –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (–Ω–µ –∑–∞–≤–∏—Å—è—Ç –æ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏)
  static const double _navBarHeight = 60.0; // –í—Å–µ–≥–¥–∞ 60px
  static const double _centerButtonSize = 80.0; // –£–í–ï–õ–ò–ß–ï–ù–û: 80px –≤–º–µ—Å—Ç–æ 70px
  static const double _navIconSize = 22.0; // –£–ú–ï–ù–¨–®–ï–ù–û: 22px –≤–º–µ—Å—Ç–æ 24px
  static const double _navTextSize = 10.0; // –£–ú–ï–ù–¨–®–ï–ù–û: 10px –≤–º–µ—Å—Ç–æ 11px
  static const double _navItemMinTouchTarget = 48.0; // –ú–∏–Ω–∏–º—É–º –¥–ª—è accessibility

  // –•–ê–†–î–ö–û–†: –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã AppBar
  static const double _appBarHeight = kToolbarHeight; // 56px —Å—Ç–∞–Ω–¥–∞—Ä—Ç
  static const double _appBarTitleSize = 24.0; // –í—Å–µ–≥–¥–∞ 24px
  static const double _appBarIconSize = 26.0; // –í—Å–µ–≥–¥–∞ 26px

  // –ü—Ä–æ—Å—Ç—ã–µ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã (–ë–ï–ó –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ AppBar)
  bool get isTablet => MediaQuery.of(context).size.width >= 768;
  double get screenWidth => MediaQuery.of(context).size.width;
  double get horizontalPadding => isTablet ? 32.0 : 16.0;
  double get cardPadding => isTablet ? 20.0 : 16.0;
  double get iconSize => isTablet ? 28.0 : 24.0;
  double get fontSize => isTablet ? 18.0 : 16.0;
  double get buttonHeight => isTablet ? 56.0 : 48.0;
  int get gridColumns => isTablet ? 4 : 2;

  // –î–û–ë–ê–í–õ–ï–ù–û: –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –æ—Ç—Å—Ç—É–ø–∞ –¥–ª—è Drawer
  double get _drawerBottomPadding {
    final bottomSafeArea = MediaQuery.of(context).padding.bottom;
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –≤—ã—Å–æ—Ç—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ + –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–æ–Ω–∞ + –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±—É—Ñ–µ—Ä
    return _navBarHeight + bottomSafeArea + 8.0;
  }

  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addObserver(this);
    // ===== –ù–û–í–û–ï: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞ =====
    _initializeOfflineMode();
  }

  @override
  void dispose() {
    WidgetsBinding.instance.removeObserver(this);
    super.dispose();
  }

  // ===== –ù–û–í–û–ï: –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫–æ–≥–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ —Ñ–æ–∫—É—Å =====
  @override
  void didChangeAppLifecycleState(AppLifecycleState state) {
    super.didChangeAppLifecycleState(state);
    if (state == AppLifecycleState.resumed) {
      // –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫–∏
      debugPrint('üîÑ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–µ—Ä–Ω—É–ª–æ—Å—å –≤ —Ñ–æ–∫—É—Å - –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫–∏');
      _loadFishingNotes();

      // üî• –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ Provider –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
      _refreshProviderData();
    }
  }

  // üî• –ù–û–í–´–ô –ú–ï–¢–û–î: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö Provider
  Future<void> _refreshProviderData() async {
    try {
      final subscriptionProvider = Provider.of<SubscriptionProvider>(context, listen: false);
      await subscriptionProvider.refreshUsageData();
      debugPrint('‚úÖ HomeScreen: Provider –æ–±–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ');
    } catch (e) {
      debugPrint('‚ùå HomeScreen: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Provider: $e');
    }
  }

  // ===== –ù–û–í–´–ô –ú–ï–¢–û–î: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞ =====
  Future<void> _initializeOfflineMode() async {
    try {
      debugPrint('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HomeScreen —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞...');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏
      _hasNetworkConnection = await NetworkUtils.isNetworkAvailable();
      debugPrint('üåê –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ç–∏: ${_hasNetworkConnection ? "–æ–Ω–ª–∞–π–Ω" : "–æ—Ñ–ª–∞–π–Ω"}');

      if (_hasNetworkConnection) {
        // –û–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º
        await _initializeOnlineMode();
      } else {
        // –û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º
        await _initializeOfflineOnly();
      }

      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ñ–ª–∞–π–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      _offlineAuthStatus = await _firebaseService.getOfflineAuthStatus();
      _isOfflineMode = _firebaseService.isOfflineMode;

      // üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –û–î–ò–ù –†–ê–ó —Å –æ—Ñ–ª–∞–π–Ω –ø—Ä–æ–≤–µ—Ä–∫–æ–π
      await _loadSubscriptionDataWithOfflineCheck();

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å fallback –Ω–∞ –∫—ç—à
      await _loadDataWithFallback();

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–º–µ—Ç–∫–∏
      await _loadFishingNotes();

      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –æ—Ñ–ª–∞–π–Ω –¥–∞–Ω–Ω—ã–µ
      await _fishingNoteRepository.syncOfflineDataOnStartup();

      _isInitialized = true;

      if (mounted) {
        setState(() {});
        _showOfflineStatusIfNeeded();
      }

      debugPrint('‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');

    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: $e');

      // Fallback: –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ö–æ—Ç—è –±—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      await _loadDataWithFallback();
      await _loadFishingNotes();

      _isInitialized = true;
      if (mounted) {
        setState(() {});
      }
    }
  }

  // üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–∫–∏ —Å –æ—Ñ–ª–∞–π–Ω –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ª–∏–º–∏—Ç–æ–≤
  Future<void> _loadSubscriptionDataWithOfflineCheck() async {
    try {
      debugPrint('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–∫–∏ —Å –æ—Ñ–ª–∞–π–Ω –ø—Ä–æ–≤–µ—Ä–∫–æ–π...');

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
      final subscription = await _subscriptionService.loadCurrentSubscription();

      // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      _cachedSubscriptionStatus = subscription.status;
      _hasPremiumAccess = _subscriptionService.hasPremiumAccess();

      // üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º –û–ë–©–ï–ï –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ (—Å–µ—Ä–≤–µ—Ä–Ω–æ–µ + –æ—Ñ–ª–∞–π–Ω)
      _cachedTotalUsage = await _subscriptionService.getCurrentOfflineUsage(ContentType.fishingNotes);
      _cachedLimit = _subscriptionService.getLimit(ContentType.fishingNotes);

      // üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è —Å —É—á–µ—Ç–æ–º –æ—Ñ–ª–∞–π–Ω –ª–∏–º–∏—Ç–æ–≤
      _cachedCanCreateContent = await _subscriptionService.canCreateContentOffline(ContentType.fishingNotes);

      _subscriptionDataLoaded = true;

      debugPrint('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: $_cachedSubscriptionStatus, Premium: $_hasPremiumAccess');
      debugPrint('üîç –ü–†–û–í–ï–†–ö–ê –õ–ò–ú–ò–¢–û–í: usage=$_cachedTotalUsage, limit=$_cachedLimit, canCreate=$_cachedCanCreateContent');

      if (mounted) {
        setState(() {});
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–∫–∏: $e');
      _subscriptionDataLoaded = true; // –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    }
  }

  // ===== –ù–û–í–´–ô –ú–ï–¢–û–î: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞ =====
  Future<void> _initializeOnlineMode() async {
    try {
      debugPrint('üåê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞...');

      // –ö—ç—à–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–∏ –æ–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ
      await _subscriptionService.cacheSubscriptionDataOnline();

      // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ –æ–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º –µ—Å–ª–∏ –±—ã–ª–∏ –æ—Ñ–ª–∞–π–Ω
      if (_firebaseService.isOfflineMode) {
        await _firebaseService.switchToOnlineMode();
      }

      debugPrint('‚úÖ –û–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞: $e');
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    }
  }

  // ===== –ù–û–í–´–ô –ú–ï–¢–û–î: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞ =====
  Future<void> _initializeOfflineOnly() async {
    try {
      debugPrint('üì± –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞...');

      // –ü—ã—Ç–∞–µ–º—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ—Ñ–ª–∞–π–Ω
      final initialized = await _firebaseService.initializeWithOfflineSupport();

      if (initialized) {
        _isOfflineMode = true;
        _offlineStatusMessage = '–†–∞–±–æ—Ç–∞–µ—Ç–µ –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ';
        debugPrint('‚úÖ –û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
      } else {
        _offlineStatusMessage = '–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É';
        debugPrint('‚ö†Ô∏è –û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      }

    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞: $e');
      _offlineStatusMessage = '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è';
    }
  }

  // ===== –ù–û–í–´–ô –ú–ï–¢–û–î: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å fallback –Ω–∞ –∫—ç—à =====
  Future<void> _loadDataWithFallback() async {
    try {
      debugPrint('üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å fallback –Ω–∞ –∫—ç—à...');

      if (_hasNetworkConnection) {
        // –û–Ω–ª–∞–π–Ω: –∑–∞–≥—Ä—É–∂–∞–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞ –∏ –∫—ç—à–∏—Ä—É–µ–º
        debugPrint('üåê –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞...');
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –¥—Ä—É–≥–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

      } else {
        // –û—Ñ–ª–∞–π–Ω: –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –∫—ç—à–∞
        debugPrint('üíæ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫—ç—à–∞...');
        // –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —á–µ—Ä–µ–∑ FirebaseService
      }

      debugPrint('‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');

    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: $e');
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    }
  }

  // ===== –ù–û–í–´–ô –ú–ï–¢–û–î: –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞ =====
  void _showOfflineStatusIfNeeded() {
    if (!_hasNetworkConnection || _isOfflineMode) {
      final localizations = AppLocalizations.of(context);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–Ω—ç–∫–±–∞—Ä —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
      WidgetsBinding.instance.addPostFrameCallback((_) {
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Row(
                children: [
                  Icon(
                    _isOfflineMode ? Icons.offline_bolt : Icons.wifi_off,
                    color: Colors.white,
                  ),
                  const SizedBox(width: 8),
                  Expanded(
                    child: Text(
                      _offlineStatusMessage ??
                          localizations.translate('offline_mode_active') ??
                          '–û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω',
                      style: const TextStyle(color: Colors.white),
                    ),
                  ),
                ],
              ),
              backgroundColor: _isOfflineMode ? Colors.blue : Colors.orange,
              duration: const Duration(seconds: 4),
              action: !_hasNetworkConnection ? SnackBarAction(
                label: localizations.translate('retry') ?? '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å',
                textColor: Colors.white,
                onPressed: () => _refreshConnection(),
              ) : null,
            ),
          );
        }
      });
    }
  }

  // ===== –ù–û–í–´–ô –ú–ï–¢–û–î: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è =====
  Future<void> _refreshConnection() async {
    try {
      debugPrint('üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');

      final hasConnection = await NetworkUtils.isNetworkAvailable();

      if (hasConnection != _hasNetworkConnection) {
        _hasNetworkConnection = hasConnection;

        if (_hasNetworkConnection) {
          // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
          debugPrint('üåê –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
          await _initializeOnlineMode();

          // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
          await _loadSubscriptionDataWithOfflineCheck();

          // üî• –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º Provider –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ—Ç–∏
          await _refreshProviderData();

          if (mounted) {
            final localizations = AppLocalizations.of(context);
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(
                content: Row(
                  children: [
                    const Icon(Icons.wifi, color: Colors.white),
                    const SizedBox(width: 8),
                    Text(
                      localizations.translate('connection_restored') ??
                          '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ',
                      style: const TextStyle(color: Colors.white),
                    ),
                  ],
                ),
                backgroundColor: Colors.green,
                duration: const Duration(seconds: 3),
              ),
            );
          }
        }

        if (mounted) {
          setState(() {});
        }
      }

    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: $e');
    }
  }

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();
    if (!_hasPolicyBeenChecked) {
      _hasPolicyBeenChecked = true;
      WidgetsBinding.instance.addPostFrameCallback((_) {
        _checkPolicyCompliance();
      });
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–±–ª—é–¥–µ–Ω–∏–µ –ø–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
  Future<void> _checkPolicyCompliance() async {
    try {
      if (!mounted) return;

      String languageCode = 'ru';

      try {
        final localizations = AppLocalizations.of(context);
        languageCode = localizations.translate('language_code') ?? 'ru';
      } catch (e) {
        debugPrint('‚ö†Ô∏è –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫');
      }

      final consentResult = await UserConsentService().checkUserConsents(
        languageCode,
      );

      if (!consentResult.allValid) {
        debugPrint('üö´ –ü–æ–ª–∏—Ç–∏–∫–∞ –Ω–µ –ø—Ä–∏–Ω—è—Ç–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –¥–∏–∞–ª–æ–≥');
        if (mounted) {
          await _showPolicyUpdateDialog();
        }
      }

      _policyRestrictions = await UserConsentService().getConsentRestrictions(
        languageCode,
      );

      if (mounted && _policyRestrictions!.hasRestrictions) {
        debugPrint('‚ö†Ô∏è –î–µ–π—Å—Ç–≤—É—é—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: ${_policyRestrictions!.level}');
        _showPolicyRestrictionBanner();
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª–∏—Ç–∏–∫–∏: $e');
    }
  }

  Future<void> _showPolicyUpdateDialog() async {
    if (!mounted) return;

    return showDialog<void>(
      context: context,
      barrierDismissible: false,
      builder: (BuildContext context) {
        return WillPopScope(
          onWillPop: () async => false,
          child: UserAgreementsDialog(
            onAgreementsAccepted: () async {
              debugPrint('‚úÖ –ü–æ–ª–∏—Ç–∏–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
              await _refreshPolicyStatus();
            },
            onCancel: () async {
              debugPrint('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –ø—Ä–∏–Ω—è—Ç–∏—è –ø–æ–ª–∏—Ç–∏–∫–∏');
              await UserConsentService().recordPolicyRejection();
              await _refreshPolicyStatus();
            },
          ),
        );
      },
    );
  }

  Future<void> _refreshPolicyStatus() async {
    if (!mounted) return;

    String languageCode = 'ru';

    try {
      final localizations = AppLocalizations.of(context);
      languageCode = localizations.translate('language_code') ?? 'ru';
    } catch (e) {
      debugPrint('‚ö†Ô∏è –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞');
    }

    _policyRestrictions = await UserConsentService().getConsentRestrictions(
      languageCode,
    );

    if (mounted && _policyRestrictions!.hasRestrictions) {
      _showPolicyRestrictionBanner();
    }

    if (mounted) {
      setState(() {});
    }
  }

  void _showPolicyRestrictionBanner() {
    if (!mounted || _policyRestrictions == null) return;

    final localizations = AppLocalizations.of(context);
    final restrictions = _policyRestrictions!;

    Color bannerColor;
    IconData bannerIcon;

    switch (restrictions.level) {
      case ConsentRestrictionLevel.soft:
        bannerColor = Colors.orange;
        bannerIcon = Icons.warning_amber;
        break;
      case ConsentRestrictionLevel.hard:
        bannerColor = Colors.red;
        bannerIcon = Icons.warning;
        break;
      case ConsentRestrictionLevel.final_:
        bannerColor = Colors.red[800]!;
        bannerIcon = Icons.error;
        break;
      case ConsentRestrictionLevel.deletion:
        bannerColor = Colors.red[900]!;
        bannerIcon = Icons.delete_forever;
        break;
      default:
        return;
    }

    WidgetsBinding.instance.addPostFrameCallback((_) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Row(
              children: [
                Icon(bannerIcon, color: Colors.white),
                const SizedBox(width: 8),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      Text(
                        localizations.translate('policy_restrictions_title') ??
                            '–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞',
                        style: const TextStyle(
                          fontWeight: FontWeight.bold,
                          color: Colors.white,
                        ),
                      ),
                      Text(
                        restrictions.restrictionMessage,
                        style: const TextStyle(color: Colors.white),
                      ),
                    ],
                  ),
                ),
              ],
            ),
            backgroundColor: bannerColor,
            duration: const Duration(seconds: 8),
            action: SnackBarAction(
              label: localizations.translate('accept_policy') ?? '–ü—Ä–∏–Ω—è—Ç—å –ø–æ–ª–∏—Ç–∏–∫—É',
              textColor: Colors.white,
              onPressed: () => _showPolicyUpdateDialog(),
            ),
          ),
        );
      }
    });
  }

  // üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
  bool _canCreateContentCached() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–∏—Ç–∏–∫—É
    final policyAllows = _policyRestrictions?.canCreateContent ?? true;
    if (!policyAllows) {
      return false;
    }

    // üö® –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ñ–ª–∞–π–Ω –ø—Ä–æ–≤–µ—Ä–∫–∏
    return _cachedCanCreateContent ?? false;
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ï–¥–∏–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∫–∞–∑–∞ PaywallScreen
  void _showPremiumRequired(ContentType contentType) {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => PaywallScreen(
          contentType: contentType.name,
        ),
      ),
    );
  }

  // üö® –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∏–∞–ª–æ–≥–∞–º–∏
  Future<void> _showContentCreationBlocked() async {
    final localizations = AppLocalizations.of(context);

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–∏—Ç–∏–∫—É
    if (_policyRestrictions?.canCreateContent != true) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(
            localizations.translate('create_note_blocked') ??
                '–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ. –ü—Ä–∏–º–∏—Ç–µ –ø–æ–ª–∏—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.',
          ),
          backgroundColor: Colors.red,
          action: SnackBarAction(
            label: localizations.translate('accept_policy') ?? '–ü—Ä–∏–Ω—è—Ç—å –ø–æ–ª–∏—Ç–∏–∫—É',
            textColor: Colors.white,
            onPressed: () => _showPolicyUpdateDialog(),
          ),
        ),
      );
      return;
    }

    // üö® –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º PaywallScreen
    final canCreate = await _subscriptionService.canCreateContentOffline(ContentType.fishingNotes);
    if (!canCreate) {
      _showPremiumRequired(ContentType.fishingNotes);
    }
  }

  // ===== –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–º–µ—Ç–æ–∫ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è =====
  Future<void> _loadFishingNotes() async {
    try {
      debugPrint('üìù –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–º–µ—Ç–æ–∫ –æ —Ä—ã–±–∞–ª–∫–µ...');

      final notes = await _fishingNoteRepository.getUserFishingNotes();

      if (mounted) {
        setState(() {
          _fishingNotes = notes;
        });
      }

      debugPrint('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${notes.length} –∑–∞–º–µ—Ç–æ–∫');

    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–º–µ—Ç–æ–∫: $e');

      if (mounted) {
        final localizations = AppLocalizations.of(context);
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(
              '${localizations.translate('loading_error')}: ${e.toString()}',
            ),
            backgroundColor: Colors.red,
            action: SnackBarAction(
              label: localizations.translate('retry') ?? '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å',
              textColor: Colors.white,
              onPressed: () => _loadFishingNotes(),
            ),
          ),
        );
      }
    }
  }

  Future<void> _launchUrl(String url) async {
    final Uri uri = Uri.parse(url);
    try {
      if (!await launchUrl(uri, mode: LaunchMode.externalApplication)) {
        if (mounted) {
          final localizations = AppLocalizations.of(context);
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text(localizations.translate('failed_to_open_link')),
            ),
          );
        }
      }
    } catch (e) {
      if (mounted) {
        final localizations = AppLocalizations.of(context);
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(
              '${localizations.translate('link_open_error')}: ${e.toString()}',
            ),
          ),
        );
      }
    }
  }

  void _onItemTapped(int index) {
    setState(() {
      _selectedIndex = index;
    });

    switch (index) {
      case 0:
        Navigator.push(
          context,
          MaterialPageRoute(builder: (context) => const TimersScreen()),
        );
        break;
      case 1:
        Navigator.push(
          context,
          MaterialPageRoute(builder: (context) => const WeatherScreen()),
        );
        break;
      case 2:
        _navigateToAddNote();
        break;
      case 3:
        Navigator.push(
          context,
          MaterialPageRoute(
            builder: (context) => const FishingCalendarScreen(),
          ),
        );
        break;
      case 4:
        Navigator.push(
          context,
          MaterialPageRoute(builder: (context) => const MapScreen()),
        );
        break;
    }
  }

  // üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–∞–≤–∏–≥–∞—Ü–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –æ—Ñ–ª–∞–π–Ω –ª–∏–º–∏—Ç–æ–≤ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º Provider
  Future<void> _navigateToAddNote() async {
    // üö® –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–∏—Ç–∏–∫—É
    if (!(_policyRestrictions?.canCreateContent ?? true)) {
      await _showContentCreationBlocked();
      return;
    }

    // üö® –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ñ–ª–∞–π–Ω –ª–∏–º–∏—Ç—ã –ø–µ—Ä–µ–¥ –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
    final canCreate = await _subscriptionService.canCreateContentOffline(ContentType.fishingNotes);
    if (!canCreate) {
      _showPremiumRequired(ContentType.fishingNotes);
      return;
    }

    final result = await Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => const FishingTypeSelectionScreen(),
      ),
    );

    // üî• –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ Provider'–∞ –ø–æ—Å–ª–µ –≤–æ–∑–≤—Ä–∞—Ç–∞
    try {
      final subscriptionProvider = Provider.of<SubscriptionProvider>(context, listen: false);
      await subscriptionProvider.refreshUsageData();
      debugPrint('‚úÖ HomeScreen: –î–∞–Ω–Ω—ã–µ Provider –æ–±–Ω–æ–≤–ª–µ–Ω—ã –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏');
    } catch (e) {
      debugPrint('‚ùå HomeScreen: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Provider: $e');
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í–°–ï–ì–î–ê –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫–∏ –ø–æ—Å–ª–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å —ç–∫—Ä–∞–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è
    debugPrint('üîÑ –í–æ–∑–≤—Ä–∞—Ç —Å —ç–∫—Ä–∞–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫...');
    await _loadFishingNotes();

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ (–¥–ª—è —Å—á–µ—Ç—á–∏–∫–æ–≤ –ª–∏–º–∏—Ç–æ–≤)
    await _loadSubscriptionDataWithOfflineCheck();
  }

  void _navigateToNotifications() {
    Navigator.push(
      context,
      MaterialPageRoute(builder: (context) => const NotificationsScreen()),
    ).then((_) {
      setState(() {
        _hasNewNotifications = false;
      });
    });
  }

  void _showComingSoonMessage(String sectionName) {
    final localizations = AppLocalizations.of(context);
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('$sectionName ${localizations.translate('coming_soon')}'),
        backgroundColor: AppConstants.primaryColor,
        duration: const Duration(seconds: 2),
      ),
    );
  }

  Map<String, dynamic> _calculateStatistics(List<FishingNoteModel> notes) {
    final stats = <String, dynamic>{};
    stats['totalTrips'] = notes.length;

    int longestTrip = 0;
    String longestTripName = '';
    for (var note in notes) {
      if (note.isMultiDay && note.endDate != null) {
        int days = note.endDate!.difference(note.date).inDays + 1;
        if (days > longestTrip) {
          longestTrip = days;
          longestTripName = note.title.isNotEmpty ? note.title : note.location;
        }
      } else {
        if (longestTrip == 0) longestTrip = 1;
      }
    }
    stats['longestTrip'] = longestTrip;
    stats['longestTripName'] = longestTripName;

    Set<DateTime> uniqueFishingDays = {};
    for (var note in notes) {
      DateTime startDate = DateTime(
        note.date.year,
        note.date.month,
        note.date.day,
      );
      DateTime endDate =
      note.endDate != null
          ? DateTime(
        note.endDate!.year,
        note.endDate!.month,
        note.endDate!.day,
      )
          : startDate;

      for (int i = 0; i <= endDate.difference(startDate).inDays; i++) {
        uniqueFishingDays.add(startDate.add(Duration(days: i)));
      }
    }
    stats['totalDaysFishing'] = uniqueFishingDays.length;

    int totalFish = 0;
    int missedBites = 0;
    double totalWeight = 0.0;

    for (var note in notes) {
      for (var record in note.biteRecords) {
        if (record.fishType.isNotEmpty && record.weight > 0) {
          totalFish++;
          totalWeight += record.weight;
        } else {
          missedBites++;
        }
      }
    }
    stats['totalFish'] = totalFish;
    stats['missedBites'] = missedBites;
    stats['totalWeight'] = totalWeight;

    BiteRecord? biggestFish;
    String biggestFishLocation = '';
    for (var note in notes) {
      for (var record in note.biteRecords) {
        if (record.fishType.isNotEmpty &&
            record.weight > 0 &&
            (biggestFish == null || record.weight > biggestFish.weight)) {
          biggestFish = record;
          biggestFishLocation = note.location;
        }
      }
    }
    stats['biggestFish'] = biggestFish;
    stats['biggestFishLocation'] = biggestFishLocation;

    FishingNoteModel? lastTrip;
    if (notes.isNotEmpty) {
      lastTrip = notes.reduce((a, b) => a.date.isAfter(b.date) ? a : b);
    }
    stats['lastTrip'] = lastTrip;

    Map<String, int> fishByMonth = {};
    Map<String, Map<String, int>> monthDetails = {};

    for (var note in notes) {
      for (var record in note.biteRecords) {
        if (record.fishType.isNotEmpty && record.weight > 0) {
          String monthKey = '${record.time.year}-${record.time.month}';
          fishByMonth[monthKey] = (fishByMonth[monthKey] ?? 0) + 1;

          if (!monthDetails.containsKey(monthKey)) {
            monthDetails[monthKey] = {
              'month': record.time.month,
              'year': record.time.year,
            };
          }
        }
      }
    }

    String bestMonthKey = '';
    int bestMonthFish = 0;
    int bestMonthNumber = 0;
    int bestYear = 0;

    fishByMonth.forEach((monthKey, count) {
      if (count > bestMonthFish) {
        bestMonthFish = count;
        bestMonthKey = monthKey;

        if (monthDetails.containsKey(monthKey)) {
          bestMonthNumber = monthDetails[monthKey]!['month']!;
          bestYear = monthDetails[monthKey]!['year']!;
        }
      }
    });

    stats['bestMonth'] = bestMonthKey.isNotEmpty ? bestMonthKey : '';
    stats['bestMonthNumber'] = bestMonthNumber;
    stats['bestYear'] = bestYear;
    stats['bestMonthFish'] = bestMonthFish;

    final totalBites = totalFish + missedBites;
    double realizationRate = 0;
    if (totalBites > 0) {
      realizationRate = (totalFish / totalBites) * 100;
    }
    stats['realizationRate'] = realizationRate;

    return stats;
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ê–î–ê–ü–¢–ò–í–ù–ê–Ø —Å–µ—Ç–∫–∞ –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –±–µ–∑ –æ–±—Ä–µ–∑–∞–Ω–∏—è + –ù–û–í–´–ï –ö–ù–û–ü–ö–ò
  Widget _buildQuickActionsGrid() {
    final localizations = AppLocalizations.of(context);

    return GridView.count(
      shrinkWrap: true,
      physics: const NeverScrollableScrollPhysics(),
      crossAxisCount: gridColumns,
      mainAxisSpacing: 12,
      crossAxisSpacing: 12,
      padding: EdgeInsets.symmetric(horizontal: horizontalPadding),
      childAspectRatio: isTablet ? 1.1 : 1.0,
      children: [
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ú–∞—Ä–∫–µ—Ä–Ω—ã–µ –∫–∞—Ä—Ç—ã –ë–ï–ó –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤ - –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        _buildQuickActionItem(
          icon: Icons.map_outlined,
          label: localizations.translate('marker_map'),
          onTap: () {
            Navigator.push(
              context,
              MaterialPageRoute(builder: (context) => const MarkerMapsListScreen()),
            );
          },
        ),
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë—é–¥–∂–µ—Ç –ë–ï–ó –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤ - –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        _buildQuickActionItem(
          icon: Icons.account_balance_wallet_outlined,
          label: localizations.translate('fishing_budget'),
          onTap: () {
            Navigator.push(
              context,
              MaterialPageRoute(builder: (context) => const FishingBudgetScreen()),
            );
          },
        ),
        _buildQuickActionItem(
          icon: Icons.local_mall_outlined,
          label: localizations.translate('shops'),
          onTap: () {
            Navigator.push(
              context,
              MaterialPageRoute(builder: (context) => const ShopsScreen()),
            );
          },
        ),
        _buildQuickActionItem(
          icon: Icons.emoji_events_outlined,
          label: localizations.translate('tournaments'),
          onTap: () {
            Navigator.push(
              context,
              MaterialPageRoute(builder: (context) => const TournamentsScreen()),
            );
          },
        ),
      ],
    );
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –≠–ª–µ–º–µ–Ω—Ç –±—ã—Å—Ç—Ä–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
  Widget _buildQuickActionItem({
    required IconData icon,
    required String label,
    required VoidCallback onTap,
  }) {
    return InkWell(
      onTap: onTap,
      borderRadius: BorderRadius.circular(16),
      child: Container(
        padding: EdgeInsets.all(cardPadding),
        decoration: BoxDecoration(
          color: AppConstants.surfaceColor,
          borderRadius: BorderRadius.circular(16),
        ),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–í–ï–õ–ò–ß–ï–ù–´ –∏–∫–æ–Ω–∫–∏
            Container(
              height: isTablet ? 70 : 60,
              child: Icon(
                icon,
                color: AppConstants.textColor,
                size: isTablet ? 60 : 50,
              ),
            ),
            const SizedBox(height: 8),
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ç–µ–∫—Å—Ç–∞
            Expanded(
              child: Center(
                child: Text(
                  label,
                  style: TextStyle(
                    color: AppConstants.textColor,
                    fontSize: isTablet ? 16 : 14,
                    fontWeight: FontWeight.w600,
                  ),
                  textAlign: TextAlign.center,
                  maxLines: 2,
                  overflow: TextOverflow.ellipsis,
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ú–µ—Ç–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ë–ï–ó –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ (–æ–Ω–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤—ã—à–µ)
  Widget _buildStatsGrid() {
    final localizations = AppLocalizations.of(context);

    final now = DateTime.now();
    final validNotes = _fishingNotes
        .where((note) => note.date.isBefore(now) || note.date.isAtSameMomentAs(now))
        .toList();

    final stats = _calculateStatistics(validNotes);

    return Column(
      children: [
        // –£–î–ê–õ–ï–ù–û: –ö–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–ª–∏—Ç–∏–∫–∏ –∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤—ã—à–µ
        if (stats['biggestFish'] != null) ...[
          _buildStatCard(
            icon: Icons.emoji_events,
            title: localizations.translate('biggest_fish'),
            value: '${stats['biggestFish'].weight} ${localizations.translate('kg')}',
            subtitle: '${stats['biggestFish'].fishType}, ${DateFormatter.formatDate(stats['biggestFish'].time, context)}',
            valueColor: Colors.amber,
          ),
          const SizedBox(height: 16),
        ],

        _buildStatCard(
          icon: Icons.set_meal,
          title: localizations.translate('total_fish_caught'),
          value: stats['totalFish'].toString(),
          subtitle: DateFormatter.getFishText(stats['totalFish'], context),
          valueColor: Colors.green,
        ),
        const SizedBox(height: 16),

        _buildStatCard(
          icon: Icons.hourglass_empty,
          title: localizations.translate('missed_bites'),
          value: stats['missedBites'].toString(),
          subtitle: localizations.translate('bites_without_catch'),
          valueColor: Colors.red,
        ),
        const SizedBox(height: 16),

        if (stats['totalFish'] > 0 || stats['missedBites'] > 0) ...[
          _buildStatCard(
            icon: Icons.percent,
            title: localizations.translate('bite_realization'),
            value: '${stats['realizationRate'].toStringAsFixed(1)}%',
            subtitle: localizations.translate('fishing_efficiency'),
            valueColor: _getRealizationColor(stats['realizationRate']),
          ),
          const SizedBox(height: 16),
        ],

        _buildStatCard(
          icon: Icons.scale,
          title: localizations.translate('total_catch_weight'),
          value: '${stats['totalWeight'].toStringAsFixed(1)} ${localizations.translate('kg')}',
          subtitle: localizations.translate('total_weight_caught_fish'),
          valueColor: Colors.green,
        ),
        const SizedBox(height: 16),

        _buildStatCard(
          icon: Icons.format_list_bulleted,
          title: localizations.translate('total_fishing_trips'),
          value: stats['totalTrips'].toString(),
          subtitle: DateFormatter.getFishingTripsText(stats['totalTrips'], context),
        ),
        const SizedBox(height: 16),

        _buildStatCard(
          icon: Icons.access_time,
          title: localizations.translate('longest_trip'),
          value: stats['longestTrip'].toString(),
          subtitle: DateFormatter.getDaysText(stats['longestTrip'], context),
        ),
        const SizedBox(height: 16),

        _buildStatCard(
          icon: Icons.calendar_today,
          title: localizations.translate('total_fishing_days'),
          value: stats['totalDaysFishing'].toString(),
          subtitle: localizations.translate('days_fishing'),
        ),
        const SizedBox(height: 16),

        if (stats['lastTrip'] != null) ...[
          _buildStatCard(
            icon: Icons.directions_car,
            title: localizations.translate('last_trip'),
            value: stats['lastTrip'].title.isNotEmpty
                ? '¬´${stats['lastTrip'].title}¬ª'
                : stats['lastTrip'].location,
            subtitle: DateFormatter.formatDate(stats['lastTrip'].date, context),
          ),
          const SizedBox(height: 16),
        ],

        if (stats['bestMonth'].isNotEmpty) ...[
          _buildStatCard(
            icon: Icons.star,
            title: localizations.translate('best_month'),
            value: '${DateFormatter.getMonthInNominative(stats['bestMonthNumber'], context)} ${stats['bestYear']}',
            subtitle: '${stats['bestMonthFish']} ${DateFormatter.getFishText(stats['bestMonthFish'], context)}',
            valueColor: Colors.amber,
          ),
        ],
      ],
    );
  }

  // üö® –ü–û–õ–ù–û–°–¢–¨–Æ –ó–ê–ú–ï–ù–ï–ù–û: –ö–∞—Ä—Ç–æ—á–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏ —Å Consumer –¥–ª—è —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  Widget _buildSubscriptionStatusCard() {
    final localizations = AppLocalizations.of(context);

    return Consumer<SubscriptionProvider>(
      builder: (context, subscriptionProvider, child) {
        // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        if (subscriptionProvider.isLoading) {
          return Container(
            margin: const EdgeInsets.only(bottom: 16),
            padding: EdgeInsets.all(cardPadding),
            decoration: BoxDecoration(
              color: AppConstants.surfaceColor,
              borderRadius: BorderRadius.circular(16),
            ),
            child: const Center(
              child: CircularProgressIndicator(),
            ),
          );
        }

        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if (subscriptionProvider.hasPremiumAccess) {
          return const SizedBox.shrink();
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–∏–º–∏—Ç—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        return Container(
          margin: const EdgeInsets.only(bottom: 16),
          padding: EdgeInsets.all(cardPadding),
          decoration: BoxDecoration(
            color: AppConstants.surfaceColor,
            borderRadius: BorderRadius.circular(16),
            border: Border.all(
              color: AppConstants.primaryColor.withOpacity(0.3),
              width: 1,
            ),
          ),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Row(
                children: [
                  Container(
                    padding: const EdgeInsets.all(12),
                    decoration: BoxDecoration(
                      color: AppConstants.primaryColor.withOpacity(0.2),
                      borderRadius: BorderRadius.circular(12),
                    ),
                    child: Icon(
                      Icons.info_outline,
                      color: AppConstants.primaryColor,
                      size: iconSize,
                    ),
                  ),
                  const SizedBox(width: 16),
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          localizations.translate('free_plan'),
                          style: TextStyle(
                            color: AppConstants.textColor,
                            fontSize: fontSize,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                        const SizedBox(height: 4),
                        Text(
                          localizations.translate('limited_access'),
                          style: TextStyle(
                            color: AppConstants.textColor.withOpacity(0.7),
                            fontSize: fontSize - 2,
                          ),
                        ),
                      ],
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 16),

              // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –†–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä—ã —Å –¥–∞–Ω–Ω—ã–º–∏ Provider
              _buildUsageProgressBar(
                subscriptionProvider,
                ContentType.fishingNotes,
                localizations.translate('fishing_notes'),
              ),
              const SizedBox(height: 12),
              _buildUsageProgressBar(
                subscriptionProvider,
                ContentType.markerMaps,
                localizations.translate('marker_maps'),
              ),
              const SizedBox(height: 12),
              _buildUsageProgressBar(
                subscriptionProvider,
                ContentType.expenses,
                localizations.translate('fishing_budget'),
              ),
              const SizedBox(height: 24),

              SizedBox(
                width: double.infinity,
                height: buttonHeight + 4,
                child: ElevatedButton(
                  onPressed: () {
                    _showPremiumRequired(ContentType.fishingNotes);
                  },
                  style: ElevatedButton.styleFrom(
                    backgroundColor: AppConstants.primaryColor,
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(8),
                    ),
                  ),
                  child: Text(
                    localizations.translate('upgrade_to_premium'),
                    style: const TextStyle(
                      color: Colors.white,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ),
              ),
              const SizedBox(height: 12),
            ],
          ),
        );
      },
    );
  }

  // üî• –ù–û–í–´–ô –ú–ï–¢–û–î: –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å —Ä–µ–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ Provider
  Widget _buildUsageProgressBar(
      SubscriptionProvider provider,
      ContentType contentType,
      String label,
      ) {
    final currentUsage = provider.getUsage(contentType) ?? 0;
    final limit = provider.getLimit(contentType) ?? 0;
    final progress = limit > 0 ? (currentUsage / limit).clamp(0.0, 1.0) : 0.0;
    final color = provider.getUsageIndicatorColor(contentType);

    return Container(
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: AppConstants.primaryColor.withOpacity(0.1),
        borderRadius: BorderRadius.circular(8),
      ),
      child: Column(
        children: [
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Text(
                label,
                style: TextStyle(
                  color: AppConstants.textColor,
                  fontSize: fontSize - 2,
                  fontWeight: FontWeight.w500,
                ),
              ),
              Text(
                provider.getUsageText(contentType),
                style: TextStyle(
                  color: AppConstants.textColor,
                  fontSize: fontSize - 2,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ],
          ),
          const SizedBox(height: 8),
          ClipRRect(
            borderRadius: BorderRadius.circular(4),
            child: LinearProgressIndicator(
              value: progress,
              minHeight: 6,
              backgroundColor: Colors.grey.withOpacity(0.3),
              valueColor: AlwaysStoppedAnimation<Color>(color),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildPolicyRestrictionCard() {
    if (_policyRestrictions == null || !_policyRestrictions!.hasRestrictions) {
      return const SizedBox.shrink();
    }

    final localizations = AppLocalizations.of(context);
    final restrictions = _policyRestrictions!;

    Color cardColor;
    IconData cardIcon;
    String title;

    switch (restrictions.level) {
      case ConsentRestrictionLevel.soft:
        cardColor = Colors.orange;
        cardIcon = Icons.warning_amber;
        title = localizations.translate('soft_restrictions_title') ?? '–ú—è–≥–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è';
        break;
      case ConsentRestrictionLevel.hard:
        cardColor = Colors.red;
        cardIcon = Icons.warning;
        title = localizations.translate('hard_restrictions_title') ?? '–ñ–µ—Å—Ç–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è';
        break;
      case ConsentRestrictionLevel.final_:
        cardColor = Colors.red[800]!;
        cardIcon = Icons.error;
        title = localizations.translate('final_warning_title') ?? '–§–∏–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ';
        break;
      case ConsentRestrictionLevel.deletion:
        cardColor = Colors.red[900]!;
        cardIcon = Icons.delete_forever;
        title = localizations.translate('deletion_warning_title') ?? '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ —É–¥–∞–ª–µ–Ω–∏–µ';
        break;
      default:
        return const SizedBox.shrink();
    }

    return Container(
      margin: const EdgeInsets.only(bottom: 16),
      padding: EdgeInsets.all(cardPadding),
      decoration: BoxDecoration(
        color: cardColor.withOpacity(0.1),
        borderRadius: BorderRadius.circular(16),
        border: Border.all(color: cardColor, width: 2),
      ),
      child: Column(
        children: [
          Row(
            children: [
              Container(
                padding: const EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: cardColor.withOpacity(0.2),
                  borderRadius: BorderRadius.circular(12),
                ),
                child: Icon(cardIcon, color: cardColor, size: iconSize),
              ),
              const SizedBox(width: 16),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      title,
                      style: TextStyle(
                        color: cardColor,
                        fontSize: fontSize,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const SizedBox(height: 4),
                    Text(
                      restrictions.restrictionMessage,
                      style: TextStyle(
                        color: AppConstants.textColor.withOpacity(0.8),
                        fontSize: fontSize - 2,
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
          const SizedBox(height: 12),
          SizedBox(
            width: double.infinity,
            height: buttonHeight,
            child: ElevatedButton(
              onPressed: () => _showPolicyUpdateDialog(),
              style: ElevatedButton.styleFrom(
                backgroundColor: cardColor,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(8),
                ),
              ),
              child: Text(
                localizations.translate('accept_policy') ?? '–ü—Ä–∏–Ω—è—Ç—å –ø–æ–ª–∏—Ç–∏–∫—É',
                style: const TextStyle(
                  color: Colors.white,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }

  // ===== –ù–û–í–´–ô –í–ò–î–ñ–ï–¢: –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ—Ñ–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞ =====
  Widget _buildOfflineStatusIndicator() {
    if (!_isInitialized) {
      return const SizedBox.shrink();
    }

    final localizations = AppLocalizations.of(context);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∏–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º
    if (_hasNetworkConnection && !_isOfflineMode) {
      return const SizedBox.shrink();
    }

    return Container(
      margin: const EdgeInsets.only(bottom: 16),
      padding: EdgeInsets.all(cardPadding),
      decoration: BoxDecoration(
        color: _isOfflineMode ? Colors.blue.withOpacity(0.1) : Colors.orange.withOpacity(0.1),
        borderRadius: BorderRadius.circular(16),
        border: Border.all(
          color: _isOfflineMode ? Colors.blue : Colors.orange,
          width: 1,
        ),
      ),
      child: Row(
        children: [
          Container(
            padding: const EdgeInsets.all(12),
            decoration: BoxDecoration(
              color: (_isOfflineMode ? Colors.blue : Colors.orange).withOpacity(0.2),
              borderRadius: BorderRadius.circular(12),
            ),
            child: Icon(
              _isOfflineMode ? Icons.offline_bolt : Icons.wifi_off,
              color: _isOfflineMode ? Colors.blue : Colors.orange,
              size: iconSize,
            ),
          ),
          const SizedBox(width: 16),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  _isOfflineMode
                      ? (localizations.translate('offline_mode') ?? '–û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º')
                      : (localizations.translate('no_connection') ?? '–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è'),
                  style: TextStyle(
                    color: _isOfflineMode ? Colors.blue : Colors.orange,
                    fontSize: fontSize,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                const SizedBox(height: 4),
                Text(
                  _isOfflineMode
                      ? (localizations.translate('offline_mode_description') ?? '–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ')
                      : (localizations.translate('connection_required') ?? '–î–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç'),
                  style: TextStyle(
                    color: AppConstants.textColor.withOpacity(0.7),
                    fontSize: fontSize - 2,
                  ),
                ),
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ä–æ–∫–µ –¥–µ–π—Å—Ç–≤–∏—è –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞
                if (_isOfflineMode && _offlineAuthStatus != null && _offlineAuthStatus!['daysUntilExpiry'] != null) ...[
                  const SizedBox(height: 4),
                  Text(
                    '–î–µ–π—Å—Ç–≤—É–µ—Ç ${_offlineAuthStatus!['daysUntilExpiry']} –¥–Ω–µ–π',
                    style: TextStyle(
                      color: AppConstants.textColor.withOpacity(0.7),
                      fontSize: fontSize - 3,
                    ),
                  ),
                ],
              ],
            ),
          ),
          // –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
          if (!_hasNetworkConnection)
            IconButton(
              onPressed: _refreshConnection,
              icon: const Icon(Icons.refresh),
              color: Colors.orange,
            ),
        ],
      ),
    );
  }

  Color _getRealizationColor(double rate) {
    if (rate >= 70) return Colors.green;
    if (rate >= 40) return Colors.orange;
    return Colors.red;
  }

  @override
  Widget build(BuildContext context) {
    final localizations = AppLocalizations.of(context);

    return CenterButtonTooltip(
      child: Scaffold(
        key: _scaffoldKey,
        backgroundColor: AppConstants.backgroundColor,
        appBar: AppBar(
          // üö® –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å —Ä–µ–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —á–µ—Ä–µ–∑ Consumer
          title: Consumer<SubscriptionProvider>(
            builder: (context, subscriptionProvider, child) {
              return Row(
                children: [
                  Expanded(
                    child: Text(
                      'Drift Notes',
                      style: TextStyle(
                        color: AppConstants.textColor,
                        fontSize: _appBarTitleSize,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ),
                  // ===== –ù–û–í–û–ï: –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞ =====
                  if (_isOfflineMode || !_hasNetworkConnection)
                    Container(
                      margin: const EdgeInsets.only(right: 8),
                      padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
                      decoration: BoxDecoration(
                        color: _isOfflineMode ? Colors.blue : Colors.orange,
                        borderRadius: BorderRadius.circular(8),
                      ),
                      child: Row(
                        mainAxisSize: MainAxisSize.min,
                        children: [
                          Icon(
                            _isOfflineMode ? Icons.offline_bolt : Icons.wifi_off,
                            color: Colors.white,
                            size: 12,
                          ),
                          const SizedBox(width: 4),
                          Text(
                            _isOfflineMode ? 'OFF' : 'NO NET',
                            style: const TextStyle(
                              color: Colors.white,
                              fontSize: 10,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                        ],
                      ),
                    ),
                  // üö® –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –†–µ–∞–∫—Ç–∏–≤–Ω—ã–π –±–µ–π–¥–∂ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏
                  if (subscriptionProvider.hasPremiumAccess)
                    Container(
                      padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                      decoration: BoxDecoration(
                        gradient: const LinearGradient(
                          colors: [Color(0xFFFFD700), Color(0xFFFFA500)],
                        ),
                        borderRadius: BorderRadius.circular(12),
                      ),
                      child: const Row(
                        mainAxisSize: MainAxisSize.min,
                        children: [
                          Icon(Icons.stars, color: Colors.white, size: 14),
                          SizedBox(width: 4),
                          Text(
                            'PRO',
                            style: TextStyle(
                              color: Colors.white,
                              fontSize: 12,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                        ],
                      ),
                    ),
                ],
              );
            },
          ),
          centerTitle: true,
          backgroundColor: Colors.transparent,
          elevation: 0,
          toolbarHeight: _appBarHeight,
          leading: IconButton(
            icon: Icon(
              Icons.menu_rounded,
              color: AppConstants.textColor,
              size: _appBarIconSize,
            ),
            onPressed: () {
              _scaffoldKey.currentState?.openDrawer();
            },
          ),
          actions: [
            Stack(
              alignment: Alignment.center,
              children: [
                IconButton(
                  icon: Icon(
                    Icons.notifications_rounded,
                    color: AppConstants.textColor,
                    size: _appBarIconSize,
                  ),
                  onPressed: _navigateToNotifications,
                ),
                if (_hasNewNotifications)
                  Positioned(
                    right: 8,
                    top: 8,
                    child: Container(
                      width: 10,
                      height: 10,
                      decoration: const BoxDecoration(
                        color: Colors.red,
                        shape: BoxShape.circle,
                      ),
                    ),
                  ),
              ],
            ),
            const SizedBox(width: 8),
          ],
        ),
        drawer: _buildDrawer(),
        body: RefreshIndicator(
          onRefresh: () async {
            // ===== –û–ë–ù–û–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ Provider =====
            await _refreshConnection();
            await _checkPolicyCompliance();
            await _loadSubscriptionDataWithOfflineCheck();
            await _loadFishingNotes();

            // üî• –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º Provider –ø—Ä–∏ pull-to-refresh
            await _refreshProviderData();
          },
          child: SingleChildScrollView(
            physics: const AlwaysScrollableScrollPhysics(),
            child: Padding(
              padding: EdgeInsets.symmetric(horizontal: horizontalPadding),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  const SizedBox(height: 16),
                  _buildYoutubePromoCard(),
                  const SizedBox(height: 16),
                  _buildQuickActionsGrid(),
                  const SizedBox(height: 24),

                  // ===== –ù–û–í–û–ï: –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ—Ñ–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞ =====
                  _buildOfflineStatusIndicator(),

                  // –î–û–ë–ê–í–õ–ï–ù–û: –ö–∞—Ä—Ç–æ—á–∫–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ù–ê–î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
                  if (_policyRestrictions?.hasRestrictions == true)
                    _buildPolicyRestrictionCard(),
                  _buildSubscriptionStatusCard(),

                  Text(
                    localizations.translate('my_statistics'),
                    style: TextStyle(
                      fontSize: isTablet ? 26 : 22,
                      fontWeight: FontWeight.bold,
                      color: AppConstants.textColor,
                    ),
                  ),
                  const SizedBox(height: 16),
                  _buildStatsGrid(),
                  const SizedBox(height: 40),
                  SizedBox(height: _navBarHeight + (_centerButtonSize / 2) + 80),
                ],
              ),
            ),
          ),
        ),
        extendBody: true,
        bottomNavigationBar: _buildBottomNavigationBar(),
      ),
    );
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–û: YouTube –∫–∞—Ä—Ç–æ—á–∫–∞ –ë–ï–ó —Ç–µ–∫—Å—Ç–∞
  Widget _buildYoutubePromoCard() {
    return GestureDetector(
      onTap: () => _launchUrl('https://www.youtube.com/@Carpediem_hunting_fishing'),
      child: Container(
        height: isTablet ? 200 : 160,
        decoration: BoxDecoration(
          borderRadius: BorderRadius.circular(16),
          image: const DecorationImage(
            image: AssetImage('assets/images/fishing_background.png'),
            fit: BoxFit.cover,
          ),
        ),
        child: Container(
          decoration: BoxDecoration(
            borderRadius: BorderRadius.circular(16),
            gradient: LinearGradient(
              begin: Alignment.topCenter,
              end: Alignment.bottomCenter,
              colors: [
                Colors.black.withOpacity(0.2),
                Colors.black.withOpacity(0.5),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildStatCard({
    required IconData icon,
    required String title,
    required String value,
    required String subtitle,
    Color? valueColor,
  }) {
    return Container(
      padding: EdgeInsets.all(cardPadding),
      decoration: BoxDecoration(
        color: AppConstants.surfaceColor,
        borderRadius: BorderRadius.circular(16),
      ),
      child: Row(
        children: [
          Container(
            padding: const EdgeInsets.all(12),
            decoration: BoxDecoration(
              color: AppConstants.primaryColor.withOpacity(0.2),
              borderRadius: BorderRadius.circular(12),
            ),
            child: Icon(
              icon,
              color: valueColor ?? AppConstants.textColor,
              size: iconSize,
            ),
          ),
          const SizedBox(width: 16),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  title,
                  style: TextStyle(
                    color: AppConstants.textColor.withOpacity(0.7),
                    fontSize: fontSize - 2,
                  ),
                ),
                const SizedBox(height: 4),
                Text(
                  value,
                  style: TextStyle(
                    color: valueColor ?? AppConstants.textColor,
                    fontSize: fontSize + 4,
                    fontWeight: FontWeight.bold,
                  ),
                  maxLines: 2,
                  overflow: TextOverflow.ellipsis,
                ),
                if (subtitle.isNotEmpty)
                  Text(
                    subtitle,
                    style: TextStyle(
                      color: AppConstants.textColor.withOpacity(0.7),
                      fontSize: fontSize - 2,
                    ),
                    maxLines: 2,
                    overflow: TextOverflow.ellipsis,
                  ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–û: Drawer —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º –æ—Ç—Å—Ç—É–ø–æ–º —Å–Ω–∏–∑—É –∏ —Ä–µ–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
  Widget _buildDrawer() {
    final localizations = AppLocalizations.of(context);
    final user = _firebaseService.currentUser;
    final userName = user?.displayName ?? localizations.translate('user');
    final userEmail = user?.email ?? '';

    return Drawer(
      child: Container(
        color: AppConstants.backgroundColor,
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –æ—Ç—Å—Ç—É–ø –≤–º–µ—Å—Ç–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ
        padding: EdgeInsets.only(bottom: _drawerBottomPadding),
        child: ListView(
          padding: EdgeInsets.zero,
          children: [
            Container(
              decoration: const BoxDecoration(color: Color(0xFF0A1F1C)),
              child: SafeArea(
                child: Padding(
                  padding: const EdgeInsets.all(16.0),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.center,
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      // ===== –ù–û–í–û–ï: –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞ –≤ drawer =====
                      if (_isOfflineMode || !_hasNetworkConnection)
                        Container(
                          margin: const EdgeInsets.only(bottom: 12),
                          padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                          decoration: BoxDecoration(
                            color: _isOfflineMode ? Colors.blue : Colors.orange,
                            borderRadius: BorderRadius.circular(16),
                          ),
                          child: Row(
                            mainAxisSize: MainAxisSize.min,
                            children: [
                              Icon(
                                _isOfflineMode ? Icons.offline_bolt : Icons.wifi_off,
                                color: Colors.white,
                                size: 16,
                              ),
                              const SizedBox(width: 6),
                              Text(
                                _isOfflineMode
                                    ? (localizations.translate('offline_mode') ?? '–û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º')
                                    : (localizations.translate('no_connection') ?? '–ù–µ—Ç —Å–µ—Ç–∏'),
                                style: const TextStyle(
                                  color: Colors.white,
                                  fontSize: 12,
                                  fontWeight: FontWeight.bold,
                                ),
                              ),
                            ],
                          ),
                        ),
                      Image.asset(
                        'assets/images/drawer_logo.png',
                        width: 110.0,
                        height: 110.0,
                        fit: BoxFit.contain,
                      ),
                      const SizedBox(height: 16),
                      Text(
                        userName,
                        style: TextStyle(
                          color: AppConstants.textColor,
                          fontSize: 20.0,
                          fontWeight: FontWeight.bold,
                        ),
                        maxLines: 1,
                        overflow: TextOverflow.ellipsis,
                      ),
                      const SizedBox(height: 4),
                      Text(
                        userEmail,
                        style: const TextStyle(
                          color: Colors.white60,
                          fontSize: 14.0,
                        ),
                        maxLines: 1,
                        overflow: TextOverflow.ellipsis,
                      ),
                    ],
                  ),
                ),
              ),
            ),

            _buildDrawerItem(
              icon: Icons.person,
              title: localizations.translate('profile'),
              onTap: () {
                Navigator.pop(context);
                if (_policyRestrictions?.canEditProfile != true) {
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(
                      content: Text(
                        localizations.translate('edit_profile_blocked') ??
                            '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ. –ü—Ä–∏–º–∏—Ç–µ –ø–æ–ª–∏—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.',
                      ),
                      backgroundColor: Colors.red,
                      action: SnackBarAction(
                        label: localizations.translate('accept_policy') ?? '–ü—Ä–∏–Ω—è—Ç—å –ø–æ–ª–∏—Ç–∏–∫—É',
                        textColor: Colors.white,
                        onPressed: () => _showPolicyUpdateDialog(),
                      ),
                    ),
                  );
                  return;
                }
                Navigator.push(
                  context,
                  MaterialPageRoute(builder: (context) => const ProfileScreen()),
                ).then((_) => setState(() {}));
              },
            ),

            _buildDrawerItem(
              icon: Icons.bar_chart,
              title: localizations.translate('statistics'),
              onTap: () {
                Navigator.pop(context);
                Navigator.push(
                  context,
                  MaterialPageRoute(builder: (context) => const StatisticsScreen()),
                );
              },
            ),

            _buildDrawerItem(
              icon: Icons.edit_note,
              title: localizations.translate('my_notes'),
              onTap: () {
                Navigator.pop(context);
                Navigator.push(
                  context,
                  MaterialPageRoute(builder: (context) => const FishingNotesListScreen()),
                ).then((value) {
                  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –í—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞–º–µ—Ç–æ–∫
                  _loadFishingNotes();
                  _refreshProviderData();
                });
              },
            ),

            _buildDrawerItem(
              icon: Icons.timer,
              title: localizations.translate('timers'),
              onTap: () {
                Navigator.pop(context);
                Navigator.push(
                  context,
                  MaterialPageRoute(builder: (context) => const TimersScreen()),
                );
              },
            ),

            _buildDrawerItem(
              icon: Icons.calendar_today,
              title: localizations.translate('calendar'),
              onTap: () {
                Navigator.pop(context);
                Navigator.push(
                  context,
                  MaterialPageRoute(builder: (context) => const FishingCalendarScreen()),
                );
              },
            ),

            _buildDrawerItem(
              icon: Icons.map,
              title: localizations.translate('marker_maps'),
              onTap: () {
                Navigator.pop(context);
                Navigator.push(
                  context,
                  MaterialPageRoute(builder: (context) => const MarkerMapsListScreen()),
                ).then((_) {
                  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º Provider –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∏–∑ –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç
                  _refreshProviderData();
                });
              },
            ),

            _buildDrawerItem(
              icon: Icons.account_balance_wallet,
              title: localizations.translate('fishing_budget'),
              onTap: () {
                Navigator.pop(context);
                Navigator.push(
                  context,
                  MaterialPageRoute(builder: (context) => const FishingBudgetScreen()),
                ).then((_) {
                  // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º Provider –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∏–∑ –±—é–¥–∂–µ—Ç–∞
                  _refreshProviderData();
                });
              },
            ),

            const Divider(
              color: Colors.white24,
              height: 1,
              thickness: 1,
              indent: 16,
              endIndent: 16,
            ),

            Padding(
              padding: const EdgeInsets.fromLTRB(16, 16, 16, 8),
              child: Text(
                localizations.translate('other'),
                style: const TextStyle(
                  color: Color(0xFFB3B3B3),
                  fontSize: 14.0,
                ),
              ),
            ),

            _buildDrawerItem(
              icon: Icons.settings,
              title: localizations.translate('settings'),
              onTap: () {
                Navigator.pop(context);
                Navigator.push(
                  context,
                  MaterialPageRoute(builder: (context) => const SettingsScreen()),
                );
              },
            ),

            _buildDrawerItem(
              icon: Icons.help_outline,
              title: localizations.translate('help_contact'),
              onTap: () {
                Navigator.pop(context);
                Navigator.pushNamed(context, '/help_contact');
              },
            ),

            _buildDrawerItem(
              icon: Icons.exit_to_app,
              title: localizations.translate('logout'),
              onTap: () async {
                Navigator.pop(context);
                await _firebaseService.signOut();
                if (context.mounted) {
                  Navigator.of(context).pushReplacementNamed('/login');
                }
              },
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildDrawerItem({
    required IconData icon,
    required String title,
    required VoidCallback onTap,
  }) {
    return ListTile(
      leading: Icon(icon, color: AppConstants.textColor, size: 22.0),
      title: Text(
        title,
        style: TextStyle(color: AppConstants.textColor, fontSize: 16.0),
      ),
      onTap: onTap,
      contentPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 4),
    );
  }

  // üö® –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–∏–∂–Ω—è—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è —Å —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ–π —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π
  Widget _buildBottomNavigationBar() {
    final localizations = AppLocalizations.of(context);
    final bottomPadding = MediaQuery.of(context).padding.bottom;

    return SizedBox(
      height: _navBarHeight + (_centerButtonSize / 2) + bottomPadding,
      child: Stack(
        children: [
          // –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å
          Positioned(
            left: 0,
            right: 0,
            bottom: 0,
            child: Container(
              height: _navBarHeight + bottomPadding,
              decoration: BoxDecoration(
                color: const Color(0xFF0B1F1D),
                boxShadow: [
                  BoxShadow(
                    color: Colors.black.withOpacity(0.3),
                    spreadRadius: 1,
                    blurRadius: 5,
                    offset: const Offset(0, -1),
                  ),
                ],
                borderRadius: const BorderRadius.only(
                  topLeft: Radius.circular(20),
                  topRight: Radius.circular(20),
                ),
              ),
              child: Padding(
                padding: EdgeInsets.only(bottom: bottomPadding),
                child: Row(
                  children: [
                    _buildNavItem(0, Icons.timelapse_rounded, localizations.translate('timer')),
                    _buildNavItem(1, Icons.cloud_queue_rounded, localizations.translate('weather')),
                    Expanded(child: Container()),
                    _buildNavItem(3, Icons.event_note_rounded, localizations.translate('calendar')),
                    _buildNavItem(4, Icons.explore_rounded, localizations.translate('map')),
                  ],
                ),
              ),
            ),
          ),

          // üö® –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–ê: –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ —Å —Ä–µ–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —á–µ—Ä–µ–∑ Consumer
          Positioned(
            top: 0,
            left: 0,
            right: 0,
            child: GestureDetector(
              onTap: () => _onItemTapped(2),
              child: Center(
                child: Consumer<SubscriptionProvider>(
                  builder: (context, subscriptionProvider, child) {
                    return Stack(
                      children: [
                        Container(
                          width: _centerButtonSize,
                          height: _centerButtonSize,
                          decoration: BoxDecoration(
                            shape: BoxShape.circle,
                            boxShadow: [
                              BoxShadow(
                                color: Colors.black.withOpacity(0.3),
                                blurRadius: 5,
                                spreadRadius: 1,
                              ),
                            ],
                          ),
                          child: Image.asset(
                            'assets/images/app_logo.png',
                            width: _centerButtonSize,
                            height: _centerButtonSize,
                          ),
                        ),
                        // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–æ–ª–∏—Ç–∏–∫–∏ (–∫—Ä–∞—Å–Ω—ã–π –∑–∞–º–æ–∫)
                        if (!(_policyRestrictions?.canCreateContent ?? true))
                          Positioned(
                            top: 0,
                            right: 0,
                            child: Container(
                              width: 22.0,
                              height: 22.0,
                              decoration: const BoxDecoration(
                                color: Colors.red,
                                shape: BoxShape.circle,
                              ),
                              child: const Icon(
                                Icons.lock,
                                color: Colors.white,
                                size: 14.0,
                              ),
                            ),
                          ),
                        // üö® –ò–°–ü–†–ê–í–õ–ï–ù–û: –†–µ–∞–∫—Ç–∏–≤–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ª–∏–º–∏—Ç–æ–≤ (–æ—Ä–∞–Ω–∂–µ–≤—ã–π –∑–∞–º–æ–∫)
                        if ((_policyRestrictions?.canCreateContent ?? true) &&
                            !subscriptionProvider.canCreateContentSync(ContentType.fishingNotes))
                          Positioned(
                            top: 0,
                            right: 0,
                            child: Container(
                              width: 22.0,
                              height: 22.0,
                              decoration: const BoxDecoration(
                                color: Colors.orange,
                                shape: BoxShape.circle,
                              ),
                              child: const Icon(
                                Icons.lock,
                                color: Colors.white,
                                size: 14.0,
                              ),
                            ),
                          ),
                        // üö® –ò–°–ü–†–ê–í–õ–ï–ù–û: –†–µ–∞–∫—Ç–∏–≤–Ω—ã–π –º–∏–Ω–∏-–±–µ–π–¥–∂ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                        if (subscriptionProvider.canCreateContentSync(ContentType.fishingNotes) &&
                            !subscriptionProvider.hasPremiumAccess)
                          Positioned(
                            bottom: 0,
                            right: 0,
                            child: Container(
                              padding: const EdgeInsets.symmetric(horizontal: 4, vertical: 2),
                              decoration: BoxDecoration(
                                color: subscriptionProvider.getUsageIndicatorColor(ContentType.fishingNotes),
                                borderRadius: BorderRadius.circular(8),
                              ),
                              child: Text(
                                subscriptionProvider.getUsageText(ContentType.fishingNotes),
                                style: const TextStyle(
                                  color: Colors.white,
                                  fontSize: 10,
                                  fontWeight: FontWeight.bold,
                                ),
                              ),
                            ),
                          ),
                        // ===== –ù–û–í–û–ï: –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞ –Ω–∞ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –∫–Ω–æ–ø–∫–µ =====
                        if (_isOfflineMode || !_hasNetworkConnection)
                          Positioned(
                            top: 0,
                            left: 0,
                            child: Container(
                              width: 20.0,
                              height: 20.0,
                              decoration: BoxDecoration(
                                color: _isOfflineMode ? Colors.blue : Colors.orange,
                                shape: BoxShape.circle,
                              ),
                              child: Icon(
                                _isOfflineMode ? Icons.offline_bolt : Icons.wifi_off,
                                color: Colors.white,
                                size: 12.0,
                              ),
                            ),
                          ),
                      ],
                    );
                  },
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildNavItem(int index, IconData icon, String label) {
    final isSelected = _selectedIndex == index;

    return Expanded(
      child: Container(
        height: _navItemMinTouchTarget,
        child: InkWell(
          onTap: () => _onItemTapped(index),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            mainAxisSize: MainAxisSize.min,
            children: [
              Icon(
                icon,
                color: isSelected ? AppConstants.textColor : Colors.white54,
                size: _navIconSize,
              ),
              const SizedBox(height: 2),
              Flexible(
                child: Text(
                  label,
                  style: TextStyle(
                    fontSize: _navTextSize,
                    color: isSelected ? AppConstants.textColor : Colors.white54,
                    fontWeight: FontWeight.w500,
                  ),
                  maxLines: 1,
                  overflow: TextOverflow.ellipsis,
                  textAlign: TextAlign.center,
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}