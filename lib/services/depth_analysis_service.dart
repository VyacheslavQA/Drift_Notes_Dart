// –ü—É—Ç—å: lib/services/depth_analysis_service.dart

import 'dart:math' as math;
import 'dart:ui';
import '../models/depth_analysis_model.dart';
import '../localization/app_localizations.dart';

/// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–ª—å–µ—Ñ–∞ –¥–ª—è –∫–∞—Ä–ø—Ñ–∏—à–∏–Ω–≥–∞
/// –ë–ï–ó –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —Å–µ–∑–æ–Ω–∞–º, –ø–æ–≥–æ–¥–µ, –≤—Ä–µ–º–µ–Ω–∏ - —Ç–æ–ª—å–∫–æ —Ñ–∏–∑–∏–∫–∞ –≤–æ–¥–æ–µ–º–∞
class DepthAnalysisService {

  /// –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä—ã —Ç–∏–ø–æ–≤ –¥–Ω–∞ (–æ–ø—ã—Ç 20 –ª–µ—Ç)
  /// –¢–û–õ–¨–ö–û —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è!
  static const Map<String, double> _bottomQualityScores = {
    // –¢–û–ü –ª–æ–∫–∞—Ü–∏–∏ (–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏)
    '—Ç–æ—á–∫–∞_–∫–æ—Ä–º–ª–µ–Ω–∏—è': 9.5,        // –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –≥–æ–¥–∞–º–∏ –º–µ—Å—Ç–∞ üîµ

    // –û—Ç–ª–∏—á–Ω—ã–µ –ø—Ä–∏—Ä–æ–¥–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    '—Ä–∞–∫—É—à–∫–∞': 8.5,                // –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –∫–æ—Ä–º–æ–≤–∞—è –±–∞–∑–∞ ‚ö™
    '–±—É–≥–æ—Ä': 6.0,                  // –°—Ç—Ä—É–∫—Ç—É—Ä–∞, –Ω–æ –∫–∞—Ä–ø –±–æ–ª—å—à–µ —É –ø–æ–¥–Ω–æ–∂–∏—è üü†

    // –•–æ—Ä–æ—à–∏–µ —Ç–∏–ø—ã –¥–Ω–∞
    '—Ä–æ–≤–Ω–æ_—Ç–≤–µ—Ä–¥–æ': 7.0,           // –°—Ç–∞–±–∏–ª—å–Ω–æ–µ —Ç–≤–µ—Ä–¥–æ–µ –¥–Ω–æ, –æ—Ç–ª–∏—á–Ω–æ–µ –ª–æ–∂–µ üü°
    '—Ç—Ä–∞–≤–∞_–≤–æ–¥–æ—Ä–æ—Å–ª–∏': 6.5,        // –†–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å = —É–∫—Ä—ã—Ç–∏–µ + –∫–∏—Å–ª–æ—Ä–æ–¥ + –∫–æ—Ä–º üü¢
    '–∑–∞—Ü–µ–ø': 5.5,                  // –ö–æ—Ä—è–≥–∏ - —Ä–∏—Å–∫, –Ω–æ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω–æ –¥–ª—è –∫—Ä—É–ø–Ω–æ–≥–æ –∫–∞—Ä–ø–∞ üî¥
    '–∫–∞–º–Ω–∏': 6.0,                  // –¢–≤–µ—Ä–¥–æ–µ –¥–Ω–æ, —Ä–∞–∫–æ–æ–±—Ä–∞–∑–Ω—ã–µ üîò

    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ç–∏–ø—ã
    '–∏–ª': 4.5,                     // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∫–∞—Ä–ø–æ–≤–æ–µ –¥–Ω–æ üü§
    '–≥–ª—É–±–æ–∫–∏–π_–∏–ª': 3.5,            // –ú–æ–∂–µ—Ç –±—ã—Ç—å –±–µ–¥–Ω—ã–º –Ω–∞ –∫–æ—Ä–º, –º—è–≥–∫–æ üü´

    // –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ
    'default': 3.0,                // –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –º–µ—Å—Ç–∞
  };

  /// –ê–Ω–∞–ª–∏–∑ —Ä–µ–ª—å–µ—Ñ–∞ - –∫–ª—é—á–µ–≤—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è –∫–∞—Ä–ø–∞
  /// –£–ë–†–ê–õ–ò –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
  static const Map<String, double> _reliefStructureScores = {
    // –≠—Ç–∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ù–ï –ò–°–ü–û–õ–¨–ó–£–Æ–¢–°–Ø –≤ –Ω–æ–≤–æ–º –∞–ª–≥–æ—Ä–∏—Ç–º–µ
    // –û—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è
    '–ø–µ—Ä–µ—Ö–æ–¥_–≥–ª—É–±–∏–Ω_—Ä–µ–∑–∫–∏–π': 9.0,
    '–ø–æ–¥–Ω–æ–∂–∏–µ_—Å–≤–∞–ª–∞': 8.5,
    '—Ä–æ–≤–Ω–æ–µ_–¥–Ω–æ': 4.0,
  };

  /// –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã - –£–ë–†–ê–õ–ò –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ
  /// –£–ë–†–ê–õ–ò –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
  static const Map<String, double> _combinationBonuses = {
    // –≠—Ç–∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ù–ï –ò–°–ü–û–õ–¨–ó–£–Æ–¢–°–Ø –≤ –Ω–æ–≤–æ–º –∞–ª–≥–æ—Ä–∏—Ç–º–µ
    // –û—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è_–∫–æ–º–±–∏–Ω–∞—Ü–∏—è': 0.0,
  };

  /// –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ—Ö –ª—É—á–µ–π (–£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô)
  static MultiRayAnalysis analyzeAllRays(
      List<Map<String, dynamic>> allMarkers,
      AnalysisSettings settings,
      AppLocalizations localizations,
      ) {
    final rayAnalyses = <DepthProfileAnalysis>[];

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –ª—É—á (0-4)
    for (int i = 0; i < 5; i++) {
      final analysis = _analyzeRayProfile(i, allMarkers, settings);
      rayAnalyses.add(analysis);
    }

    final topRecommendations = _findTopSpots(rayAnalyses, settings, localizations);
    final overallAssessment = _generateWaterBodyAssessment(rayAnalyses, localizations);
    final professionalTips = _generateProfessionalTips(rayAnalyses, localizations);

    return MultiRayAnalysis(
      rayAnalyses: rayAnalyses,
      topRecommendations: topRecommendations,
      overallAssessment: overallAssessment,
      generalTips: professionalTips,
    );
  }

  /// –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –æ–¥–Ω–æ–≥–æ –ª—É—á–∞ (–¢–û–õ–¨–ö–û —Ä–µ–ª—å–µ—Ñ + –¥–Ω–æ)
  static DepthProfileAnalysis _analyzeRayProfile(
      int rayIndex,
      List<Map<String, dynamic>> markers,
      AnalysisSettings settings,
      ) {
    final rayMarkers = markers
        .where((m) => (m['rayIndex'] as double?)?.toInt() == rayIndex)
        .where((m) => m['depth'] != null && m['distance'] != null)
        .toList();

    if (rayMarkers.isEmpty) {
      return DepthProfileAnalysis(
        rayIndex: rayIndex,
        points: [],
        structures: [],
        averageDepth: 0,
        maxDepth: 0,
        minDepth: 0,
        depthVariation: 0,
      );
    }

    rayMarkers.sort((a, b) => (a['distance'] as double).compareTo(b['distance'] as double));

    // –°–æ–∑–¥–∞–µ–º —Ç–æ—á–∫–∏ —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º
    final points = rayMarkers.map((marker) {
      final bottomType = _getBottomType(marker);
      final color = _getBottomTypeColor(bottomType);
      final fishingScore = _calculateUniversalCarpScore(marker, rayMarkers);

      return DepthPoint(
        distance: marker['distance'] as double,
        depth: marker['depth'] as double,
        bottomType: bottomType,
        color: color,
        notes: marker['notes'] as String?,
        fishingScore: fishingScore,
      );
    }).toList();

    // –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä —Ä–µ–ª—å–µ—Ñ–∞
    final structures = _analyzeReliefStructures(points);

    final depths = points.map((p) => p.depth).toList();
    final averageDepth = depths.reduce((a, b) => a + b) / depths.length;
    final maxDepth = depths.reduce(math.max);
    final minDepth = depths.reduce(math.min);
    final depthVariation = _calculateVariation(depths);

    return DepthProfileAnalysis(
      rayIndex: rayIndex,
      points: points,
      structures: structures,
      averageDepth: averageDepth,
      maxDepth: maxDepth,
      minDepth: minDepth,
      depthVariation: depthVariation,
    );
  }

  /// –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ô —Ä–∞—Å—á–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞ (–æ–ø—ã—Ç –∫–∞—Ä–ø—è—Ç–Ω–∏–∫–∞ 20 –ª–µ—Ç)
  static double _calculateUniversalCarpScore(
      Map<String, dynamic> marker,
      List<Map<String, dynamic>> allRayMarkers,
      ) {
    final depth = marker['depth'] as double;
    final bottomType = _getBottomType(marker); // –¢–û–õ–¨–ö–û —Ä–µ–∞–ª—å–Ω—ã–π —Ç–∏–ø –∏–∑ –º–∞—Ä–∫–µ—Ä–∞!
    final distance = marker['distance'] as double;

    // üêõ –î–ï–ë–ê–ì: –≤—ã–≤–æ–¥–∏–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –∏–∑ –º–∞—Ä–∫–µ—Ä–∞
    print('üîç –î–ï–ë–ê–ì –ú–ê–†–ö–ï–†–ê:');
    print('  distance: $distance');
    print('  depth: $depth');
    print('  marker[bottomType]: ${marker['bottomType']}');
    print('  marker[type]: ${marker['type']}');
    print('  –∏—Ç–æ–≥–æ–≤—ã–π bottomType: $bottomType');
    print('  –≤—Å–µ –ø–æ–ª—è –º–∞—Ä–∫–µ—Ä–∞: ${marker.keys.toList()}');

    // 1. –ë–∞–∑–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ –†–ï–ê–õ–¨–ù–û–ú–£ —Ç–∏–ø—É –¥–Ω–∞ –∏–∑ –º–∞—Ä–∫–µ—Ä–∞
    double score = _bottomQualityScores[bottomType] ?? 3.0;
    print('  –±–∞–∑–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –¥–ª—è $bottomType: $score');

    // 2. –ê–Ω–∞–ª–∏–∑ —Ä–µ–ª—å–µ—Ñ–∞ –≤ —Ç–æ—á–∫–µ (–æ—Ç–¥–µ–ª—å–Ω–æ –æ—Ç —Ç–∏–ø–∞ –¥–Ω–∞)
    final reliefBonus = _analyzeLocalReliefBonus(marker, allRayMarkers);
    print('  reliefBonus: $reliefBonus');

    // 3. –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ —Ç–∏–ø–æ–≤ –¥–Ω–∞ (–ö–õ–Æ–ß–ï–í–û–ô —Ñ–∞–∫—Ç–æ—Ä!)
    final transitionBonus = _analyzeBottomTransitions(marker, allRayMarkers);
    print('  transitionBonus: $transitionBonus');

    // 4. –ì–ª—É–±–∏–Ω–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –¥–ª—è –∫–∞—Ä–ø–∞)
    final depthScore = _getDepthScore(depth);
    print('  depthScore: $depthScore');

    // 5. –ê–Ω–∞–ª–∏–∑ –º–∏–∫—Ä–æ—Ä–µ–ª—å–µ—Ñ–∞
    final microReliefBonus = _analyzeMicroRelief(marker, allRayMarkers);
    print('  microReliefBonus: $microReliefBonus');

    // –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç
    double finalScore = score;                    // –ë–∞–∑–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥ —Ç–∏–ø–∞ –¥–Ω–∞
    finalScore += reliefBonus;                    // –ë–æ–Ω—É—Å –∑–∞ —Ä–µ–ª—å–µ—Ñ
    finalScore += transitionBonus;                // –ü–µ—Ä–µ—Ö–æ–¥—ã - –º–∞–≥–Ω–∏—Ç –∫–∞—Ä–ø–∞
    finalScore += microReliefBonus;               // –ú–µ–ª–∫–∏–µ –¥–µ—Ç–∞–ª–∏
    finalScore *= depthScore;                     // –ì–ª—É–±–∏–Ω–Ω—ã–π –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä

    final result = math.max(0.0, math.min(10.0, finalScore));
    print('  –ò–¢–û–ì–û–í–´–ô —Ä–µ–π—Ç–∏–Ω–≥: $result');
    print('');

    return result;
  }

  /// –ê–Ω–∞–ª–∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ä–µ–ª—å–µ—Ñ–∞ - —Ç–æ–ª—å–∫–æ –±–æ–Ω—É—Å, –ù–ï –∑–∞–º–µ–Ω–∞ —Ç–∏–ø–∞ –¥–Ω–∞!
  static double _analyzeLocalReliefBonus(
      Map<String, dynamic> current,
      List<Map<String, dynamic>> allMarkers,
      ) {
    final currentDepth = current['depth'] as double;
    final currentDistance = current['distance'] as double;

    // –ù–∞—Ö–æ–¥–∏–º —Å–æ—Å–µ–¥–Ω–∏–µ —Ç–æ—á–∫–∏
    final neighbors = allMarkers.where((m) {
      final dist = m['distance'] as double;
      return (dist - currentDistance).abs() <= 20.0 && m != current;
    }).toList();

    if (neighbors.isEmpty) return 0.0;

    // –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ–ø–∞–¥–æ–≤ –≥–ª—É–±–∏–Ω
    final depthChanges = neighbors.map((n) =>
    (n['depth'] as double) - currentDepth).toList();

    final maxIncrease = depthChanges.where((d) => d > 0).isEmpty ?
    0.0 : depthChanges.where((d) => d > 0).reduce(math.max);
    final maxDecrease = depthChanges.where((d) => d < 0).isEmpty ?
    0.0 : depthChanges.where((d) => d < 0).reduce(math.min).abs();

    // –ë–æ–Ω—É—Å—ã –∑–∞ —Ä–µ–ª—å–µ—Ñ (–ù–ï –∑–∞–º–µ–Ω–∞ —Ç–∏–ø–∞ –¥–Ω–∞!)
    if (maxIncrease > 1.5 || maxDecrease > 1.5) {
      return 2.0; // Drop-off >1.5–º - –æ—Ç–ª–∏—á–Ω—ã–π –±–æ–Ω—É—Å
    } else if (maxIncrease > 0.8 || maxDecrease > 0.8) {
      return 1.0; // –°—Ä–µ–¥–Ω–∏–π –ø–µ—Ä–µ–ø–∞–¥ - —Ö–æ—Ä–æ—à–∏–π –±–æ–Ω—É—Å
    } else if (maxIncrease > 0.3 || maxDecrease > 0.3) {
      return 0.5; // –ù–µ–±–æ–ª—å—à–∏–µ –Ω–µ—Ä–æ–≤–Ω–æ—Å—Ç–∏ - –º–∞–ª—ã–π –±–æ–Ω—É—Å
    } else {
      return 0.0; // –ü–ª–æ—Å–∫–∏–π —É—á–∞—Å—Ç–æ–∫ - –±–µ–∑ –±–æ–Ω—É—Å–∞
    }
  }

  /// –ü–æ–∏—Å–∫ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ —Ç–∏–ø–æ–≤ –¥–Ω–∞ (–ö–†–ò–¢–ò–ß–ï–°–ö–ò –≤–∞–∂–Ω–æ!)
  static double _analyzeBottomTransitions(
      Map<String, dynamic> current,
      List<Map<String, dynamic>> allMarkers,
      ) {
    final currentType = _getBottomType(current);
    final currentDistance = current['distance'] as double;

    // –ò—â–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∏–ø–∞ –¥–Ω–∞ –≤ —Ä–∞–¥–∏—É—Å–µ 15–º
    final nearbyMarkers = allMarkers.where((m) {
      final dist = m['distance'] as double;
      return (dist - currentDistance).abs() <= 15.0 && m != current;
    }).toList();

    double transitionBonus = 0.0;

    for (final marker in nearbyMarkers) {
      final nearbyType = _getBottomType(marker);
      if (nearbyType != currentType) {
        // –ù–∞–π–¥–µ–Ω –ø–µ—Ä–µ—Ö–æ–¥! –û—Ü–µ–Ω–∏–≤–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ—Ö–æ–¥–∞
        transitionBonus += _evaluateTransitionQuality(currentType, nearbyType);
      }
    }

    return math.min(2.5, transitionBonus); // –ú–∞–∫—Å–∏–º—É–º +2.5 –±–∞–ª–ª–∞ –∑–∞ –ø–µ—Ä–µ—Ö–æ–¥—ã
  }

  /// –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –º–µ–∂–¥—É —Ç–∏–ø–∞–º–∏ –¥–Ω–∞
  static double _evaluateTransitionQuality(String type1, String type2) {
    // –¢–û–ü –ø–µ—Ä–µ—Ö–æ–¥—ã (–º–∞–≥–Ω–∏—Ç –¥–ª—è –∫–∞—Ä–ø–∞) - –¢–û–õ–¨–ö–û —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã!
    const topTransitions = {
      '–∏–ª_—Ä–∞–∫—É—à–∫–∞': 2.0,              // –ö–ª–∞—Å—Å–∏–∫–∞ –∫–∞—Ä–ø—Ñ–∏—à–∏–Ω–≥–∞ üü§‚Üí‚ö™
      '–≥–ª—É–±–æ–∫–∏–π_–∏–ª_—Ä–∞–∫—É—à–∫–∞': 1.8,     // –ú—è–≥–∫–æ–µ ‚Üí –∫–æ—Ä–º–æ–≤–∞—è –±–∞–∑–∞ üü´‚Üí‚ö™
      '—Ä–æ–≤–Ω–æ_—Ç–≤–µ—Ä–¥–æ_—Ä–∞–∫—É—à–∫–∞': 1.7,    // –¢–≤–µ—Ä–¥–æ–µ ‚Üí –∫–æ—Ä–º–æ–≤–∞—è –±–∞–∑–∞ üü°‚Üí‚ö™
      '–∏–ª_—Ä–æ–≤–Ω–æ_—Ç–≤–µ—Ä–¥–æ': 1.5,         // –ú—è–≥–∫–æ–µ ‚Üí —Ç–≤–µ—Ä–¥–æ–µ üü§‚Üíüü°
      '—Ç—Ä–∞–≤–∞_–≤–æ–¥–æ—Ä–æ—Å–ª–∏_–∏–ª': 1.3,      // –†–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å ‚Üí –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ üü¢‚Üíüü§
      '—Ç—Ä–∞–≤–∞_–≤–æ–¥–æ—Ä–æ—Å–ª–∏_—Ä–æ–≤–Ω–æ_—Ç–≤–µ—Ä–¥–æ': 1.2, // –†–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å ‚Üí —Ç–≤–µ—Ä–¥–æ–µ üü¢‚Üíüü°
      '–≥–ª—É–±–æ–∫–∏–π_–∏–ª_–∏–ª': 1.0,          // –ü–µ—Ä–µ—Ö–æ–¥ –≥–ª—É–±–∏–Ω—ã –∏–ª–∞ üü´‚Üíüü§
      '–∏–ª_–∫–∞–º–Ω–∏': 1.1,                // –ú—è–≥–∫–æ–µ ‚Üí —Ç–≤–µ—Ä–¥–æ–µ —Å —Ä–∞—á–∫–∞–º–∏ üü§‚Üíüîò
      '–∫–∞–º–Ω–∏_—Ä–∞–∫—É—à–∫–∞': 1.4,           // –¢–≤–µ—Ä–¥–æ–µ ‚Üí –∫–æ—Ä–º–æ–≤–∞—è –±–∞–∑–∞ üîò‚Üí‚ö™
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞
    final key1 = '${type1}_${type2}';
    final key2 = '${type2}_${type1}';

    return topTransitions[key1] ?? topTransitions[key2] ?? 0.8; // –õ—é–±–æ–π –ø–µ—Ä–µ—Ö–æ–¥ = +0.8
  }

  /// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –≥–ª—É–±–∏–Ω—ã –¥–ª—è –∫–∞—Ä–ø–∞
  static double _getDepthScore(double depth) {
    if (depth >= 1.5 && depth <= 4.5) {
      return 1.2; // –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞ –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ —Å–∏—Ç—É–∞—Ü–∏–π
    } else if (depth >= 0.8 && depth <= 6.0) {
      return 1.0; // –•–æ—Ä–æ—à–∞—è –∑–æ–Ω–∞
    } else if (depth >= 0.3 && depth <= 8.0) {
      return 0.8; // –ü—Ä–∏–µ–º–ª–µ–º–∞—è –∑–æ–Ω–∞
    } else {
      return 0.6; // –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –≥–ª—É–±–∏–Ω—ã
    }
  }

  /// –ê–Ω–∞–ª–∏–∑ –º–∏–∫—Ä–æ—Ä–µ–ª—å–µ—Ñ–∞ (–º–µ–ª–∫–∏–µ –¥–µ—Ç–∞–ª–∏)
  static double _analyzeMicroRelief(
      Map<String, dynamic> current,
      List<Map<String, dynamic>> allMarkers,
      ) {
    final currentDepth = current['depth'] as double;
    final currentDistance = current['distance'] as double;

    // –ê–Ω–∞–ª–∏–∑ –≤ —Ä–∞–¥–∏—É—Å–µ 10–º
    final closeMarkers = allMarkers.where((m) {
      final dist = m['distance'] as double;
      return (dist - currentDistance).abs() <= 10.0 && m != current;
    }).toList();

    if (closeMarkers.length < 2) return 0.0;

    final depthVariations = closeMarkers.map((m) =>
        ((m['depth'] as double) - currentDepth).abs()).toList();

    final avgVariation = depthVariations.reduce((a, b) => a + b) / depthVariations.length;

    // –ù–µ–±–æ–ª—å—à–∏–µ –≤–∞—Ä–∏–∞—Ü–∏–∏ = –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –º–∏–∫—Ä–æ—Ä–µ–ª—å–µ—Ñ
    if (avgVariation > 0.1 && avgVariation < 0.8) {
      return 0.5; // –ë–æ–Ω—É—Å –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –º–∏–∫—Ä–æ—Ä–µ–ª—å–µ—Ñ
    }
    return 0.0;
  }

  /// –£–ë–†–ê–õ–ò –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—É—é —Ñ—É–Ω–∫—Ü–∏—é
  /// –ü–æ–∏—Å–∫ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ - –ù–ï –ò–°–ü–û–õ–¨–ó–£–ï–¢–°–Ø –≤ –Ω–æ–≤–æ–º –∞–ª–≥–æ—Ä–∏—Ç–º–µ

  /// –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä —Ä–µ–ª—å–µ—Ñ–∞
  static List<BottomStructure> _analyzeReliefStructures(List<DepthPoint> points) {
    if (points.length < 2) return [];

    final structures = <BottomStructure>[];

    for (int i = 0; i < points.length - 1; i++) {
      final current = points[i];
      final next = points[i + 1];

      final depthDiff = next.depth - current.depth;
      final distanceDiff = next.distance - current.distance;
      final slope = math.atan(depthDiff / distanceDiff) * (180 / math.pi);

      StructureType? structureType;
      double fishingRating = 5.0;
      String description = '';

      // –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä
      if (slope.abs() > 25) {
        structureType = StructureType.dropoff;
        fishingRating = 8.5; // –¢–û–ü —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –∫–∞—Ä–ø–∞
        description = slope > 0
            ? 'Drop-off: —Ä–µ–∑–∫–∏–π —Å–≤–∞–ª (–¢–û–ü –¥–ª—è –∫–∞—Ä–ø–∞!) - –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –∫–æ—Ä–º–∞'
            : '–†–µ–∑–∫–∏–π –ø–æ–¥—ä–µ–º: –≥—Ä–∞–Ω–∏—Ü–∞ –º–µ–ª–∫–æ–≤–æ–¥—å—è';
      } else if (slope.abs() > 12) {
        structureType = StructureType.slope;
        fishingRating = 7.0;
        description = slope > 0
            ? '–°–∫–ª–æ–Ω –∫ –≥–ª—É–±–∏–Ω–µ: –ø—É—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ –∫–∞—Ä–ø–∞'
            : '–°–∫–ª–æ–Ω –∫ –º–µ–ª–∫–æ–≤–æ–¥—å—é: –≤—ã—Ö–æ–¥ –Ω–∞ –∫–æ—Ä–º–µ–∂–∫—É';
      } else if (slope.abs() < 4) {
        structureType = StructureType.shelf;
        // –û—Ü–µ–Ω–∫–∞ –ø–æ–ª–∫–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≥–ª—É–±–∏–Ω—ã
        if (current.depth >= 1.5 && current.depth <= 4.0) {
          fishingRating = 7.5; // –ò–¥–µ–∞–ª—å–Ω—ã–µ –∫–æ—Ä–º–æ–≤—ã–µ —Å—Ç–æ–ª—ã
          description = '–ö–æ—Ä–º–æ–≤–æ–π —Å—Ç–æ–ª: –∏–¥–µ–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ –¥–ª—è –∫–∞—Ä–ø–∞';
        } else if (current.depth < 1.0) {
          fishingRating = 6.0; // –ú–µ–ª–∫–æ–≤–æ–¥–Ω—ã–µ —Ñ–ª—ç—Ç—ã
          description = '–ú–µ–ª–∫–æ–≤–æ–¥–Ω—ã–π —Ñ–ª—ç—Ç: –≤–æ–∑–º–æ–∂–Ω—ã –ø–æ–¥—Ö–æ–¥—ã –∫–∞—Ä–ø–∞';
        } else {
          fishingRating = 5.5; // –ì–ª—É–±–æ–∫–∏–µ –ø–æ–ª–∫–∏
          description = '–ì–ª—É–±–æ–∫–∞—è –ø–æ–ª–∫–∞: —Å—Ç–∞–±–∏–ª—å–Ω–∞—è –∑–æ–Ω–∞';
        }
      }

      if (structureType != null) {
        // –ë–æ–Ω—É—Å –∑–∞ –∫–∞—á–µ—Å—Ç–≤–æ –¥–Ω–∞ –Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
        final bottomBonus = _bottomQualityScores[current.bottomType] ?? 4.0;
        fishingRating += (bottomBonus - 5.0) * 0.3; // –í–ª–∏—è–Ω–∏–µ –¥–Ω–∞ –Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—É

        structures.add(BottomStructure(
          type: structureType,
          startDistance: current.distance,
          endDistance: next.distance,
          startDepth: current.depth,
          endDepth: next.depth,
          slope: slope,
          fishingRating: math.min(10.0, math.max(1.0, fishingRating)),
          description: description,
        ));
      }
    }

    return structures;
  }

  /// –ü–æ–∏—Å–∫ –¢–û–ü –º–µ—Å—Ç (—Å—Ç—Ä–æ–≥–∏–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç–±–æ—Ä)
  static List<FishingRecommendation> _findTopSpots(
      List<DepthProfileAnalysis> analyses,
      AnalysisSettings settings,
      AppLocalizations localizations,
      ) {
    final recommendations = <FishingRecommendation>[];

    for (final analysis in analyses) {
      for (final point in analysis.points) {
        // –°–¢–†–û–ì–ò–ô –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä: —Ç–æ–ª—å–∫–æ 7.0+
        if (point.fishingScore != null && point.fishingScore! >= 7.0) {
          final recommendation = FishingRecommendation(
            rayIndex: analysis.rayIndex,  // ‚Üê –î–û–ë–ê–í–ò–õ–ò rayIndex!
            distance: point.distance,
            depth: point.depth,
            rating: point.fishingScore!,
            reason: _generateShortReason(point, analysis.structures, localizations),
            bestTime: localizations.translate('analyzed_spot'), // ‚Üê –õ–û–ö–ê–õ–ò–ó–û–í–ê–ù–ù–´–ô –¢–ï–ö–°–¢!
            type: _getProfessionalRecommendationType(point.fishingScore!),
          );
          recommendations.add(recommendation);
        }
      }
    }

    recommendations.sort((a, b) => b.rating.compareTo(a.rating));
    return recommendations.take(8).toList(); // –¢–æ–ø-8 –º–µ—Å—Ç
  }

  /// –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
  static RecommendationType _getProfessionalRecommendationType(double rating) {
    if (rating >= 8.5) return RecommendationType.excellent;  // –≠–ª–∏—Ç–Ω—ã–µ –º–µ—Å—Ç–∞
    if (rating >= 7.5) return RecommendationType.good;       // –û—á–µ–Ω—å —Ö–æ—Ä–æ—à–∏–µ
    if (rating >= 7.0) return RecommendationType.average;    // –•–æ—Ä–æ—à–∏–µ
    return RecommendationType.avoid;
  }

  /// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ö–û–†–û–¢–ö–û–ì–û –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è (–ë–ï–ó —Ö–≤–∞–ª–µ–±–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤!)
  static String _generateShortReason(
      DepthPoint point,
      List<BottomStructure> structures,
      AppLocalizations localizations,
      ) {
    String reason = '${_getBottomTypeName(point.bottomType, localizations)}, ${point.depth.toStringAsFixed(1)}${localizations.translate('m')}. ';

    // –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä —Ä–µ–ª—å–µ—Ñ–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    final nearbyStructure = structures.where((s) =>
    point.distance >= s.startDistance && point.distance <= s.endDistance
    ).isNotEmpty ? structures.firstWhere((s) =>
    point.distance >= s.startDistance && point.distance <= s.endDistance
    ) : null;

    if (nearbyStructure != null) {
      switch (nearbyStructure.type) {
        case StructureType.dropoff:
          reason += localizations.translate('dropoff_perspective_structure');
          break;
        case StructureType.shelf:
          reason += localizations.translate('shelf_stable_zone');
          break;
        case StructureType.slope:
          reason += localizations.translate('slope_migration_path');
          break;
        default:
          reason += localizations.translate('interesting_relief');
      }
    } else {
      // –ö—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ç–∏–ø–∞ –¥–Ω–∞
      switch (point.bottomType) {
        case '—Ç–æ—á–∫–∞_–∫–æ—Ä–º–ª–µ–Ω–∏—è':
          reason += localizations.translate('proven_spot');
          break;
        case '—Ä–∞–∫—É—à–∫–∞':
          reason += localizations.translate('feeding_base');
          break;
        case '—Ä–æ–≤–Ω–æ_—Ç–≤–µ—Ä–¥–æ':
          reason += localizations.translate('hard_bottom');
          break;
        case '—Ç—Ä–∞–≤–∞_–≤–æ–¥–æ—Ä–æ—Å–ª–∏':
          reason += localizations.translate('vegetation');
          break;
        case '–∑–∞—Ü–µ–ø':
          reason += localizations.translate('shelter');
          break;
        case '–±—É–≥–æ—Ä':
          reason += localizations.translate('structure');
          break;
        default:
          reason += localizations.translate('relief_analysis');
      }
    }

    return reason;
  }

  /// –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –≤–æ–¥–æ–µ–º–∞ (–ë–ï–ó —Ö–≤–∞–ª–µ–±–Ω—ã—Ö —ç–ø–∏—Ç–µ—Ç–æ–≤!)
  static String _generateWaterBodyAssessment(
      List<DepthProfileAnalysis> analyses,
      AppLocalizations localizations,
      ) {
    final totalPoints = analyses.fold<int>(0, (sum, analysis) => sum + analysis.points.length);
    if (totalPoints == 0) return localizations.translate('insufficient_data_for_analysis');

    final allPoints = analyses.expand((a) => a.points).toList();
    final validScores = allPoints
        .where((p) => p.fishingScore != null)
        .map((p) => p.fishingScore!)
        .toList();

    if (validScores.isEmpty) return localizations.translate('no_spots_to_evaluate');

    final topSpots = validScores.where((score) => score >= 7.0).length;
    final eliteSpots = validScores.where((score) => score >= 8.5).length;

    String assessment = '${localizations.translate('analyzed_points')} $totalPoints ${localizations.translate('points')}. ';

    if (eliteSpots > 0) {
      assessment += '${localizations.translate('found_perspective_spots')} $eliteSpots. ';
    }
    if (topSpots > 0) {
      assessment += '${localizations.translate('good_spots_count')} $topSpots. ';
    }

    return assessment;
  }

  /// –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ —Ä–µ–ª—å–µ—Ñ—É (–°–û–ö–†–ê–©–ï–ù–ù–´–ï!)
  static List<String> _generateProfessionalTips(
      List<DepthProfileAnalysis> analyses,
      AppLocalizations localizations,
      ) {
    final tips = <String>[];
    final allPoints = analyses.expand((a) => a.points).toList();
    final allStructures = analyses.expand((a) => a.structures).toList();

    // –ê–Ω–∞–ª–∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä
    final dropoffs = allStructures.where((s) => s.type == StructureType.dropoff).length;
    final shelves = allStructures.where((s) => s.type == StructureType.shelf).length;
    final slopes = allStructures.where((s) => s.type == StructureType.slope).length;

    if (dropoffs > 0) {
      tips.add('üéØ ${localizations.translate('found_dropoff_zones')} $dropoffs');
    }
    if (shelves > 0) {
      tips.add('üìè ${localizations.translate('found_feeding_tables')} $shelves');
    }
    if (slopes > 0) {
      tips.add('‚õ∞Ô∏è ${localizations.translate('found_slopes')} $slopes');
    }

    // –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–æ–≤ –¥–Ω–∞
    final bottomTypes = allPoints.map((p) => p.bottomType).toSet();

    if (bottomTypes.contains('—Ä–∞–∫—É—à–∫–∞')) {
      tips.add('üêö ${localizations.translate('shell_natural_feeding_base')}');
    }
    if (bottomTypes.contains('—Ç–æ—á–∫–∞_–∫–æ—Ä–º–ª–µ–Ω–∏—è')) {
      tips.add('üéØ ${localizations.translate('proven_feeding_spots_found')}');
    }
    if (bottomTypes.contains('–∑–∞—Ä–æ—Å–ª–∏') || bottomTypes.contains('—Ç—Ä–∞–≤–∞_–≤–æ–¥–æ—Ä–æ—Å–ª–∏')) {
      tips.add('üåø ${localizations.translate('vegetation_zones_find_edges')}');
    }

    // –û–±—â–∏–µ —Å–æ–≤–µ—Ç—ã
    tips.add('üí° ${localizations.translate('look_for_comfort_safety_food')}');
    tips.add('üîÑ ${localizations.translate('bottom_transitions_perspective_spots')}');

    return tips;
  }

  // === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ===

  static String _getBottomType(Map<String, dynamic> marker) {
    // üêõ –î–ï–ë–ê–ì: —á—Ç–æ —É –Ω–∞—Å –≤ –º–∞—Ä–∫–µ—Ä–µ
    print('üìã _getBottomType –≤—ã–∑–≤–∞–Ω:');
    print('  marker keys: ${marker.keys.toList()}');
    print('  marker[bottomType]: ${marker['bottomType']}');
    print('  marker[type]: ${marker['type']}');

    final bottomType = marker['bottomType'] as String?;
    final legacyType = marker['type'] as String?;

    if (bottomType != null && bottomType.isNotEmpty) {
      print('  ‚úÖ –∏—Å–ø–æ–ª—å–∑—É–µ–º bottomType: $bottomType');
      return bottomType;
    }

    if (legacyType != null) {
      final converted = _convertLegacyType(legacyType);
      print('  üîÑ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º type $legacyType ‚Üí $converted');
      return converted ?? '–∏–ª';
    }

    print('  ‚ö†Ô∏è –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç: –∏–ª');
    return '–∏–ª';
  }

  static String? _convertLegacyType(String? type) {
    if (type == null) return null;
    const conversionMap = {
      'dropoff': 'drop_off',
      'weed': '—Ç—Ä–∞–≤–∞_–≤–æ–¥–æ—Ä–æ—Å–ª–∏',
      'sandbar': '—Ä–æ–≤–Ω–æ_—Ç–≤–µ—Ä–¥–æ',
      'structure': '–∑–∞—Ü–µ–ø',
      'flat': '—Ä–æ–≤–Ω—ã–π_—Å—Ç–æ–ª',
      'default': '–∏–ª',
    };
    return conversionMap[type] ?? type;
  }

  static String _getBottomTypeName(String bottomType, AppLocalizations localizations) {
    switch (bottomType) {
      case '–∏–ª': return localizations.translate('silt');
      case '–≥–ª—É–±–æ–∫–∏–π_–∏–ª': return localizations.translate('deep_silt');
      case '—Ä–∞–∫—É—à–∫–∞': return localizations.translate('shell');
      case '—Ä–æ–≤–Ω–æ_—Ç–≤–µ—Ä–¥–æ': return localizations.translate('firm_bottom');
      case '–∫–∞–º–Ω–∏': return localizations.translate('stones');
      case '—Ç—Ä–∞–≤–∞_–≤–æ–¥–æ—Ä–æ—Å–ª–∏': return localizations.translate('grass_algae');
      case '–∑–∞—Ü–µ–ø': return localizations.translate('snag');
      case '–±—É–≥–æ—Ä': return localizations.translate('hill');
      case '—Ç–æ—á–∫–∞_–∫–æ—Ä–º–ª–µ–Ω–∏—è': return localizations.translate('feeding_spot');
      default: return localizations.translate('silt');
    }
  }

  static Color _getBottomTypeColor(String bottomType) {
    const colors = {
      // –¢–û–ß–ù–´–ï —Ü–≤–µ—Ç–∞ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
      '–∏–ª': Color(0xFFD4A574),              // –°–≤–µ—Ç–ª–æ —è—Ä–∫–æ –∫–æ—Ä–∏—á–Ω–µ–≤—ã–π üü§
      '–≥–ª—É–±–æ–∫–∏–π_–∏–ª': Color(0xFF8B4513),     // –¢–µ–º–Ω–æ –∫–æ—Ä–∏—á–Ω–µ–≤—ã–π üü´
      '—Ä–∞–∫—É—à–∫–∞': Color(0xFFFFFFFF),         // –ë–µ–ª—ã–π ‚ö™
      '—Ä–æ–≤–Ω–æ_—Ç–≤–µ—Ä–¥–æ': Color(0xFFFFFF00),    // –ñ–µ–ª—Ç—ã–π üü°
      '–∫–∞–º–Ω–∏': Color(0xFF808080),           // –°–µ—Ä—ã–π üîò
      '—Ç—Ä–∞–≤–∞_–≤–æ–¥–æ—Ä–æ—Å–ª–∏': Color(0xFF90EE90), // –°–≤–µ—Ç–ª–æ –∑–µ–ª–µ–Ω—ã–π üü¢
      '–∑–∞—Ü–µ–ø': Color(0xFFFF0000),           // –ö—Ä–∞—Å–Ω—ã–π üî¥
      '–±—É–≥–æ—Ä': Color(0xFFFF8C00),           // –Ø—Ä–∫–æ –æ—Ä–∞–Ω–∂–µ–≤—ã–π üü†
      '—Ç–æ—á–∫–∞_–∫–æ—Ä–º–ª–µ–Ω–∏—è': Color(0xFF00BFFF), // –Ø—Ä–∫–æ –≥–æ–ª—É–±–æ–π üîµ
      'default': Color(0xFF0000FF),         // –°–∏–Ω–∏–π –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    };
    return colors[bottomType] ?? const Color(0xFF0000FF);
  }

  static double _calculateVariation(List<double> values) {
    if (values.isEmpty) return 0.0;
    final mean = values.reduce((a, b) => a + b) / values.length;
    final variance = values.map((v) => math.pow(v - mean, 2)).reduce((a, b) => a + b) / values.length;
    return math.sqrt(variance);
  }
}