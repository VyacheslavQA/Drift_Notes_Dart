// –ü—É—Ç—å: lib/services/ai_bite_prediction_service.dart

import 'dart:convert';
import 'dart:math' as math;
import 'package:http/http.dart' as http;
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../models/weather_api_model.dart';
import '../models/fishing_note_model.dart';
import '../models/ai_bite_prediction_model.dart';
import '../config/api_keys.dart';

class AIBitePredictionService {
  static final AIBitePredictionService _instance = AIBitePredictionService._internal();
  factory AIBitePredictionService() => _instance;
  AIBitePredictionService._internal();

  // –ö—ç—à –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
  final Map<String, AIBitePrediction> _cache = {};
  static const String _cacheKey = 'ai_bite_cache';

  /// –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –ò–ò –ø—Ä–æ–≥–Ω–æ–∑–∞ –∫–ª—ë–≤–∞
  Future<AIBitePrediction> getAIBitePrediction({
    required WeatherApiResponse weather,
    required double latitude,
    required double longitude,
    required String fishingType,
    List<FishingNote>? userHistory,
    DateTime? targetDate,
  }) async {
    try {
      targetDate ??= DateTime.now();

      // –°–æ–∑–¥–∞—ë–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
      final cacheKey = _generateCacheKey(latitude, longitude, targetDate, fishingType);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à (–∞–∫—Ç—É–∞–ª–µ–Ω 1 —á–∞—Å)
      if (_cache.containsKey(cacheKey)) {
        final cached = _cache[cacheKey]!;
        if (DateTime.now().difference(cached.generatedAt).inHours < 1) {
          debugPrint('ü§ñ –ò–ò –ø—Ä–æ–≥–Ω–æ–∑ –∏–∑ –∫—ç—à–∞');
          return cached;
        }
      }

      debugPrint('ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ò–ò –ø—Ä–æ–≥–Ω–æ–∑–∞...');

      // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
      final analysisData = await _collectAnalysisData(
        weather: weather,
        latitude: latitude,
        longitude: longitude,
        fishingType: fishingType,
        userHistory: userHistory,
        targetDate: targetDate,
      );

      // –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∏ –æ–±–ª–∞—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑
      final localPrediction = await _getLocalAIPrediction(analysisData);
      final cloudPrediction = await _getCloudAIPrediction(analysisData);

      // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      final finalPrediction = _combinepredictions(localPrediction, cloudPrediction, analysisData);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
      _cache[cacheKey] = finalPrediction;
      await _saveCacheToStorage();

      debugPrint('‚úÖ –ò–ò –ø—Ä–æ–≥–Ω–æ–∑ –≥–æ—Ç–æ–≤: ${finalPrediction.overallScore}/100');
      return finalPrediction;

    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ò–ò –ø—Ä–æ–≥–Ω–æ–∑–∞: $e');
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –ø—Ä–æ–≥–Ω–æ–∑
      return _getFallbackPrediction(weather, fishingType);
    }
  }

  /// –°–±–æ—Ä –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
  Future<Map<String, dynamic>> _collectAnalysisData({
    required WeatherApiResponse weather,
    required double latitude,
    required double longitude,
    required String fishingType,
    List<FishingNote>? userHistory,
    required DateTime targetDate,
  }) async {
    final current = weather.current;
    final forecast = weather.forecast.isNotEmpty ? weather.forecast.first : null;

    // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–≥–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    final weatherData = {
      'temperature': current.tempC,
      'feels_like': current.feelslikeC,
      'humidity': current.humidity,
      'pressure': current.pressureMb,
      'pressure_trend': await _calculatePressureTrend(weather),
      'wind_speed': current.windKph,
      'wind_direction': current.windDir,
      'wind_gust': current.gustKph,
      'visibility': current.visKm,
      'uv_index': current.uv,
      'cloud_cover': current.cloud,
      'condition': current.condition.text,
      'is_day': current.isDay == 1,
    };

    // –ê—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
    final astroData = forecast != null ? {
      'sunrise': forecast.astro.sunrise,
      'sunset': forecast.astro.sunset,
      'moonrise': forecast.astro.moonrise,
      'moonset': forecast.astro.moonset,
      'moon_phase': forecast.astro.moonPhase,
      'moon_illumination': forecast.astro.moonIllumination,
    } : <String, dynamic>{};

    // –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
    final timeData = {
      'hour': targetDate.hour,
      'day_of_week': targetDate.weekday,
      'day_of_month': targetDate.day,
      'month': targetDate.month,
      'season': _getSeason(targetDate),
      'is_weekend': targetDate.weekday >= 6,
    };

    // –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
    final geoData = {
      'latitude': latitude,
      'longitude': longitude,
      'region': weather.location.region,
      'country': weather.location.country,
      'timezone': weather.location.tzId,
      'water_type': _determineWaterType(latitude, longitude), // —Ä–µ–∫–∞/–æ–∑–µ—Ä–æ/–º–æ—Ä–µ
    };

    // –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    final historyData = _analyzeUserHistory(userHistory, fishingType, targetDate);

    // –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –ø–æ–≥–æ–¥–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    final historicalData = await _getHistoricalWeatherPatterns(latitude, longitude, targetDate);

    return {
      'weather': weatherData,
      'astro': astroData,
      'time': timeData,
      'geo': geoData,
      'user_history': historyData,
      'historical_patterns': historicalData,
      'fishing_type': fishingType,
      'target_date': targetDate.toIso8601String(),
    };
  }

  /// –õ–æ–∫–∞–ª—å–Ω—ã–π –ò–ò –∞–Ω–∞–ª–∏–∑ (–±—ã—Å—Ç—Ä—ã–π, –æ—Ñ–ª–∞–π–Ω)
  Future<Map<String, dynamic>> _getLocalAIPrediction(Map<String, dynamic> data) async {
    debugPrint('üß† –õ–æ–∫–∞–ª—å–Ω—ã–π –ò–ò –∞–Ω–∞–ª–∏–∑...');

    double score = 50.0; // –ë–∞–∑–æ–≤—ã–π —Å–∫–æ—Ä
    final factors = <String, Map<String, dynamic>>{};

    // –ê–Ω–∞–ª–∏–∑ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
    final temp = data['weather']['temperature'] as double;
    final tempFactor = _analyzeTemperatureFactor(temp, data['fishing_type']);
    score += tempFactor['impact'] * tempFactor['weight'];
    factors['temperature'] = tempFactor;

    // –ê–Ω–∞–ª–∏–∑ –¥–∞–≤–ª–µ–Ω–∏—è
    final pressure = data['weather']['pressure'] as double;
    final pressureTrend = data['weather']['pressure_trend'] as String;
    final pressureFactor = _analyzePressureFactor(pressure, pressureTrend);
    score += pressureFactor['impact'] * pressureFactor['weight'];
    factors['pressure'] = pressureFactor;

    // –ê–Ω–∞–ª–∏–∑ –≤–µ—Ç—Ä–∞
    final windSpeed = data['weather']['wind_speed'] as double;
    final windDir = data['weather']['wind_direction'] as String;
    final windFactor = _analyzeWindFactor(windSpeed, windDir, data['fishing_type']);
    score += windFactor['impact'] * windFactor['weight'];
    factors['wind'] = windFactor;

    // –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏
    final hour = data['time']['hour'] as int;
    final sunrise = data['astro']['sunrise'] as String?;
    final sunset = data['astro']['sunset'] as String?;
    final timeFactor = _analyzeTimeFactor(hour, sunrise, sunset);
    score += timeFactor['impact'] * timeFactor['weight'];
    factors['time'] = timeFactor;

    // –ê–Ω–∞–ª–∏–∑ –ª—É–Ω—ã
    final moonPhase = data['astro']['moon_phase'] as String?;
    final moonIllumination = data['astro']['moon_illumination'] as int?;
    final moonFactor = _analyzeMoonFactor(moonPhase, moonIllumination);
    score += moonFactor['impact'] * moonFactor['weight'];
    factors['moon'] = moonFactor;

    // –°–µ–∑–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    final season = data['time']['season'] as String;
    final month = data['time']['month'] as int;
    final seasonFactor = _analyzeSeasonFactor(season, month, data['fishing_type']);
    score += seasonFactor['impact'] * seasonFactor['weight'];
    factors['season'] = seasonFactor;

    // –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    final historyFactor = _analyzeUserHistoryFactor(data['user_history']);
    score += historyFactor['impact'] * historyFactor['weight'];
    factors['user_history'] = historyFactor;

    score = score.clamp(0.0, 100.0);

    return {
      'source': 'local_ai',
      'score': score,
      'confidence': 0.75,
      'factors': factors,
      'processing_time_ms': 50,
    };
  }

  /// –û–±–ª–∞—á–Ω—ã–π –ò–ò –∞–Ω–∞–ª–∏–∑ (–º–æ—â–Ω—ã–π, —Ç—Ä–µ–±—É–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç)
  Future<Map<String, dynamic>> _getCloudAIPrediction(Map<String, dynamic> data) async {
    try {
      debugPrint('‚òÅÔ∏è –û–±–ª–∞—á–Ω—ã–π –ò–ò –∞–Ω–∞–ª–∏–∑...');

      // –ï—Å–ª–∏ –Ω–µ—Ç API –∫–ª—é—á–∞ OpenAI, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫
      if (ApiKeys.openAiApiKey.isEmpty) {
        return _getMockCloudPrediction(data);
      }

      final prompt = _buildAIPrompt(data);

      final response = await http.post(
        Uri.parse('https://api.openai.com/v1/chat/completions'),
        headers: {
          'Authorization': 'Bearer ${ApiKeys.openAiApiKey}',
          'Content-Type': 'application/json',
        },
        body: json.encode({
          'model': 'gpt-4',
          'messages': [
            {
              'role': 'system',
              'content': '–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ä—ã–±–∞–ª–∫–µ –∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—é –∫–ª—ë–≤–∞. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ –∏ –¥–∞–π —Ç–æ—á–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –∫–ª—ë–≤–∞ –æ—Ç 0 –¥–æ 100 –±–∞–ª–ª–æ–≤ —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º —Ñ–∞–∫—Ç–æ—Ä–æ–≤.'
            },
            {
              'role': 'user',
              'content': prompt,
            }
          ],
          'max_tokens': 1000,
          'temperature': 0.3,
        }),
      ).timeout(const Duration(seconds: 10));

      if (response.statusCode == 200) {
        final result = json.decode(response.body);
        final aiResponse = result['choices'][0]['message']['content'];

        return _parseAIResponse(aiResponse);
      } else {
        throw Exception('OpenAI API error: ${response.statusCode}');
      }

    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ–±–ª–∞—á–Ω–æ–≥–æ –ò–ò: $e');
      return _getMockCloudPrediction(data);
    }
  }

  /// –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏ –æ–±–ª–∞—á–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
  AIBitePrediction _combinepredictions(
      Map<String, dynamic> localPrediction,
      Map<String, dynamic> cloudPrediction,
      Map<String, dynamic> data,
      ) {
    // –í–∑–≤–µ—à–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    final localWeight = 0.4;
    final cloudWeight = 0.6;

    final localScore = localPrediction['score'] as double;
    final cloudScore = cloudPrediction['score'] as double;

    final combinedScore = (localScore * localWeight + cloudScore * cloudWeight).round();

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    final activityLevel = _getActivityLevel(combinedScore);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    final recommendations = _generateRecommendations(combinedScore, data);

    // –°–æ–∑–¥–∞—ë–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
    final detailedFactors = _createDetailedFactors(localPrediction['factors'], data);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª—É—á—à–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫–Ω–∞
    final bestTimeWindows = _calculateBestTimeWindows(data, combinedScore);

    return AIBitePrediction(
      overallScore: combinedScore,
      activityLevel: activityLevel,
      confidence: ((localPrediction['confidence'] as double + cloudPrediction['confidence'] as double) / 2),
      recommendation: recommendations['main'] as String,
      detailedAnalysis: recommendations['detailed'] as String,
      factors: detailedFactors,
      bestTimeWindows: bestTimeWindows,
      tips: recommendations['tips'] as List<String>,
      generatedAt: DateTime.now(),
      dataSource: 'ai_hybrid',
      modelVersion: '1.0.0',
    );
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–∫—Ç–æ—Ä–æ–≤...

  Map<String, dynamic> _analyzeTemperatureFactor(double temp, String fishingType) {
    double impact = 0.0;
    String description = '';

    // –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–∏–¥–æ–≤ —Ä—ã–±–∞–ª–∫–∏
    Map<String, List<double>> optimalTemps = {
      'spinning': [15.0, 25.0],
      'feeder': [12.0, 22.0],
      'carp_fishing': [18.0, 28.0],
      'float_fishing': [10.0, 20.0],
      'ice_fishing': [-10.0, 5.0],
    };

    final optimal = optimalTemps[fishingType] ?? [15.0, 25.0];

    if (temp >= optimal[0] && temp <= optimal[1]) {
      impact = 15.0;
      description = '–û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —Ä—ã–±–∞–ª–∫–∏';
    } else if (temp >= optimal[0] - 5 && temp <= optimal[1] + 5) {
      impact = 5.0;
      description = '–ü—Ä–∏–µ–º–ª–µ–º–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞';
    } else {
      impact = -10.0;
      description = '–ù–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞';
    }

    return {
      'name': '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞',
      'value': temp,
      'impact': impact,
      'weight': 0.8,
      'description': description,
      'optimal_range': '${optimal[0]}¬∞C - ${optimal[1]}¬∞C',
    };
  }

  Map<String, dynamic> _analyzePressureFactor(double pressure, String trend) {
    double impact = 0.0;
    String description = '';

    // –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ: 1010-1025 –≥–ü–∞
    if (pressure >= 1010 && pressure <= 1025) {
      impact = 10.0;
      description = '–û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –∫–ª—ë–≤–∞';
    } else if (pressure >= 1000 && pressure <= 1035) {
      impact = 0.0;
      description = '–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ';
    } else {
      impact = -15.0;
      description = '–ù–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ';
    }

    // –£—á–∏—Ç—ã–≤–∞–µ–º —Ç—Ä–µ–Ω–¥ –¥–∞–≤–ª–µ–Ω–∏—è
    switch (trend) {
      case 'rising':
        impact += 5.0;
        description += '. –î–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ç—ë—Ç - —Ä—ã–±–∞ –∞–∫—Ç–∏–≤–∏–∑–∏—Ä—É–µ—Ç—Å—è';
        break;
      case 'falling':
        impact -= 8.0;
        description += '. –î–∞–≤–ª–µ–Ω–∏–µ –ø–∞–¥–∞–µ—Ç - –∫–ª—ë–≤ –æ—Å–ª–∞–±–µ–≤–∞–µ—Ç';
        break;
      case 'stable':
        impact += 2.0;
        description += '. –°—Ç–∞–±–∏–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ —Å–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç –∫–ª—ë–≤—É';
        break;
    }

    return {
      'name': '–ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ',
      'value': pressure,
      'trend': trend,
      'impact': impact,
      'weight': 1.0, // –°–∞–º—ã–π –≤–∞–∂–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä
      'description': description,
    };
  }

  Map<String, dynamic> _analyzeWindFactor(double windSpeed, String windDir, String fishingType) {
    double impact = 0.0;
    String description = '';

    // –ê–Ω–∞–ª–∏–∑ —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤–µ—Ç—Ä–∞
    if (windSpeed <= 5) {
      impact = 5.0;
      description = '–°–ª–∞–±—ã–π –≤–µ—Ç–µ—Ä –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–µ–Ω';
    } else if (windSpeed <= 15) {
      impact = 10.0; // –õ—ë–≥–∫–∏–π –≤–µ—Ç–µ—Ä - –∏–¥–µ–∞–ª—å–Ω–æ
      description = '–õ—ë–≥–∫–∏–π –≤–µ—Ç–µ—Ä - –æ—Ç–ª–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è';
    } else if (windSpeed <= 25) {
      impact = -5.0;
      description = '–£–º–µ—Ä–µ–Ω–Ω—ã–π –≤–µ—Ç–µ—Ä –∑–∞—Ç—Ä—É–¥–Ω—è–µ—Ç —Ä—ã–±–∞–ª–∫—É';
    } else {
      impact = -20.0;
      description = '–°–∏–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä - —Å–ª–æ–∂–Ω—ã–µ —É—Å–ª–æ–≤–∏—è';
    }

    // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Ä—ã–±–∞–ª–∫–∏
    if (fishingType == 'spinning' && (windDir.contains('W') || windDir.contains('SW'))) {
      impact += 3.0;
      description += '. –ó–∞–ø–∞–¥–Ω—ã–π –≤–µ—Ç–µ—Ä —Ö–æ—Ä–æ—à –¥–ª—è —Å–ø–∏–Ω–Ω–∏–Ω–≥–∞';
    }

    return {
      'name': '–í–µ—Ç–µ—Ä',
      'speed': windSpeed,
      'direction': windDir,
      'impact': impact,
      'weight': 0.7,
      'description': description,
    };
  }

  Map<String, dynamic> _analyzeTimeFactor(int hour, String? sunrise, String? sunset) {
    double impact = 0.0;
    String description = '';

    // –õ—É—á—à–∏–µ —á–∞—Å—ã –¥–ª—è —Ä—ã–±–∞–ª–∫–∏
    if ((hour >= 5 && hour <= 8) || (hour >= 18 && hour <= 21)) {
      impact = 15.0;
      description = '–ó–æ–ª–æ—Ç–æ–µ –≤—Ä–µ–º—è —Ä—ã–±–∞–ª–∫–∏';
    } else if ((hour >= 9 && hour <= 11) || (hour >= 16 && hour <= 17)) {
      impact = 8.0;
      description = '–•–æ—Ä–æ—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –∫–ª—ë–≤–∞';
    } else if (hour >= 12 && hour <= 15) {
      impact = -5.0;
      description = '–î–Ω–µ–≤–Ω–æ–µ –∑–∞—Ç–∏—à—å–µ';
    } else {
      impact = 0.0;
      description = '–û–±—ã—á–Ω–æ–µ –≤—Ä–µ–º—è';
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–∏–∑–æ—Å—Ç—å –∫ –≤–æ—Å—Ö–æ–¥—É/–∑–∞–∫–∞—Ç—É
    if (sunrise != null && sunset != null) {
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤
      description += '. –£—á—Ç–µ–Ω—ã –≤–æ—Å—Ö–æ–¥ –∏ –∑–∞–∫–∞—Ç';
    }

    return {
      'name': '–í—Ä–µ–º—è —Å—É—Ç–æ–∫',
      'hour': hour,
      'impact': impact,
      'weight': 0.9,
      'description': description,
    };
  }

  Map<String, dynamic> _analyzeMoonFactor(String? moonPhase, int? illumination) {
    if (moonPhase == null) {
      return {
        'name': '–§–∞–∑–∞ –ª—É–Ω—ã',
        'impact': 0.0,
        'weight': 0.4,
        'description': '–î–∞–Ω–Ω—ã–µ –æ –ª—É–Ω–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã',
      };
    }

    double impact = 0.0;
    String description = '';

    final phase = moonPhase.toLowerCase();

    if (phase.contains('new') || phase.contains('full')) {
      impact = 8.0;
      description = '–ê–∫—Ç–∏–≤–Ω–∞—è —Ñ–∞–∑–∞ –ª—É–Ω—ã —É—Å–∏–ª–∏–≤–∞–µ—Ç –∫–ª—ë–≤';
    } else if (phase.contains('quarter')) {
      impact = 3.0;
      description = '–£–º–µ—Ä–µ–Ω–Ω–∞—è –ª—É–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å';
    } else {
      impact = 0.0;
      description = '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è —Ñ–∞–∑–∞ –ª—É–Ω—ã';
    }

    return {
      'name': '–§–∞–∑–∞ –ª—É–Ω—ã',
      'phase': moonPhase,
      'illumination': illumination,
      'impact': impact,
      'weight': 0.4,
      'description': description,
    };
  }

  Map<String, dynamic> _analyzeSeasonFactor(String season, int month, String fishingType) {
    double impact = 0.0;
    String description = '';

    // –°–µ–∑–æ–Ω–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ä—ã–±–∞–ª–∫–∏
    Map<String, List<int>> bestMonths = {
      'spinning': [4, 5, 6, 9, 10], // –í–µ—Å–Ω–∞ –∏ –æ—Å–µ–Ω—å
      'carp_fishing': [5, 6, 7, 8, 9], // –¢—ë–ø–ª–æ–µ –≤—Ä–µ–º—è
      'feeder': [4, 5, 6, 7, 8, 9, 10], // –î–æ–ª–≥–∏–π —Å–µ–∑–æ–Ω
      'ice_fishing': [12, 1, 2, 3], // –ó–∏–º–∞
    };

    final optimal = bestMonths[fishingType] ?? [4, 5, 6, 7, 8, 9];

    if (optimal.contains(month)) {
      impact = 8.0;
      description = '–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Å–µ–∑–æ–Ω –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —Ä—ã–±–∞–ª–∫–∏';
    } else {
      impact = -3.0;
      description = '–ù–µ —Å–∞–º—ã–π –ª—É—á—à–∏–π —Å–µ–∑–æ–Ω';
    }

    return {
      'name': '–°–µ–∑–æ–Ω',
      'season': season,
      'month': month,
      'impact': impact,
      'weight': 0.6,
      'description': description,
    };
  }

  Map<String, dynamic> _analyzeUserHistoryFactor(Map<String, dynamic>? historyData) {
    if (historyData == null || historyData.isEmpty) {
      return {
        'name': '–ò—Å—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        'impact': 0.0,
        'weight': 0.5,
        'description': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –æ –≤–∞—à–∏—Ö —Ä—ã–±–∞–ª–∫–∞—Ö',
      };
    }

    double impact = 0.0;
    String description = '';

    final successRate = historyData['success_rate'] as double? ?? 0.0;
    final totalTrips = historyData['total_trips'] as int? ?? 0;

    if (totalTrips >= 10) {
      if (successRate > 0.7) {
        impact = 5.0;
        description = '–í –ø–æ—Ö–æ–∂–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö —É –≤–∞—Å –≤—ã—Å–æ–∫–∏–π —É—Å–ø–µ—Ö';
      } else if (successRate > 0.4) {
        impact = 2.0;
        description = '–£–º–µ—Ä–µ–Ω–Ω—ã–π —É—Å–ø–µ—Ö –≤ –ø–æ—Ö–æ–∂–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö';
      } else {
        impact = -3.0;
        description = '–í –ø–æ—Ö–æ–∂–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö —É—Å–ø–µ—Ö –±—ã–ª –Ω–∏–∑–∫–∏–º';
      }
    } else {
      impact = 0.0;
      description = '–ù–∞–∫–∞–ø–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–∞—à–∏—Ö —Ä—ã–±–∞–ª–æ–∫';
    }

    return {
      'name': '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è',
      'success_rate': successRate,
      'total_trips': totalTrips,
      'impact': impact,
      'weight': 0.5,
      'description': description,
    };
  }

  // –û—Å—Ç–∞–ª—å–Ω—ã–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã...

  String _generateCacheKey(double lat, double lon, DateTime date, String fishingType) {
    return 'ai_${lat.toStringAsFixed(2)}_${lon.toStringAsFixed(2)}_${date.year}${date.month}${date.day}${date.hour}_$fishingType';
  }

  Future<String> _calculatePressureTrend(WeatherApiResponse weather) async {
    // –£–ø—Ä–æ—â—ë–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ç—Ä–µ–Ω–¥–∞ –¥–∞–≤–ª–µ–Ω–∏—è
    final random = math.Random();
    final trends = ['rising', 'falling', 'stable'];
    return trends[random.nextInt(trends.length)];
  }

  String _getSeason(DateTime date) {
    final month = date.month;
    if (month >= 3 && month <= 5) return 'spring';
    if (month >= 6 && month <= 8) return 'summer';
    if (month >= 9 && month <= 11) return 'autumn';
    return 'winter';
  }

  String _determineWaterType(double lat, double lon) {
    // –£–ø—Ä–æ—â—ë–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –≤–æ–¥–æ—ë–º–∞
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–µ–æ–¥–∞–Ω–Ω—ã–µ
    return 'lake'; // –∏–ª–∏ 'river', 'sea'
  }

  Map<String, dynamic> _analyzeUserHistory(List<FishingNote>? history, String fishingType, DateTime date) {
    if (history == null || history.isEmpty) {
      return {};
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    final relevantNotes = history.where((note) =>
    note.fishingType == fishingType &&
        date.difference(note.startDate).inDays <= 365 // –ü–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥
    ).toList();

    if (relevantNotes.isEmpty) {
      return {};
    }

    final totalTrips = relevantNotes.length;
    final successfulTrips = relevantNotes.where((note) =>
    note.biteRecords.isNotEmpty &&
        note.biteRecords.any((bite) => bite.weight > 0)
    ).length;

    final successRate = successfulTrips / totalTrips;

    return {
      'total_trips': totalTrips,
      'successful_trips': successfulTrips,
      'success_rate': successRate,
      'avg_fish_count': relevantNotes.map((n) => n.biteRecords.length).fold(0, (a, b) => a + b) / totalTrips,
    };
  }

  Future<Map<String, dynamic>> _getHistoricalWeatherPatterns(double lat, double lon, DateTime date) async {
    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –ø–æ–≥–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    // –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ API
    return {
      'has_data': false,
      'patterns': [],
    };
  }

  String _buildAIPrompt(Map<String, dynamic> data) {
    return '''
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ä—ã–±–∞–ª–∫–∏ –∏ –¥–∞–π –ø—Ä–æ–≥–Ω–æ–∑ –∫–ª—ë–≤–∞ –æ—Ç 0 –¥–æ 100 –±–∞–ª–ª–æ–≤.

–ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è:
- –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${data['weather']['temperature']}¬∞C
- –î–∞–≤–ª–µ–Ω–∏–µ: ${data['weather']['pressure']} –º–± (—Ç—Ä–µ–Ω–¥: ${data['weather']['pressure_trend']})
- –í–µ—Ç–µ—Ä: ${data['weather']['wind_speed']} –∫–º/—á, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ${data['weather']['wind_direction']}
- –í–ª–∞–∂–Ω–æ—Å—Ç—å: ${data['weather']['humidity']}%
- –û–±–ª–∞—á–Ω–æ—Å—Ç—å: ${data['weather']['cloud_cover']}%

–í—Ä–µ–º—è –∏ –º–µ—Å—Ç–æ:
- –ß–∞—Å: ${data['time']['hour']}:00
- –ú–µ—Å—è—Ü: ${data['time']['month']}
- –¢–∏–ø —Ä—ã–±–∞–ª–∫–∏: ${data['fishing_type']}
- –®–∏—Ä–æ—Ç–∞: ${data['geo']['latitude']}, –î–æ–ª–≥–æ—Ç–∞: ${data['geo']['longitude']}

–§–∞–∑–∞ –ª—É–Ω—ã: ${data['astro']['moon_phase'] ?? '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}

–î–∞–π —Ç–æ—á–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑ (0-100) –∏ –∫—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤.
''';
  }

  Map<String, dynamic> _parseAIResponse(String response) {
    // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
    final RegExp scoreRegex = RegExp(r'(\d{1,3})\s*(?:–±–∞–ª–ª–æ–≤?|points?|%)?');
    final match = scoreRegex.firstMatch(response);

    double score = 50.0; // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if (match != null) {
      score = double.tryParse(match.group(1)!) ?? 50.0;
    }

    return {
      'source': 'cloud_ai',
      'score': score.clamp(0.0, 100.0),
      'confidence': 0.85,
      'analysis': response,
      'processing_time_ms': 2000,
    };
  }

  Map<String, dynamic> _getMockCloudPrediction(Map<String, dynamic> data) {
    // –ú–æ–∫ –æ–±–ª–∞—á–Ω–æ–≥–æ –ò–ò –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    final baseScore = 45.0 + math.Random().nextDouble() * 30; // 45-75

    return {
      'source': 'mock_cloud_ai',
      'score': baseScore,
      'confidence': 0.65,
      'analysis': '–ú–æ–∫-–∞–Ω–∞–ª–∏–∑: –£—Å–ª–æ–≤–∏—è –æ—Ü–µ–Ω–µ–Ω—ã –∫–∞–∫ —É–º–µ—Ä–µ–Ω–Ω–æ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ –¥–ª—è —Ä—ã–±–∞–ª–∫–∏.',
      'processing_time_ms': 1500,
    };
  }

  ActivityLevel _getActivityLevel(int score) {
    if (score >= 80) return ActivityLevel.excellent;
    if (score >= 60) return ActivityLevel.good;
    if (score >= 40) return ActivityLevel.moderate;
    if (score >= 20) return ActivityLevel.poor;
    return ActivityLevel.veryPoor;
  }

  Map<String, dynamic> _generateRecommendations(int score, Map<String, dynamic> data) {
    String main = '';
    String detailed = '';
    List<String> tips = [];

    if (score >= 80) {
      main = '–û—Ç–ª–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ä—ã–±–∞–ª–∫–∏! –°–∞–º–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Ç—Ä–æ—Ñ–µ–π–Ω–æ–π –ª–æ–≤–ª–∏.';
      detailed = '–í—Å–µ —Ñ–∞–∫—Ç–æ—Ä—ã —Å–∫–ª–∞–¥—ã–≤–∞—é—Ç—Å—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–∞—è –ª–æ–≤–ª—è —Å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–º–∏ –ø—Ä–∏–º–∞–Ω–∫–∞–º–∏.';
      tips = [
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–º–∞–Ω–∫–∏',
        '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–∞–∑–Ω—ã–µ –≥–ª—É–±–∏–Ω—ã',
        '–í—Ä–µ–º—è –¥–ª—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ —Å –Ω–æ–≤—ã–º–∏ –º–µ—Å—Ç–∞–º–∏',
      ];
    } else if (score >= 60) {
      main = '–•–æ—Ä–æ—à–∏–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –∫–ª—ë–≤–∞. –°—Ç–æ–∏—Ç –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å!';
      detailed = '–ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã. –†—ã–±–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞–∫—Ç–∏–≤–Ω–∞.';
      tips = [
        '–ü—Ä–∏–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ—Å—å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –º–µ—Å—Ç',
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–Ω–∞–∫–æ–º—ã–µ –ø—Ä–∏–º–∞–Ω–∫–∏',
        '–ë—É–¥—å—Ç–µ —Ç–µ—Ä–ø–µ–ª–∏–≤—ã - –ø–æ–∫–ª—ë–≤–∫–∏ –±—É–¥—É—Ç',
      ];
    } else if (score >= 40) {
      main = '–°—Ä–µ–¥–Ω–∏–µ —É—Å–ª–æ–≤–∏—è. –ö–ª—ë–≤ –≤–æ–∑–º–æ–∂–µ–Ω, –Ω–æ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Ç–µ—Ä–ø–µ–Ω–∏–µ.';
      detailed = '–£—Å–ª–æ–≤–∏—è –Ω–µ –∏–¥–µ–∞–ª—å–Ω—ã, –Ω–æ –ø—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ–¥—Ö–æ–¥–µ –º–æ–∂–Ω–æ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.';
      tips = [
        '–õ–æ–≤–∏—Ç–µ –≤ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö',
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–ª–µ–µ –º–µ–ª–∫–∏–µ –ø—Ä–∏–º–∞–Ω–∫–∏',
        '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ª–æ–≤–ª—é –Ω–∞ –¥–Ω–µ',
      ];
    } else {
      main = '–°–ª–∞–±—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ä—ã–±–∞–ª–∫–∏. –õ—É—á—à–µ –æ—Ç–ª–æ–∂–∏—Ç—å –∏–ª–∏ —Å–º–µ–Ω–∏—Ç—å —Ç–∞–∫—Ç–∏–∫—É.';
      detailed = '–ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–∂–¥–∞—Ç—å—Å—è –ª—É—á—à–∏—Ö —É—Å–ª–æ–≤–∏–π.';
      tips = [
        '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–æ—á–Ω—É—é —Ä—ã–±–∞–ª–∫—É',
        '–õ–æ–≤–∏—Ç–µ –≤ –≥–ª—É–±–æ–∫–∏—Ö –º–µ—Å—Ç–∞—Ö',
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ –ø—Ä–∏–º–∞–Ω–∫–∏',
      ];
    }

    return {
      'main': main,
      'detailed': detailed,
      'tips': tips,
    };
  }

  List<BiteFactorAnalysis> _createDetailedFactors(Map<String, dynamic>? factors, Map<String, dynamic> data) {
    if (factors == null) return [];

    return factors.entries.map((entry) {
      final factor = entry.value as Map<String, dynamic>;
      return BiteFactorAnalysis(
        name: factor['name'] as String,
        value: factor['value']?.toString() ?? '',
        impact: (factor['impact'] as double).round(),
        weight: factor['weight'] as double,
        description: factor['description'] as String,
        isPositive: (factor['impact'] as double) > 0,
      );
    }).toList();
  }

  List<OptimalTimeWindow> _calculateBestTimeWindows(Map<String, dynamic> data, int baseScore) {
    final windows = <OptimalTimeWindow>[];

    // –£—Ç—Ä–µ–Ω–Ω–µ–µ –æ–∫–Ω–æ
    windows.add(OptimalTimeWindow(
      startTime: DateTime.now().copyWith(hour: 6, minute: 0),
      endTime: DateTime.now().copyWith(hour: 8, minute: 30),
      activity: (baseScore + 15).clamp(0, 100) / 100,
      reason: '–£—Ç—Ä–µ–Ω–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä—ã–±—ã',
      recommendations: ['–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —è—Ä–∫–∏–µ –ø—Ä–∏–º–∞–Ω–∫–∏', '–õ–æ–≤–∏—Ç–µ —É –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏'],
    ));

    // –í–µ—á–µ—Ä–Ω–µ–µ –æ–∫–Ω–æ
    windows.add(OptimalTimeWindow(
      startTime: DateTime.now().copyWith(hour: 18, minute: 0),
      endTime: DateTime.now().copyWith(hour: 20, minute: 30),
      activity: (baseScore + 20).clamp(0, 100) / 100,
      reason: '–í–µ—á–µ—Ä–Ω–∏–π –∂–æ—Ä',
      recommendations: ['–í—Ä–µ–º—è –¥–ª—è —Ç—Ä–æ—Ñ–µ–π–Ω–æ–π –ª–æ–≤–ª–∏', '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω—ã–µ –ø—Ä–∏–º–∞–Ω–∫–∏'],
    ));

    return windows;
  }

  AIBitePrediction _getFallbackPrediction(WeatherApiResponse weather, String fishingType) {
    return AIBitePrediction(
      overallScore: 50,
      activityLevel: ActivityLevel.moderate,
      confidence: 0.3,
      recommendation: '–°—Ä–µ–¥–Ω–∏–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ä—ã–±–∞–ª–∫–∏',
      detailedAnalysis: '–ë–∞–∑–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ò–ò-–∞–Ω–∞–ª–∏–∑–∞',
      factors: [],
      bestTimeWindows: [],
      tips: ['–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–∏—ë–º—ã –ª–æ–≤–ª–∏'],
      generatedAt: DateTime.now(),
      dataSource: 'fallback',
      modelVersion: '1.0.0',
    );
  }

  Future<void> _saveCacheToStorage() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final cacheData = _cache.map((key, value) => MapEntry(key, value.toJson()));
      await prefs.setString(_cacheKey, json.encode(cacheData));
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞ –ò–ò: $e');
    }
  }

  Future<void> _loadCacheFromStorage() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final cacheJson = prefs.getString(_cacheKey);
      if (cacheJson != null) {
        final cacheData = json.decode(cacheJson) as Map<String, dynamic>;
        _cache.clear();
        cacheData.forEach((key, value) {
          _cache[key] = AIBitePrediction.fromJson(value);
        });
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞ –ò–ò: $e');
    }
  }

  /// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ –∫—ç—à–∞
  void clearOldCache() {
    final now = DateTime.now();
    _cache.removeWhere((key, value) =>
    now.difference(value.generatedAt).inHours > 24
    );
  }
}

// –ï–Ω—É–º—ã –∏ –º–æ–¥–µ–ª–∏
enum ActivityLevel {
  excellent,
  good,
  moderate,
  poor,
  veryPoor,
}

extension ActivityLevelExtension on ActivityLevel {
  String get displayName {
    switch (this) {
      case ActivityLevel.excellent:
        return '–û—Ç–ª–∏—á–Ω–∞—è';
      case ActivityLevel.good:
        return '–•–æ—Ä–æ—à–∞—è';
      case ActivityLevel.moderate:
        return '–£–º–µ—Ä–µ–Ω–Ω–∞—è';
      case ActivityLevel.poor:
        return '–°–ª–∞–±–∞—è';
      case ActivityLevel.veryPoor:
        return '–û—á–µ–Ω—å —Å–ª–∞–±–∞—è';
    }
  }

  Color get color {
    switch (this) {
      case ActivityLevel.excellent:
        return const Color(0xFF4CAF50);
      case ActivityLevel.good:
        return const Color(0xFF8BC34A);
      case ActivityLevel.moderate:
        return const Color(0xFFFFC107);
      case ActivityLevel.poor:
        return const Color(0xFFFF9800);
      case ActivityLevel.veryPoor:
        return const Color(0xFFF44336);
    }
  }
}