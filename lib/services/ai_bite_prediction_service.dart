// –ü—É—Ç—å: lib/services/ai_bite_prediction_service.dart

import 'dart:convert';
import 'dart:math' as math;
import 'package:http/http.dart' as http;
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../models/weather_api_model.dart';
import '../models/ai_bite_prediction_model.dart';
import '../models/fishing_note_model.dart';
import '../config/api_keys.dart';
import '../services/weather/weather_service.dart';
import '../models/weather_api_model.dart';

class AIBitePredictionService {
  static final AIBitePredictionService _instance =
      AIBitePredictionService._internal();
  factory AIBitePredictionService() => _instance;
  AIBitePredictionService._internal();

  // –ö—ç—à –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
  final Map<String, MultiFishingTypePrediction> _cache = {};
  static const String _cacheKey = 'ai_bite_cache_multi';

  // –°—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ AI –∑–∞–ø—Ä–æ—Å–∞
  bool _lastAIRequestSuccessful = false;
  String _lastAIError = '';
  DateTime? _lastAIRequestTime;

  /// –ì–µ—Ç—Ç–µ—Ä—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ AI
  bool get isAIAvailable => _isOpenAIConfigured();
  bool get lastAIRequestSuccessful => _lastAIRequestSuccessful;
  String get lastAIError => _lastAIError;
  DateTime? get lastAIRequestTime => _lastAIRequestTime;

  /// –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –ò–ò –ø—Ä–æ–≥–Ω–æ–∑–∞
  Future<MultiFishingTypePrediction> getMultiFishingTypePrediction({
    required WeatherApiResponse weather,
    required double latitude,
    required double longitude,
    List<FishingNoteModel>? userHistory,
    DateTime? targetDate,
    List<String>? preferredTypes,
  }) async {
    try {
      targetDate ??= DateTime.now();

      // –°–æ–∑–¥–∞—ë–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
      final cacheKey = _generateCacheKey(latitude, longitude, targetDate);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à (–∞–∫—Ç—É–∞–ª–µ–Ω 30 –º–∏–Ω—É—Ç)
      if (_cache.containsKey(cacheKey)) {
        final cached = _cache[cacheKey]!;
        if (DateTime.now().difference(cached.generatedAt).inMinutes < 30) {
          debugPrint(
            'ü§ñ –ò–ò –ø—Ä–æ–≥–Ω–æ–∑ –∏–∑ –∫—ç—à–∞ (${cached.bestPrediction.dataSource})',
          );
          return cached;
        }
      }

      debugPrint('ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞...');

      // –°–Ω–∞—á–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ OpenAI
      final aiAvailable = _isOpenAIConfigured();
      debugPrint('üîß OpenAI –¥–æ—Å—Ç—É–ø–µ–Ω: $aiAvailable');

      // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      final userData = await _collectUserData(userHistory, latitude, longitude);

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
      final weatherAnalysis = _analyzeWeatherConditions(weather);

      // –°–æ–∑–¥–∞—ë–º –±–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Ä—ã–±–∞–ª–∫–∏
      final predictions = _generatePredictionsForAllTypes(
        weather: weather,
        userData: userData,
        weatherAnalysis: weatherAnalysis,
        latitude: latitude,
        longitude: longitude,
        targetDate: targetDate,
        useAI: false, // –°–Ω–∞—á–∞–ª–∞ –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
      );

      // –ü—ã—Ç–∞–µ–º—Å—è —É–ª—É—á—à–∏—Ç—å —Å –ø–æ–º–æ—â—å—é OpenAI
      bool aiEnhanced = false;
      if (aiAvailable) {
        aiEnhanced = await _enhanceWithOpenAI(predictions, weather, userData);
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º dataSource –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ AI —É–ª—É—á—à–µ–Ω–∏—è
      final finalDataSource = aiEnhanced ? 'enhanced_ai' : 'local_algorithm';
      _updateDataSource(predictions, finalDataSource);

      // –°–æ–∑–¥–∞–µ–º –º—É–ª—å—Ç–∏—Ç–∏–ø–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑
      final multiPrediction = _createMultiPrediction(
        predictions,
        preferredTypes,
        weather,
        aiEnhanced,
      );

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
      _cache[cacheKey] = multiPrediction;

      debugPrint(
        '‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ –≥–æ—Ç–æ–≤. –ò—Å—Ç–æ—á–Ω–∏–∫: $finalDataSource. –õ—É—á—à–∏–π: ${multiPrediction.bestFishingType}',
      );
      return multiPrediction;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞: $e');
      return _getFallbackPrediction(weather, userHistory, latitude, longitude);
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ —Ä—ã–±–∞–ª–∫–∏ (–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞)
  Future<AIBitePrediction> getPredictionForFishingType({
    required String fishingType,
    required double latitude,
    required double longitude,
    DateTime? date,
  }) async {
    try {
      debugPrint('üéØ –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è $fishingType...');

      // –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π –æ–±—ä–µ–∫—Ç –ø–æ–≥–æ–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      // TODO: –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –ø–æ–≥–æ–¥—É –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API
      final fakeWeather = WeatherApiResponse(
        location: Location(
          name: 'Test Location',
          region: '',
          country: '',
          lat: latitude,
          lon: longitude,
          tzId: '',
        ),
        current: Current(
          tempC: 15.0,
          feelslikeC: 15.0,
          humidity: 65,
          pressureMb: 1013.0,
          windKph: 10.0,
          windDir: 'N',
          condition: Condition(text: 'Clear', icon: '', code: 1000),
          cloud: 20,
          isDay: 1,
          visKm: 10.0,
          uv: 5.0,
        ),
        forecast: [],
      );

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º—É–ª—å—Ç–∏-–ø—Ä–æ–≥–Ω–æ–∑–∞
      final multiPrediction = await getMultiFishingTypePrediction(
        weather: fakeWeather,
        latitude: latitude,
        longitude: longitude,
        targetDate: date,
        preferredTypes: [fishingType],
      );

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞
      final prediction = multiPrediction.allPredictions[fishingType];
      if (prediction == null) {
        throw Exception(
          '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è —Ç–∏–ø–∞ —Ä—ã–±–∞–ª–∫–∏: $fishingType',
        );
      }

      debugPrint(
        '‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è $fishingType –≥–æ—Ç–æ–≤: ${prediction.overallScore} –±–∞–ª–ª–æ–≤',
      );
      return prediction;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è $fishingType: $e');
      rethrow;
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ª–∏ OpenAI API
  bool _isOpenAIConfigured() {
    try {
      final key = ApiKeys.openAIKey;
      final isConfigured =
          key.isNotEmpty &&
          key != 'YOUR_OPENAI_API_KEY_HERE' &&
          key.startsWith('sk-') &&
          key.length > 20;

      debugPrint(
        'üîë OpenAI –∫–ª—é—á –ø—Ä–æ–≤–µ—Ä–∫–∞: –¥–ª–∏–Ω–∞=${key.length}, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å sk-=${key.startsWith('sk-')}, –Ω–∞—Å—Ç—Ä–æ–µ–Ω=$isConfigured',
      );
      return isConfigured;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ OpenAI –∫–ª—é—á–∞: $e');
      return false;
    }
  }

  /// –ë–∞–∑–æ–≤—ã–π OpenAI –∑–∞–ø—Ä–æ—Å (–æ–±—â–∏–π –º–µ—Ç–æ–¥) - –ò–°–ü–†–ê–í–õ–ï–ù
  Future<Map<String, dynamic>?> _makeOpenAIRequest(
    List<Map<String, String>> messages,
  ) async {
    if (!_isOpenAIConfigured()) {
      debugPrint('üö´ OpenAI –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
      return null;
    }

    _lastAIRequestTime = DateTime.now();

    try {
      final requestBody = {
        'model': 'gpt-3.5-turbo',
        'messages': [
          {
            'role': 'system',
            'content':
                '–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ä—ã–±–∞–ª–∫–µ. –û—Ç–≤–µ—á–∞–π —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Å–æ–≤–µ—Ç–∞–º–∏.',
          },
          ...messages,
        ],
        'max_tokens': 400, // –£–í–ï–õ–ò–ß–ï–ù–û —Å 150 –¥–æ 400
        'temperature':
            0.7, // –£–í–ï–õ–ò–ß–ï–ù–û —Å 0.3 –¥–æ 0.7 –¥–ª—è –±–æ–ª–µ–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
      };

      final response = await http
          .post(
            Uri.parse('https://api.openai.com/v1/chat/completions'),
            headers: {
              'Authorization': 'Bearer ${ApiKeys.openAIKey}',
              'Content-Type': 'application/json; charset=utf-8',
              'Accept': 'application/json',
              'Accept-Charset': 'utf-8',
            },
            body: json.encode(requestBody),
          )
          .timeout(const Duration(seconds: 30)); // –£–í–ï–õ–ò–ß–ï–ù–û —Å 15 –¥–æ 30 —Å–µ–∫—É–Ω–¥

      if (response.statusCode == 200) {
        final decodedBody = utf8.decode(response.bodyBytes);
        final data = json.decode(decodedBody);

        // –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ—Ç—ã –æ—Ç–≤–µ—Ç–∞
        final finishReason = data['choices']?[0]?['finish_reason'];
        if (finishReason == 'length') {
          debugPrint('‚ö†Ô∏è –û—Ç–≤–µ—Ç OpenAI –±—ã–ª –æ–±—Ä–µ–∑–∞–Ω –∏–∑-–∑–∞ –ª–∏–º–∏—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤');
        }

        _lastAIRequestSuccessful = true;
        _lastAIError = '';

        debugPrint(
          '‚úÖ OpenAI –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ (finish_reason: $finishReason)',
        );
        return data;
      } else {
        final decodedBody = utf8.decode(response.bodyBytes);
        final errorData = json.decode(decodedBody);
        _lastAIRequestSuccessful = false;
        _lastAIError =
            'HTTP ${response.statusCode}: ${errorData['error']?['message'] ?? 'Unknown error'}';

        debugPrint('‚ùå OpenAI –æ—à–∏–±–∫–∞: $_lastAIError');
        return null;
      }
    } catch (e) {
      _lastAIRequestSuccessful = false;
      _lastAIError = e.toString();
      debugPrint('‚ùå OpenAI –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: $e');
      return null;
    }
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç –ò–ò-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –≤–µ—Ç—Ä–∞ - –£–õ–£–ß–®–ï–ù–û
  Future<List<String>> getWindFishingRecommendations(String prompt) async {
    try {
      final response = await _makeOpenAIRequest([
        {'role': 'user', 'content': prompt},
      ]);

      if (response != null &&
          response['choices'] != null &&
          response['choices'].isNotEmpty) {
        final content = response['choices'][0]['message']['content'] as String?;

        if (content != null && content.isNotEmpty) {
          // –£–õ–£–ß–®–ï–ù–û: –ë–æ–ª–µ–µ —É–º–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
          final cleanContent = content.trim();

          // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
          List<String> recommendations = [];

          // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç—å –ø–æ –Ω–æ–º–µ—Ä–∞–º
          final numberedLines = cleanContent.split(RegExp(r'\d+\.\s*'));
          if (numberedLines.length > 1) {
            recommendations =
                numberedLines
                    .skip(1) // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π –ø—É—Å—Ç–æ–π —ç–ª–µ–º–µ–Ω—Ç
                    .map((line) => line.trim())
                    .where((line) => line.isNotEmpty && line.length > 5)
                    .take(6) // –£–í–ï–õ–ò–ß–ï–ù–û –¥–æ 6 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
                    .toList();
          }

          // –ï—Å–ª–∏ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ –Ω–µ—Ç, —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ –ø–µ—Ä–µ–Ω–æ—Å–∞–º —Å—Ç—Ä–æ–∫
          if (recommendations.isEmpty) {
            recommendations =
                cleanContent
                    .split('\n')
                    .map((line) => line.trim())
                    .where((line) => line.isNotEmpty && line.length > 5)
                    .take(6)
                    .toList();
          }

          // –ï—Å–ª–∏ –∏ —Ç–∞–∫ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–µ—Å—å –æ—Ç–≤–µ—Ç –∫–∞–∫ –æ–¥–Ω—É —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
          if (recommendations.isEmpty && cleanContent.length > 10) {
            recommendations = [cleanContent];
          }

          debugPrint('‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${recommendations.length} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –æ—Ç –ò–ò');
          return recommendations.isNotEmpty
              ? recommendations
              : ['–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –æ—Ç –ò–ò'];
        }
      }

      return ['–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç –ò–ò'];
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ò–ò-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –≤–µ—Ç—Ä–∞: $e');
      return ['–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: $e'];
    }
  }

  /// –¢–µ—Å—Ç–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ OpenAI API - –£–õ–£–ß–®–ï–ù–û
  Future<Map<String, dynamic>> testOpenAIConnection() async {
    _lastAIRequestTime = DateTime.now();

    if (!_isOpenAIConfigured()) {
      _lastAIRequestSuccessful = false;
      _lastAIError = 'OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω';
      return {
        'success': false,
        'error': 'API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç',
        'configured': false,
      };
    }

    try {
      debugPrint('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º OpenAI —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...');

      final requestBody = {
        'model': 'gpt-3.5-turbo',
        'messages': [
          {
            'role': 'user',
            'content':
                '–û—Ç–≤–µ—Ç—å –æ–¥–Ω–æ–π –∫–æ—Ä–æ—Ç–∫–æ–π —Ñ—Ä–∞–∑–æ–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º: "API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"',
          },
        ],
        'max_tokens': 20, // –î–ª—è —Ç–µ—Å—Ç–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
        'temperature': 0.1, // –ù–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
      };

      debugPrint('üîç Request body: ${json.encode(requestBody)}');

      final response = await http
          .post(
            Uri.parse('https://api.openai.com/v1/chat/completions'),
            headers: {
              'Authorization': 'Bearer ${ApiKeys.openAIKey}',
              'Content-Type': 'application/json; charset=utf-8',
              'Accept': 'application/json',
              'Accept-Charset': 'utf-8',
            },
            body: json.encode(requestBody),
          )
          .timeout(const Duration(seconds: 30));

      debugPrint('üåê OpenAI –æ—Ç–≤–µ—Ç: —Å—Ç–∞—Ç—É—Å ${response.statusCode}');
      debugPrint('üîç Response headers: ${response.headers}');

      if (response.statusCode == 200) {
        // –ü—Ä–∞–≤–∏–ª—å–Ω–æ –¥–µ–∫–æ–¥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        final decodedBody = utf8.decode(response.bodyBytes);
        debugPrint('üîç Decoded response body: $decodedBody');

        final data = json.decode(decodedBody);
        final answer =
            data['choices'][0]['message']['content'].toString().trim();
        final finishReason = data['choices'][0]['finish_reason'];

        debugPrint('üîç Final answer: $answer');
        debugPrint('üîç Finish reason: $finishReason');

        _lastAIRequestSuccessful = true;
        _lastAIError = '';

        return {
          'success': true,
          'status': response.statusCode,
          'model': data['model'] ?? 'unknown',
          'response': answer,
          'finish_reason': finishReason,
          'configured': true,
          'response_time':
              DateTime.now().difference(_lastAIRequestTime!).inMilliseconds,
        };
      } else {
        final decodedBody = utf8.decode(response.bodyBytes);
        final errorData = json.decode(decodedBody);
        _lastAIRequestSuccessful = false;
        _lastAIError =
            'HTTP ${response.statusCode}: ${errorData['error']?['message'] ?? 'Unknown error'}';

        return {
          'success': false,
          'status': response.statusCode,
          'error': _lastAIError,
          'configured': true,
        };
      }
    } catch (e) {
      _lastAIRequestSuccessful = false;
      _lastAIError = e.toString();

      debugPrint('‚ùå OpenAI —Ç–µ—Å—Ç –æ—à–∏–±–∫–∞: $e');
      return {'success': false, 'error': e.toString(), 'configured': true};
    }
  }

  /// –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
  Future<Map<String, dynamic>> _collectUserData(
    List<FishingNoteModel>? userHistory,
    double latitude,
    double longitude,
  ) async {
    debugPrint('üìä –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');

    if (userHistory == null || userHistory.isEmpty) {
      return {
        'has_data': false,
        'total_trips': 0,
        'success_rate': 0.0,
        'preferred_types': <String>[],
        'successful_conditions': <Map<String, dynamic>>[],
        'location_familiarity': 0.0,
      };
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    final successfulTrips =
        userHistory
            .where(
              (note) =>
                  note.biteRecords.isNotEmpty &&
                  note.biteRecords.any((bite) => bite.weight > 0),
            )
            .toList();

    // –ù–∞–π–¥–µ–º –ø–æ–µ–∑–¥–∫–∏ —Ä—è–¥–æ–º —Å —Ç–µ–∫—É—â–∏–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º
    final locationTrips =
        userHistory.where((note) {
          return _calculateDistance(
                note.latitude,
                note.longitude,
                latitude,
                longitude,
              ) <
              50; // –í —Ä–∞–¥–∏—É—Å–µ 50 –∫–º
        }).toList();

    // –ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
    final successfulConditions = <Map<String, dynamic>>[];
    for (final trip in successfulTrips) {
      successfulConditions.add({
        'fishing_type': trip.fishingType,
        'time_of_day': trip.date.hour,
        'season': _getSeason(trip.date),
        'catch_weight': trip.biteRecords.fold(
          0.0,
          (sum, bite) => sum + bite.weight,
        ),
        'bite_count': trip.biteRecords.length,
        'duration_hours': trip.endDate?.difference(trip.date).inHours ?? 8,
      });
    }

    // –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–µ —Ç–∏–ø—ã —Ä—ã–±–∞–ª–∫–∏
    final typeFrequency = <String, int>{};
    for (final trip in userHistory) {
      typeFrequency[trip.fishingType] =
          (typeFrequency[trip.fishingType] ?? 0) + 1;
    }

    final preferredTypes =
        typeFrequency.entries.toList()
          ..sort((a, b) => b.value.compareTo(a.value));

    return {
      'has_data': true,
      'total_trips': userHistory.length,
      'successful_trips': successfulTrips.length,
      'success_rate': successfulTrips.length / userHistory.length,
      'preferred_types': preferredTypes.take(3).map((e) => e.key).toList(),
      'successful_conditions': successfulConditions,
      'location_familiarity': locationTrips.length / userHistory.length,
      'avg_trip_duration':
          userHistory
              .map((trip) => trip.endDate?.difference(trip.date).inHours ?? 0)
              .where((duration) => duration > 0)
              .fold(0.0, (sum, duration) => sum + duration) /
          userHistory.length,
      'favorite_seasons': _analyzeFavoriteSeasons(userHistory),
      'best_times': _analyzeBestTimes(successfulTrips),
    };
  }

  /// –ê–Ω–∞–ª–∏–∑ –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π (–ª–æ–∫–∞–ª—å–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º)
  Map<String, dynamic> _analyzeWeatherConditions(WeatherApiResponse weather) {
    final current = weather.current;
    double suitability = 50.0; // –ë–∞–∑–æ–≤—ã–π —Å–∫–æ—Ä

    // –ê–Ω–∞–ª–∏–∑ –¥–∞–≤–ª–µ–Ω–∏—è
    final pressure = current.pressureMb;
    if (pressure >= 1010 && pressure <= 1025) {
      suitability += 20; // –ò–¥–µ–∞–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ
    } else if (pressure < 1000 || pressure > 1030) {
      suitability -= 15; // –ü–ª–æ—Ö–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ
    }

    // –ê–Ω–∞–ª–∏–∑ –≤–µ—Ç—Ä–∞
    final windKph = current.windKph;
    if (windKph <= 15) {
      suitability += 15; // –û—Ç–ª–∏—á–Ω—ã–π –≤–µ—Ç–µ—Ä
    } else if (windKph <= 25) {
      suitability += 5; // –•–æ—Ä–æ—à–∏–π –≤–µ—Ç–µ—Ä
    } else if (windKph > 35) {
      suitability -= 20; // –°–∏–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä
    }

    // –ê–Ω–∞–ª–∏–∑ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
    final temp = current.tempC;
    if (temp >= 15 && temp <= 25) {
      suitability += 10; // –ö–æ–º—Ñ–æ—Ä—Ç–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
    } else if (temp < 5 || temp > 35) {
      suitability -= 10; // –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
    }

    // –ê–Ω–∞–ª–∏–∑ –æ–±–ª–∞—á–Ω–æ—Å—Ç–∏
    final clouds = current.cloud;
    if (clouds >= 30 && clouds <= 70) {
      suitability += 5; // –•–æ—Ä–æ—à–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å
    } else if (clouds == 0) {
      suitability -= 5; // –°–ª–∏—à–∫–æ–º —è—Ä–∫–æ
    }

    // –ê–Ω–∞–ª–∏–∑ —Ñ–∞–∑—ã –ª—É–Ω—ã
    String moonImpact = 'neutral';
    if (weather.forecast.isNotEmpty) {
      final moonPhase = weather.forecast.first.astro.moonPhase.toLowerCase();
      if (moonPhase.contains('new') || moonPhase.contains('full')) {
        suitability += 10;
        moonImpact = 'positive';
      }
    }

    return {
      'overall_suitability': suitability.clamp(0.0, 100.0),
      'pressure_impact': _getPressureImpact(pressure),
      'wind_impact': _getWindImpact(windKph),
      'temperature_impact': _getTemperatureImpact(temp),
      'moon_impact': moonImpact,
      'best_hours': _calculateBestHours(current.isDay == 1),
      'confidence': 0.8,
    };
  }

  /// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Ä—ã–±–∞–ª–∫–∏
  Map<String, AIBitePrediction> _generatePredictionsForAllTypes({
    required WeatherApiResponse weather,
    required Map<String, dynamic> userData,
    required Map<String, dynamic> weatherAnalysis,
    required double latitude,
    required double longitude,
    required DateTime targetDate,
    required bool useAI,
  }) {
    final predictions = <String, AIBitePrediction>{};
    final current = weather.current;

    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ç–∏–ø–æ–≤ —Ä—ã–±–∞–ª–∫–∏ —Å –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    final fishingTypes = {
      'spinning': {
        'name': '–°–ø–∏–Ω–Ω–∏–Ω–≥',
        'wind_tolerance': 25.0, // –∫–º/—á
        'temp_optimal_min': 8.0,
        'temp_optimal_max': 25.0,
        'pressure_sensitivity': 0.8,
        'season_bonus': _getSeasonBonus('spinning', _getSeason(targetDate)),
        'base_score': 45.0, // –†–∞–∑–Ω—ã–π –±–∞–∑–æ–≤—ã–π —Å–∫–æ—Ä
      },
      'feeder': {
        'name': '–§–∏–¥–µ—Ä',
        'wind_tolerance': 20.0,
        'temp_optimal_min': 12.0,
        'temp_optimal_max': 28.0,
        'pressure_sensitivity': 0.9,
        'season_bonus': _getSeasonBonus('feeder', _getSeason(targetDate)),
        'base_score': 50.0,
      },
      'carp_fishing': {
        'name': '–ö–∞—Ä–ø–æ–≤–∞—è —Ä—ã–±–∞–ª–∫–∞',
        'wind_tolerance': 15.0,
        'temp_optimal_min': 15.0,
        'temp_optimal_max': 30.0,
        'pressure_sensitivity': 1.0,
        'season_bonus': _getSeasonBonus('carp_fishing', _getSeason(targetDate)),
        'base_score': 40.0,
      },
      'float_fishing': {
        'name': '–ü–æ–ø–ª–∞–≤–æ—á–Ω–∞—è —Ä—ã–±–∞–ª–∫–∞',
        'wind_tolerance': 10.0,
        'temp_optimal_min': 8.0,
        'temp_optimal_max': 25.0,
        'pressure_sensitivity': 0.7,
        'season_bonus': _getSeasonBonus(
          'float_fishing',
          _getSeason(targetDate),
        ),
        'base_score': 55.0,
      },
      'ice_fishing': {
        'name': '–ó–∏–º–Ω—è—è —Ä—ã–±–∞–ª–∫–∞',
        'wind_tolerance': 30.0,
        'temp_optimal_min': -15.0,
        'temp_optimal_max': 5.0,
        'pressure_sensitivity': 1.2,
        'season_bonus': _getSeasonBonus('ice_fishing', _getSeason(targetDate)),
        'base_score':
            current.tempC <= 0
                ? 60.0
                : 10.0, // –ö–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ —Ä–∞–∑–Ω—ã–µ —Å–∫–æ—Ä—ã –∑–∏–º–æ–π –∏ –ª–µ—Ç–æ–º
      },
      'fly_fishing': {
        'name': '–ù–∞—Ö–ª—ã—Å—Ç',
        'wind_tolerance': 8.0,
        'temp_optimal_min': 10.0,
        'temp_optimal_max': 22.0,
        'pressure_sensitivity': 0.6,
        'season_bonus': _getSeasonBonus('fly_fishing', _getSeason(targetDate)),
        'base_score': 35.0,
      },
      'trolling': {
        'name': '–¢—Ä–æ–ª–ª–∏–Ω–≥',
        'wind_tolerance': 35.0,
        'temp_optimal_min': 5.0,
        'temp_optimal_max': 30.0,
        'pressure_sensitivity': 0.5,
        'season_bonus': _getSeasonBonus('trolling', _getSeason(targetDate)),
        'base_score': 42.0,
      },
    };

    debugPrint(
      'üé£ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã –¥–ª—è ${fishingTypes.length} —Ç–∏–ø–æ–≤ —Ä—ã–±–∞–ª–∫–∏...',
    );

    for (final entry in fishingTypes.entries) {
      final type = entry.key;
      final config = entry.value;

      predictions[type] = _generatePredictionForType(
        type,
        config,
        weather,
        userData,
        weatherAnalysis,
        useAI,
      );

      debugPrint('üìä $type: ${predictions[type]!.overallScore} –±–∞–ª–ª–æ–≤');
    }

    return predictions;
  }

  /// –ü–æ–ª—É—á–∞–µ–º —Å–µ–∑–æ–Ω–Ω—ã–π –±–æ–Ω—É—Å –¥–ª—è —Ç–∏–ø–∞ —Ä—ã–±–∞–ª–∫–∏
  double _getSeasonBonus(String fishingType, String season) {
    const seasonBonuses = {
      'spinning': {
        'spring': 15.0,
        'summer': 10.0,
        'autumn': 20.0,
        'winter': -10.0,
      },
      'feeder': {
        'spring': 10.0,
        'summer': 15.0,
        'autumn': 10.0,
        'winter': -15.0,
      },
      'carp_fishing': {
        'spring': 5.0,
        'summer': 20.0,
        'autumn': 10.0,
        'winter': -25.0,
      },
      'float_fishing': {
        'spring': 20.0,
        'summer': 15.0,
        'autumn': 10.0,
        'winter': -5.0,
      },
      'ice_fishing': {
        'spring': -30.0,
        'summer': -40.0,
        'autumn': -20.0,
        'winter': 30.0,
      },
      'fly_fishing': {
        'spring': 20.0,
        'summer': 10.0,
        'autumn': 15.0,
        'winter': -20.0,
      },
      'trolling': {
        'spring': 10.0,
        'summer': 15.0,
        'autumn': 5.0,
        'winter': -10.0,
      },
    };

    return seasonBonuses[fishingType]?[season] ?? 0.0;
  }

  /// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ —Ä—ã–±–∞–ª–∫–∏
  AIBitePrediction _generatePredictionForType(
    String fishingType,
    Map<String, dynamic> config,
    WeatherApiResponse weather,
    Map<String, dynamic> userData,
    Map<String, dynamic> weatherAnalysis,
    bool useAI,
  ) {
    // –ù–∞—á–∏–Ω–∞–µ–º —Å –±–∞–∑–æ–≤–æ–≥–æ —Å–∫–æ—Ä–∞ –¥–ª—è —Ç–∏–ø–∞
    double score = config['base_score'] as double;
    final factors = <BiteFactorAnalysis>[];
    final tips = <String>[];

    debugPrint('üéØ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º $fishingType, –±–∞–∑–æ–≤—ã–π —Å–∫–æ—Ä: $score');

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–µ–∑–æ–Ω–Ω—ã–π –±–æ–Ω—É—Å
    final seasonBonus = config['season_bonus'] as double;
    score += seasonBonus;
    if (seasonBonus != 0) {
      factors.add(
        BiteFactorAnalysis(
          name: '–°–µ–∑–æ–Ω',
          value: _getSeason(DateTime.now()),
          impact: seasonBonus.round(),
          weight: 0.9,
          description:
              seasonBonus > 0
                  ? '–ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π —Å–µ–∑–æ–Ω –¥–ª—è ${config['name']}'
                  : '–ù–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π —Å–µ–∑–æ–Ω',
          isPositive: seasonBonus > 0,
        ),
      );
    }

    // –ê–Ω–∞–ª–∏–∑ –≤–µ—Ç—Ä–∞ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —à—Ç—Ä–∞—Ñ–∞–º–∏
    final windKph = weather.current.windKph;
    final windTolerance = config['wind_tolerance'] as double;
    if (windKph <= windTolerance) {
      final windBonus = windKph <= windTolerance * 0.5 ? 15.0 : 10.0;
      score += windBonus;
      factors.add(
        BiteFactorAnalysis(
          name: '–í–µ—Ç–µ—Ä',
          value: '${windKph.round()} –∫–º/—á',
          impact: windBonus.round(),
          weight: 0.8,
          description: '–ü–æ–¥—Ö–æ–¥—è—â–∏–π –≤–µ—Ç–µ—Ä –¥–ª—è ${config['name']}',
          isPositive: true,
        ),
      );
    } else {
      final excess = windKph - windTolerance;
      final windPenalty =
          -math.min(excess * 2, 30.0); // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —à—Ç—Ä–∞—Ñ 30 –±–∞–ª–ª–æ–≤
      score += windPenalty;
      factors.add(
        BiteFactorAnalysis(
          name: '–í–µ—Ç–µ—Ä',
          value: '${windKph.round()} –∫–º/—á',
          impact: windPenalty.round(),
          weight: 0.8,
          description: '–°–ª–∏—à–∫–æ–º —Å–∏–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä –¥–ª—è ${config['name']}',
          isPositive: false,
        ),
      );
      tips.add('–ü—Ä–∏ —Å–∏–ª—å–Ω–æ–º –≤–µ—Ç—Ä–µ –∏—â–∏—Ç–µ –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ –º–µ—Å—Ç–∞');
    }

    // –ê–Ω–∞–ª–∏–∑ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —Å —á–µ—Ç–∫–∏–º–∏ –≥—Ä–∞–Ω–∏—Ü–∞–º–∏
    final temp = weather.current.tempC;
    final tempMin = config['temp_optimal_min'] as double;
    final tempMax = config['temp_optimal_max'] as double;

    if (temp >= tempMin && temp <= tempMax) {
      final tempBonus = 15.0;
      score += tempBonus;
      factors.add(
        BiteFactorAnalysis(
          name: '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞',
          value: '${temp.round()}¬∞C',
          impact: tempBonus.round(),
          weight: 0.7,
          description: '–û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è ${config['name']}',
          isPositive: true,
        ),
      );
    } else {
      double tempPenalty;
      if (temp < tempMin) {
        tempPenalty = -math.min((tempMin - temp) * 3, 25.0);
      } else {
        tempPenalty = -math.min((temp - tempMax) * 2, 20.0);
      }
      score += tempPenalty;
      factors.add(
        BiteFactorAnalysis(
          name: '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞',
          value: '${temp.round()}¬∞C',
          impact: tempPenalty.round(),
          weight: 0.7,
          description:
              temp < tempMin
                  ? '–°–ª–∏—à–∫–æ–º —Ö–æ–ª–æ–¥–Ω–æ –¥–ª—è ${config['name']}'
                  : '–°–ª–∏—à–∫–æ–º –∂–∞—Ä–∫–æ',
          isPositive: false,
        ),
      );

      if (temp < tempMin) {
        tips.add('–í —Ö–æ–ª–æ–¥–Ω—É—é –ø–æ–≥–æ–¥—É —Ä—ã–±–∞ –º–µ–Ω–µ–µ –∞–∫—Ç–∏–≤–Ω–∞ - –∑–∞–º–µ–¥–ª–∏—Ç–µ –ø—Ä–æ–≤–æ–¥–∫—É');
      } else {
        tips.add('–í –∂–∞—Ä–∫—É—é –ø–æ–≥–æ–¥—É —Ä—ã–±–∞ —É—Ö–æ–¥–∏—Ç –Ω–∞ –≥–ª—É–±–∏–Ω—É');
      }
    }

    // –ê–Ω–∞–ª–∏–∑ –¥–∞–≤–ª–µ–Ω–∏—è
    final pressure = weather.current.pressureMb;
    final pressureSensitivity = config['pressure_sensitivity'] as double;
    if (pressure >= 1010 && pressure <= 1025) {
      final pressureBonus = 12 * pressureSensitivity;
      score += pressureBonus;
      factors.add(
        BiteFactorAnalysis(
          name: '–ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ',
          value: '${pressure.round()} –º–±',
          impact: pressureBonus.round(),
          weight: pressureSensitivity,
          description: '–°—Ç–∞–±–∏–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ —Å–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç –∫–ª–µ–≤—É',
          isPositive: true,
        ),
      );
    } else {
      final pressurePenalty =
          pressure < 1000
              ? -18 * pressureSensitivity
              : -12 * pressureSensitivity;
      score += pressurePenalty;
      factors.add(
        BiteFactorAnalysis(
          name: '–ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ',
          value: '${pressure.round()} –º–±',
          impact: pressurePenalty.round(),
          weight: pressureSensitivity,
          description:
              pressure < 1000
                  ? '–ù–∏–∑–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ —Å–Ω–∏–∂–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å'
                  : '–í—ã—Å–æ–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ',
          isPositive: false,
        ),
      );
      tips.add('–ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–≤–ª–µ–Ω–∏—è —Ä—ã–±–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–∞—Å—Å–∏–≤–Ω–æ–π');
    }

    // –£—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    if (userData['has_data'] == true) {
      final preferredTypes = userData['preferred_types'] as List<dynamic>;
      if (preferredTypes.contains(fishingType)) {
        score += 8;
        factors.add(
          BiteFactorAnalysis(
            name: '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è',
            value: '–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π —Ç–∏–ø',
            impact: 8,
            weight: 0.6,
            description: '–í—ã —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —ç—Ç–æ—Ç —Ç–∏–ø —Ä—ã–±–∞–ª–∫–∏',
            isPositive: true,
          ),
        );
      }
    }

    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –∑–∏–º–Ω–µ–π —Ä—ã–±–∞–ª–∫–∏
    if (fishingType == 'ice_fishing') {
      if (temp > 5) {
        score = math.min(score, 15.0); // –ú–∞–∫—Å–∏–º—É–º 15 –±–∞–ª–ª–æ–≤ –ª–µ—Ç–æ–º
        tips.add('–ó–∏–º–Ω—è—è —Ä—ã–±–∞–ª–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞ –ø—Ä–∏ –ø–ª—é—Å–æ–≤–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ');
      }
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫–Ω–∞
    final timeWindows = _generateTimeWindows(weather, fishingType);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã
    tips.addAll(_generateTipsForType(fishingType, weather));

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å–∫–æ—Ä
    score = score.clamp(0.0, 100.0);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    final activityLevel = _determineActivityLevel(score);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
    final recommendation = _generateRecommendation(fishingType, score, factors);

    debugPrint('‚úÖ $fishingType: —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫–æ—Ä $score');

    return AIBitePrediction(
      overallScore: score.round(),
      activityLevel: activityLevel,
      confidence: useAI ? 0.9 : 0.8,
      recommendation: recommendation,
      detailedAnalysis: _generateDetailedAnalysis(
        fishingType,
        factors,
        weather,
      ),
      factors: factors,
      bestTimeWindows: timeWindows,
      tips: tips,
      generatedAt: DateTime.now(),
      dataSource: useAI ? 'enhanced_ai' : 'local_algorithm',
      modelVersion: useAI ? '2.1.0-ai' : '2.0.0-local',
    );
  }

  /// –£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ —Å –ø–æ–º–æ—â—å—é OpenAI - –ò–°–ü–†–ê–í–õ–ï–ù–û
  Future<bool> _enhanceWithOpenAI(
    Map<String, AIBitePrediction> predictions,
    WeatherApiResponse weather,
    Map<String, dynamic> userData,
  ) async {
    if (!_isOpenAIConfigured()) {
      debugPrint('üö´ OpenAI –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–ª—É—á—à–µ–Ω–∏–µ');
      return false;
    }

    _lastAIRequestTime = DateTime.now();

    try {
      debugPrint('üß† –£–ª—É—á—à–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ —Å –ø–æ–º–æ—â—å—é OpenAI...');

      final prompt = _buildOpenAIPrompt(predictions, weather, userData);

      final requestBody = {
        'model': 'gpt-3.5-turbo',
        'messages': [
          {
            'role': 'system',
            'content':
                '–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ä—ã–±–∞–ª–∫–µ. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —É—Å–ª–æ–≤–∏—è –∏ –¥–∞–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.',
          },
          {'role': 'user', 'content': prompt},
        ],
        'max_tokens': 300, // –£–í–ï–õ–ò–ß–ï–ù–û —Å 200 –¥–æ 300
        'temperature': 0.6, // –£–í–ï–õ–ò–ß–ï–ù–û —Å 0.3 –¥–æ 0.6
      };

      debugPrint('üîç Request body: ${json.encode(requestBody)}');

      final response = await http
          .post(
            Uri.parse('https://api.openai.com/v1/chat/completions'),
            headers: {
              'Authorization': 'Bearer ${ApiKeys.openAIKey}',
              'Content-Type': 'application/json; charset=utf-8',
              'Accept': 'application/json',
              'Accept-Charset': 'utf-8',
            },
            body: json.encode(requestBody),
          )
          .timeout(const Duration(seconds: 30)); // –£–í–ï–õ–ò–ß–ï–ù–û —Ç–∞–π–º–∞—É—Ç

      debugPrint('üåê OpenAI –æ—Ç–≤–µ—Ç: —Å—Ç–∞—Ç—É—Å ${response.statusCode}');

      if (response.statusCode == 200) {
        // –ü—Ä–∞–≤–∏–ª—å–Ω–æ –¥–µ–∫–æ–¥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        final decodedBody = utf8.decode(response.bodyBytes);
        final data = json.decode(decodedBody);
        final aiResponse = data['choices'][0]['message']['content'] as String;
        final finishReason = data['choices'][0]['finish_reason'];

        debugPrint('üîç AI response: $aiResponse');
        debugPrint('üîç Finish reason: $finishReason');

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç AI –∏ —É–ª—É—á—à–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã
        _processAIResponse(predictions, aiResponse, weather);

        _lastAIRequestSuccessful = true;
        _lastAIError = '';

        debugPrint('‚úÖ OpenAI —É–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
        return true;
      } else {
        final decodedBody = utf8.decode(response.bodyBytes);
        final errorData = json.decode(decodedBody);
        _lastAIRequestSuccessful = false;
        _lastAIError =
            'HTTP ${response.statusCode}: ${errorData['error']?['message'] ?? 'Unknown error'}';

        debugPrint('‚ùå OpenAI –æ—à–∏–±–∫–∞: $_lastAIError');
        return false;
      }
    } catch (e) {
      _lastAIRequestSuccessful = false;
      _lastAIError = e.toString();

      debugPrint('‚ùå OpenAI –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: $e');
      return false;
    }
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI –∏ —É–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ - –£–õ–£–ß–®–ï–ù–û
  void _processAIResponse(
    Map<String, AIBitePrediction> predictions,
    String aiResponse,
    WeatherApiResponse weather,
  ) {
    try {
      debugPrint('üîç Processing AI response: $aiResponse');

      // –î–æ–±–∞–≤–ª—è–µ–º AI —Å–æ–≤–µ—Ç—ã –∫ –ª—É—á—à–µ–º—É –ø—Ä–æ–≥–Ω–æ–∑—É
      final bestType =
          predictions.entries
              .reduce(
                (a, b) => a.value.overallScore > b.value.overallScore ? a : b,
              )
              .key;

      if (predictions[bestType] != null) {
        final enhanced = predictions[bestType]!;

        // –£–õ–£–ß–®–ï–ù–û: –ë–æ–ª–µ–µ –∞–∫–∫—É—Ä–∞—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
        final cleanResponse = aiResponse.trim();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ –ø—É—Å—Ç–æ–π –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–π
        if (cleanResponse.isNotEmpty && cleanResponse.length > 10) {
          // –†–∞–∑–±–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
          final aiTips =
              cleanResponse
                  .split(RegExp(r'[.!]\s+'))
                  .map((tip) => tip.trim())
                  .where((tip) => tip.isNotEmpty && tip.length > 5)
                  .take(3) // –ú–∞–∫—Å–∏–º—É–º 3 —Å–æ–≤–µ—Ç–∞
                  .toList();

          if (aiTips.isNotEmpty) {
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Å–æ–≤–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ
            for (int i = 0; i < aiTips.length; i++) {
              enhanced.tips.insert(i, 'üß† –ò–ò —Å–æ–≤–µ—Ç ${i + 1}: ${aiTips[i]}');
            }
          } else {
            // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–∏—Ç—å, –¥–æ–±–∞–≤–ª—è–µ–º –≤–µ—Å—å –æ—Ç–≤–µ—Ç
            enhanced.tips.insert(0, 'üß† –ò–ò –∞–Ω–∞–ª–∏–∑: $cleanResponse');
          }

          debugPrint('‚ú® AI —Å–æ–≤–µ—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫ –ø—Ä–æ–≥–Ω–æ–∑—É $bestType');
        }
      }
    } catch (e) {
      debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ AI –æ—Ç–≤–µ—Ç–∞: $e');
      // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–π —Å–æ–≤–µ—Ç, –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å
      final bestType =
          predictions.entries
              .reduce(
                (a, b) => a.value.overallScore > b.value.overallScore ? a : b,
              )
              .key;

      if (predictions[bestType] != null) {
        predictions[bestType]!.tips.insert(
          0,
          'üß† –ê–Ω–∞–ª–∏–∑ —É–ª—É—á—à–µ–Ω –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º',
        );
      }
    }
  }

  /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
  void _updateDataSource(
    Map<String, AIBitePrediction> predictions,
    String dataSource,
  ) {
    for (final prediction in predictions.values) {
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è —á–µ—Ä–µ–∑ reflection –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
      // –ü–æ—Å–∫–æ–ª—å–∫—É AIBitePrediction immutable, –æ–±–Ω–æ–≤–ª—è–µ–º —á–µ—Ä–µ–∑ tips
      if (dataSource == 'enhanced_ai') {
        if (!prediction.tips.any((tip) => tip.contains('üß† –ò–ò'))) {
          prediction.tips.insert(
            0,
            'üß† –ê–Ω–∞–ª–∏–∑ —É–ª—É—á—à–µ–Ω –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º',
          );
        }
      }
    }
  }

  /// –°–æ–∑–¥–∞–Ω–∏–µ –º—É–ª—å—Ç–∏—Ç–∏–ø–æ–≤–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞
  MultiFishingTypePrediction _createMultiPrediction(
    Map<String, AIBitePrediction> predictions,
    List<String>? preferredTypes,
    WeatherApiResponse weather,
    bool aiEnhanced,
  ) {
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å–∫–æ—Ä—É
    final sortedPredictions =
        predictions.entries.toList()..sort(
          (a, b) => b.value.overallScore.compareTo(a.value.overallScore),
        );

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª—É—á—à–∏–π —Ç–∏–ø —Å —É—á–µ—Ç–æ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    String bestType = sortedPredictions.first.key;

    if (preferredTypes != null && preferredTypes.isNotEmpty) {
      for (final preferred in preferredTypes) {
        if (predictions.containsKey(preferred) &&
            predictions[preferred]!.overallScore >= 40) {
          bestType = preferred;
          break;
        }
      }
    }

    // –°–æ–∑–¥–∞–µ–º —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    final comparison = _createComparisonAnalysis(predictions);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    final generalRecommendations = _generateGeneralRecommendations(
      predictions,
      bestType,
      aiEnhanced,
    );

    debugPrint(
      'üèÜ –õ—É—á—à–∏–π —Ç–∏–ø —Ä—ã–±–∞–ª–∫–∏: $bestType (${predictions[bestType]!.overallScore} –±–∞–ª–ª–æ–≤)',
    );

    return MultiFishingTypePrediction(
      bestFishingType: bestType,
      bestPrediction: predictions[bestType]!,
      allPredictions: predictions,
      comparison: comparison,
      generalRecommendations: generalRecommendations,
      weatherSummary: _createWeatherSummary(weather),
      generatedAt: DateTime.now(),
    );
  }

  // –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...

  String _getPressureImpact(double pressure) {
    if (pressure >= 1010 && pressure <= 1025) return 'positive';
    if (pressure < 1000 || pressure > 1030) return 'negative';
    return 'neutral';
  }

  String _getWindImpact(double windKph) {
    if (windKph <= 15) return 'positive';
    if (windKph <= 25) return 'neutral';
    return 'negative';
  }

  String _getTemperatureImpact(double temp) {
    if (temp >= 15 && temp <= 25) return 'positive';
    if (temp < 5 || temp > 35) return 'negative';
    return 'neutral';
  }

  List<String> _calculateBestHours(bool isDay) {
    if (isDay) {
      return ['06:00-08:00', '18:00-20:00'];
    } else {
      return ['20:00-22:00', '05:00-07:00'];
    }
  }

  List<OptimalTimeWindow> _generateTimeWindows(
    WeatherApiResponse weather,
    String fishingType,
  ) {
    final now = DateTime.now();
    final windows = <OptimalTimeWindow>[];

    // –£—Ç—Ä–µ–Ω–Ω–µ–µ –æ–∫–Ω–æ
    windows.add(
      OptimalTimeWindow(
        startTime: now.copyWith(hour: 6, minute: 0),
        endTime: now.copyWith(hour: 8, minute: 30),
        activity: 0.85,
        reason: '–£—Ç—Ä–µ–Ω–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä—ã–±—ã',
        recommendations: ['–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–º–∞–Ω–∫–∏'],
      ),
    );

    // –í–µ—á–µ—Ä–Ω–µ–µ –æ–∫–Ω–æ
    windows.add(
      OptimalTimeWindow(
        startTime: now.copyWith(hour: 18, minute: 0),
        endTime: now.copyWith(hour: 20, minute: 30),
        activity: 0.9,
        reason: '–í–µ—á–µ—Ä–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä—ã–±—ã',
        recommendations: ['–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω—ã–µ –ø—Ä–∏–º–∞–Ω–∫–∏'],
      ),
    );

    return windows;
  }

  List<String> _generateTipsForType(
    String fishingType,
    WeatherApiResponse weather,
  ) {
    final tips = <String>[];

    switch (fishingType) {
      case 'spinning':
        tips.add('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —è—Ä–∫–∏–µ –ø—Ä–∏–º–∞–Ω–∫–∏ –≤ –ø–∞—Å–º—É—Ä–Ω—É—é –ø–æ–≥–æ–¥—É');
        if (weather.current.windKph > 20) {
          tips.add('–ü—Ä–∏ —Å–∏–ª—å–Ω–æ–º –≤–µ—Ç—Ä–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–ª–µ–µ —Ç—è–∂–µ–ª—ã–µ –ø—Ä–∏–º–∞–Ω–∫–∏');
        }
        break;
      case 'feeder':
        tips.add('–ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∫–æ—Ä–º—É—à–∫—É –∫–∞–∂–¥—ã–µ 15-20 –º–∏–Ω—É—Ç');
        tips.add('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞—Ä–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø—Ä–∏–∫–æ—Ä–º–∫—É');
        break;
      case 'carp_fishing':
        tips.add('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–π–ª—ã –∏ PVA-–ø–∞–∫–µ—Ç—ã');
        tips.add('–õ–æ–≤–∏—Ç–µ –≤ —Ç–∏—Ö–∏—Ö –º–µ—Å—Ç–∞—Ö —Å –º–µ–¥–ª–µ–Ω–Ω—ã–º —Ç–µ—á–µ–Ω–∏–µ–º');
        break;
      case 'float_fishing':
        tips.add('–°–ª–µ–¥–∏—Ç–µ –∑–∞ –ø–æ–ø–ª–∞–≤–∫–æ–º –∏ –¥–µ–ª–∞–π—Ç–µ –±—ã—Å—Ç—Ä—É—é –ø–æ–¥—Å–µ—á–∫—É');
        if (weather.current.windKph < 10) {
          tips.add('–û—Ç–ª–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ç–æ—á–Ω–æ–π –ø—Ä–æ–≤–æ–¥–∫–∏');
        }
        break;
      case 'ice_fishing':
        tips.add('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–æ—Ä–º—ã—à–∫–∏ –∏ –±–ª–µ—Å–Ω—ã');
        tips.add('–°–≤–µ—Ä–ª–∏—Ç–µ –ª—É–Ω–∫–∏ –Ω–∞ —Ä–∞–∑–Ω–æ–π –≥–ª—É–±–∏–Ω–µ');
        break;
      case 'fly_fishing':
        tips.add('–°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –≤–µ—Ç—Ä–∞ –ø—Ä–∏ –∑–∞–±—Ä–æ—Å–µ');
        tips.add('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—É—Ö–∏–µ –º—É—à–∫–∏ –≤ —Ç–µ–ø–ª—É—é –ø–æ–≥–æ–¥—É');
        break;
      case 'trolling':
        tips.add('–ú–µ–Ω—è–π—Ç–µ —Å–∫–æ—Ä–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è –ª–æ–¥–∫–∏');
        tips.add('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–æ–±–ª–µ—Ä—ã —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤');
        break;
    }

    return tips;
  }

  ActivityLevel _determineActivityLevel(double score) {
    if (score >= 80) return ActivityLevel.excellent;
    if (score >= 60) return ActivityLevel.good;
    if (score >= 40) return ActivityLevel.moderate;
    if (score >= 20) return ActivityLevel.poor;
    return ActivityLevel.veryPoor;
  }

  String _generateRecommendation(
    String fishingType,
    double score,
    List<BiteFactorAnalysis> factors,
  ) {
    if (score >= 80) {
      return '–û—Ç–ª–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è ${_getFishingTypeName(fishingType)}! –°–∞–º–æ–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –Ω–∞ —Ä—ã–±–∞–ª–∫—É.';
    } else if (score >= 60) {
      return '–•–æ—Ä–æ—à–∏–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è ${_getFishingTypeName(fishingType)}. –°—Ç–æ–∏—Ç –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å!';
    } else if (score >= 40) {
      return '–°—Ä–µ–¥–Ω–∏–µ —É—Å–ª–æ–≤–∏—è. ${_getFishingTypeName(fishingType)} –º–æ–∂–µ—Ç –ø—Ä–∏–Ω–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.';
    } else {
      return '–°–ª–æ–∂–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ä—ã–±–∞–ª–∫–∏. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–¥–æ–∂–¥–∞—Ç—å —É–ª—É—á—à–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã.';
    }
  }

  String _generateDetailedAnalysis(
    String fishingType,
    List<BiteFactorAnalysis> factors,
    WeatherApiResponse weather,
  ) {
    final analysis = StringBuffer();
    analysis.write('–ê–Ω–∞–ª–∏–∑ —É—Å–ª–æ–≤–∏–π –¥–ª—è ${_getFishingTypeName(fishingType)}: ');

    final positiveFactors = factors.where((f) => f.isPositive).length;
    final negativeFactors = factors.where((f) => !f.isPositive).length;

    if (positiveFactors > negativeFactors) {
      analysis.write('–ü—Ä–µ–æ–±–ª–∞–¥–∞—é—Ç –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã. ');
    } else if (negativeFactors > positiveFactors) {
      analysis.write(
        '–ï—Å—Ç—å –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–Ω–∏–∑–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä—ã–±—ã. ',
      );
    } else {
      analysis.write('–°–º–µ—à–∞–Ω–Ω—ã–µ —É—Å–ª–æ–≤–∏—è - —É—Å–ø–µ—Ö –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–µ—Ö–Ω–∏–∫–∏ –∏ –æ–ø—ã—Ç–∞. ');
    }

    analysis.write('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞ ${weather.current.tempC.round()}¬∞C, ');
    analysis.write('–¥–∞–≤–ª–µ–Ω–∏–µ ${weather.current.pressureMb.round()} –º–±, ');
    analysis.write('–≤–µ—Ç–µ—Ä ${weather.current.windKph.round()} –∫–º/—á.');

    return analysis.toString();
  }

  ComparisonAnalysis _createComparisonAnalysis(
    Map<String, AIBitePrediction> predictions,
  ) {
    final rankings =
        predictions.entries
            .map(
              (e) => FishingTypeRanking(
                fishingType: e.key,
                typeName: _getFishingTypeName(e.key),
                icon: _getFishingTypeIcon(e.key),
                score: e.value.overallScore,
                activityLevel: e.value.activityLevel,
                shortRecommendation: e.value.recommendation,
                keyFactors: e.value.factors.take(3).map((f) => f.name).toList(),
              ),
            )
            .toList()
          ..sort((a, b) => b.score.compareTo(a.score));

    return ComparisonAnalysis(
      rankings: rankings,
      bestOverall: rankings.first,
      alternativeOptions: rankings.skip(1).take(2).toList(),
      worstOptions: rankings.where((r) => r.score < 30).toList(),
    );
  }

  List<String> _generateGeneralRecommendations(
    Map<String, AIBitePrediction> predictions,
    String bestType,
    bool aiEnhanced,
  ) {
    final recommendations = <String>[];
    final bestPrediction = predictions[bestType]!;

    if (aiEnhanced) {
      recommendations.add('üß† –ê–Ω–∞–ª–∏–∑ —É–ª—É—á—à–µ–Ω –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º');
    } else {
      recommendations.add('üìä –ë–∞–∑–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑');
    }

    recommendations.add('–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ç–∏–ø: ${_getFishingTypeName(bestType)}');
    recommendations.add(bestPrediction.recommendation);

    if (bestPrediction.overallScore >= 80) {
      recommendations.add('–û—Ç–ª–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è - –Ω–µ —É–ø—É—Å—Ç–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å!');
    } else if (bestPrediction.overallScore < 40) {
      recommendations.add(
        '–ü–æ–¥—É–º–∞–π—Ç–µ –æ –ø–µ—Ä–µ–Ω–æ—Å–µ —Ä—ã–±–∞–ª–∫–∏ –Ω–∞ –±–æ–ª–µ–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ–µ –≤—Ä–µ–º—è',
      );
    }

    return recommendations;
  }

  WeatherSummary _createWeatherSummary(WeatherApiResponse weather) {
    return WeatherSummary(
      temperature: weather.current.tempC,
      pressure: weather.current.pressureMb,
      windSpeed: weather.current.windKph,
      humidity: weather.current.humidity,
      condition: weather.current.condition.text,
      moonPhase:
          weather.forecast.isNotEmpty
              ? weather.forecast.first.astro.moonPhase
              : 'Unknown',
    );
  }

  String _buildOpenAIPrompt(
    Map<String, AIBitePrediction> predictions,
    WeatherApiResponse weather,
    Map<String, dynamic> userData,
  ) {
    final bestType = predictions.entries.reduce(
      (a, b) => a.value.overallScore > b.value.overallScore ? a : b,
    );

    return '''
–£—Å–ª–æ–≤–∏—è —Ä—ã–±–∞–ª–∫–∏:
- –ü–æ–≥–æ–¥–∞: ${weather.current.tempC}¬∞C, –¥–∞–≤–ª–µ–Ω–∏–µ ${weather.current.pressureMb} –º–±, –≤–µ—Ç–µ—Ä ${weather.current.windKph} –∫–º/—á
- –õ—É—á—à–∏–π —Ç–∏–ø: ${bestType.key} (${bestType.value.overallScore} –±–∞–ª–ª–æ–≤)
- –§–∞–∑–∞ –ª—É–Ω—ã: ${weather.forecast.isNotEmpty ? weather.forecast.first.astro.moonPhase : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}

–î–∞–π 2-3 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å–æ–≤–µ—Ç–∞ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–π —Ä—ã–±–∞–ª–∫–∏ –≤ —ç—Ç–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ (–∫–∞–∂–¥—ã–π —Å–æ–≤–µ—Ç - –æ—Ç–¥–µ–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ).
''';
  }

  /// Fallback –ø—Ä–æ–≥–Ω–æ–∑ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
  MultiFishingTypePrediction _getFallbackPrediction(
    WeatherApiResponse weather,
    List<FishingNoteModel>? userHistory,
    double latitude,
    double longitude,
  ) {
    final fallbackPredictions = <String, AIBitePrediction>{};

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ fallback –ø—Ä–æ–≥–Ω–æ–∑—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —Å–∫–æ—Ä–∞–º–∏
    final fallbackScores = {
      'spinning': 55,
      'feeder': 50,
      'carp_fishing': 45,
      'float_fishing': 60,
      'ice_fishing': weather.current.tempC <= 0 ? 40 : 5,
      'fly_fishing': 35,
      'trolling': 42,
    };

    for (final entry in fallbackScores.entries) {
      fallbackPredictions[entry.key] = AIBitePrediction(
        overallScore: entry.value,
        activityLevel: _determineActivityLevel(entry.value.toDouble()),
        confidence: 0.3,
        recommendation: '–ë–∞–∑–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è ${_getFishingTypeName(entry.key)}',
        detailedAnalysis: '–ê–Ω–∞–ª–∏–∑ –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –±–∞–∑–æ–≤—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–∞—Ö',
        factors: [],
        bestTimeWindows: [],
        tips: ['–õ–æ–≤–∏—Ç–µ –≤ —É—Ç—Ä–µ–Ω–Ω–∏–µ –∏ –≤–µ—á–µ—Ä–Ω–∏–µ —á–∞—Å—ã'],
        generatedAt: DateTime.now(),
        dataSource: 'fallback_algorithm',
        modelVersion: '1.0.0-fallback',
      );
    }

    final bestType =
        fallbackScores.entries.reduce((a, b) => a.value > b.value ? a : b).key;

    return MultiFishingTypePrediction(
      bestFishingType: bestType,
      bestPrediction: fallbackPredictions[bestType]!,
      allPredictions: fallbackPredictions,
      comparison: ComparisonAnalysis(
        rankings: [],
        bestOverall: FishingTypeRanking(
          fishingType: bestType,
          typeName: _getFishingTypeName(bestType),
          icon: _getFishingTypeIcon(bestType),
          score: fallbackScores[bestType]!,
          activityLevel: _determineActivityLevel(
            fallbackScores[bestType]!.toDouble(),
          ),
          shortRecommendation: '–ë–∞–∑–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è',
          keyFactors: [],
        ),
        alternativeOptions: [],
        worstOptions: [],
      ),
      generalRecommendations: [
        'üìä –ë–∞–∑–æ–≤—ã–π —Ä–µ–∂–∏–º –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –∞–Ω–∞–ª–∏–∑–∞',
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã –∫ —Ä—ã–±–∞–ª–∫–µ',
      ],
      weatherSummary: WeatherSummary(
        temperature: weather.current.tempC,
        pressure: weather.current.pressureMb,
        windSpeed: weather.current.windKph,
        humidity: weather.current.humidity,
        condition: weather.current.condition.text,
        moonPhase:
            weather.forecast.isNotEmpty
                ? weather.forecast.first.astro.moonPhase
                : 'Unknown',
      ),
      generatedAt: DateTime.now(),
    );
  }

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã...

  String _generateCacheKey(double lat, double lon, DateTime date) {
    return 'ai_${lat.toStringAsFixed(2)}_${lon.toStringAsFixed(2)}_${date.year}${date.month}${date.day}${date.hour}';
  }

  double _calculateDistance(
    double lat1,
    double lon1,
    double lat2,
    double lon2,
  ) {
    const double earthRadius = 6371; // –∫–º
    final dLat = (lat2 - lat1) * math.pi / 180;
    final dLon = (lon2 - lon1) * math.pi / 180;
    final a =
        math.sin(dLat / 2) * math.sin(dLat / 2) +
        math.cos(lat1 * math.pi / 180) *
            math.cos(lat2 * math.pi / 180) *
            math.sin(dLon / 2) *
            math.sin(dLon / 2);
    final c = 2 * math.asin(math.sqrt(a));
    return earthRadius * c;
  }

  String _getSeason(DateTime date) {
    final month = date.month;
    if (month >= 3 && month <= 5) return 'spring';
    if (month >= 6 && month <= 8) return 'summer';
    if (month >= 9 && month <= 11) return 'autumn';
    return 'winter';
  }

  Map<String, double> _analyzeFavoriteSeasons(List<FishingNoteModel> history) {
    final seasonCounts = <String, int>{};
    for (final trip in history) {
      final season = _getSeason(trip.date);
      seasonCounts[season] = (seasonCounts[season] ?? 0) + 1;
    }

    final total = history.length;
    return seasonCounts.map((season, count) => MapEntry(season, count / total));
  }

  List<int> _analyzeBestTimes(List<FishingNoteModel> successfulTrips) {
    final hourCounts = <int, int>{};
    for (final trip in successfulTrips) {
      hourCounts[trip.date.hour] = (hourCounts[trip.date.hour] ?? 0) + 1;
    }

    final sortedHours =
        hourCounts.entries.toList()..sort((a, b) => b.value.compareTo(a.value));

    return sortedHours.take(5).map((e) => e.key).toList();
  }

  String _getFishingTypeName(String type) {
    const names = {
      'spinning': '–°–ø–∏–Ω–Ω–∏–Ω–≥',
      'feeder': '–§–∏–¥–µ—Ä',
      'carp_fishing': '–ö–∞—Ä–ø–æ–≤–∞—è –ª–æ–≤–ª—è',
      'float_fishing': '–ü–æ–ø–ª–∞–≤–æ—á–Ω–∞—è –ª–æ–≤–ª—è',
      'ice_fishing': '–ó–∏–º–Ω—è—è —Ä—ã–±–∞–ª–∫–∞',
      'fly_fishing': '–ù–∞—Ö–ª—ã—Å—Ç',
      'trolling': '–¢—Ä–æ–ª–ª–∏–Ω–≥',
    };
    return names[type] ?? type;
  }

  // –í–º–µ—Å—Ç–æ —Å—Ç–∞—Ä–æ–≥–æ _getFishingTypeIcon() –¥–æ–±–∞–≤—å —ç—Ç–∏ –¥–≤–∞ –º–µ—Ç–æ–¥–∞:

  String _getFishingTypeIcon(String type) {
    const icons = {
      'spinning': 'üéØ',
      'feeder': 'üêü',
      'carp_fishing': 'üé£', // –ó–∞–º–µ–Ω–∏–ª–∏ —è—â–µ—Ä–∏—Ü—É –Ω–∞ —É–¥–æ—á–∫—É
      'float_fishing': 'üé£',
      'ice_fishing': '‚ùÑÔ∏è',
      'fly_fishing': 'ü¶ã',
      'trolling': '‚õµ', // –ó–∞–º–µ–Ω–∏–ª–∏ –ª–æ–¥–∫—É –Ω–∞ –ø–∞—Ä—É—Å–Ω–∏–∫
    };
    return icons[type] ?? 'üé£';
  }

  String _getFishingTypeImagePath(String type) {
    const imagePaths = {
      'spinning': 'assets/images/fishing_types/spinning.png',
      'feeder': 'assets/images/fishing_types/feeder.png',
      'carp_fishing': 'assets/images/fishing_types/carp_fishing.png',
      'float_fishing': 'assets/images/fishing_types/float_fishing.png',
      'ice_fishing': 'assets/images/fishing_types/ice_fishing.png',
      'fly_fishing': 'assets/images/fishing_types/fly_fishing.png',
      'trolling': 'assets/images/fishing_types/trolling.png',
    };
    return imagePaths[type] ?? 'assets/images/fishing_types/spinning.png';
  }

  /// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ –∫—ç—à–∞
  void clearOldCache() {
    final now = DateTime.now();
    _cache.removeWhere(
      (key, value) =>
          now.difference(value.generatedAt).inHours > 2, // –ö—ç—à –∞–∫—Ç—É–∞–ª–µ–Ω 2 —á–∞—Å–∞
    );
  }
}

// Enums –æ—Å—Ç–∞—é—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º–∏
enum ActivityLevel { excellent, good, moderate, poor, veryPoor }

extension ActivityLevelExtension on ActivityLevel {
  String get displayName {
    switch (this) {
      case ActivityLevel.excellent:
        return '–û—Ç–ª–∏—á–Ω–∞—è';
      case ActivityLevel.good:
        return '–•–æ—Ä–æ—à–∞—è';
      case ActivityLevel.moderate:
        return '–£–º–µ—Ä–µ–Ω–Ω–∞—è';
      case ActivityLevel.poor:
        return '–°–ª–∞–±–∞—è';
      case ActivityLevel.veryPoor:
        return '–û—á–µ–Ω—å —Å–ª–∞–±–∞—è';
    }
  }

  Color get color {
    switch (this) {
      case ActivityLevel.excellent:
        return const Color(0xFF4CAF50);
      case ActivityLevel.good:
        return const Color(0xFF8BC34A);
      case ActivityLevel.moderate:
        return const Color(0xFFFFC107);
      case ActivityLevel.poor:
        return const Color(0xFFFF9800);
      case ActivityLevel.veryPoor:
        return const Color(0xFFF44336);
    }
  }
}
