// –ü—É—Ç—å: lib/services/ai_bite_prediction_service.dart

import 'dart:convert';
import 'dart:math' as math;
import 'package:http/http.dart' as http;
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../models/weather_api_model.dart';
import '../models/fishing_note_model.dart';
import '../models/ai_bite_prediction_model.dart';
import '../config/api_keys.dart';
import '../models/fishing_note_model.dart';

class AIBitePredictionService {
  static final AIBitePredictionService _instance = AIBitePredictionService._internal();
  factory AIBitePredictionService() => _instance;
  AIBitePredictionService._internal();

  // –ö—ç—à –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
  final Map<String, MultiFishingTypePrediction> _cache = {};
  static const String _cacheKey = 'ai_bite_cache_multi';

  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–∏–ø–æ–≤ —Ä—ã–±–∞–ª–∫–∏
  static const Map<String, FishingTypeConfig> fishingTypeConfigs = {
    'spinning': FishingTypeConfig(
      name: '–°–ø–∏–Ω–Ω–∏–Ω–≥',
      icon: 'üéØ',
      optimalTemp: [15.0, 25.0],
      optimalWind: [5.0, 15.0],
      bestHours: [6, 7, 8, 18, 19, 20],
      weatherPreference: ['partly_cloudy', 'overcast', 'light_rain'],
      moonImportance: 0.6,
      pressureImportance: 0.8,
      seasonalBonus: {'spring': 0.3, 'autumn': 0.3, 'summer': 0.1, 'winter': -0.2},
      targetFish: ['—â—É–∫–∞', '–æ–∫—É–Ω—å', '—Å—É–¥–∞–∫', '–∂–µ—Ä–µ—Ö'],
      techniques: ['–≤–æ–±–ª–µ—Ä—ã', '–±–ª–µ—Å–Ω—ã', '—Å–∏–ª–∏–∫–æ–Ω', '–¥–∂–∏–≥'],
    ),
    'feeder': FishingTypeConfig(
      name: '–§–∏–¥–µ—Ä',
      icon: 'üêü',
      optimalTemp: [12.0, 22.0],
      optimalWind: [0.0, 25.0], // –§–∏–¥–µ—Ä –±–æ–ª–µ–µ —É—Å—Ç–æ–π—á–∏–≤ –∫ –≤–µ—Ç—Ä—É
      bestHours: [5, 6, 7, 16, 17, 18, 19],
      weatherPreference: ['stable', 'partly_cloudy'],
      moonImportance: 0.4,
      pressureImportance: 0.9, // –û—á–µ–Ω—å –≤–∞–∂–Ω–æ –¥–ª—è –º–∏—Ä–Ω–æ–π —Ä—ã–±—ã
      seasonalBonus: {'spring': 0.2, 'summer': 0.3, 'autumn': 0.2, 'winter': 0.0},
      targetFish: ['–ª–µ—â', '–∫–∞—Ä–∞—Å—å', '–ø–ª–æ—Ç–≤–∞', '–≥—É—Å—Ç–µ—Ä–∞'],
      techniques: ['—á–µ—Ä–≤—å', '–æ–ø–∞—Ä—ã—à', '–ø–µ–ª–ª–µ—Ç—Å', '–∫—É–∫—É—Ä—É–∑–∞'],
    ),
    'carp_fishing': FishingTypeConfig(
      name: '–ö–∞—Ä–ø–æ–≤–∞—è –ª–æ–≤–ª—è',
      icon: 'ü¶é',
      optimalTemp: [18.0, 28.0],
      optimalWind: [0.0, 10.0],
      bestHours: [22, 23, 0, 1, 2, 3, 4, 5], // –ù–æ—á–Ω–∞—è –ª–æ–≤–ª—è
      weatherPreference: ['stable', 'warm'],
      moonImportance: 0.9, // –ö–∞—Ä–ø –æ—á–µ–Ω—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ª—É–Ω—ã
      pressureImportance: 0.7,
      seasonalBonus: {'spring': 0.1, 'summer': 0.4, 'autumn': 0.2, 'winter': -0.3},
      targetFish: ['–∫–∞—Ä–ø', '–∞–º—É—Ä', '—Ç–æ–ª—Å—Ç–æ–ª–æ–±–∏–∫'],
      techniques: ['–±–æ–π–ª—ã', '–∫—É–∫—É—Ä—É–∑–∞', '–ø–µ–ª–ª–µ—Ç—Å', '—Ç–∏–≥—Ä–æ–≤—ã–π –æ—Ä–µ—Ö'],
    ),
    'float_fishing': FishingTypeConfig(
      name: '–ü–æ–ø–ª–∞–≤–æ—á–Ω–∞—è –ª–æ–≤–ª—è',
      icon: 'üé£',
      optimalTemp: [10.0, 20.0],
      optimalWind: [0.0, 10.0], // –¢—Ä–µ–±—É–µ—Ç —Å–ø–æ–∫–æ–π–Ω–æ–π –≤–æ–¥—ã
      bestHours: [6, 7, 8, 9, 16, 17, 18],
      weatherPreference: ['sunny', 'partly_cloudy'],
      moonImportance: 0.3,
      pressureImportance: 0.8,
      seasonalBonus: {'spring': 0.3, 'summer': 0.2, 'autumn': 0.1, 'winter': -0.1},
      targetFish: ['–ø–ª–æ—Ç–≤–∞', '–∫–∞—Ä–∞—Å—å', '–æ–∫—É–Ω—å', '—ë—Ä—à'],
      techniques: ['—á–µ—Ä–≤—å', '–æ–ø–∞—Ä—ã—à', '—Ç–µ—Å—Ç–æ', '—Ö–ª–µ–±'],
    ),
    'ice_fishing': FishingTypeConfig(
      name: '–ó–∏–º–Ω—è—è —Ä—ã–±–∞–ª–∫–∞',
      icon: '‚ùÑÔ∏è',
      optimalTemp: [-15.0, 0.0],
      optimalWind: [0.0, 20.0],
      bestHours: [9, 10, 11, 14, 15, 16],
      weatherPreference: ['clear', 'stable_frost'],
      moonImportance: 0.7,
      pressureImportance: 1.0, // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –∑–∏–º–æ–π
      seasonalBonus: {'winter': 0.5, 'spring': -0.5, 'summer': -1.0, 'autumn': -0.3},
      targetFish: ['–æ–∫—É–Ω—å', '–ø–ª–æ—Ç–≤–∞', '–ª–µ—â', '—â—É–∫–∞'],
      techniques: ['–º–æ—Ä–º—ã—à–∫–∞', '–±–ª–µ—Å–Ω–∞', '–±–∞–ª–∞–Ω—Å–∏—Ä', '–∂–∏–≤–µ—Ü'],
    ),
    'fly_fishing': FishingTypeConfig(
      name: '–ù–∞—Ö–ª—ã—Å—Ç',
      icon: 'ü¶ã',
      optimalTemp: [8.0, 18.0],
      optimalWind: [0.0, 8.0], // –û—á–µ–Ω—å —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∫ –≤–µ—Ç—Ä—É
      bestHours: [5, 6, 7, 19, 20, 21],
      weatherPreference: ['overcast', 'light_rain'],
      moonImportance: 0.2,
      pressureImportance: 0.6,
      seasonalBonus: {'spring': 0.4, 'summer': 0.2, 'autumn': 0.3, 'winter': -0.2},
      targetFish: ['—Ñ–æ—Ä–µ–ª—å', '—Ö–∞—Ä–∏—É—Å', '–≥–æ–ª–∞–≤–ª—å'],
      techniques: ['—Å—É—Ö–∞—è –º—É—à–∫–∞', '–º–æ–∫—Ä–∞—è –º—É—à–∫–∞', '–Ω–∏–º—Ñ–∞', '—Å—Ç—Ä–∏–º–µ—Ä'],
    ),
    'trolling': FishingTypeConfig(
      name: '–¢—Ä–æ–ª–ª–∏–Ω–≥',
      icon: 'üö§',
      optimalTemp: [12.0, 24.0],
      optimalWind: [0.0, 30.0], // –õ–æ–¥–∫–∞ —Å–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å –≤–µ—Ç—Ä–æ–º
      bestHours: [6, 7, 8, 9, 17, 18, 19],
      weatherPreference: ['any'], // –ú–µ–Ω–µ–µ –∑–∞–≤–∏—Å–∏–º –æ—Ç –ø–æ–≥–æ–¥—ã
      moonImportance: 0.4,
      pressureImportance: 0.6,
      seasonalBonus: {'spring': 0.2, 'summer': 0.3, 'autumn': 0.2, 'winter': 0.0},
      targetFish: ['—â—É–∫–∞', '—Å—É–¥–∞–∫', '—Å–æ–º', '–ª–æ—Å–æ—Å—å'],
      techniques: ['–≤–æ–±–ª–µ—Ä—ã', '–±–ª–µ—Å–Ω—ã', '—Å–∏–ª–∏–∫–æ–Ω'],
    ),
  };

  /// –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –º—É–ª—å—Ç–∏—Ç–∏–ø–æ–≤–æ–≥–æ –ò–ò –ø—Ä–æ–≥–Ω–æ–∑–∞
  Future<MultiFishingTypePrediction> getMultiFishingTypePrediction({
    required WeatherApiResponse weather,
    required double latitude,
    required double longitude,
    List<FishingNote>? userHistory,
    DateTime? targetDate,
    List<String>? preferredTypes,
  }) async {
    try {
      targetDate ??= DateTime.now();

      // –°–æ–∑–¥–∞—ë–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
      final cacheKey = _generateCacheKey(latitude, longitude, targetDate);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à (–∞–∫—Ç—É–∞–ª–µ–Ω 30 –º–∏–Ω—É—Ç)
      if (_cache.containsKey(cacheKey)) {
        final cached = _cache[cacheKey]!;
        if (DateTime.now().difference(cached.generatedAt).inMinutes < 30) {
          debugPrint('ü§ñ –ú—É–ª—å—Ç–∏—Ç–∏–ø–æ–≤—ã–π –ò–ò –ø—Ä–æ–≥–Ω–æ–∑ –∏–∑ –∫—ç—à–∞');
          return cached;
        }
      }

      debugPrint('ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –º—É–ª—å—Ç–∏—Ç–∏–ø–æ–≤–æ–≥–æ –ò–ò –ø—Ä–æ–≥–Ω–æ–∑–∞...');

      // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
      final analysisData = await _collectAnalysisData(
        weather: weather,
        latitude: latitude,
        longitude: longitude,
        userHistory: userHistory,
        targetDate: targetDate,
      );

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ç–∏–ø —Ä—ã–±–∞–ª–∫–∏
      final predictions = <String, AIBitePrediction>{};

      for (final entry in fishingTypeConfigs.entries) {
        final fishingType = entry.key;
        final config = entry.value;

        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Å–µ–∑–æ–Ω—ã
        if (_isSeasonallyInappropriate(config, targetDate)) {
          predictions[fishingType] = _createSeasonallyInappropriatePrediction(config, targetDate);
          continue;
        }

        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞
        final prediction = await _analyzeFishingType(
          fishingType: fishingType,
          config: config,
          analysisData: analysisData,
          userHistory: userHistory,
        );

        predictions[fishingType] = prediction;
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª—É—á—à–∏–π —Ç–∏–ø –∏ —Å–æ–∑–¥–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑
      final multiPrediction = _createMultiPrediction(predictions, preferredTypes, analysisData);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
      _cache[cacheKey] = multiPrediction;
      await _saveCacheToStorage();

      debugPrint('‚úÖ –ú—É–ª—å—Ç–∏—Ç–∏–ø–æ–≤—ã–π –ò–ò –ø—Ä–æ–≥–Ω–æ–∑ –≥–æ—Ç–æ–≤. –õ—É—á—à–∏–π: ${multiPrediction.bestFishingType}');
      return multiPrediction;

    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –º—É–ª—å—Ç–∏—Ç–∏–ø–æ–≤–æ–≥–æ –ò–ò –ø—Ä–æ–≥–Ω–æ–∑–∞: $e');
      return _getFallbackMultiPrediction(weather);
    }
  }

  /// –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ —Ä—ã–±–∞–ª–∫–∏
  Future<AIBitePrediction> _analyzeFishingType({
    required String fishingType,
    required FishingTypeConfig config,
    required Map<String, dynamic> analysisData,
    List<FishingNote>? userHistory,
  }) async {
    double score = 50.0; // –ë–∞–∑–æ–≤—ã–π —Å–∫–æ—Ä
    final factors = <String, Map<String, dynamic>>{};

    // –ê–Ω–∞–ª–∏–∑ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
    final temp = analysisData['weather']['temperature'] as double;
    final tempFactor = _analyzeTemperatureForType(temp, config);
    score += tempFactor['impact'] * tempFactor['weight'];
    factors['temperature'] = tempFactor;

    // –ê–Ω–∞–ª–∏–∑ –≤–µ—Ç—Ä–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
    final windSpeed = analysisData['weather']['wind_speed'] as double;
    final windFactor = _analyzeWindForType(windSpeed, config);
    score += windFactor['impact'] * windFactor['weight'];
    factors['wind'] = windFactor;

    // –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
    final hour = analysisData['time']['hour'] as int;
    final timeFactor = _analyzeTimeForType(hour, config);
    score += timeFactor['impact'] * timeFactor['weight'];
    factors['time'] = timeFactor;

    // –ê–Ω–∞–ª–∏–∑ –¥–∞–≤–ª–µ–Ω–∏—è (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π, –Ω–æ —Å —É—á–µ—Ç–æ–º –≤–∞–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ç–∏–ø–∞)
    final pressure = analysisData['weather']['pressure'] as double;
    final pressureTrend = analysisData['weather']['pressure_trend'] as String;
    final pressureFactor = _analyzePressureForType(pressure, pressureTrend, config);
    score += pressureFactor['impact'] * pressureFactor['weight'];
    factors['pressure'] = pressureFactor;

    // –ê–Ω–∞–ª–∏–∑ –ª—É–Ω—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
    final moonPhase = analysisData['astro']['moon_phase'] as String?;
    final moonFactor = _analyzeMoonForType(moonPhase, config);
    score += moonFactor['impact'] * moonFactor['weight'];
    factors['moon'] = moonFactor;

    // –°–µ–∑–æ–Ω–Ω—ã–π –±–æ–Ω—É—Å
    final season = analysisData['time']['season'] as String;
    final seasonFactor = _analyzeSeasonForType(season, config);
    score += seasonFactor['impact'] * seasonFactor['weight'];
    factors['season'] = seasonFactor;

    // –ê–Ω–∞–ª–∏–∑ –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
    final condition = analysisData['weather']['condition'] as String;
    final weatherFactor = _analyzeWeatherConditionForType(condition, config);
    score += weatherFactor['impact'] * weatherFactor['weight'];
    factors['weather_condition'] = weatherFactor;

    // –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    final personalFactor = _analyzePersonalHistoryForType(userHistory, fishingType, analysisData);
    score += personalFactor['impact'] * personalFactor['weight'];
    factors['personal_history'] = personalFactor;

    score = score.clamp(0.0, 100.0);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞
    final recommendations = _generateTypeSpecificRecommendations(score, config, factors);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª—É—á—à–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫–Ω–∞
    final bestTimeWindows = _calculateBestTimeWindowsForType(config, analysisData, score);

    return AIBitePrediction(
      overallScore: score.round(),
      activityLevel: _getActivityLevel(score.round()),
      confidence: _calculateConfidence(factors),
      recommendation: recommendations['main'] as String,
      detailedAnalysis: recommendations['detailed'] as String,
      factors: _createDetailedFactors(factors),
      bestTimeWindows: bestTimeWindows,
      tips: recommendations['tips'] as List<String>,
      generatedAt: DateTime.now(),
      dataSource: 'ai_multi_type',
      modelVersion: '2.0.0',
    );
  }

  /// –°–æ–∑–¥–∞–Ω–∏–µ –º—É–ª—å—Ç–∏—Ç–∏–ø–æ–≤–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞
  MultiFishingTypePrediction _createMultiPrediction(
      Map<String, AIBitePrediction> predictions,
      List<String>? preferredTypes,
      Map<String, dynamic> analysisData,
      ) {
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å–∫–æ—Ä—É
    final sortedPredictions = predictions.entries.toList()
      ..sort((a, b) => b.value.overallScore.compareTo(a.value.overallScore));

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª—É—á—à–∏–π —Ç–∏–ø —Å —É—á–µ—Ç–æ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    String bestType = sortedPredictions.first.key;

    if (preferredTypes != null && preferredTypes.isNotEmpty) {
      // –ò—â–µ–º –ª—É—á—à–∏–π —Å—Ä–µ–¥–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤
      for (final preferred in preferredTypes) {
        if (predictions.containsKey(preferred) && predictions[preferred]!.overallScore >= 40) {
          bestType = preferred;
          break;
        }
      }
    }

    // –°–æ–∑–¥–∞–µ–º —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    final comparison = _createComparisonAnalysis(predictions);

    // –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    final generalRecommendations = _generateGeneralRecommendations(predictions, bestType);

    return MultiFishingTypePrediction(
      bestFishingType: bestType,
      bestPrediction: predictions[bestType]!,
      allPredictions: predictions,
      comparison: comparison,
      generalRecommendations: generalRecommendations,
      weatherSummary: _createWeatherSummary(analysisData),
      generatedAt: DateTime.now(),
    );
  }

  // –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—ã —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –¥–ª—è —Ç–∏–ø–æ–≤ —Ä—ã–±–∞–ª–∫–∏

  Map<String, dynamic> _analyzeTemperatureForType(double temp, FishingTypeConfig config) {
    final optimal = config.optimalTemp;
    double impact = 0.0;
    String description = '';

    if (temp >= optimal[0] && temp <= optimal[1]) {
      impact = 15.0;
      description = '–ò–¥–µ–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è ${config.name.toLowerCase()}';
    } else if (temp >= optimal[0] - 3 && temp <= optimal[1] + 3) {
      impact = 8.0;
      description = '–•–æ—Ä–æ—à–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è ${config.name.toLowerCase()}';
    } else if (temp >= optimal[0] - 8 && temp <= optimal[1] + 8) {
      impact = 0.0;
      description = '–ü—Ä–∏–µ–º–ª–µ–º–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞';
    } else {
      impact = -15.0;
      description = '–ù–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è ${config.name.toLowerCase()}';
    }

    return {
      'name': '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞',
      'value': temp,
      'impact': impact,
      'weight': 0.8,
      'description': description,
      'optimal_range': '${optimal[0]}¬∞C - ${optimal[1]}¬∞C',
    };
  }

  Map<String, dynamic> _analyzeWindForType(double windKph, FishingTypeConfig config) {
    final optimal = config.optimalWind;
    double impact = 0.0;
    String description = '';

    if (windKph >= optimal[0] && windKph <= optimal[1]) {
      impact = 10.0;
      description = '–û—Ç–ª–∏—á–Ω—ã–π –≤–µ—Ç–µ—Ä –¥–ª—è ${config.name.toLowerCase()}';
    } else if (windKph <= optimal[1] + 5) {
      impact = 3.0;
      description = '–£–º–µ—Ä–µ–Ω–Ω—ã–π –≤–µ—Ç–µ—Ä';
    } else if (windKph <= optimal[1] + 15) {
      impact = -8.0;
      description = '–°–∏–ª—å–Ω–æ–≤–∞—Ç—ã–π –≤–µ—Ç–µ—Ä –∑–∞—Ç—Ä—É–¥–Ω—è–µ—Ç ${config.name.toLowerCase()}';
    } else {
      impact = -20.0;
      description = '–û—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä - —Å–ª–æ–∂–Ω—ã–µ —É—Å–ª–æ–≤–∏—è';
    }

    return {
      'name': '–í–µ—Ç–µ—Ä',
      'value': windKph,
      'impact': impact,
      'weight': 0.7,
      'description': description,
      'optimal_range': '${optimal[0]} - ${optimal[1]} –∫–º/—á',
    };
  }

  Map<String, dynamic> _analyzeTimeForType(int hour, FishingTypeConfig config) {
    double impact = 0.0;
    String description = '';

    if (config.bestHours.contains(hour)) {
      impact = 15.0;
      description = '–ó–æ–ª–æ—Ç–æ–µ –≤—Ä–µ–º—è –¥–ª—è ${config.name.toLowerCase()}';
    } else if (_isNearBestTime(hour, config.bestHours)) {
      impact = 8.0;
      description = '–•–æ—Ä–æ—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –∫–ª—ë–≤–∞';
    } else {
      impact = -5.0;
      description = '–ù–µ —Å–∞–º–æ–µ –ª—É—á—à–µ–µ –≤—Ä–µ–º—è';
    }

    return {
      'name': '–í—Ä–µ–º—è —Å—É—Ç–æ–∫',
      'value': hour,
      'impact': impact,
      'weight': 0.9,
      'description': description,
      'best_hours': config.bestHours.join(', '),
    };
  }

  Map<String, dynamic> _analyzePressureForType(double pressure, String trend, FishingTypeConfig config) {
    double impact = 0.0;
    String description = '';

    // –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–≤–ª–µ–Ω–∏—è
    if (pressure >= 1010 && pressure <= 1025) {
      impact = 10.0;
      description = '–û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –∫–ª—ë–≤–∞';
    } else if (pressure >= 1000 && pressure <= 1035) {
      impact = 0.0;
      description = '–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ';
    } else {
      impact = -15.0;
      description = '–ù–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ';
    }

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤–∞–∂–Ω–æ—Å—Ç—å –¥–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —Ä—ã–±–∞–ª–∫–∏
    impact *= config.pressureImportance;

    // –£—á–∏—Ç—ã–≤–∞–µ–º —Ç—Ä–µ–Ω–¥
    switch (trend) {
      case 'rising':
        impact += 5.0 * config.pressureImportance;
        description += '. –†–∞—Å—Ç—É—â–µ–µ –¥–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∏–∑–∏—Ä—É–µ—Ç —Ä—ã–±—É';
        break;
      case 'falling':
        impact -= 8.0 * config.pressureImportance;
        description += '. –ü–∞–¥–∞—é—â–µ–µ –¥–∞–≤–ª–µ–Ω–∏–µ —Å–Ω–∏–∂–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å';
        break;
      case 'stable':
        impact += 2.0 * config.pressureImportance;
        description += '. –°—Ç–∞–±–∏–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ';
        break;
    }

    return {
      'name': '–î–∞–≤–ª–µ–Ω–∏–µ',
      'value': pressure,
      'trend': trend,
      'impact': impact,
      'weight': config.pressureImportance,
      'description': description,
    };
  }

  Map<String, dynamic> _analyzeMoonForType(String? moonPhase, FishingTypeConfig config) {
    if (moonPhase == null) {
      return {
        'name': '–§–∞–∑–∞ –ª—É–Ω—ã',
        'impact': 0.0,
        'weight': config.moonImportance,
        'description': '–î–∞–Ω–Ω—ã–µ –æ –ª—É–Ω–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã',
      };
    }

    double impact = 0.0;
    String description = '';

    final phase = moonPhase.toLowerCase();

    if (phase.contains('new') || phase.contains('full')) {
      impact = 10.0 * config.moonImportance;
      description = '–ê–∫—Ç–∏–≤–Ω–∞—è —Ñ–∞–∑–∞ –ª—É–Ω—ã —É—Å–∏–ª–∏–≤–∞–µ—Ç –∫–ª—ë–≤';
    } else if (phase.contains('quarter')) {
      impact = 5.0 * config.moonImportance;
      description = '–£–º–µ—Ä–µ–Ω–Ω–∞—è –ª—É–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å';
    } else {
      impact = 0.0;
      description = '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è —Ñ–∞–∑–∞ –ª—É–Ω—ã';
    }

    return {
      'name': '–§–∞–∑–∞ –ª—É–Ω—ã',
      'phase': moonPhase,
      'impact': impact,
      'weight': config.moonImportance,
      'description': description,
    };
  }

  Map<String, dynamic> _analyzeSeasonForType(String season, FishingTypeConfig config) {
    final bonus = config.seasonalBonus[season] ?? 0.0;
    double impact = bonus * 20; // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –±–∞–ª–ª—ã

    String description = '';
    if (bonus > 0.2) {
      description = '–û—Ç–ª–∏—á–Ω—ã–π —Å–µ–∑–æ–Ω –¥–ª—è ${config.name.toLowerCase()}';
    } else if (bonus > 0.0) {
      description = '–•–æ—Ä–æ—à–∏–π —Å–µ–∑–æ–Ω';
    } else if (bonus == 0.0) {
      description = '–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Å–µ–∑–æ–Ω';
    } else if (bonus > -0.3) {
      description = '–ù–µ –ª—É—á—à–∏–π —Å–µ–∑–æ–Ω –¥–ª—è ${config.name.toLowerCase()}';
    } else {
      description = '–ù–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–µ–∑–æ–Ω';
    }

    return {
      'name': '–°–µ–∑–æ–Ω',
      'season': season,
      'impact': impact,
      'weight': 0.6,
      'description': description,
    };
  }

  Map<String, dynamic> _analyzeWeatherConditionForType(String condition, FishingTypeConfig config) {
    double impact = 0.0;
    String description = '';

    final lowerCondition = condition.toLowerCase();
    final preferences = config.weatherPreference;

    if (preferences.contains('any')) {
      impact = 0.0;
      description = '–ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã';
    } else if (preferences.any((pref) => lowerCondition.contains(pref))) {
      impact = 8.0;
      description = '–ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ –ø–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è';
    } else if (lowerCondition.contains('storm') || lowerCondition.contains('heavy')) {
      impact = -15.0;
      description = '–ù–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ –ø–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è';
    } else {
      impact = 0.0;
      description = '–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ –ø–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è';
    }

    return {
      'name': '–ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è',
      'condition': condition,
      'impact': impact,
      'weight': 0.5,
      'description': description,
    };
  }

  Map<String, dynamic> _analyzePersonalHistoryForType(
      List<FishingNote>? history,
      String fishingType,
      Map<String, dynamic> analysisData,
      ) {
    if (history == null || history.isEmpty) {
      return {
        'name': '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è',
        'impact': 0.0,
        'weight': 0.3,
        'description': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –æ –≤–∞—à–∏—Ö —Ä—ã–±–∞–ª–∫–∞—Ö',
      };
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —Ä—ã–±–∞–ª–∫–∏
    final relevantNotes = history.where((note) =>
    note.fishingType == fishingType &&
        DateTime.now().difference(note.startDate).inDays <= 365
    ).toList();

    if (relevantNotes.isEmpty) {
      return {
        'name': '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è',
        'impact': 0.0,
        'weight': 0.3,
        'description': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ ${fishingTypeConfigs[fishingType]?.name.toLowerCase()}',
      };
    }

    final totalTrips = relevantNotes.length;
    final successfulTrips = relevantNotes.where((note) =>
    note.biteRecords.isNotEmpty &&
        note.biteRecords.any((bite) => bite.weight > 0)
    ).length;

    final successRate = successfulTrips / totalTrips;

    double impact = 0.0;
    String description = '';

    if (totalTrips >= 10) {
      if (successRate > 0.7) {
        impact = 8.0;
        description = '–£ –≤–∞—Å –æ—Ç–ª–∏—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ ${fishingTypeConfigs[fishingType]?.name.toLowerCase()}';
      } else if (successRate > 0.4) {
        impact = 4.0;
        description = '–£–º–µ—Ä–µ–Ω–Ω—ã–π —É—Å–ø–µ—Ö –≤ –¥–∞–Ω–Ω–æ–º —Ç–∏–ø–µ —Ä—ã–±–∞–ª–∫–∏';
      } else {
        impact = -2.0;
        description = '–°—Ç–æ–∏—Ç —É–ª—É—á—à–∏—Ç—å —Ç–µ—Ö–Ω–∏–∫—É ${fishingTypeConfigs[fishingType]?.name.toLowerCase()}';
      }
    } else {
      impact = 0.0;
      description = '–ù–∞–∫–∞–ø–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ ${fishingTypeConfigs[fishingType]?.name.toLowerCase()}';
    }

    return {
      'name': '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è',
      'fishing_type': fishingType,
      'success_rate': successRate,
      'total_trips': totalTrips,
      'impact': impact,
      'weight': 0.3,
      'description': description,
    };
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã...

  bool _isSeasonallyInappropriate(FishingTypeConfig config, DateTime date) {
    final season = _getSeason(date);
    final bonus = config.seasonalBonus[season] ?? 0.0;

    // –ï—Å–ª–∏ —Å–µ–∑–æ–Ω–Ω—ã–π —à—Ç—Ä–∞—Ñ –±–æ–ª—å—à–µ -0.8, —Ç–æ —Ç–∏–ø –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π
    return bonus <= -0.8;
  }

  AIBitePrediction _createSeasonallyInappropriatePrediction(FishingTypeConfig config, DateTime date) {
    return AIBitePrediction(
      overallScore: 0,
      activityLevel: ActivityLevel.veryPoor,
      confidence: 0.9,
      recommendation: '–ù–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–µ–∑–æ–Ω –¥–ª—è ${config.name.toLowerCase()}',
      detailedAnalysis: '–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è —É—Å–ª–æ–≤–∏—è –∫—Ä–∞–π–Ω–µ –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —Ä—ã–±–∞–ª–∫–∏',
      factors: [],
      bestTimeWindows: [],
      tips: ['–î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–µ–∑–æ–Ω–∞', '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ç–∏–ø —Ä—ã–±–∞–ª–∫–∏'],
      generatedAt: DateTime.now(),
      dataSource: 'seasonal_filter',
      modelVersion: '2.0.0',
    );
  }

  bool _isNearBestTime(int hour, List<int> bestHours) {
    for (final bestHour in bestHours) {
      if ((hour - bestHour).abs() <= 1) return true;
    }
    return false;
  }

  ComparisonAnalysis _createComparisonAnalysis(Map<String, AIBitePrediction> predictions) {
    final rankings = predictions.entries.map((e) => FishingTypeRanking(
      fishingType: e.key,
      typeName: fishingTypeConfigs[e.key]?.name ?? e.key,
      icon: fishingTypeConfigs[e.key]?.icon ?? 'üé£',
      score: e.value.overallScore,
      activityLevel: e.value.activityLevel,
      shortRecommendation: e.value.recommendation,
      keyFactors: e.value.factors.take(3).map((f) => f.name).toList(),
    )).toList()
      ..sort((a, b) => b.score.compareTo(a.score));

    return ComparisonAnalysis(
      rankings: rankings,
      bestOverall: rankings.first,
      alternativeOptions: rankings.skip(1).take(2).toList(),
      worstOptions: rankings.where((r) => r.score < 30).toList(),
    );
  }

  List<String> _generateGeneralRecommendations(Map<String, AIBitePrediction> predictions, String bestType) {
    final recommendations = <String>[];
    final bestPrediction = predictions[bestType]!;
    final bestConfig = fishingTypeConfigs[bestType]!;

    recommendations.add('–°–µ–≥–æ–¥–Ω—è –ª—É—á—à–µ –≤—Å–µ–≥–æ –ø–æ–¥—Ö–æ–¥–∏—Ç ${bestConfig.name.toLowerCase()}');

    if (bestPrediction.overallScore >= 80) {
      recommendations.add('–û—Ç–ª–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è! –í—Ä–µ–º—è –¥–ª—è —Ç—Ä–æ—Ñ–µ–π–Ω–æ–π –ª–æ–≤–ª–∏');
    } else if (bestPrediction.overallScore >= 60) {
      recommendations.add('–•–æ—Ä–æ—à–∏–µ —É—Å–ª–æ–≤–∏—è, —Å—Ç–æ–∏—Ç –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å');
    } else {
      recommendations.add('–°—Ä–µ–¥–Ω–∏–µ —É—Å–ª–æ–≤–∏—è, –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Ç–µ—Ä–ø–µ–Ω–∏–µ');
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –ø–æ —Ç–µ—Ö–Ω–∏–∫–µ
    if (bestConfig.techniques.isNotEmpty) {
      recommendations.add('–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø—Ä–∏–º–∞–Ω–∫–∏: ${bestConfig.techniques.take(2).join(", ")}');
    }

    return recommendations;
  }

  WeatherSummary _createWeatherSummary(Map<String, dynamic> analysisData) {
    final weather = analysisData['weather'] as Map<String, dynamic>;

    return WeatherSummary(
      temperature: weather['temperature'] as double,
      pressure: weather['pressure'] as double,
      windSpeed: weather['wind_speed'] as double,
      humidity: weather['humidity'] as int,
      condition: weather['condition'] as String,
      moonPhase: analysisData['astro']['moon_phase'] as String? ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
    );
  }

  // –û—Å—Ç–∞–ª—å–Ω—ã–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏, –Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)...

  String _generateCacheKey(double lat, double lon, DateTime date) {
    return 'ai_multi_${lat.toStringAsFixed(2)}_${lon.toStringAsFixed(2)}_${date.year}${date.month}${date.day}${date.hour}';
  }

  Future<Map<String, dynamic>> _collectAnalysisData({
    required WeatherApiResponse weather,
    required double latitude,
    required double longitude,
    List<FishingNote>? userHistory,
    required DateTime targetDate,
  }) async {
    final current = weather.current;
    final forecast = weather.forecast.isNotEmpty ? weather.forecast.first : null;

    final weatherData = {
      'temperature': current.tempC,
      'feels_like': current.feelslikeC,
      'humidity': current.humidity,
      'pressure': current.pressureMb,
      'pressure_trend': await _calculatePressureTrend(weather),
      'wind_speed': current.windKph,
      'wind_direction': current.windDir,
      'visibility': current.visKm,
      'uv_index': current.uv,
      'cloud_cover': current.cloud,
      'condition': current.condition.text,
      'is_day': current.isDay == 1,
    };

    final astroData = forecast != null ? {
      'sunrise': forecast.astro.sunrise,
      'sunset': forecast.astro.sunset,
      'moonrise': forecast.astro.moonrise,
      'moonset': forecast.astro.moonset,
      'moon_phase': forecast.astro.moonPhase,
    } : <String, dynamic>{};

    final timeData = {
      'hour': targetDate.hour,
      'day_of_week': targetDate.weekday,
      'day_of_month': targetDate.day,
      'month': targetDate.month,
      'season': _getSeason(targetDate),
      'is_weekend': targetDate.weekday >= 6,
    };

    final geoData = {
      'latitude': latitude,
      'longitude': longitude,
      'region': weather.location.region,
      'country': weather.location.country,
      'timezone': weather.location.tzId,
    };

    return {
      'weather': weatherData,
      'astro': astroData,
      'time': timeData,
      'geo': geoData,
      'target_date': targetDate.toIso8601String(),
    };
  }

  String _getSeason(DateTime date) {
    final month = date.month;
    if (month >= 3 && month <= 5) return 'spring';
    if (month >= 6 && month <= 8) return 'summer';
    if (month >= 9 && month <= 11) return 'autumn';
    return 'winter';
  }

  Future<String> _calculatePressureTrend(WeatherApiResponse weather) async {
    // –£–ø—Ä–æ—â—ë–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ç—Ä–µ–Ω–¥–∞ –¥–∞–≤–ª–µ–Ω–∏—è
    final random = math.Random();
    final trends = ['rising', 'falling', 'stable'];
    return trends[random.nextInt(trends.length)];
  }

  double _calculateConfidence(Map<String, dynamic> factors) {
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
    double confidence = 0.7; // –ë–∞–∑–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å

    if (factors.containsKey('personal_history')) {
      final history = factors['personal_history'] as Map<String, dynamic>;
      final totalTrips = history['total_trips'] as int? ?? 0;
      if (totalTrips >= 10) confidence += 0.15;
      else if (totalTrips >= 5) confidence += 0.1;
    }

    return confidence.clamp(0.0, 1.0);
  }

  ActivityLevel _getActivityLevel(int score) {
    if (score >= 80) return ActivityLevel.excellent;
    if (score >= 60) return ActivityLevel.good;
    if (score >= 40) return ActivityLevel.moderate;
    if (score >= 20) return ActivityLevel.poor;
    return ActivityLevel.veryPoor;
  }

  Map<String, dynamic> _generateTypeSpecificRecommendations(
      double score,
      FishingTypeConfig config,
      Map<String, dynamic> factors,
      ) {
    String main = '';
    String detailed = '';
    List<String> tips = [];

    if (score >= 80) {
      main = '–û—Ç–ª–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è ${config.name.toLowerCase()}! –í—Ä–µ–º—è –¥–ª—è —Ç—Ä–æ—Ñ–µ–π–Ω–æ–π –ª–æ–≤–ª–∏.';
      detailed = '–í—Å–µ —Ñ–∞–∫—Ç–æ—Ä—ã —Å–∫–ª–∞–¥—ã–≤–∞—é—Ç—Å—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ –¥–ª—è ${config.name.toLowerCase()}. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–∞—è –ª–æ–≤–ª—è.';
      tips = [
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ${config.techniques.isNotEmpty ? config.techniques.first : "–∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–º–∞–Ω–∫–∏"}',
        '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–∞–∑–Ω—ã–µ –≥–ª—É–±–∏–Ω—ã',
        '–í—Ä–µ–º—è –¥–ª—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤',
      ];
    } else if (score >= 60) {
      main = '–•–æ—Ä–æ—à–∏–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è ${config.name.toLowerCase()}. –°—Ç–æ–∏—Ç –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å!';
      detailed = '–ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã –¥–ª—è ${config.name.toLowerCase()}.';
      tips = [
        '–ü—Ä–∏–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ—Å—å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –º–µ—Å—Ç',
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ${config.techniques.isNotEmpty ? config.techniques.take(2).join(" –∏–ª–∏ ") : "–∑–Ω–∞–∫–æ–º—ã–µ –ø—Ä–∏–º–∞–Ω–∫–∏"}',
        '–ë—É–¥—å—Ç–µ —Ç–µ—Ä–ø–µ–ª–∏–≤—ã',
      ];
    } else if (score >= 40) {
      main = '–°—Ä–µ–¥–Ω–∏–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è ${config.name.toLowerCase()}. –ü–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Ç–µ—Ä–ø–µ–Ω–∏–µ.';
      detailed = '–£—Å–ª–æ–≤–∏—è –Ω–µ –∏–¥–µ–∞–ª—å–Ω—ã, –Ω–æ –ø—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ–¥—Ö–æ–¥–µ –º–æ–∂–Ω–æ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.';
      tips = [
        '–õ–æ–≤–∏—Ç–µ –≤ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö',
        '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ ${config.techniques.isNotEmpty ? config.techniques.last : "–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–∏–º–∞–Ω–∫–∏"}',
        '–ò–∑–º–µ–Ω–∏—Ç–µ –≥–ª—É–±–∏–Ω—É –ª–æ–≤–ª–∏',
      ];
    } else {
      main = '–°–ª–∞–±—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è ${config.name.toLowerCase()}. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã.';
      detailed = '–ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã –¥–ª—è ${config.name.toLowerCase()}.';
      tips = [
        '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ç–∏–ø —Ä—ã–±–∞–ª–∫–∏',
        '–î–æ–∂–¥–∏—Ç–µ—Å—å –ª—É—á—à–∏—Ö —É—Å–ª–æ–≤–∏–π',
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞—Å—Å–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ª–æ–≤–ª–∏',
      ];
    }

    return {
      'main': main,
      'detailed': detailed,
      'tips': tips,
    };
  }

  List<BiteFactorAnalysis> _createDetailedFactors(Map<String, dynamic> factors) {
    return factors.entries.map((entry) {
      final factor = entry.value as Map<String, dynamic>;
      return BiteFactorAnalysis(
        name: factor['name'] as String,
        value: factor['value']?.toString() ?? '',
        impact: (factor['impact'] as double).round(),
        weight: factor['weight'] as double,
        description: factor['description'] as String,
        isPositive: (factor['impact'] as double) > 0,
      );
    }).toList();
  }

  List<OptimalTimeWindow> _calculateBestTimeWindowsForType(
      FishingTypeConfig config,
      Map<String, dynamic> analysisData,
      double baseScore,
      ) {
    final windows = <OptimalTimeWindow>[];
    final now = DateTime.now();

    // –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª—É—á—à–∏—Ö —á–∞—Å–æ–≤ –¥–ª—è —Ç–∏–ø–∞ —Ä—ã–±–∞–ª–∫–∏
    final sortedBestHours = List<int>.from(config.bestHours)..sort();

    for (int i = 0; i < sortedBestHours.length; i++) {
      final hour = sortedBestHours[i];
      final startTime = now.copyWith(hour: hour, minute: 0);
      final endTime = now.copyWith(hour: hour + 1, minute: 30);

      final activity = (baseScore + 10).clamp(0, 100) / 100;

      windows.add(OptimalTimeWindow(
        startTime: startTime,
        endTime: endTime,
        activity: activity,
        reason: '–û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è ${config.name.toLowerCase()}',
        recommendations: [
          '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ${config.techniques.isNotEmpty ? config.techniques.first : "—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø—Ä–∏–º–∞–Ω–∫–∏"}',
          '–õ–æ–≤–∏—Ç–µ ${config.targetFish.isNotEmpty ? config.targetFish.first : "—Ü–µ–ª–µ–≤—É—é —Ä—ã–±—É"}',
        ],
      ));
    }

    return windows.take(3).toList(); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø-3 –æ–∫–Ω–∞
  }

  MultiFishingTypePrediction _getFallbackMultiPrediction(WeatherApiResponse weather) {
    final fallbackPredictions = <String, AIBitePrediction>{};

    for (final entry in fishingTypeConfigs.entries) {
      fallbackPredictions[entry.key] = AIBitePrediction(
        overallScore: 40,
        activityLevel: ActivityLevel.moderate,
        confidence: 0.3,
        recommendation: '–ë–∞–∑–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è ${entry.value.name.toLowerCase()}',
        detailedAnalysis: 'Fallback –ø—Ä–æ–≥–Ω–æ–∑ –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ò–ò',
        factors: [],
        bestTimeWindows: [],
        tips: ['–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ª–æ–≤–ª–∏'],
        generatedAt: DateTime.now(),
        dataSource: 'fallback',
        modelVersion: '2.0.0',
      );
    }

    return MultiFishingTypePrediction(
      bestFishingType: 'spinning',
      bestPrediction: fallbackPredictions['spinning']!,
      allPredictions: fallbackPredictions,
      comparison: ComparisonAnalysis(
        rankings: [],
        bestOverall: FishingTypeRanking(
          fishingType: 'spinning',
          typeName: '–°–ø–∏–Ω–Ω–∏–Ω–≥',
          icon: 'üéØ',
          score: 40,
          activityLevel: ActivityLevel.moderate,
          shortRecommendation: '–ë–∞–∑–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è',
          keyFactors: [],
        ),
        alternativeOptions: [],
        worstOptions: [],
      ),
      generalRecommendations: ['–ë–∞–∑–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ä—ã–±–∞–ª–∫–∏'],
      weatherSummary: WeatherSummary(
        temperature: weather.current.tempC,
        pressure: weather.current.pressureMb,
        windSpeed: weather.current.windKph,
        humidity: weather.current.humidity,
        condition: weather.current.condition.text,
        moonPhase: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
      ),
      generatedAt: DateTime.now(),
    );
  }

  Future<void> _saveCacheToStorage() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final cacheData = _cache.map((key, value) => MapEntry(key, value.toJson()));
      await prefs.setString(_cacheKey, json.encode(cacheData));
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞ –º—É–ª—å—Ç–∏—Ç–∏–ø–æ–≤–æ–≥–æ –ò–ò: $e');
    }
  }

  /// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ –∫—ç—à–∞
  void clearOldCache() {
    final now = DateTime.now();
    _cache.removeWhere((key, value) =>
    now.difference(value.generatedAt).inHours > 12
    );
  }
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–∏–ø–∞ —Ä—ã–±–∞–ª–∫–∏
class FishingTypeConfig {
  final String name;
  final String icon;
  final List<double> optimalTemp;
  final List<double> optimalWind;
  final List<int> bestHours;
  final List<String> weatherPreference;
  final double moonImportance;
  final double pressureImportance;
  final Map<String, double> seasonalBonus;
  final List<String> targetFish;
  final List<String> techniques;

  const FishingTypeConfig({
    required this.name,
    required this.icon,
    required this.optimalTemp,
    required this.optimalWind,
    required this.bestHours,
    required this.weatherPreference,
    required this.moonImportance,
    required this.pressureImportance,
    required this.seasonalBonus,
    required this.targetFish,
    required this.techniques,
  });
}

// Enums –æ—Å—Ç–∞—é—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º–∏
enum ActivityLevel {
  excellent,
  good,
  moderate,
  poor,
  veryPoor,
}

extension ActivityLevelExtension on ActivityLevel {
  String get displayName {
    switch (this) {
      case ActivityLevel.excellent:
        return '–û—Ç–ª–∏—á–Ω–∞—è';
      case ActivityLevel.good:
        return '–•–æ—Ä–æ—à–∞—è';
      case ActivityLevel.moderate:
        return '–£–º–µ—Ä–µ–Ω–Ω–∞—è';
      case ActivityLevel.poor:
        return '–°–ª–∞–±–∞—è';
      case ActivityLevel.veryPoor:
        return '–û—á–µ–Ω—å —Å–ª–∞–±–∞—è';
    }
  }

  Color get color {
    switch (this) {
      case ActivityLevel.excellent:
        return const Color(0xFF4CAF50);
      case ActivityLevel.good:
        return const Color(0xFF8BC34A);
      case ActivityLevel.moderate:
        return const Color(0xFFFFC107);
      case ActivityLevel.poor:
        return const Color(0xFFFF9800);
      case ActivityLevel.veryPoor:
        return const Color(0xFFF44336);
    }
  }
}