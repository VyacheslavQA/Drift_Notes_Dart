// –ü—É—Ç—å: lib/services/weather_preferences_service.dart

import 'package:shared_preferences/shared_preferences.dart';
import 'package:flutter/material.dart';

enum TemperatureUnit { celsius, fahrenheit }

enum WindSpeedUnit { metersPerSecond, kilometersPerHour }

enum PressureUnit { mmHg, hPa }

class WeatherPreferencesService {
  static final WeatherPreferencesService _instance =
      WeatherPreferencesService._internal();
  factory WeatherPreferencesService() => _instance;
  WeatherPreferencesService._internal();

  // –ö–ª—é—á–∏ –¥–ª—è SharedPreferences
  static const String _temperatureUnitKey = 'weather_temperature_unit';
  static const String _windSpeedUnitKey = 'weather_wind_speed_unit';
  static const String _pressureUnitKey = 'weather_pressure_unit';
  static const String _pressureCalibrationKey = 'weather_pressure_calibration';

  // –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  TemperatureUnit _temperatureUnit = TemperatureUnit.celsius;
  WindSpeedUnit _windSpeedUnit = WindSpeedUnit.metersPerSecond;
  PressureUnit _pressureUnit = PressureUnit.mmHg;
  double _pressureCalibration = 0.0; // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –≤ –≥–ü–∞

  // –ì–µ—Ç—Ç–µ—Ä—ã
  TemperatureUnit get temperatureUnit => _temperatureUnit;
  WindSpeedUnit get windSpeedUnit => _windSpeedUnit;
  PressureUnit get pressureUnit => _pressureUnit;
  double get pressureCalibration => _pressureCalibration;

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ - –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  Future<void> initialize() async {
    await _loadSettings();
  }

  /// –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ SharedPreferences
  Future<void> _loadSettings() async {
    try {
      final prefs = await SharedPreferences.getInstance();

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –µ–¥–∏–Ω–∏—Ü—ã —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
      final tempUnitIndex = prefs.getInt(_temperatureUnitKey) ?? 0;
      _temperatureUnit = TemperatureUnit.values[tempUnitIndex];

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –µ–¥–∏–Ω–∏—Ü—ã —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤–µ—Ç—Ä–∞
      final windUnitIndex = prefs.getInt(_windSpeedUnitKey) ?? 0;
      _windSpeedUnit = WindSpeedUnit.values[windUnitIndex];

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –µ–¥–∏–Ω–∏—Ü—ã –¥–∞–≤–ª–µ–Ω–∏—è
      final pressureUnitIndex = prefs.getInt(_pressureUnitKey) ?? 0;
      _pressureUnit = PressureUnit.values[pressureUnitIndex];

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–ª–∏–±—Ä–æ–≤–∫—É –±–∞—Ä–æ–º–µ—Ç—Ä–∞
      _pressureCalibration = prefs.getDouble(_pressureCalibrationKey) ?? 0.0;

      debugPrint(
        'üå§Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–≥–æ–¥—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã: T=${_temperatureUnit}, W=${_windSpeedUnit}, P=${_pressureUnit}, Cal=${_pressureCalibration}',
      );
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–≥–æ–¥—ã: $e');
    }
  }

  /// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –µ–¥–∏–Ω–∏—Ü —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
  Future<void> setTemperatureUnit(TemperatureUnit unit) async {
    _temperatureUnit = unit;
    final prefs = await SharedPreferences.getInstance();
    await prefs.setInt(_temperatureUnitKey, unit.index);
    debugPrint('üíæ –ï–¥–∏–Ω–∏—Ü—ã —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: $unit');
  }

  /// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –µ–¥–∏–Ω–∏—Ü —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤–µ—Ç—Ä–∞
  Future<void> setWindSpeedUnit(WindSpeedUnit unit) async {
    _windSpeedUnit = unit;
    final prefs = await SharedPreferences.getInstance();
    await prefs.setInt(_windSpeedUnitKey, unit.index);
    debugPrint('üíæ –ï–¥–∏–Ω–∏—Ü—ã —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤–µ—Ç—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: $unit');
  }

  /// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –µ–¥–∏–Ω–∏—Ü –¥–∞–≤–ª–µ–Ω–∏—è
  Future<void> setPressureUnit(PressureUnit unit) async {
    _pressureUnit = unit;
    final prefs = await SharedPreferences.getInstance();
    await prefs.setInt(_pressureUnitKey, unit.index);
    debugPrint('üíæ –ï–¥–∏–Ω–∏—Ü—ã –¥–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: $unit');
  }

  /// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –±–∞—Ä–æ–º–µ—Ç—Ä–∞
  Future<void> setPressureCalibration(double calibration) async {
    _pressureCalibration = calibration;
    final prefs = await SharedPreferences.getInstance();
    await prefs.setDouble(_pressureCalibrationKey, calibration);
    debugPrint('üíæ –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –±–∞—Ä–æ–º–µ—Ç—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: $calibration –≥–ü–∞');
  }

  // === –ú–ï–¢–û–î–´ –ö–û–ù–í–ï–†–¢–ê–¶–ò–ò ===

  /// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
  double convertTemperature(double celsius) {
    switch (_temperatureUnit) {
      case TemperatureUnit.celsius:
        return celsius;
      case TemperatureUnit.fahrenheit:
        return (celsius * 9 / 5) + 32;
    }
  }

  /// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —Å –µ–¥–∏–Ω–∏—Ü–∞–º–∏
  String formatTemperature(double celsius, {bool showUnit = true}) {
    final converted = convertTemperature(celsius);
    final unit = showUnit ? getTemperatureUnitSymbol() : '';
    return '${converted.round()}$unit';
  }

  /// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤–µ—Ç—Ä–∞ (–∏–∑ –∫–º/—á)
  double convertWindSpeed(double kph) {
    switch (_windSpeedUnit) {
      case WindSpeedUnit.metersPerSecond:
        return kph / 3.6;
      case WindSpeedUnit.kilometersPerHour:
        return kph;
    }
  }

  /// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤–µ—Ç—Ä–∞ —Å –µ–¥–∏–Ω–∏—Ü–∞–º–∏
  String formatWindSpeed(double kph, {bool showUnit = true}) {
    final converted = convertWindSpeed(kph);
    final unit = showUnit ? getWindSpeedUnitSymbol() : '';
    return '${converted.round()}$unit';
  }

  /// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –¥–∞–≤–ª–µ–Ω–∏—è —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ (–∏–∑ –º–±/–≥–ü–∞)
  double convertPressure(double mb) {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–º–µ–Ω—è–µ–º –∫–∞–ª–∏–±—Ä–æ–≤–∫—É
    final calibrated = mb + _pressureCalibration;

    switch (_pressureUnit) {
      case PressureUnit.hPa:
        return calibrated;
      case PressureUnit.mmHg:
        return calibrated / 1.333;
    }
  }

  /// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–≤–ª–µ–Ω–∏—è —Å –µ–¥–∏–Ω–∏—Ü–∞–º–∏
  String formatPressure(double mb, {bool showUnit = true}) {
    final converted = convertPressure(mb);
    final unit = showUnit ? getPressureUnitSymbol() : '';
    return '${converted.round()}$unit';
  }

  // === –ü–û–õ–£–ß–ï–ù–ò–ï –°–ò–ú–í–û–õ–û–í –ï–î–ò–ù–ò–¶ ===

  String getTemperatureUnitSymbol() {
    switch (_temperatureUnit) {
      case TemperatureUnit.celsius:
        return '¬∞C';
      case TemperatureUnit.fahrenheit:
        return '¬∞F';
    }
  }

  String getWindSpeedUnitSymbol() {
    switch (_windSpeedUnit) {
      case WindSpeedUnit.metersPerSecond:
        return ' –º/—Å';
      case WindSpeedUnit.kilometersPerHour:
        return ' –∫–º/—á';
    }
  }

  String getPressureUnitSymbol() {
    switch (_pressureUnit) {
      case PressureUnit.hPa:
        return ' –≥–ü–∞';
      case PressureUnit.mmHg:
        return ' –º–º';
    }
  }

  // === –ü–û–õ–£–ß–ï–ù–ò–ï –õ–û–ö–ê–õ–ò–ó–û–í–ê–ù–ù–´–• –ù–ê–ó–í–ê–ù–ò–ô ===

  String getTemperatureUnitName(BuildContext context) {
    // TODO: –î–æ–±–∞–≤–∏—Ç—å –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—é
    switch (_temperatureUnit) {
      case TemperatureUnit.celsius:
        return '–¶–µ–ª—å—Å–∏–π (¬∞C)';
      case TemperatureUnit.fahrenheit:
        return '–§–∞—Ä–µ–Ω–≥–µ–π—Ç (¬∞F)';
    }
  }

  String getWindSpeedUnitName(BuildContext context) {
    // TODO: –î–æ–±–∞–≤–∏—Ç—å –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—é
    switch (_windSpeedUnit) {
      case WindSpeedUnit.metersPerSecond:
        return '–ú–µ—Ç—Ä—ã –≤ —Å–µ–∫—É–Ω–¥—É (–º/—Å)';
      case WindSpeedUnit.kilometersPerHour:
        return '–ö–∏–ª–æ–º–µ—Ç—Ä—ã –≤ —á–∞—Å (–∫–º/—á)';
    }
  }

  String getPressureUnitName(BuildContext context) {
    // TODO: –î–æ–±–∞–≤–∏—Ç—å –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—é
    switch (_pressureUnit) {
      case PressureUnit.hPa:
        return '–ì–µ–∫—Ç–æ–ø–∞—Å–∫–∞–ª–∏ (–≥–ü–∞)';
      case PressureUnit.mmHg:
        return '–ú–∏–ª–ª–∏–º–µ—Ç—Ä—ã —Ä—Ç. —Å—Ç. (–º–º —Ä—Ç.—Å—Ç.)';
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ —Å –µ–¥–∏–Ω–∏—Ü–∞–º–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  String getFormattedCalibration() {
    if (_pressureCalibration == 0) return '0';

    final sign = _pressureCalibration > 0 ? '+' : '';
    return '$sign${_pressureCalibration.toStringAsFixed(1)} –≥–ü–∞';
  }

  /// –°–±—Ä–æ—Å –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  Future<void> resetToDefaults() async {
    await setTemperatureUnit(TemperatureUnit.celsius);
    await setWindSpeedUnit(WindSpeedUnit.metersPerSecond);
    await setPressureUnit(PressureUnit.mmHg);
    await setPressureCalibration(0.0);
    debugPrint('üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–≥–æ–¥—ã —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
  }
}
