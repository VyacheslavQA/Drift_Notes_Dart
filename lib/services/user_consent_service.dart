// –ü—É—Ç—å: lib/services/user_consent_service.dart

import 'package:shared_preferences/shared_preferences.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/foundation.dart';

/// –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class UserConsentService {
  static final UserConsentService _instance = UserConsentService._internal();
  factory UserConsentService() => _instance;
  UserConsentService._internal();

  static const String _privacyPolicyKey = 'privacy_policy_accepted';
  static const String _termsOfServiceKey = 'terms_of_service_accepted';
  static const String _userConsentVersionKey = 'user_consent_version';
  static const String _currentConsentVersion = '1.0'; // –í–µ—Ä—Å–∏—è —Å–æ–≥–ª–∞—à–µ–Ω–∏–π

  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final FirebaseAuth _auth = FirebaseAuth.instance;

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–∏–Ω—è–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è
  Future<bool> hasUserAcceptedAllConsents() async {
    try {
      final prefs = await SharedPreferences.getInstance();

      final privacyAccepted = prefs.getBool(_privacyPolicyKey) ?? false;
      final termsAccepted = prefs.getBool(_termsOfServiceKey) ?? false;
      final consentVersion = prefs.getString(_userConsentVersionKey) ?? '';

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–≥–ª–∞—Å–∏—è –ø—Ä–∏–Ω—è—Ç—ã –∏ –≤–µ—Ä—Å–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–∞—è
      final hasValidConsents = privacyAccepted &&
          termsAccepted &&
          consentVersion == _currentConsentVersion;

      debugPrint('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≥–ª–∞—Å–∏–π: Privacy=$privacyAccepted, Terms=$termsAccepted, Version=$consentVersion, Valid=$hasValidConsents');

      return hasValidConsents;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–≥–ª–∞—Å–∏–π: $e');
      return false;
    }
  }

  /// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–≥–ª–∞—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ª–æ–∫–∞–ª—å–Ω–æ –∏ –≤ Firestore
  Future<bool> saveUserConsents({
    required bool privacyPolicyAccepted,
    required bool termsOfServiceAccepted,
  }) async {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–±–∞ —Å–æ–≥–ª–∞—Å–∏—è –ø—Ä–∏–Ω—è—Ç—ã
      if (!privacyPolicyAccepted || !termsOfServiceAccepted) {
        debugPrint('‚ùå –ù–µ –≤—Å–µ —Å–æ–≥–ª–∞—Å–∏—è –ø—Ä–∏–Ω—è—Ç—ã');
        return false;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
      final prefs = await SharedPreferences.getInstance();
      await prefs.setBool(_privacyPolicyKey, privacyPolicyAccepted);
      await prefs.setBool(_termsOfServiceKey, termsOfServiceAccepted);
      await prefs.setString(_userConsentVersionKey, _currentConsentVersion);
      await prefs.setString('consent_timestamp', DateTime.now().toIso8601String());

      debugPrint('‚úÖ –°–æ–≥–ª–∞—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ');

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Firestore –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
      final user = _auth.currentUser;
      if (user != null) {
        await _saveConsentsToFirestore(
          user.uid,
          privacyPolicyAccepted,
          termsOfServiceAccepted,
        );
      }

      return true;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–≥–ª–∞—Å–∏–π: $e');
      return false;
    }
  }

  /// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–≥–ª–∞—Å–∏—è –≤ Firestore
  Future<void> _saveConsentsToFirestore(
      String userId,
      bool privacyAccepted,
      bool termsAccepted,
      ) async {
    try {
      await _firestore.collection('user_consents').doc(userId).set({
        'privacy_policy_accepted': privacyAccepted,
        'terms_of_service_accepted': termsAccepted,
        'consent_version': _currentConsentVersion,
        'consent_timestamp': FieldValue.serverTimestamp(),
        'user_id': userId,
      }, SetOptions(merge: true));

      debugPrint('‚úÖ –°–æ–≥–ª–∞—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Firestore –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $userId');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–≥–ª–∞—Å–∏–π –≤ Firestore: $e');
      // –ù–µ –±—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É, —Ç–∞–∫ –∫–∞–∫ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É–∂–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–º (–≤–ø–µ—Ä–≤—ã–µ –≤—Ö–æ–¥—è—â–∏–º —á–µ—Ä–µ–∑ Google)
  Future<bool> isNewGoogleUser(String userId) async {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –æ —Å–æ–≥–ª–∞—Å–∏—è—Ö –≤ Firestore
      final doc = await _firestore.collection('user_consents').doc(userId).get();

      if (doc.exists) {
        final data = doc.data();
        final hasConsents = data?['privacy_policy_accepted'] == true &&
            data?['terms_of_service_accepted'] == true;
        debugPrint('üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $userId –∏–º–µ–µ—Ç —Å–æ–≥–ª–∞—Å–∏—è –≤ Firestore: $hasConsents');
        return !hasConsents;
      }

      debugPrint('üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $userId –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Firestore - –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å');
      return true;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $e');
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å—á–∏—Ç–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–æ–≤—ã–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
      return true;
    }
  }

  /// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Å–æ–≥–ª–∞—Å–∏—è –∏–∑ Firestore –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
  Future<void> syncConsentsFromFirestore(String userId) async {
    try {
      final doc = await _firestore.collection('user_consents').doc(userId).get();

      if (doc.exists) {
        final data = doc.data();
        final privacyAccepted = data?['privacy_policy_accepted'] ?? false;
        final termsAccepted = data?['terms_of_service_accepted'] ?? false;
        final consentVersion = data?['consent_version'] ?? '';

        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        final prefs = await SharedPreferences.getInstance();
        await prefs.setBool(_privacyPolicyKey, privacyAccepted);
        await prefs.setBool(_termsOfServiceKey, termsAccepted);
        await prefs.setString(_userConsentVersionKey, consentVersion);

        debugPrint('‚úÖ –°–æ–≥–ª–∞—Å–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∏–∑ Firestore');
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–æ–≥–ª–∞—Å–∏–π: $e');
    }
  }

  /// –û—á–∏—â–∞–µ—Ç –≤—Å–µ —Å–æ–≥–ª–∞—Å–∏—è (–¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞)
  Future<void> clearAllConsents() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.remove(_privacyPolicyKey);
      await prefs.remove(_termsOfServiceKey);
      await prefs.remove(_userConsentVersionKey);
      await prefs.remove('consent_timestamp');

      debugPrint('‚úÖ –í—Å–µ —Å–æ–≥–ª–∞—Å–∏—è –æ—á–∏—â–µ–Ω—ã');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–æ–≥–ª–∞—Å–∏–π: $e');
    }
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é —Å–æ–≥–ª–∞—Å–∏–π
  String getCurrentConsentVersion() => _currentConsentVersion;

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –≤–µ—Ä—Å–∏–∏ —Å–æ–≥–ª–∞—Å–∏–π
  Future<bool> isConsentVersionCurrent() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final savedVersion = prefs.getString(_userConsentVersionKey) ?? '';
      return savedVersion == _currentConsentVersion;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–µ—Ä—Å–∏–∏ —Å–æ–≥–ª–∞—Å–∏–π: $e');
      return false;
    }
  }
}