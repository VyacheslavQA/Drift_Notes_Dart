// –ü—É—Ç—å: lib/services/user_consent_service.dart

import 'package:shared_preferences/shared_preferences.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';
import '../models/user_consent_models.dart';
import 'firebase/firebase_service.dart';

/// ‚úÖ –ü–†–û–î–ê–ö–®–ï–ù —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≥–ª–∞—Å–∏–π
class ConsentCheckResult {
  final bool allValid;
  final bool needPrivacyPolicy;
  final bool needTermsOfService;
  final String currentPrivacyVersion;
  final String currentTermsVersion;
  final String? savedPrivacyVersion;
  final String? savedTermsVersion;

  const ConsentCheckResult({
    required this.allValid,
    required this.needPrivacyPolicy,
    required this.needTermsOfService,
    required this.currentPrivacyVersion,
    required this.currentTermsVersion,
    this.savedPrivacyVersion,
    this.savedTermsVersion,
  });

  bool get hasChanges => needPrivacyPolicy || needTermsOfService;

  /// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –ø–æ–ª–∏—Ç–∏–∫ –¥–ª—è —Å–µ–ª–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–∫–∞–∑–∞
  List<String> get outdatedPolicies {
    List<String> outdated = [];
    debugPrint('üîç ConsentCheckResult.outdatedPolicies:');
    debugPrint('   - needPrivacyPolicy: $needPrivacyPolicy');
    debugPrint('   - needTermsOfService: $needTermsOfService');

    if (needPrivacyPolicy) {
      outdated.add('privacy');
      debugPrint('   - –¥–æ–±–∞–≤–ª—è–µ–º privacy');
    }
    if (needTermsOfService) {
      outdated.add('terms');
      debugPrint('   - –¥–æ–±–∞–≤–ª—è–µ–º terms');
    }

    debugPrint('   - –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: $outdated');
    return outdated;
  }

  @override
  String toString() {
    return 'ConsentCheckResult(allValid: $allValid, needPrivacy: $needPrivacyPolicy, needTerms: $needTermsOfService, outdated: $outdatedPolicies)';
  }
}

/// ‚úÖ –ü–†–û–î–ê–ö–®–ï–ù —Å–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/// –ë–ï–ó–û–ü–ê–°–ù–û —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –≤ Firebase
class UserConsentService {
  static final UserConsentService _instance = UserConsentService._internal();
  factory UserConsentService() => _instance;
  UserConsentService._internal();

  // –ö–ª—é—á–∏ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º)
  static const String _privacyPolicyAcceptedKey = 'privacy_policy_accepted';
  static const String _termsOfServiceAcceptedKey = 'terms_of_service_accepted';
  static const String _privacyPolicyVersionKey = 'privacy_policy_version';
  static const String _termsOfServiceVersionKey = 'terms_of_service_version';

  final FirebaseService _firebaseService = FirebaseService();

  // –ö—ç—à –¥–ª—è –≤–µ—Ä—Å–∏–π —Ñ–∞–π–ª–æ–≤
  String? _cachedPrivacyPolicyVersion;
  String? _cachedTermsOfServiceVersion;

  /// –ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤–µ—Ä—Å–∏—é –∏–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ —Ñ–∞–π–ª–∞
  String _extractVersionFromContent(String content) {
    try {
      final lines = content.split('\n');
      if (lines.isNotEmpty) {
        final firstLine = lines[0].trim();

        // –ò—â–µ–º –≤–µ—Ä—Å–∏—é (—Ä—É—Å—Å–∫–∏–π)
        RegExp versionRuPattern = RegExp(
          r'[–í–≤]–µ—Ä—Å–∏—è\s*:\s*(\d+\.\d+(?:\.\d+)?)',
          caseSensitive: false,
        );
        var match = versionRuPattern.firstMatch(firstLine);
        if (match != null && match.group(1) != null) {
          return match.group(1)!;
        }

        // –ò—â–µ–º –≤–µ—Ä—Å–∏—é (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π)
        RegExp versionEnPattern = RegExp(
          r'[Vv]ersion\s*:\s*(\d+\.\d+(?:\.\d+)?)',
          caseSensitive: false,
        );
        match = versionEnPattern.firstMatch(firstLine);
        if (match != null && match.group(1) != null) {
          return match.group(1)!;
        }

        // –ò—â–µ–º –ª—é–±—ã–µ —Ü–∏—Ñ—Ä—ã –∫–∞–∫ –≤–µ—Ä—Å–∏—é
        RegExp numbersPattern = RegExp(r'(\d+\.\d+(?:\.\d+)?)');
        match = numbersPattern.firstMatch(firstLine);
        if (match != null && match.group(1) != null) {
          return match.group(1)!;
        }
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏: $e');
    }

    return '1.0.0'; // –í–µ—Ä—Å–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  }

  /// ‚úÖ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ø–æ–∏—Å–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏ —Ñ–∞–π–ª–∞ –ø–æ–ª–∏—Ç–∏–∫–∏
  Future<Map<String, String>> _loadPrivacyPolicyInfo(String languageCode) async {
    try {
      // –°–ø–∏—Å–æ–∫ –≤–µ—Ä—Å–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º)
      final versionsToTry = [
        '2.0.0', '1.9.0', '1.8.0', '1.7.0', '1.6.0', '1.5.0', '1.4.0', '1.3.0', '1.2.0', '1.1.0', '1.0.0'
      ];

      String content = '';
      String foundVersion = '1.0.0';
      String usedFileName = '';

      // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã —Å –≤–µ—Ä—Å–∏—è–º–∏
      for (String version in versionsToTry) {
        final fileName = 'assets/privacy_policy/privacy_policy_${languageCode}_$version.txt';
        try {
          content = await rootBundle.loadString(fileName);
          usedFileName = fileName;
          debugPrint('‚úÖ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª —Å –≤–µ—Ä—Å–∏–µ–π: $fileName');
          break;
        } catch (e) {
          debugPrint('üîç –§–∞–π–ª $fileName –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –≤–µ—Ä—Å–∏—é...');
        }
      }

      // –ï—Å–ª–∏ –≤–µ—Ä—Å–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–±—É–µ–º –±–∞–∑–æ–≤—ã–π —Ñ–∞–π–ª
      if (content.isEmpty) {
        try {
          final fileName = 'assets/privacy_policy/privacy_policy_$languageCode.txt';
          content = await rootBundle.loadString(fileName);
          usedFileName = fileName;
          debugPrint('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –±–∞–∑–æ–≤—ã–π —Ñ–∞–π–ª: $fileName');
        } catch (e) {
          debugPrint('‚ùå –ë–∞–∑–æ–≤—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $e');
          // –§–æ–ª–ª–±—ç–∫ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫—É—é –≤–µ—Ä—Å–∏—é
          try {
            content = await rootBundle.loadString('assets/privacy_policy/privacy_policy_en.txt');
            usedFileName = 'privacy_policy_en.txt';
            debugPrint('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –∞–Ω–≥–ª–∏–π—Å–∫–∏–π fallback —Ñ–∞–π–ª');
          } catch (e2) {
            debugPrint('‚ùå –ê–Ω–≥–ª–∏–π—Å–∫–∏–π —Ñ–∞–π–ª —Ç–æ–∂–µ –Ω–µ –Ω–∞–π–¥–µ–Ω: $e2');
          }
        }
      }

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–µ—Ä—Å–∏—é –∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞
      final extractedVersion = _extractVersionFromContent(content);
      foundVersion = extractedVersion.isNotEmpty ? extractedVersion : '1.0.0';

      debugPrint('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≥—Ä—É–∑–∫–∏ Privacy Policy:');
      debugPrint('   - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ñ–∞–π–ª: $usedFileName');
      debugPrint('   - –ò–∑–≤–ª–µ—á–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è: $foundVersion');

      return {'version': foundVersion, 'content': content};
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏: $e');
      return {'version': '1.0.0', 'content': ''};
    }
  }

  /// ‚úÖ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ø–æ–∏—Å–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏ —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è
  Future<Map<String, String>> _loadTermsOfServiceInfo(String languageCode) async {
    try {
      // –°–ø–∏—Å–æ–∫ –≤–µ—Ä—Å–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º)
      final versionsToTry = [
        '2.0.0', '1.9.0', '1.8.0', '1.7.0', '1.6.0', '1.5.0', '1.4.0', '1.3.0', '1.2.0', '1.1.0', '1.0.0'
      ];

      String content = '';
      String foundVersion = '1.0.0';
      String usedFileName = '';

      // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã —Å –≤–µ—Ä—Å–∏—è–º–∏
      for (String version in versionsToTry) {
        final fileName = 'assets/terms_of_service/terms_of_service_${languageCode}_$version.txt';
        try {
          content = await rootBundle.loadString(fileName);
          usedFileName = fileName;
          debugPrint('‚úÖ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª —Å –≤–µ—Ä—Å–∏–µ–π: $fileName');
          break;
        } catch (e) {
          debugPrint('üîç –§–∞–π–ª $fileName –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –≤–µ—Ä—Å–∏—é...');
        }
      }

      // –ï—Å–ª–∏ –≤–µ—Ä—Å–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–±—É–µ–º –±–∞–∑–æ–≤—ã–π —Ñ–∞–π–ª
      if (content.isEmpty) {
        try {
          final fileName = 'assets/terms_of_service/terms_of_service_$languageCode.txt';
          content = await rootBundle.loadString(fileName);
          usedFileName = fileName;
          debugPrint('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –±–∞–∑–æ–≤—ã–π —Ñ–∞–π–ª: $fileName');
        } catch (e) {
          debugPrint('‚ùå –ë–∞–∑–æ–≤—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $e');
          // –§–æ–ª–ª–±—ç–∫ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫—É—é –≤–µ—Ä—Å–∏—é
          try {
            content = await rootBundle.loadString('assets/terms_of_service/terms_of_service_en.txt');
            usedFileName = 'terms_of_service_en.txt';
            debugPrint('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –∞–Ω–≥–ª–∏–π—Å–∫–∏–π fallback —Ñ–∞–π–ª');
          } catch (e2) {
            debugPrint('‚ùå –ê–Ω–≥–ª–∏–π—Å–∫–∏–π —Ñ–∞–π–ª —Ç–æ–∂–µ –Ω–µ –Ω–∞–π–¥–µ–Ω: $e2');
          }
        }
      }

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–µ—Ä—Å–∏—é –∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞
      final extractedVersion = _extractVersionFromContent(content);
      foundVersion = extractedVersion.isNotEmpty ? extractedVersion : '1.0.0';

      debugPrint('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≥—Ä—É–∑–∫–∏ Terms of Service:');
      debugPrint('   - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ñ–∞–π–ª: $usedFileName');
      debugPrint('   - –ò–∑–≤–ª–µ—á–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è: $foundVersion');

      return {'version': foundVersion, 'content': content};
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è: $e');
      return {'version': '1.0.0', 'content': ''};
    }
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –ø–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
  Future<String> getCurrentPrivacyPolicyVersion([String? languageCode]) async {
    languageCode ??= 'ru';

    try {
      final privacyInfo = await _loadPrivacyPolicyInfo(languageCode);
      _cachedPrivacyPolicyVersion = privacyInfo['version'];
      return privacyInfo['version'] ?? '1.0.0';
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ –ø–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏: $e');
      return '1.0.0';
    }
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è
  Future<String> getCurrentTermsOfServiceVersion([String? languageCode]) async {
    languageCode ??= 'ru';

    try {
      final termsInfo = await _loadTermsOfServiceInfo(languageCode);
      _cachedTermsOfServiceVersion = termsInfo['version'];
      return termsInfo['version'] ?? '1.0.0';
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è: $e');
      return '1.0.0';
    }
  }

  /// ‚úÖ –ü–†–û–î–ê–ö–®–ï–ù: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–≥–ª–∞—Å–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω—É–∂–Ω–æ –ø—Ä–∏–Ω—è—Ç—å
  Future<ConsentCheckResult> checkUserConsents([String? languageCode]) async {
    languageCode ??= 'ru';

    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤–µ—Ä—Å–∏–∏ –∏–∑ —Ñ–∞–π–ª–æ–≤
      final currentPrivacyVersion = await getCurrentPrivacyPolicyVersion(languageCode);
      final currentTermsVersion = await getCurrentTermsOfServiceVersion(languageCode);

      debugPrint('üìã –¢–µ–∫—É—â–∏–µ –≤–µ—Ä—Å–∏–∏: Privacy=$currentPrivacyVersion, Terms=$currentTermsVersion');

      if (_firebaseService.isUserLoggedIn) {
        // –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–≤–µ—Ä—è–µ–º Firebase
        final firebaseResult = await _checkFirebaseConsents(
          currentPrivacyVersion,
          currentTermsVersion,
        );

        if (!firebaseResult.allValid) {
          return firebaseResult;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        final localResult = await _checkLocalConsents(
          currentPrivacyVersion,
          currentTermsVersion,
        );

        // –ï—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∏–∑ Firebase
        if (!localResult.allValid) {
          await syncConsentsFromFirestore();
          return await _checkLocalConsents(currentPrivacyVersion, currentTermsVersion);
        }

        return localResult;
      } else {
        // –î–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        return await _checkLocalConsents(currentPrivacyVersion, currentTermsVersion);
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–≥–ª–∞—Å–∏–π: $e');
      return ConsentCheckResult(
        allValid: false,
        needPrivacyPolicy: true,
        needTermsOfService: true,
        currentPrivacyVersion: '1.0.0',
        currentTermsVersion: '1.0.0',
      );
    }
  }

  /// ‚úÖ –ü–†–û–î–ê–ö–®–ï–ù: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ Firebase —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ–±–æ–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
  Future<ConsentCheckResult> _checkFirebaseConsents(
      String currentPrivacyVersion,
      String currentTermsVersion,
      ) async {
    try {
      final doc = await _firebaseService.getUserConsents();

      if (!doc.exists) {
        return ConsentCheckResult(
          allValid: false,
          needPrivacyPolicy: true,
          needTermsOfService: true,
          currentPrivacyVersion: currentPrivacyVersion,
          currentTermsVersion: currentTermsVersion,
        );
      }

      final data = doc.data() as Map<String, dynamic>;

      // ‚úÖ –ü–†–û–î–ê–ö–®–ï–ù: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –æ–±–æ–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –ø–æ–ª–µ–π (camelCase –∏ snake_case)
      final privacyAccepted = data['privacyPolicyAccepted'] ??
          data['privacy_policy_accepted'] ?? false;
      final termsAccepted = data['termsOfServiceAccepted'] ??
          data['terms_of_service_accepted'] ?? false;
      final savedPrivacyVersion = data['privacyPolicyVersion'] ??
          data['privacy_policy_version'] ?? '';
      final savedTermsVersion = data['termsOfServiceVersion'] ??
          data['terms_of_service_version'] ?? '';

      debugPrint('üìä Firebase –¥–∞–Ω–Ω—ã–µ:');
      debugPrint('   Privacy: accepted=$privacyAccepted, version=$savedPrivacyVersion');
      debugPrint('   Terms: accepted=$termsAccepted, version=$savedTermsVersion');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏–∏
      final privacyValid = privacyAccepted && savedPrivacyVersion == currentPrivacyVersion;
      final termsValid = termsAccepted && savedTermsVersion == currentTermsVersion;

      debugPrint('üìä –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–µ—Ä—Å–∏–π:');
      debugPrint('   Privacy: $savedPrivacyVersion == $currentPrivacyVersion ‚Üí valid=$privacyValid');
      debugPrint('   Terms: $savedTermsVersion == $currentTermsVersion ‚Üí valid=$termsValid');
      debugPrint('   needPrivacyPolicy: ${!privacyValid}');
      debugPrint('   needTermsOfService: ${!termsValid}');

      return ConsentCheckResult(
        allValid: privacyValid && termsValid,
        needPrivacyPolicy: !privacyValid,
        needTermsOfService: !termsValid,
        currentPrivacyVersion: currentPrivacyVersion,
        currentTermsVersion: currentTermsVersion,
        savedPrivacyVersion: savedPrivacyVersion.isEmpty ? null : savedPrivacyVersion,
        savedTermsVersion: savedTermsVersion.isEmpty ? null : savedTermsVersion,
      );
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Firebase —Å–æ–≥–ª–∞—Å–∏–π: $e');
      return ConsentCheckResult(
        allValid: false,
        needPrivacyPolicy: true,
        needTermsOfService: true,
        currentPrivacyVersion: currentPrivacyVersion,
        currentTermsVersion: currentTermsVersion,
      );
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–µ —Å–æ–≥–ª–∞—Å–∏—è
  Future<ConsentCheckResult> _checkLocalConsents(
      String currentPrivacyVersion,
      String currentTermsVersion,
      ) async {
    try {
      final prefs = await SharedPreferences.getInstance();

      final privacyAccepted = prefs.getBool(_privacyPolicyAcceptedKey) ?? false;
      final termsAccepted = prefs.getBool(_termsOfServiceAcceptedKey) ?? false;
      final savedPrivacyVersion = prefs.getString(_privacyPolicyVersionKey) ?? '';
      final savedTermsVersion = prefs.getString(_termsOfServiceVersionKey) ?? '';

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏–∏
      final privacyValid = privacyAccepted && savedPrivacyVersion == currentPrivacyVersion;
      final termsValid = termsAccepted && savedTermsVersion == currentTermsVersion;

      return ConsentCheckResult(
        allValid: privacyValid && termsValid,
        needPrivacyPolicy: !privacyValid,
        needTermsOfService: !termsValid,
        currentPrivacyVersion: currentPrivacyVersion,
        currentTermsVersion: currentTermsVersion,
        savedPrivacyVersion: savedPrivacyVersion.isEmpty ? null : savedPrivacyVersion,
        savedTermsVersion: savedTermsVersion.isEmpty ? null : savedTermsVersion,
      );
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Å–æ–≥–ª–∞—Å–∏–π: $e');
      return ConsentCheckResult(
        allValid: false,
        needPrivacyPolicy: true,
        needTermsOfService: true,
        currentPrivacyVersion: currentPrivacyVersion,
        currentTermsVersion: currentTermsVersion,
      );
    }
  }

  /// ‚úÖ –ü–†–û–î–ê–ö–®–ï–ù: –°–µ–ª–µ–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
  Future<bool> saveSelectiveConsents({
    bool? privacyPolicyAccepted,
    bool? termsOfServiceAccepted,
    String? languageCode,
    List<String>? outdatedPolicies,
  }) async {
    try {
      languageCode ??= 'ru';
      outdatedPolicies ??= [];

      final prefs = await SharedPreferences.getInstance();

      debugPrint('üîÑ –ü–†–û–î–ê–ö–®–ï–ù: –°–µ–ª–µ–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–∏–π');
      debugPrint('üìã –ö–æ–Ω—Ç–µ–∫—Å—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –ø–æ–ª–∏—Ç–∏–∫: $outdatedPolicies');
      debugPrint('üìã –ü–µ—Ä–µ–¥–∞–Ω–æ: Privacy=${privacyPolicyAccepted}, Terms=${termsOfServiceAccepted}');

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
      if (outdatedPolicies.isNotEmpty) {
        _validateSelectiveParameters(
          privacyPolicyAccepted,
          termsOfServiceAccepted,
          outdatedPolicies,
        );
      }

      // –ï—Å–ª–∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –ø–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
      if (privacyPolicyAccepted == true) {
        final currentPrivacyVersion = await getCurrentPrivacyPolicyVersion(languageCode);
        await prefs.setBool(_privacyPolicyAcceptedKey, true);
        await prefs.setString(_privacyPolicyVersionKey, currentPrivacyVersion);
        debugPrint('‚úÖ –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏–Ω—è—Ç–∞: –≤–µ—Ä—Å–∏—è $currentPrivacyVersion');
      }

      // –ï—Å–ª–∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ
      if (termsOfServiceAccepted == true) {
        final currentTermsVersion = await getCurrentTermsOfServiceVersion(languageCode);
        await prefs.setBool(_termsOfServiceAcceptedKey, true);
        await prefs.setString(_termsOfServiceVersionKey, currentTermsVersion);
        debugPrint('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ: –≤–µ—Ä—Å–∏—è $currentTermsVersion');
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ
      await prefs.setString('consent_timestamp', DateTime.now().toIso8601String());
      await prefs.setString('consent_language', languageCode);

      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      if (outdatedPolicies.isNotEmpty) {
        await prefs.setString('last_updated_policies', outdatedPolicies.join(','));
        debugPrint('üìä –ú–µ—Ç—Ä–∏–∫–∞: –æ–±–Ω–æ–≤–ª–µ–Ω—ã –ø–æ–ª–∏—Ç–∏–∫–∏ ${outdatedPolicies.join(', ')}');
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Firebase –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
      if (_firebaseService.isUserLoggedIn) {
        await _saveSelectiveConsentsToFirestore(
          privacyPolicyAccepted,
          termsOfServiceAccepted,
          languageCode,
          outdatedPolicies,
        );
      }

      debugPrint('‚úÖ –ü–†–û–î–ê–ö–®–ï–ù: –°–µ–ª–µ–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
      return true;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–µ–ª–µ–∫—Ç–∏–≤–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–≥–ª–∞—Å–∏–π: $e');
      return false;
    }
  }

  /// –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–µ–ª–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  void _validateSelectiveParameters(
      bool? privacyAccepted,
      bool? termsAccepted,
      List<String> outdatedPolicies,
      ) {
    for (String policy in outdatedPolicies) {
      switch (policy) {
        case 'privacy':
          if (privacyAccepted != true) {
            debugPrint('‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: Privacy Policy —É—Å—Ç–∞—Ä–µ–ª–∞, –Ω–æ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è');
          }
          break;
        case 'terms':
          if (termsAccepted != true) {
            debugPrint('‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: Terms of Service —É—Å—Ç–∞—Ä–µ–ª–∏, –Ω–æ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è');
          }
          break;
        default:
          debugPrint('‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞ –≤ outdatedPolicies: $policy');
      }
    }

    if (privacyAccepted == true && !outdatedPolicies.contains('privacy')) {
      debugPrint('‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: Privacy Policy –ø–µ—Ä–µ–¥–∞–Ω–∞ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è, –Ω–æ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –∫–∞–∫ —É—Å—Ç–∞—Ä–µ–≤—à–∞—è');
    }
    if (termsAccepted == true && !outdatedPolicies.contains('terms')) {
      debugPrint('‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: Terms of Service –ø–µ—Ä–µ–¥–∞–Ω—ã –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è, –Ω–æ –Ω–µ —É–∫–∞–∑–∞–Ω—ã –∫–∞–∫ —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ');
    }
  }

  /// ‚úÖ –ü–†–û–î–ê–ö–®–ï–ù: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Firebase —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
  Future<void> _saveSelectiveConsentsToFirestore(
      bool? privacyAccepted,
      bool? termsAccepted,
      String languageCode,
      List<String> outdatedPolicies,
      ) async {
    try {
      // ‚úÖ –ü–†–û–î–ê–ö–®–ï–ù: –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –¢–û–ú –ñ–ï –§–û–†–ú–ê–¢–ï —á—Ç–æ —É–∂–µ –µ—Å—Ç—å –≤ Firebase
      Map<String, dynamic> updateData = {
        'consent_language': languageCode,
        'consent_timestamp': FieldValue.serverTimestamp(),
        'updatedAt': FieldValue.serverTimestamp(),
      };

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      if (outdatedPolicies.isNotEmpty) {
        updateData['last_updated_policies'] = outdatedPolicies.join(',');
        updateData['update_context'] = 'selective_update';
      }

      if (privacyAccepted == true) {
        final currentPrivacyVersion = await getCurrentPrivacyPolicyVersion(languageCode);

        // ‚úÖ –ü–†–û–î–ê–ö–®–ï–ù: –û–±–Ω–æ–≤–ª—è–µ–º –û–ë–ê —Ñ–æ—Ä–º–∞—Ç–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        updateData.addAll({
          // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç (snake_case)
          'privacy_policy_accepted': true,
          'privacy_policy_version': currentPrivacyVersion,
          // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç (camelCase) - –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
          'privacyPolicyAccepted': true,
          'privacyPolicyVersion': currentPrivacyVersion,
        });
      }

      if (termsAccepted == true) {
        final currentTermsVersion = await getCurrentTermsOfServiceVersion(languageCode);

        // ‚úÖ –ü–†–û–î–ê–ö–®–ï–ù: –û–±–Ω–æ–≤–ª—è–µ–º –û–ë–ê —Ñ–æ—Ä–º–∞—Ç–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        updateData.addAll({
          // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç (snake_case)
          'terms_of_service_accepted': true,
          'terms_of_service_version': currentTermsVersion,
          // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç (camelCase) - –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
          'termsOfServiceAccepted': true,
          'termsOfServiceVersion': currentTermsVersion,
        });
      }

      await _firebaseService.updateUserConsents(updateData);
      debugPrint('‚úÖ –ü–†–û–î–ê–ö–®–ï–ù: –°–µ–ª–µ–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–≥–ª–∞—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Firebase —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ–±–æ–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–µ–ª–µ–∫—Ç–∏–≤–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–≥–ª–∞—Å–∏–π –≤ Firebase: $e');
    }
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –ø–æ–ª–∏—Ç–∏–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
  Future<List<String>> getOutdatedPolicies([String? languageCode]) async {
    final checkResult = await checkUserConsents(languageCode);
    return checkResult.outdatedPolicies;
  }

  /// –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –ø–æ–ª–∏—Ç–∏–∫—É
  Future<bool> updatePrivacyPolicyAcceptance(String? languageCode) async {
    return await saveSelectiveConsents(
      privacyPolicyAccepted: true,
      termsOfServiceAccepted: null,
      languageCode: languageCode,
      outdatedPolicies: ['privacy'],
    );
  }

  /// –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ
  Future<bool> updateTermsOfServiceAcceptance(String? languageCode) async {
    return await saveSelectiveConsents(
      privacyPolicyAccepted: null,
      termsOfServiceAccepted: true,
      languageCode: languageCode,
      outdatedPolicies: ['terms'],
    );
  }

  /// ‚úÖ –ü–†–û–î–ê–ö–®–ï–ù: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ–±–æ–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
  Future<void> syncConsentsFromFirestore() async {
    try {
      if (!_firebaseService.isUserLoggedIn) {
        debugPrint('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
        return;
      }

      final doc = await _firebaseService.getUserConsents();

      if (doc.exists) {
        final data = doc.data() as Map<String, dynamic>;

        // ‚úÖ –ü–†–û–î–ê–ö–®–ï–ù: –ß—Ç–µ–Ω–∏–µ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ–±–æ–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
        final privacyAccepted = data['privacyPolicyAccepted'] ??
            data['privacy_policy_accepted'] ?? false;
        final termsAccepted = data['termsOfServiceAccepted'] ??
            data['terms_of_service_accepted'] ?? false;
        final privacyVersion = data['privacyPolicyVersion'] ??
            data['privacy_policy_version'] ?? '';
        final termsVersion = data['termsOfServiceVersion'] ??
            data['terms_of_service_version'] ?? '';
        final consentLanguage = data['consentLanguage'] ??
            data['consent_language'] ?? 'ru';

        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        final prefs = await SharedPreferences.getInstance();
        await prefs.setBool(_privacyPolicyAcceptedKey, privacyAccepted);
        await prefs.setBool(_termsOfServiceAcceptedKey, termsAccepted);
        await prefs.setString(_privacyPolicyVersionKey, privacyVersion);
        await prefs.setString(_termsOfServiceVersionKey, termsVersion);
        await prefs.setString('consent_language', consentLanguage);

        debugPrint('‚úÖ –ü–†–û–î–ê–ö–®–ï–ù: –°–æ–≥–ª–∞—Å–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∏–∑ Firebase');
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–æ–≥–ª–∞—Å–∏–π: $e');
    }
  }

  /// –û—á–∏—â–∞–µ—Ç –≤—Å–µ —Å–æ–≥–ª–∞—Å–∏—è (–¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞)
  Future<void> clearAllConsents() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.remove(_privacyPolicyAcceptedKey);
      await prefs.remove(_termsOfServiceAcceptedKey);
      await prefs.remove(_privacyPolicyVersionKey);
      await prefs.remove(_termsOfServiceVersionKey);
      await prefs.remove('consent_timestamp');
      await prefs.remove('consent_language');
      await prefs.remove('last_updated_policies');

      // –û—á–∏—â–∞–µ–º –∫—ç—à
      _cachedPrivacyPolicyVersion = null;
      _cachedTermsOfServiceVersion = null;

      debugPrint('‚úÖ –í—Å–µ —Å–æ–≥–ª–∞—Å–∏—è –æ—á–∏—â–µ–Ω—ã');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–æ–≥–ª–∞—Å–∏–π: $e');
    }
  }

  /// ‚úÖ –û–ë–†–ê–¢–ù–ê–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨: —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–¥–∞
  Future<bool> hasUserAcceptedAllConsents([String? languageCode]) async {
    final result = await checkUserConsents(languageCode);
    return result.allValid;
  }

  /// ‚úÖ –û–ë–†–ê–¢–ù–ê–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–∏–π (–ø–æ–ª–Ω–æ–µ)
  Future<bool> saveUserConsents({
    required bool privacyPolicyAccepted,
    required bool termsOfServiceAccepted,
    String? languageCode,
  }) async {
    if (!privacyPolicyAccepted || !termsOfServiceAccepted) {
      debugPrint('‚ùå –ù–µ –≤—Å–µ —Å–æ–≥–ª–∞—Å–∏—è –ø—Ä–∏–Ω—è—Ç—ã');
      return false;
    }

    return await saveSelectiveConsents(
      privacyPolicyAccepted: privacyPolicyAccepted,
      termsOfServiceAccepted: termsOfServiceAccepted,
      languageCode: languageCode,
      outdatedPolicies: ['privacy', 'terms'],
    );
  }

  /// ‚úÖ –û–ë–†–ê–¢–ù–ê–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ–≥–æ Google –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<bool> isNewGoogleUser() async {
    try {
      if (!_firebaseService.isUserLoggedIn) {
        return true;
      }

      final doc = await _firebaseService.getUserConsents();
      if (doc.exists) {
        final data = doc.data() as Map<String, dynamic>;

        // ‚úÖ –ü–†–û–î–ê–ö–®–ï–ù: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ–±–æ–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
        final hasPrivacy = data['privacyPolicyAccepted'] == true ||
            data['privacy_policy_accepted'] == true;
        final hasTerms = data['termsOfServiceAccepted'] == true ||
            data['terms_of_service_accepted'] == true;

        return !(hasPrivacy && hasTerms);
      }

      return true;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $e');
      return true;
    }
  }

  /// ‚úÖ –ü–†–û–î–ê–ö–®–ï–ù: –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–æ–≥–ª–∞—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<UserConsentStatus> getUserConsentStatus([String? languageCode]) async {
    languageCode ??= 'ru';

    try {
      final prefs = await SharedPreferences.getInstance();

      final privacyAccepted = prefs.getBool(_privacyPolicyAcceptedKey) ?? false;
      final termsAccepted = prefs.getBool(_termsOfServiceAcceptedKey) ?? false;
      final savedPrivacyVersion = prefs.getString(_privacyPolicyVersionKey);
      final savedTermsVersion = prefs.getString(_termsOfServiceVersionKey);
      final consentTimestampStr = prefs.getString('consent_timestamp');
      final consentLanguage = prefs.getString('consent_language');

      final currentPrivacyVersion = await getCurrentPrivacyPolicyVersion(languageCode);
      final currentTermsVersion = await getCurrentTermsOfServiceVersion(languageCode);

      final isPrivacyVersionCurrent = savedPrivacyVersion == currentPrivacyVersion;
      final isTermsVersionCurrent = savedTermsVersion == currentTermsVersion;

      DateTime? consentTimestamp;
      if (consentTimestampStr != null) {
        try {
          consentTimestamp = DateTime.parse(consentTimestampStr);
        } catch (e) {
          debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–≥–ª–∞—Å–∏—è: $e');
        }
      }

      return UserConsentStatus(
        privacyPolicyAccepted: privacyAccepted,
        termsOfServiceAccepted: termsAccepted,
        consentVersion: '$currentPrivacyVersion-$currentTermsVersion',
        consentTimestamp: consentTimestamp,
        consentLanguage: consentLanguage,
        isVersionCurrent: isPrivacyVersionCurrent && isTermsVersionCurrent,
        currentVersion: '$currentPrivacyVersion-$currentTermsVersion',
      );
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–≥–ª–∞—Å–∏–π: $e');
      return const UserConsentStatus(
        privacyPolicyAccepted: false,
        termsOfServiceAccepted: false,
        isVersionCurrent: false,
      );
    }
  }
}