// –ü—É—Ç—å: lib/services/user_consent_service.dart

import 'package:shared_preferences/shared_preferences.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';
import 'dart:convert';
import 'package:crypto/crypto.dart';
import '../models/user_consent_models.dart';
import 'firebase/firebase_service.dart';

/// ‚úÖ –£–ü–†–û–©–ï–ù–ù–´–ô —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≥–ª–∞—Å–∏–π - —á—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω—É–∂–Ω–æ –ø—Ä–∏–Ω—è—Ç—å
class ConsentCheckResult {
  final bool allValid;
  final bool needPrivacyPolicy;
  final bool needTermsOfService;
  final String currentPrivacyVersion;
  final String currentTermsVersion;
  final String? savedPrivacyVersion;
  final String? savedTermsVersion;

  const ConsentCheckResult({
    required this.allValid,
    required this.needPrivacyPolicy,
    required this.needTermsOfService,
    required this.currentPrivacyVersion,
    required this.currentTermsVersion,
    this.savedPrivacyVersion,
    this.savedTermsVersion,
  });

  /// –ï—Å—Ç—å –ª–∏ —á—Ç–æ-—Ç–æ, —á—Ç–æ –Ω—É–∂–Ω–æ –ø—Ä–∏–Ω—è—Ç—å –∑–∞–Ω–æ–≤–æ
  bool get hasChanges => needPrivacyPolicy || needTermsOfService;

  @override
  String toString() {
    return 'ConsentCheckResult(allValid: $allValid, needPrivacy: $needPrivacyPolicy, needTerms: $needTermsOfService)';
  }
}

/// ‚úÖ –£–ü–†–û–©–ï–ù–ù–´–ô —Å–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class UserConsentService {
  static final UserConsentService _instance = UserConsentService._internal();
  factory UserConsentService() => _instance;
  UserConsentService._internal();

  // –ö–ª—é—á–∏ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
  static const String _privacyPolicyAcceptedKey = 'privacy_policy_accepted';
  static const String _termsOfServiceAcceptedKey = 'terms_of_service_accepted';
  static const String _privacyPolicyVersionKey = 'privacy_policy_version';
  static const String _termsOfServiceVersionKey = 'terms_of_service_version';

  final FirebaseService _firebaseService = FirebaseService();

  // –ö—ç—à –¥–ª—è –≤–µ—Ä—Å–∏–π —Ñ–∞–π–ª–æ–≤
  String? _cachedPrivacyPolicyVersion;
  String? _cachedTermsOfServiceVersion;

  /// –ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤–µ—Ä—Å–∏—é –∏–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ —Ñ–∞–π–ª–∞
  String _extractVersionFromContent(String content) {
    try {
      final lines = content.split('\n');
      if (lines.isNotEmpty) {
        final firstLine = lines[0].trim();

        // –ò—â–µ–º –≤–µ—Ä—Å–∏—é (—Ä—É—Å—Å–∫–∏–π)
        RegExp versionRuPattern = RegExp(
          r'[–í–≤]–µ—Ä—Å–∏—è\s*:\s*(\d+\.\d+(?:\.\d+)?)',
          caseSensitive: false,
        );
        var match = versionRuPattern.firstMatch(firstLine);
        if (match != null && match.group(1) != null) {
          return match.group(1)!;
        }

        // –ò—â–µ–º –≤–µ—Ä—Å–∏—é (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π)
        RegExp versionEnPattern = RegExp(
          r'[Vv]ersion\s*:\s*(\d+\.\d+(?:\.\d+)?)',
          caseSensitive: false,
        );
        match = versionEnPattern.firstMatch(firstLine);
        if (match != null && match.group(1) != null) {
          return match.group(1)!;
        }

        // –ò—â–µ–º –ª—é–±—ã–µ —Ü–∏—Ñ—Ä—ã –∫–∞–∫ –≤–µ—Ä—Å–∏—é
        RegExp numbersPattern = RegExp(r'(\d+\.\d+(?:\.\d+)?)');
        match = numbersPattern.firstMatch(firstLine);
        if (match != null && match.group(1) != null) {
          return match.group(1)!;
        }
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏: $e');
    }

    return '1.0.0'; // –í–µ—Ä—Å–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  }

  /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–∞–π–ª –ø–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
  Future<Map<String, String>> _loadPrivacyPolicyInfo(String languageCode) async {
    try {
      final fileName = 'assets/privacy_policy/privacy_policy_$languageCode.txt';
      String content;

      try {
        content = await rootBundle.loadString(fileName);
      } catch (e) {
        // –§–æ–ª–ª–±—ç–∫ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫—É—é –≤–µ—Ä—Å–∏—é
        content = await rootBundle.loadString('assets/privacy_policy/privacy_policy_en.txt');
      }

      final version = _extractVersionFromContent(content);
      return {'version': version, 'content': content};
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏: $e');
      return {'version': '1.0.0', 'content': ''};
    }
  }

  /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è
  Future<Map<String, String>> _loadTermsOfServiceInfo(String languageCode) async {
    try {
      final fileName = 'assets/terms_of_service/terms_of_service_$languageCode.txt';
      String content;

      try {
        content = await rootBundle.loadString(fileName);
      } catch (e) {
        // –§–æ–ª–ª–±—ç–∫ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫—É—é –≤–µ—Ä—Å–∏—é
        content = await rootBundle.loadString('assets/terms_of_service/terms_of_service_en.txt');
      }

      final version = _extractVersionFromContent(content);
      return {'version': version, 'content': content};
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è: $e');
      return {'version': '1.0.0', 'content': ''};
    }
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –ø–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
  Future<String> getCurrentPrivacyPolicyVersion([String? languageCode]) async {
    languageCode ??= 'ru';

    try {
      final privacyInfo = await _loadPrivacyPolicyInfo(languageCode);
      _cachedPrivacyPolicyVersion = privacyInfo['version'];
      return privacyInfo['version'] ?? '1.0.0';
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ –ø–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏: $e');
      return '1.0.0';
    }
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è
  Future<String> getCurrentTermsOfServiceVersion([String? languageCode]) async {
    languageCode ??= 'ru';

    try {
      final termsInfo = await _loadTermsOfServiceInfo(languageCode);
      _cachedTermsOfServiceVersion = termsInfo['version'];
      return termsInfo['version'] ?? '1.0.0';
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è: $e');
      return '1.0.0';
    }
  }

  /// ‚úÖ –ì–õ–ê–í–ù–´–ô –ú–ï–¢–û–î: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–≥–ª–∞—Å–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω—É–∂–Ω–æ –ø—Ä–∏–Ω—è—Ç—å
  Future<ConsentCheckResult> checkUserConsents([String? languageCode]) async {
    languageCode ??= 'ru';

    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤–µ—Ä—Å–∏–∏ –∏–∑ —Ñ–∞–π–ª–æ–≤
      final currentPrivacyVersion = await getCurrentPrivacyPolicyVersion(languageCode);
      final currentTermsVersion = await getCurrentTermsOfServiceVersion(languageCode);

      debugPrint('üìã –¢–µ–∫—É—â–∏–µ –≤–µ—Ä—Å–∏–∏: Privacy=$currentPrivacyVersion, Terms=$currentTermsVersion');

      if (_firebaseService.isUserLoggedIn) {
        // –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–≤–µ—Ä—è–µ–º Firebase
        final firebaseResult = await _checkFirebaseConsents(
          currentPrivacyVersion,
          currentTermsVersion,
        );

        if (!firebaseResult.allValid) {
          return firebaseResult;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        final localResult = await _checkLocalConsents(
          currentPrivacyVersion,
          currentTermsVersion,
        );

        // –ï—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∏–∑ Firebase
        if (!localResult.allValid) {
          await syncConsentsFromFirestore();
          return await _checkLocalConsents(currentPrivacyVersion, currentTermsVersion);
        }

        return localResult;
      } else {
        // –î–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        return await _checkLocalConsents(currentPrivacyVersion, currentTermsVersion);
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–≥–ª–∞—Å–∏–π: $e');
      return ConsentCheckResult(
        allValid: false,
        needPrivacyPolicy: true,
        needTermsOfService: true,
        currentPrivacyVersion: '1.0.0',
        currentTermsVersion: '1.0.0',
      );
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–≥–ª–∞—Å–∏—è –≤ Firebase
  Future<ConsentCheckResult> _checkFirebaseConsents(
      String currentPrivacyVersion,
      String currentTermsVersion,
      ) async {
    try {
      final doc = await _firebaseService.getUserConsents();

      if (!doc.exists) {
        return ConsentCheckResult(
          allValid: false,
          needPrivacyPolicy: true,
          needTermsOfService: true,
          currentPrivacyVersion: currentPrivacyVersion,
          currentTermsVersion: currentTermsVersion,
        );
      }

      final data = doc.data() as Map<String, dynamic>;
      final privacyAccepted = data['privacy_policy_accepted'] ?? false;
      final termsAccepted = data['terms_of_service_accepted'] ?? false;
      final savedPrivacyVersion = data['privacy_policy_version'] ?? '';
      final savedTermsVersion = data['terms_of_service_version'] ?? '';

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏–∏
      final privacyValid = privacyAccepted && savedPrivacyVersion == currentPrivacyVersion;
      final termsValid = termsAccepted && savedTermsVersion == currentTermsVersion;

      return ConsentCheckResult(
        allValid: privacyValid && termsValid,
        needPrivacyPolicy: !privacyValid,
        needTermsOfService: !termsValid,
        currentPrivacyVersion: currentPrivacyVersion,
        currentTermsVersion: currentTermsVersion,
        savedPrivacyVersion: savedPrivacyVersion.isEmpty ? null : savedPrivacyVersion,
        savedTermsVersion: savedTermsVersion.isEmpty ? null : savedTermsVersion,
      );
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Firebase —Å–æ–≥–ª–∞—Å–∏–π: $e');
      return ConsentCheckResult(
        allValid: false,
        needPrivacyPolicy: true,
        needTermsOfService: true,
        currentPrivacyVersion: currentPrivacyVersion,
        currentTermsVersion: currentTermsVersion,
      );
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–µ —Å–æ–≥–ª–∞—Å–∏—è
  Future<ConsentCheckResult> _checkLocalConsents(
      String currentPrivacyVersion,
      String currentTermsVersion,
      ) async {
    try {
      final prefs = await SharedPreferences.getInstance();

      final privacyAccepted = prefs.getBool(_privacyPolicyAcceptedKey) ?? false;
      final termsAccepted = prefs.getBool(_termsOfServiceAcceptedKey) ?? false;
      final savedPrivacyVersion = prefs.getString(_privacyPolicyVersionKey) ?? '';
      final savedTermsVersion = prefs.getString(_termsOfServiceVersionKey) ?? '';

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏–∏
      final privacyValid = privacyAccepted && savedPrivacyVersion == currentPrivacyVersion;
      final termsValid = termsAccepted && savedTermsVersion == currentTermsVersion;

      return ConsentCheckResult(
        allValid: privacyValid && termsValid,
        needPrivacyPolicy: !privacyValid,
        needTermsOfService: !termsValid,
        currentPrivacyVersion: currentPrivacyVersion,
        currentTermsVersion: currentTermsVersion,
        savedPrivacyVersion: savedPrivacyVersion.isEmpty ? null : savedPrivacyVersion,
        savedTermsVersion: savedTermsVersion.isEmpty ? null : savedTermsVersion,
      );
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Å–æ–≥–ª–∞—Å–∏–π: $e');
      return ConsentCheckResult(
        allValid: false,
        needPrivacyPolicy: true,
        needTermsOfService: true,
        currentPrivacyVersion: currentPrivacyVersion,
        currentTermsVersion: currentTermsVersion,
      );
    }
  }

  /// ‚úÖ –£–ü–†–û–©–ï–ù–ù–´–ô: –°–µ–ª–µ–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–∏–π (—Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã)
  Future<bool> saveSelectiveConsents({
    bool? privacyPolicyAccepted,
    bool? termsOfServiceAccepted,
    String? languageCode,
  }) async {
    try {
      languageCode ??= 'ru';
      final prefs = await SharedPreferences.getInstance();

      // –ï—Å–ª–∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –ø–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
      if (privacyPolicyAccepted == true) {
        final currentPrivacyVersion = await getCurrentPrivacyPolicyVersion(languageCode);
        await prefs.setBool(_privacyPolicyAcceptedKey, true);
        await prefs.setString(_privacyPolicyVersionKey, currentPrivacyVersion);
        debugPrint('‚úÖ –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏–Ω—è—Ç–∞: –≤–µ—Ä—Å–∏—è $currentPrivacyVersion');
      }

      // –ï—Å–ª–∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ
      if (termsOfServiceAccepted == true) {
        final currentTermsVersion = await getCurrentTermsOfServiceVersion(languageCode);
        await prefs.setBool(_termsOfServiceAcceptedKey, true);
        await prefs.setString(_termsOfServiceVersionKey, currentTermsVersion);
        debugPrint('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ: –≤–µ—Ä—Å–∏—è $currentTermsVersion');
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ
      await prefs.setString('consent_timestamp', DateTime.now().toIso8601String());
      await prefs.setString('consent_language', languageCode);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Firebase –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
      if (_firebaseService.isUserLoggedIn) {
        await _saveSelectiveConsentsToFirestore(
          privacyPolicyAccepted,
          termsOfServiceAccepted,
          languageCode,
        );
      }

      return true;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–µ–ª–µ–∫—Ç–∏–≤–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–≥–ª–∞—Å–∏–π: $e');
      return false;
    }
  }

  /// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–≥–ª–∞—Å–∏—è –≤ Firebase
  Future<void> _saveSelectiveConsentsToFirestore(
      bool? privacyAccepted,
      bool? termsAccepted,
      String languageCode,
      ) async {
    try {
      Map<String, dynamic> updateData = {
        'consent_language': languageCode,
        'consent_timestamp': FieldValue.serverTimestamp(),
      };

      if (privacyAccepted == true) {
        final currentPrivacyVersion = await getCurrentPrivacyPolicyVersion(languageCode);
        updateData.addAll({
          'privacy_policy_accepted': true,
          'privacy_policy_version': currentPrivacyVersion,
        });
      }

      if (termsAccepted == true) {
        final currentTermsVersion = await getCurrentTermsOfServiceVersion(languageCode);
        updateData.addAll({
          'terms_of_service_accepted': true,
          'terms_of_service_version': currentTermsVersion,
        });
      }

      await _firebaseService.updateUserConsents(updateData);
      debugPrint('‚úÖ –°–µ–ª–µ–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–≥–ª–∞—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Firebase');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–µ–ª–µ–∫—Ç–∏–≤–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–≥–ª–∞—Å–∏–π –≤ Firebase: $e');
    }
  }

  /// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Å–æ–≥–ª–∞—Å–∏—è –∏–∑ Firebase
  Future<void> syncConsentsFromFirestore() async {
    try {
      if (!_firebaseService.isUserLoggedIn) {
        debugPrint('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
        return;
      }

      final doc = await _firebaseService.getUserConsents();

      if (doc.exists) {
        final data = doc.data() as Map<String, dynamic>;
        final privacyAccepted = data['privacy_policy_accepted'] ?? false;
        final termsAccepted = data['terms_of_service_accepted'] ?? false;
        final privacyVersion = data['privacy_policy_version'] ?? '';
        final termsVersion = data['terms_of_service_version'] ?? '';
        final consentLanguage = data['consent_language'] ?? 'ru';

        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        final prefs = await SharedPreferences.getInstance();
        await prefs.setBool(_privacyPolicyAcceptedKey, privacyAccepted);
        await prefs.setBool(_termsOfServiceAcceptedKey, termsAccepted);
        await prefs.setString(_privacyPolicyVersionKey, privacyVersion);
        await prefs.setString(_termsOfServiceVersionKey, termsVersion);
        await prefs.setString('consent_language', consentLanguage);

        debugPrint('‚úÖ –°–æ–≥–ª–∞—Å–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∏–∑ Firebase');
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–æ–≥–ª–∞—Å–∏–π: $e');
    }
  }

  /// –û—á–∏—â–∞–µ—Ç –≤—Å–µ —Å–æ–≥–ª–∞—Å–∏—è (–¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞)
  Future<void> clearAllConsents() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.remove(_privacyPolicyAcceptedKey);
      await prefs.remove(_termsOfServiceAcceptedKey);
      await prefs.remove(_privacyPolicyVersionKey);
      await prefs.remove(_termsOfServiceVersionKey);
      await prefs.remove('consent_timestamp');
      await prefs.remove('consent_language');

      // –û—á–∏—â–∞–µ–º –∫—ç—à
      _cachedPrivacyPolicyVersion = null;
      _cachedTermsOfServiceVersion = null;

      debugPrint('‚úÖ –í—Å–µ —Å–æ–≥–ª–∞—Å–∏—è –æ—á–∏—â–µ–Ω—ã');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–æ–≥–ª–∞—Å–∏–π: $e');
    }
  }

  /// ‚úÖ –£–ü–†–û–©–ï–ù–ù–´–ô: –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–æ–≥–ª–∞—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<UserConsentStatus> getUserConsentStatus([String? languageCode]) async {
    languageCode ??= 'ru';

    try {
      final prefs = await SharedPreferences.getInstance();

      final privacyAccepted = prefs.getBool(_privacyPolicyAcceptedKey) ?? false;
      final termsAccepted = prefs.getBool(_termsOfServiceAcceptedKey) ?? false;
      final savedPrivacyVersion = prefs.getString(_privacyPolicyVersionKey);
      final savedTermsVersion = prefs.getString(_termsOfServiceVersionKey);
      final consentTimestampStr = prefs.getString('consent_timestamp');
      final consentLanguage = prefs.getString('consent_language');

      final currentPrivacyVersion = await getCurrentPrivacyPolicyVersion(languageCode);
      final currentTermsVersion = await getCurrentTermsOfServiceVersion(languageCode);

      final isPrivacyVersionCurrent = savedPrivacyVersion == currentPrivacyVersion;
      final isTermsVersionCurrent = savedTermsVersion == currentTermsVersion;

      DateTime? consentTimestamp;
      if (consentTimestampStr != null) {
        try {
          consentTimestamp = DateTime.parse(consentTimestampStr);
        } catch (e) {
          debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–≥–ª–∞—Å–∏—è: $e');
        }
      }

      return UserConsentStatus(
        privacyPolicyAccepted: privacyAccepted,
        termsOfServiceAccepted: termsAccepted,
        consentVersion: '$currentPrivacyVersion-$currentTermsVersion',
        consentTimestamp: consentTimestamp,
        consentLanguage: consentLanguage,
        isVersionCurrent: isPrivacyVersionCurrent && isTermsVersionCurrent,
        currentVersion: '$currentPrivacyVersion-$currentTermsVersion',
      );
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–≥–ª–∞—Å–∏–π: $e');
      return const UserConsentStatus(
        privacyPolicyAccepted: false,
        termsOfServiceAccepted: false,
        isVersionCurrent: false,
      );
    }
  }

  /// ‚úÖ –û–ë–†–ê–¢–ù–ê–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨: —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–¥–∞
  Future<bool> hasUserAcceptedAllConsents([String? languageCode]) async {
    final result = await checkUserConsents(languageCode);
    return result.allValid;
  }

  /// ‚úÖ –û–ë–†–ê–¢–ù–ê–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–∏–π (–ø–æ–ª–Ω–æ–µ)
  Future<bool> saveUserConsents({
    required bool privacyPolicyAccepted,
    required bool termsOfServiceAccepted,
    String? languageCode,
  }) async {
    if (!privacyPolicyAccepted || !termsOfServiceAccepted) {
      debugPrint('‚ùå –ù–µ –≤—Å–µ —Å–æ–≥–ª–∞—Å–∏—è –ø—Ä–∏–Ω—è—Ç—ã');
      return false;
    }

    return await saveSelectiveConsents(
      privacyPolicyAccepted: privacyPolicyAccepted,
      termsOfServiceAccepted: termsOfServiceAccepted,
      languageCode: languageCode,
    );
  }

  /// ‚úÖ –û–ë–†–ê–¢–ù–ê–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ–≥–æ Google –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<bool> isNewGoogleUser() async {
    try {
      if (!_firebaseService.isUserLoggedIn) {
        return true;
      }

      final doc = await _firebaseService.getUserConsents();
      if (doc.exists) {
        final data = doc.data() as Map<String, dynamic>;
        final hasConsents = data['privacy_policy_accepted'] == true &&
            data['terms_of_service_accepted'] == true;
        return !hasConsents;
      }

      return true;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $e');
      return true;
    }
  }
}