// –ü—É—Ç—å: lib/services/user_consent_service.dart

import 'package:shared_preferences/shared_preferences.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';
import 'dart:convert';
import 'package:crypto/crypto.dart';
import '../models/user_consent_models.dart';

/// –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≥–ª–∞—Å–∏–π - —á—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω—É–∂–Ω–æ –ø—Ä–∏–Ω—è—Ç—å
class ConsentCheckResult {
  final bool allValid;
  final bool needPrivacyPolicy;
  final bool needTermsOfService;
  final String currentPrivacyVersion;
  final String currentTermsVersion;
  final String? savedPrivacyVersion;
  final String? savedTermsVersion;

  const ConsentCheckResult({
    required this.allValid,
    required this.needPrivacyPolicy,
    required this.needTermsOfService,
    required this.currentPrivacyVersion,
    required this.currentTermsVersion,
    this.savedPrivacyVersion,
    this.savedTermsVersion,
  });

  /// –ï—Å—Ç—å –ª–∏ —á—Ç–æ-—Ç–æ, —á—Ç–æ –Ω—É–∂–Ω–æ –ø—Ä–∏–Ω—è—Ç—å –∑–∞–Ω–æ–≤–æ
  bool get hasChanges => needPrivacyPolicy || needTermsOfService;

  @override
  String toString() {
    return 'ConsentCheckResult(allValid: $allValid, needPrivacy: $needPrivacyPolicy, needTerms: $needTermsOfService)';
  }
}

/// –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–∞–∑–¥–µ–ª—å–Ω—ã–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –≤–µ—Ä—Å–∏–π
class UserConsentService {
  static final UserConsentService _instance = UserConsentService._internal();
  factory UserConsentService() => _instance;
  UserConsentService._internal();

  // –ö–ª—é—á–∏ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
  static const String _privacyPolicyAcceptedKey = 'privacy_policy_accepted';
  static const String _termsOfServiceAcceptedKey = 'terms_of_service_accepted';
  static const String _privacyPolicyVersionKey = 'privacy_policy_version';
  static const String _termsOfServiceVersionKey = 'terms_of_service_version';
  static const String _privacyPolicyHashKey = 'privacy_policy_hash';
  static const String _termsOfServiceHashKey = 'terms_of_service_hash';

  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final FirebaseAuth _auth = FirebaseAuth.instance;

  // –ö—ç—à –¥–ª—è –≤–µ—Ä—Å–∏–π –∏ —Ö–µ—à–µ–π —Ñ–∞–π–ª–æ–≤
  String? _cachedPrivacyPolicyVersion;
  String? _cachedTermsOfServiceVersion;
  String? _cachedPrivacyPolicyHash;
  String? _cachedTermsOfServiceHash;

  /// –ù–û–í–´–ô –ú–ï–¢–û–î: –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
  String _getLocalizedDescription(String type, String version, String languageCode, bool isCurrent) {
    if (languageCode == 'ru') {
      if (type == 'privacy_policy') {
        return isCurrent
            ? '–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è –ø–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏'
            : '–ê—Ä—Ö–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è $version';
      } else {
        return isCurrent
            ? '–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è'
            : '–ê—Ä—Ö–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è $version';
      }
    } else {
      // –ê–Ω–≥–ª–∏–π—Å–∫–∏–π
      if (type == 'privacy_policy') {
        return isCurrent
            ? 'Current version of privacy policy'
            : 'Archived version $version';
      } else {
        return isCurrent
            ? 'Current version of terms of service'
            : 'Archived version $version';
      }
    }
  }

  /// –ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤–µ—Ä—Å–∏—é –∏–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ —Ñ–∞–π–ª–∞
  String _extractVersionFromContent(String content) {
    try {
      final lines = content.split('\n');
      if (lines.isNotEmpty) {
        final firstLine = lines[0].trim();

        // –ò—â–µ–º –≤–µ—Ä—Å–∏—é (—Ä—É—Å—Å–∫–∏–π)
        RegExp versionRuPattern = RegExp(r'[–í–≤]–µ—Ä—Å–∏—è\s*:\s*(\d+\.\d+(?:\.\d+)?)', caseSensitive: false);
        var match = versionRuPattern.firstMatch(firstLine);
        if (match != null && match.group(1) != null) {
          debugPrint('üìÑ –ù–∞–π–¥–µ–Ω–∞ –≤–µ—Ä—Å–∏—è (RU): ${match.group(1)}');
          return match.group(1)!;
        }

        // –ò—â–µ–º –≤–µ—Ä—Å–∏—é (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π)
        RegExp versionEnPattern = RegExp(r'[Vv]ersion\s*:\s*(\d+\.\d+(?:\.\d+)?)', caseSensitive: false);
        match = versionEnPattern.firstMatch(firstLine);
        if (match != null && match.group(1) != null) {
          debugPrint('üìÑ –ù–∞–π–¥–µ–Ω–∞ –≤–µ—Ä—Å–∏—è (EN): ${match.group(1)}');
          return match.group(1)!;
        }

        // –ò—â–µ–º –ª—é–±—ã–µ —Ü–∏—Ñ—Ä—ã –∫–∞–∫ –≤–µ—Ä—Å–∏—é
        RegExp numbersPattern = RegExp(r'(\d+\.\d+(?:\.\d+)?)');
        match = numbersPattern.firstMatch(firstLine);
        if (match != null && match.group(1) != null) {
          debugPrint('üìÑ –ù–∞–π–¥–µ–Ω—ã —Ü–∏—Ñ—Ä—ã –∫–∞–∫ –≤–µ—Ä—Å–∏—è: ${match.group(1)}');
          return match.group(1)!;
        }
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏: $e');
    }

    debugPrint('‚ö†Ô∏è –í–µ—Ä—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω–∞—è: 1.0.0');
    return '1.0.0';
  }

  /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ö–µ—à —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞
  String _generateContentHash(String content) {
    final bytes = utf8.encode(content.trim());
    final digest = sha256.convert(bytes);
    return digest.toString();
  }

  /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–∞–π–ª –ø–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
  Future<Map<String, String>> _loadPrivacyPolicyInfo(String languageCode) async {
    try {
      final fileName = 'assets/privacy_policy/privacy_policy_$languageCode.txt';
      String content;

      try {
        content = await rootBundle.loadString(fileName);
      } catch (e) {
        debugPrint('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å $fileName, –∑–∞–≥—Ä—É–∂–∞–µ–º –∞–Ω–≥–ª–∏–π—Å–∫—É—é –≤–µ—Ä—Å–∏—é');
        content = await rootBundle.loadString('assets/privacy_policy/privacy_policy_en.txt');
      }

      final version = _extractVersionFromContent(content);
      final hash = _generateContentHash(content);

      debugPrint('üìÑ –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏: –≤–µ—Ä—Å–∏—è=$version, —Ö–µ—à=${hash.substring(0, 8)}');

      return {
        'version': version,
        'hash': hash,
        'content': content,
      };
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏: $e');
      return {
        'version': '1.0.0',
        'hash': 'unknown',
        'content': '',
      };
    }
  }

  /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è
  Future<Map<String, String>> _loadTermsOfServiceInfo(String languageCode) async {
    try {
      final fileName = 'assets/terms_of_service/terms_of_service_$languageCode.txt';
      String content;

      try {
        content = await rootBundle.loadString(fileName);
      } catch (e) {
        debugPrint('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å $fileName, –∑–∞–≥—Ä—É–∂–∞–µ–º –∞–Ω–≥–ª–∏–π—Å–∫—É—é –≤–µ—Ä—Å–∏—é');
        content = await rootBundle.loadString('assets/terms_of_service/terms_of_service_en.txt');
      }

      final version = _extractVersionFromContent(content);
      final hash = _generateContentHash(content);

      debugPrint('üìÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ: –≤–µ—Ä—Å–∏—è=$version, —Ö–µ—à=${hash.substring(0, 8)}');

      return {
        'version': version,
        'hash': hash,
        'content': content,
      };
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è: $e');
      return {
        'version': '1.0.0',
        'hash': 'unknown',
        'content': '',
      };
    }
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –ø–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
  Future<String> getCurrentPrivacyPolicyVersion([String? languageCode]) async {
    languageCode ??= 'ru';

    try {
      final privacyInfo = await _loadPrivacyPolicyInfo(languageCode);
      _cachedPrivacyPolicyVersion = privacyInfo['version'];
      _cachedPrivacyPolicyHash = privacyInfo['hash'];
      return privacyInfo['version'] ?? '1.0.0';
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ –ø–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏: $e');
      return '1.0.0';
    }
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è
  Future<String> getCurrentTermsOfServiceVersion([String? languageCode]) async {
    languageCode ??= 'ru';

    try {
      final termsInfo = await _loadTermsOfServiceInfo(languageCode);
      _cachedTermsOfServiceVersion = termsInfo['version'];
      _cachedTermsOfServiceHash = termsInfo['hash'];
      return termsInfo['version'] ?? '1.0.0';
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è: $e');
      return '1.0.0';
    }
  }

  /// –ì–õ–ê–í–ù–´–ô –ú–ï–¢–û–î: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–≥–ª–∞—Å–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω—É–∂–Ω–æ –ø—Ä–∏–Ω—è—Ç—å
  Future<ConsentCheckResult> checkUserConsents([String? languageCode]) async {
    languageCode ??= 'ru';

    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤–µ—Ä—Å–∏–∏ –∏–∑ —Ñ–∞–π–ª–æ–≤
      final currentPrivacyVersion = await getCurrentPrivacyPolicyVersion(languageCode);
      final currentTermsVersion = await getCurrentTermsOfServiceVersion(languageCode);

      debugPrint('üìã –¢–µ–∫—É—â–∏–µ –≤–µ—Ä—Å–∏–∏: Privacy=$currentPrivacyVersion, Terms=$currentTermsVersion');

      final user = _auth.currentUser;

      if (user != null) {
        // –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–≤–µ—Ä—è–µ–º Firebase –∏ –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        debugPrint('üë§ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≥–ª–∞—Å–∏—è –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.uid}');

        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º Firebase
        final firebaseResult = await _checkFirebaseConsents(
            user.uid,
            currentPrivacyVersion,
            currentTermsVersion
        );

        // –ï—Å–ª–∏ –≤ Firebase —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, –æ—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if (!firebaseResult.allValid) {
          debugPrint('‚ùå Firebase —Å–æ–≥–ª–∞—Å–∏—è –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã, –æ—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
          await clearAllConsents();
          return firebaseResult;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        final localResult = await _checkLocalConsents(
            currentPrivacyVersion,
            currentTermsVersion
        );

        // –ï—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∏–∑ Firebase
        if (!localResult.allValid) {
          debugPrint('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–æ–≥–ª–∞—Å–∏—è –∏–∑ Firebase –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ');
          await syncConsentsFromFirestore(user.uid);

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—â–µ —Ä–∞–∑ –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
          return await _checkLocalConsents(currentPrivacyVersion, currentTermsVersion);
        }

        return localResult;

      } else {
        // –î–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        debugPrint('üë§ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≥–ª–∞—Å–∏—è –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        return await _checkLocalConsents(currentPrivacyVersion, currentTermsVersion);
      }

    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–≥–ª–∞—Å–∏–π: $e');
      return ConsentCheckResult(
        allValid: false,
        needPrivacyPolicy: true,
        needTermsOfService: true,
        currentPrivacyVersion: '1.0.0',
        currentTermsVersion: '1.0.0',
      );
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–≥–ª–∞—Å–∏—è –≤ Firebase (—Ä–∞–∑–¥–µ–ª—å–Ω–æ)
  Future<ConsentCheckResult> _checkFirebaseConsents(
      String userId,
      String currentPrivacyVersion,
      String currentTermsVersion
      ) async {
    try {
      final doc = await _firestore.collection('user_consents').doc(userId).get();

      if (!doc.exists) {
        debugPrint('üìÑ –î–æ–∫—É–º–µ–Ω—Ç —Å–æ–≥–ª–∞—Å–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Firebase –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $userId');
        return ConsentCheckResult(
          allValid: false,
          needPrivacyPolicy: true,
          needTermsOfService: true,
          currentPrivacyVersion: currentPrivacyVersion,
          currentTermsVersion: currentTermsVersion,
        );
      }

      final data = doc.data()!;
      final privacyAccepted = data['privacy_policy_accepted'] ?? false;
      final termsAccepted = data['terms_of_service_accepted'] ?? false;
      final savedPrivacyVersion = data['privacy_policy_version'] ?? '';
      final savedTermsVersion = data['terms_of_service_version'] ?? '';

      debugPrint('üîç Firebase: Privacy($privacyAccepted, $savedPrivacyVersion), Terms($termsAccepted, $savedTermsVersion)');

      // –†–∞–∑–¥–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–π
      final privacyValid = privacyAccepted && savedPrivacyVersion == currentPrivacyVersion;
      final termsValid = termsAccepted && savedTermsVersion == currentTermsVersion;

      final result = ConsentCheckResult(
        allValid: privacyValid && termsValid,
        needPrivacyPolicy: !privacyValid,
        needTermsOfService: !termsValid,
        currentPrivacyVersion: currentPrivacyVersion,
        currentTermsVersion: currentTermsVersion,
        savedPrivacyVersion: savedPrivacyVersion.isEmpty ? null : savedPrivacyVersion,
        savedTermsVersion: savedTermsVersion.isEmpty ? null : savedTermsVersion,
      );

      debugPrint('üîç Firebase —Ä–µ–∑—É–ª—å—Ç–∞—Ç: $result');
      return result;

    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Firebase —Å–æ–≥–ª–∞—Å–∏–π: $e');
      return ConsentCheckResult(
        allValid: false,
        needPrivacyPolicy: true,
        needTermsOfService: true,
        currentPrivacyVersion: currentPrivacyVersion,
        currentTermsVersion: currentTermsVersion,
      );
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–µ —Å–æ–≥–ª–∞—Å–∏—è (—Ä–∞–∑–¥–µ–ª—å–Ω–æ)
  Future<ConsentCheckResult> _checkLocalConsents(
      String currentPrivacyVersion,
      String currentTermsVersion
      ) async {
    try {
      final prefs = await SharedPreferences.getInstance();

      final privacyAccepted = prefs.getBool(_privacyPolicyAcceptedKey) ?? false;
      final termsAccepted = prefs.getBool(_termsOfServiceAcceptedKey) ?? false;
      final savedPrivacyVersion = prefs.getString(_privacyPolicyVersionKey) ?? '';
      final savedTermsVersion = prefs.getString(_termsOfServiceVersionKey) ?? '';

      debugPrint('üîç –õ–æ–∫–∞–ª—å–Ω—ã–µ: Privacy($privacyAccepted, $savedPrivacyVersion), Terms($termsAccepted, $savedTermsVersion)');

      // –†–∞–∑–¥–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–π
      final privacyValid = privacyAccepted && savedPrivacyVersion == currentPrivacyVersion;
      final termsValid = termsAccepted && savedTermsVersion == currentTermsVersion;

      final result = ConsentCheckResult(
        allValid: privacyValid && termsValid,
        needPrivacyPolicy: !privacyValid,
        needTermsOfService: !termsValid,
        currentPrivacyVersion: currentPrivacyVersion,
        currentTermsVersion: currentTermsVersion,
        savedPrivacyVersion: savedPrivacyVersion.isEmpty ? null : savedPrivacyVersion,
        savedTermsVersion: savedTermsVersion.isEmpty ? null : savedTermsVersion,
      );

      debugPrint('üîç –õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: $result');
      return result;

    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Å–æ–≥–ª–∞—Å–∏–π: $e');
      return ConsentCheckResult(
        allValid: false,
        needPrivacyPolicy: true,
        needTermsOfService: true,
        currentPrivacyVersion: currentPrivacyVersion,
        currentTermsVersion: currentTermsVersion,
      );
    }
  }

  /// –û–ë–†–ê–¢–ù–ê–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨: —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–¥–∞
  Future<bool> hasUserAcceptedAllConsents([String? languageCode]) async {
    final result = await checkUserConsents(languageCode);
    return result.allValid;
  }

  /// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–≥–ª–∞—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–µ–ø–µ—Ä—å —Ä–∞–∑–¥–µ–ª—å–Ω–æ!)
  Future<bool> saveUserConsents({
    required bool privacyPolicyAccepted,
    required bool termsOfServiceAccepted,
    String? languageCode,
  }) async {
    try {
      languageCode ??= 'ru';

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–±–∞ —Å–æ–≥–ª–∞—Å–∏—è –ø—Ä–∏–Ω—è—Ç—ã
      if (!privacyPolicyAccepted || !termsOfServiceAccepted) {
        debugPrint('‚ùå –ù–µ –≤—Å–µ —Å–æ–≥–ª–∞—Å–∏—è –ø—Ä–∏–Ω—è—Ç—ã');
        return false;
      }

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤–µ—Ä—Å–∏–∏ –∏–∑ —Ñ–∞–π–ª–æ–≤
      final currentPrivacyVersion = await getCurrentPrivacyPolicyVersion(languageCode);
      final currentTermsVersion = await getCurrentTermsOfServiceVersion(languageCode);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ (–†–ê–ó–î–ï–õ–¨–ù–û!)
      final prefs = await SharedPreferences.getInstance();
      await prefs.setBool(_privacyPolicyAcceptedKey, privacyPolicyAccepted);
      await prefs.setBool(_termsOfServiceAcceptedKey, termsOfServiceAccepted);
      await prefs.setString(_privacyPolicyVersionKey, currentPrivacyVersion);
      await prefs.setString(_termsOfServiceVersionKey, currentTermsVersion);
      await prefs.setString('consent_timestamp', DateTime.now().toIso8601String());
      await prefs.setString('consent_language', languageCode);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ö–µ—à–∏ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
      if (_cachedPrivacyPolicyHash != null) {
        await prefs.setString(_privacyPolicyHashKey, _cachedPrivacyPolicyHash!);
      }
      if (_cachedTermsOfServiceHash != null) {
        await prefs.setString(_termsOfServiceHashKey, _cachedTermsOfServiceHash!);
      }

      debugPrint('‚úÖ –°–æ–≥–ª–∞—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ: Privacy=$currentPrivacyVersion, Terms=$currentTermsVersion');

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Firestore –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
      final user = _auth.currentUser;
      if (user != null) {
        await _saveConsentsToFirestore(
          user.uid,
          privacyPolicyAccepted,
          termsOfServiceAccepted,
          currentPrivacyVersion,
          currentTermsVersion,
          languageCode,
        );
      }

      return true;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–≥–ª–∞—Å–∏–π: $e');
      return false;
    }
  }

  /// –°–µ–ª–µ–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–∏–π (—Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã)
  Future<bool> saveSelectiveConsents({
    bool? privacyPolicyAccepted,
    bool? termsOfServiceAccepted,
    String? languageCode,
  }) async {
    try {
      languageCode ??= 'ru';

      final prefs = await SharedPreferences.getInstance();

      // –ï—Å–ª–∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –ø–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
      if (privacyPolicyAccepted == true) {
        final currentPrivacyVersion = await getCurrentPrivacyPolicyVersion(languageCode);
        await prefs.setBool(_privacyPolicyAcceptedKey, true);
        await prefs.setString(_privacyPolicyVersionKey, currentPrivacyVersion);

        if (_cachedPrivacyPolicyHash != null) {
          await prefs.setString(_privacyPolicyHashKey, _cachedPrivacyPolicyHash!);
        }

        debugPrint('‚úÖ –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏–Ω—è—Ç–∞: –≤–µ—Ä—Å–∏—è $currentPrivacyVersion');
      }

      // –ï—Å–ª–∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ
      if (termsOfServiceAccepted == true) {
        final currentTermsVersion = await getCurrentTermsOfServiceVersion(languageCode);
        await prefs.setBool(_termsOfServiceAcceptedKey, true);
        await prefs.setString(_termsOfServiceVersionKey, currentTermsVersion);

        if (_cachedTermsOfServiceHash != null) {
          await prefs.setString(_termsOfServiceHashKey, _cachedTermsOfServiceHash!);
        }

        debugPrint('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ: –≤–µ—Ä—Å–∏—è $currentTermsVersion');
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ
      await prefs.setString('consent_timestamp', DateTime.now().toIso8601String());
      await prefs.setString('consent_language', languageCode);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Firestore –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
      final user = _auth.currentUser;
      if (user != null) {
        await _saveSelectiveConsentsToFirestore(
          user.uid,
          privacyPolicyAccepted,
          termsOfServiceAccepted,
          languageCode,
        );
      }

      return true;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–µ–ª–µ–∫—Ç–∏–≤–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–≥–ª–∞—Å–∏–π: $e');
      return false;
    }
  }

  /// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–≥–ª–∞—Å–∏—è –≤ Firestore (—Ä–∞–∑–¥–µ–ª—å–Ω–æ)
  Future<void> _saveConsentsToFirestore(
      String userId,
      bool privacyAccepted,
      bool termsAccepted,
      String privacyVersion,
      String termsVersion,
      String languageCode,
      ) async {
    try {
      await _firestore.collection('user_consents').doc(userId).set({
        'privacy_policy_accepted': privacyAccepted,
        'terms_of_service_accepted': termsAccepted,
        'privacy_policy_version': privacyVersion,
        'terms_of_service_version': termsVersion,
        'consent_language': languageCode,
        'consent_timestamp': FieldValue.serverTimestamp(),
        'user_id': userId,
        'privacy_policy_hash': _cachedPrivacyPolicyHash,
        'terms_of_service_hash': _cachedTermsOfServiceHash,
      }, SetOptions(merge: true));

      debugPrint('‚úÖ –°–æ–≥–ª–∞—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Firestore –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $userId');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–≥–ª–∞—Å–∏–π –≤ Firestore: $e');
    }
  }

  /// –°–µ–ª–µ–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Firestore
  Future<void> _saveSelectiveConsentsToFirestore(
      String userId,
      bool? privacyAccepted,
      bool? termsAccepted,
      String languageCode,
      ) async {
    try {
      Map<String, dynamic> updateData = {
        'consent_language': languageCode,
        'consent_timestamp': FieldValue.serverTimestamp(),
        'user_id': userId,
      };

      if (privacyAccepted == true) {
        final currentPrivacyVersion = await getCurrentPrivacyPolicyVersion(languageCode);
        updateData.addAll({
          'privacy_policy_accepted': true,
          'privacy_policy_version': currentPrivacyVersion,
          'privacy_policy_hash': _cachedPrivacyPolicyHash,
        });
      }

      if (termsAccepted == true) {
        final currentTermsVersion = await getCurrentTermsOfServiceVersion(languageCode);
        updateData.addAll({
          'terms_of_service_accepted': true,
          'terms_of_service_version': currentTermsVersion,
          'terms_of_service_hash': _cachedTermsOfServiceHash,
        });
      }

      await _firestore.collection('user_consents').doc(userId).set(
          updateData,
          SetOptions(merge: true)
      );

      debugPrint('‚úÖ –°–µ–ª–µ–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–≥–ª–∞—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Firestore –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $userId');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–µ–ª–µ–∫—Ç–∏–≤–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–≥–ª–∞—Å–∏–π –≤ Firestore: $e');
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–º
  Future<bool> isNewGoogleUser(String userId) async {
    try {
      final doc = await _firestore.collection('user_consents').doc(userId).get();

      if (doc.exists) {
        final data = doc.data();
        final hasConsents = data?['privacy_policy_accepted'] == true &&
            data?['terms_of_service_accepted'] == true;
        debugPrint('üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $userId –∏–º–µ–µ—Ç —Å–æ–≥–ª–∞—Å–∏—è –≤ Firestore: $hasConsents');
        return !hasConsents;
      }

      debugPrint('üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $userId –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Firestore - –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å');
      return true;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $e');
      return true;
    }
  }

  /// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Å–æ–≥–ª–∞—Å–∏—è –∏–∑ Firestore –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (—Ä–∞–∑–¥–µ–ª—å–Ω–æ)
  Future<void> syncConsentsFromFirestore(String userId) async {
    try {
      final doc = await _firestore.collection('user_consents').doc(userId).get();

      if (doc.exists) {
        final data = doc.data();
        final privacyAccepted = data?['privacy_policy_accepted'] ?? false;
        final termsAccepted = data?['terms_of_service_accepted'] ?? false;
        final privacyVersion = data?['privacy_policy_version'] ?? '';
        final termsVersion = data?['terms_of_service_version'] ?? '';
        final consentLanguage = data?['consent_language'] ?? 'ru';
        final consentTimestamp = data?['consent_timestamp'];

        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–†–ê–ó–î–ï–õ–¨–ù–û!)
        final prefs = await SharedPreferences.getInstance();
        await prefs.setBool(_privacyPolicyAcceptedKey, privacyAccepted);
        await prefs.setBool(_termsOfServiceAcceptedKey, termsAccepted);
        await prefs.setString(_privacyPolicyVersionKey, privacyVersion);
        await prefs.setString(_termsOfServiceVersionKey, termsVersion);
        await prefs.setString('consent_language', consentLanguage);

        if (consentTimestamp != null) {
          await prefs.setString('consent_timestamp', (consentTimestamp as Timestamp).toDate().toIso8601String());
        }

        // –¢–∞–∫–∂–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ö–µ—à–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if (data?['privacy_policy_hash'] != null) {
          await prefs.setString(_privacyPolicyHashKey, data!['privacy_policy_hash']);
        }
        if (data?['terms_of_service_hash'] != null) {
          await prefs.setString(_termsOfServiceHashKey, data!['terms_of_service_hash']);
        }

        debugPrint('‚úÖ –°–æ–≥–ª–∞—Å–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∏–∑ Firestore: Privacy($privacyAccepted, $privacyVersion), Terms($termsAccepted, $termsVersion)');
      } else {
        debugPrint('‚ùå –î–æ–∫—É–º–µ–Ω—Ç —Å–æ–≥–ª–∞—Å–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Firestore –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–æ–≥–ª–∞—Å–∏–π: $e');
    }
  }

  /// –û—á–∏—â–∞–µ—Ç –≤—Å–µ —Å–æ–≥–ª–∞—Å–∏—è (–¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞)
  Future<void> clearAllConsents() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.remove(_privacyPolicyAcceptedKey);
      await prefs.remove(_termsOfServiceAcceptedKey);
      await prefs.remove(_privacyPolicyVersionKey);
      await prefs.remove(_termsOfServiceVersionKey);
      await prefs.remove(_privacyPolicyHashKey);
      await prefs.remove(_termsOfServiceHashKey);
      await prefs.remove('consent_timestamp');
      await prefs.remove('consent_language');

      // –û—á–∏—â–∞–µ–º –∫—ç—à
      _cachedPrivacyPolicyVersion = null;
      _cachedTermsOfServiceVersion = null;
      _cachedPrivacyPolicyHash = null;
      _cachedTermsOfServiceHash = null;

      debugPrint('‚úÖ –í—Å–µ —Å–æ–≥–ª–∞—Å–∏—è –æ—á–∏—â–µ–Ω—ã');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–æ–≥–ª–∞—Å–∏–π: $e');
    }
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–æ–≥–ª–∞—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π)
  Future<UserConsentStatus> getUserConsentStatus([String? languageCode]) async {
    languageCode ??= 'ru';

    try {
      final prefs = await SharedPreferences.getInstance();

      final privacyAccepted = prefs.getBool(_privacyPolicyAcceptedKey) ?? false;
      final termsAccepted = prefs.getBool(_termsOfServiceAcceptedKey) ?? false;
      final savedPrivacyVersion = prefs.getString(_privacyPolicyVersionKey);
      final savedTermsVersion = prefs.getString(_termsOfServiceVersionKey);
      final consentTimestampStr = prefs.getString('consent_timestamp');
      final consentLanguage = prefs.getString('consent_language');

      final currentPrivacyVersion = await getCurrentPrivacyPolicyVersion(languageCode);
      final currentTermsVersion = await getCurrentTermsOfServiceVersion(languageCode);

      final isPrivacyVersionCurrent = savedPrivacyVersion == currentPrivacyVersion;
      final isTermsVersionCurrent = savedTermsVersion == currentTermsVersion;

      DateTime? consentTimestamp;
      if (consentTimestampStr != null) {
        try {
          consentTimestamp = DateTime.parse(consentTimestampStr);
        } catch (e) {
          debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–≥–ª–∞—Å–∏—è: $e');
        }
      }

      return UserConsentStatus(
        privacyPolicyAccepted: privacyAccepted,
        termsOfServiceAccepted: termsAccepted,
        consentVersion: '$currentPrivacyVersion-$currentTermsVersion', // –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        consentTimestamp: consentTimestamp,
        consentLanguage: consentLanguage,
        isVersionCurrent: isPrivacyVersionCurrent && isTermsVersionCurrent,
        currentVersion: '$currentPrivacyVersion-$currentTermsVersion',
      );
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–≥–ª–∞—Å–∏–π: $e');
      return const UserConsentStatus(
        privacyPolicyAccepted: false,
        termsOfServiceAccepted: false,
        isVersionCurrent: false,
      );
    }
  }

  /// –£–°–¢–ê–†–ï–í–®–ò–ô –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  @deprecated
  Future<String> getCurrentConsentVersion([String? languageCode]) async {
    final privacyVersion = await getCurrentPrivacyPolicyVersion(languageCode);
    final termsVersion = await getCurrentTermsOfServiceVersion(languageCode);
    return '${privacyVersion}_$termsVersion'; // –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
  }

  /// –£–°–¢–ê–†–ï–í–®–ò–ô –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  @deprecated
  Future<bool> isConsentVersionCurrent([String? languageCode]) async {
    final result = await checkUserConsents(languageCode);
    return result.allValid;
  }

  /// –ò—â–µ—Ç –∞—Ä—Ö–∏–≤–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –ø–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
  Future<List<String>> _findArchivedPrivacyVersions(String languageCode) async {
    List<String> versions = [];

    // –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ —Å –≤–µ—Ä—Å–∏–∏ 1.0.0 –∏ –∏–¥–µ–º –≤–≤–µ—Ä—Ö
    for (int major = 1; major <= 10; major++) {
      for (int minor = 0; minor <= 20; minor++) {
        for (int patch = 0; patch <= 10; patch++) {
          final version = '$major.$minor.$patch';
          final fileName = 'assets/privacy_policy/privacy_policy_${languageCode}_v$version.txt';

          try {
            await rootBundle.loadString(fileName);
            versions.add(version);
            debugPrint('üì¶ –ù–∞–π–¥–µ–Ω–∞ –∞—Ä—Ö–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–æ–ª–∏—Ç–∏–∫–∏: $version');
          } catch (e) {
            // –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫
          }

          // –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–µ—Ä—Å–∏–π –ø–æ–¥—Ä—è–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É minor
          if (patch > 5 && versions.isEmpty) break;
        }
        // –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ minor –≤–µ—Ä—Å–∏–π –ø–æ–¥—Ä—è–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É major
        if (minor > 10 && versions.where((v) => v.startsWith('$major.')).isEmpty) break;
      }
    }

    return versions..sort((a, b) => _compareVersions(b, a)); // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é
  }

  /// –ò—â–µ—Ç –∞—Ä—Ö–∏–≤–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è
  Future<List<String>> _findArchivedTermsVersions(String languageCode) async {
    List<String> versions = [];

    // –ê–Ω–∞–ª–æ–≥–∏—á–Ω—ã–π –ø–æ–∏—Å–∫ –¥–ª—è terms of service
    for (int major = 1; major <= 10; major++) {
      for (int minor = 0; minor <= 20; minor++) {
        for (int patch = 0; patch <= 10; patch++) {
          final version = '$major.$minor.$patch';
          final fileName = 'assets/terms_of_service/terms_of_service_${languageCode}_v$version.txt';

          try {
            await rootBundle.loadString(fileName);
            versions.add(version);
            debugPrint('üì¶ –ù–∞–π–¥–µ–Ω–∞ –∞—Ä—Ö–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å–æ–≥–ª–∞—à–µ–Ω–∏—è: $version');
          } catch (e) {
            // –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫
          }

          if (patch > 5 && versions.isEmpty) break;
        }
        if (minor > 10 && versions.where((v) => v.startsWith('$major.')).isEmpty) break;
      }
    }

    return versions..sort((a, b) => _compareVersions(b, a)); // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é
  }

  /// –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –¥–≤–µ –≤–µ—Ä—Å–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "1.2.0" –∏ "1.1.5")
  int _compareVersions(String version1, String version2) {
    final v1Parts = version1.split('.').map(int.parse).toList();
    final v2Parts = version2.split('.').map(int.parse).toList();

    for (int i = 0; i < 3; i++) {
      final v1Part = i < v1Parts.length ? v1Parts[i] : 0;
      final v2Part = i < v2Parts.length ? v2Parts[i] : 0;

      if (v1Part != v2Part) {
        return v1Part.compareTo(v2Part);
      }
    }

    return 0; // –í–µ—Ä—Å–∏–∏ —Ä–∞–≤–Ω—ã
  }

  /// –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –≤–µ—Ä—Å–∏–π –ø–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ —Å –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–µ–π
  Future<List<DocumentVersion>> getPrivacyPolicyHistory([String? languageCode]) async {
    languageCode ??= 'ru';
    List<DocumentVersion> history = [];

    try {
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é
      final currentVersion = await getCurrentPrivacyPolicyVersion(languageCode);
      history.add(DocumentVersion(
        version: currentVersion,
        releaseDate: DateTime.now(),
        documentType: 'privacy_policy',
        language: languageCode,
        description: _getLocalizedDescription('privacy_policy', currentVersion, languageCode, true),
        hash: _cachedPrivacyPolicyHash?.substring(0, 8),
        isCurrent: true,
      ));

      // –ò—â–µ–º –∞—Ä—Ö–∏–≤–Ω—ã–µ –≤–µ—Ä—Å–∏–∏
      final archivedVersions = await _findArchivedPrivacyVersions(languageCode);
      for (final version in archivedVersions) {
        if (version != currentVersion) { // –ù–µ –¥—É–±–ª–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é
          history.add(DocumentVersion(
            version: version,
            releaseDate: DateTime.now(), // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –ø–∞—Ä—Å–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞
            documentType: 'privacy_policy',
            language: languageCode,
            description: _getLocalizedDescription('privacy_policy', version, languageCode, false),
            isCurrent: false,
          ));
        }
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏: $e');
    }

    return history;
  }

  /// –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –≤–µ—Ä—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è —Å –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–µ–π
  Future<List<DocumentVersion>> getTermsOfServiceHistory([String? languageCode]) async {
    languageCode ??= 'ru';
    List<DocumentVersion> history = [];

    try {
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é
      final currentVersion = await getCurrentTermsOfServiceVersion(languageCode);
      history.add(DocumentVersion(
        version: currentVersion,
        releaseDate: DateTime.now(),
        documentType: 'terms_of_service',
        language: languageCode,
        description: _getLocalizedDescription('terms_of_service', currentVersion, languageCode, true),
        hash: _cachedTermsOfServiceHash?.substring(0, 8),
        isCurrent: true,
      ));

      // –ò—â–µ–º –∞—Ä—Ö–∏–≤–Ω—ã–µ –≤–µ—Ä—Å–∏–∏
      final archivedVersions = await _findArchivedTermsVersions(languageCode);
      for (final version in archivedVersions) {
        if (version != currentVersion) { // –ù–µ –¥—É–±–ª–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é
          history.add(DocumentVersion(
            version: version,
            releaseDate: DateTime.now(), // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –ø–∞—Ä—Å–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞
            documentType: 'terms_of_service',
            language: languageCode,
            description: _getLocalizedDescription('terms_of_service', version, languageCode, false),
            isCurrent: false,
          ));
        }
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è: $e');
    }

    return history;
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π)
  Future<Map<String, dynamic>> getDocumentVersionsInfo([String? languageCode]) async {
    languageCode ??= 'ru';

    try {
      final privacyInfo = await _loadPrivacyPolicyInfo(languageCode);
      final termsInfo = await _loadTermsOfServiceInfo(languageCode);

      return {
        'privacy_policy': {
          'version': privacyInfo['version'],
          'hash': privacyInfo['hash']?.substring(0, 8),
        },
        'terms_of_service': {
          'version': termsInfo['version'],
          'hash': termsInfo['hash']?.substring(0, 8),
        },
        'language': languageCode,
      };
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–µ—Ä—Å–∏—è—Ö: $e');
      return {};
    }
  }
}