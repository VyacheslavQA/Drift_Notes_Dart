// –ü—É—Ç—å: lib/services/local_push_notification_service.dart

import 'dart:async';
import 'dart:convert';
import 'dart:io';
import 'dart:typed_data';
import 'package:flutter/material.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:app_badge_plus/app_badge_plus.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../models/notification_sound_settings_model.dart';
import '../models/notification_model.dart';

class LocalPushNotificationService {
  static final LocalPushNotificationService _instance =
  LocalPushNotificationService._internal();
  factory LocalPushNotificationService() => _instance;
  LocalPushNotificationService._internal();

  final FlutterLocalNotificationsPlugin _notifications =
  FlutterLocalNotificationsPlugin();

  NotificationSoundSettings _soundSettings = const NotificationSoundSettings();
  bool _isInitialized = false;
  int _currentBadgeCount = 0;

  // –ö–ª—é—á–∏ –¥–ª—è SharedPreferences
  static const String _soundSettingsKey = 'notification_sound_settings';
  static const String _badgeCountKey = 'notification_badge_count';

  // Stream –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞–∂–∞—Ç–∏—è—Ö –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  final StreamController<String> _notificationTapStreamController =
  StreamController<String>.broadcast();

  Stream<String> get notificationTapStream =>
      _notificationTapStreamController.stream;

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
  Future<void> initialize() async {
    if (_isInitialized) return;

    debugPrint('üîî –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');

    try {
      await _loadSoundSettings();
      await _loadBadgeCount();
      await _initializeNotifications();

      _isInitialized = true;
      debugPrint('‚úÖ –°–µ—Ä–≤–∏—Å –ª–æ–∫–∞–ª—å–Ω—ã—Ö push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: $e');
    }
  }

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–≥–∏–Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  Future<void> _initializeNotifications() async {
    try {
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Android
      const androidSettings = AndroidInitializationSettings('@mipmap/launcher_icon');

      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è iOS
      const iosSettings = DarwinInitializationSettings(
        requestAlertPermission: true,
        requestBadgePermission: true,
        requestSoundPermission: true,
      );

      const initSettings = InitializationSettings(
        android: androidSettings,
        iOS: iosSettings,
        macOS: iosSettings,
      );

      await _notifications.initialize(
        initSettings,
        onDidReceiveNotificationResponse: _onNotificationTap,
      );

      debugPrint('‚úÖ Flutter Local Notifications –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: $e');
    }
  }

  /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  void _onNotificationTap(NotificationResponse response) {
    debugPrint('üì± –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: ${response.payload}');
    if (response.payload != null) {
      _notificationTapStreamController.add(response.payload!);
    }
  }

  /// –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  Future<void> showNotification(NotificationModel notification) async {
    if (!_isInitialized) {
      debugPrint('‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      return;
    }

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–≤—É–∫–∞
      final shouldPlaySound = _soundSettings.shouldPlaySound();
      final shouldVibrate = _soundSettings.vibrationEnabled && !_soundSettings.isQuietHours();

      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Android
      final androidDetails = AndroidNotificationDetails(
        'default_channel',
        '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
        channelDescription: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
        importance: Importance.high,
        priority: Priority.high,
        enableVibration: shouldVibrate,
        playSound: shouldPlaySound,
        // –£–±–∏—Ä–∞–µ–º sound –ø–∞—Ä–∞–º–µ—Ç—Ä - –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–∏—Å—Ç–µ–º–Ω—ã–π –∑–≤—É–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        icon: '@mipmap/launcher_icon',
        color: Color(notification.typeColor),
        styleInformation: BigTextStyleInformation(
          notification.message,
          contentTitle: notification.title,
        ),
      );

      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è iOS
      final iosDetails = DarwinNotificationDetails(
        presentAlert: true,
        presentBadge: true,
        presentSound: shouldPlaySound,
        // –£–±–∏—Ä–∞–µ–º sound –ø–∞—Ä–∞–º–µ—Ç—Ä - –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–∏—Å—Ç–µ–º–Ω—ã–π –∑–≤—É–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        subtitle: _getNotificationTypeText(notification.type),
      );

      final notificationDetails = NotificationDetails(
        android: androidDetails,
        iOS: iosDetails,
      );

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      await _notifications.show(
        notification.id.hashCode,
        notification.title,
        notification.message,
        notificationDetails,
        payload: json.encode({
          'id': notification.id,
          'type': notification.type.toString(),
          'timestamp': notification.timestamp.toIso8601String(),
        }),
      );

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
      if (_soundSettings.badgeEnabled) {
        await _incrementBadge();
      }

      debugPrint('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${notification.title}');

    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: $e');
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  String _getNotificationTypeText(NotificationType type) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ fallback –∑–Ω–∞—á–µ–Ω–∏—è, —Ç–∞–∫ –∫–∞–∫ —É –Ω–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
    // –í —Ä–µ–∞–ª—å–Ω–æ–º push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ —ç—Ç–æ –Ω–µ —Ç–∞–∫ –∫—Ä–∏—Ç–∏—á–Ω–æ
    switch (type) {
      case NotificationType.general:
        return 'General';
      case NotificationType.fishingReminder:
        return 'Reminder';
      case NotificationType.tournamentReminder:
        return 'Tournament';
      case NotificationType.biteForecast:
        return 'Bite forecast';
      case NotificationType.weatherUpdate:
        return 'Weather';
      case NotificationType.newFeatures:
        return 'News';
      case NotificationType.systemUpdate:
        return 'System';
      case NotificationType.policyUpdate:
        return 'Documents';
    }
  }

  // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–µ–π–¥–∂–µ–º

  /// –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –±–µ–π–¥–∂–∞
  Future<void> _incrementBadge() async {
    _currentBadgeCount++;
    await _updateBadge();
  }

  /// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –±–µ–π–¥–∂–∞
  Future<void> setBadgeCount(int count) async {
    _currentBadgeCount = count;
    await _updateBadge();
  }

  /// –û—á–∏—Å—Ç–∫–∞ –±–µ–π–¥–∂–∞
  Future<void> clearBadge() async {
    _currentBadgeCount = 0;
    await _updateBadge();
  }

  /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–π–¥–∂–∞ –Ω–∞ –∏–∫–æ–Ω–∫–µ
  Future<void> _updateBadge() async {
    try {
      if (_soundSettings.badgeEnabled && _currentBadgeCount > 0) {
        await AppBadgePlus.updateBadge(_currentBadgeCount);
        debugPrint('‚úÖ –ë–µ–π–¥–∂ –æ–±–Ω–æ–≤–ª–µ–Ω: $_currentBadgeCount');
      } else {
        await AppBadgePlus.updateBadge(0);
        debugPrint('‚úÖ –ë–µ–π–¥–∂ –æ—á–∏—â–µ–Ω');
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ SharedPreferences
      await _saveBadgeCount();

    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–µ–π–¥–∂–∞: $e');
    }
  }

  /// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –±–µ–π–¥–∂–∞
  Future<void> _saveBadgeCount() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setInt(_badgeCountKey, _currentBadgeCount);
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –±–µ–π–¥–∂–∞: $e');
    }
  }

  /// –ó–∞–≥—Ä—É–∑–∫–∞ —Å—á–µ—Ç—á–∏–∫–∞ –±–µ–π–¥–∂–∞
  Future<void> _loadBadgeCount() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      _currentBadgeCount = prefs.getInt(_badgeCountKey) ?? 0;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—á–µ—Ç—á–∏–∫–∞ –±–µ–π–¥–∂–∞: $e');
    }
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∑–≤—É–∫–∞

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∑–≤—É–∫–∞
  NotificationSoundSettings get soundSettings => _soundSettings;

  /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∑–≤—É–∫–∞
  Future<void> updateSoundSettings(NotificationSoundSettings newSettings) async {
    _soundSettings = newSettings;
    await _saveSoundSettings();
  }

  /// –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∑–≤—É–∫–∞
  Future<void> _loadSoundSettings() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final settingsJson = prefs.getString(_soundSettingsKey);

      if (settingsJson != null) {
        final settingsMap = json.decode(settingsJson);
        _soundSettings = NotificationSoundSettings.fromJson(settingsMap);
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∑–≤—É–∫–∞: $e');
    }
  }

  /// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∑–≤—É–∫–∞
  Future<void> _saveSoundSettings() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final settingsJson = json.encode(_soundSettings.toJson());
      await prefs.setString(_soundSettingsKey, settingsJson);
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∑–≤—É–∫–∞: $e');
    }
  }

  /// –û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  Future<void> cancelAllNotifications() async {
    try {
      await _notifications.cancelAll();
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: $e');
    }
  }

  /// –û—Ç–º–µ–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  Future<void> cancelNotification(String notificationId) async {
    try {
      await _notifications.cancel(notificationId.hashCode);
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: $e');
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –±–µ–π–¥–∂–µ–π
  Future<bool> isBadgeSupported() async {
    try {
      return await AppBadgePlus.isSupported();
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –±–µ–π–¥–∂–∞: $e');
      return Platform.isIOS; // Fallback - iOS –≤—Å–µ–≥–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç
    }
  }

  /// –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
  void dispose() {
    _notificationTapStreamController.close();
  }
}