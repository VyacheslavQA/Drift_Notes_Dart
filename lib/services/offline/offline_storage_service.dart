// –ü—É—Ç—å: lib/services/offline/offline_storage_service.dart

import 'dart:convert';
import 'package:flutter/foundation.dart';
import 'package:shared_preferences/shared_preferences.dart';

/// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ñ–ª–∞–π–Ω —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º –¥–∞–Ω–Ω—ã—Ö
class OfflineStorageService {
  static final OfflineStorageService _instance =
      OfflineStorageService._internal();

  factory OfflineStorageService() {
    return _instance;
  }

  OfflineStorageService._internal();

  SharedPreferences? _preferences;

  // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∫–ª—é—á–µ–π —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
  static const String _offlineNotesKey = 'offline_fishing_notes';
  static const String _offlineNotesUpdatesKey = 'offline_note_updates';
  static const String _offlinePhotosKey = 'offline_fishing_photos';
  static const String _offlineMarkerMapsKey = 'offline_marker_maps';
  static const String _offlineMarkerMapsUpdatesKey =
      'offline_marker_map_updates';
  static const String _mapsToDeleteKey = 'maps_to_delete';
  static const String _notesToDeleteKey = 'notes_to_delete';
  static const String _statisticsCacheKey = 'cached_statistics';
  static const String _userDataKey = 'offline_user_data';
  static const String _syncTimeKey = 'last_sync_time';
  static const String _deleteAllMarkerMapsKey = 'delete_all_marker_maps';
  static const String _deleteAllNotesKey = 'delete_all_notes';

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
  Future<void> initialize() async {
    if (_preferences == null) {
      _preferences = await SharedPreferences.getInstance();
      debugPrint('OfflineStorageService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
  Future<SharedPreferences> get preferences async {
    if (_preferences == null) {
      await initialize();
    }
    return _preferences!;
  }

  /// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –æ —Ä—ã–±–∞–ª–∫–µ –≤ –æ—Ñ–ª–∞–π–Ω —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
  Future<void> saveOfflineNote(Map<String, dynamic> noteData) async {
    try {
      final prefs = await preferences;
      List<String> offlineNotesJson =
          prefs.getStringList(_offlineNotesKey) ?? [];

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–º–µ—Ç–∫–∞ —Å —Ç–∞–∫–∏–º ID
      final noteId = noteData['id'];
      if (noteId == null || noteId.toString().isEmpty) {
        throw Exception('ID –∑–∞–º–µ—Ç–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
      }

      bool noteExists = false;
      List<String> updatedNotes = [];

      for (var noteJson in offlineNotesJson) {
        try {
          final note = jsonDecode(noteJson) as Map<String, dynamic>;
          if (note['id'] == noteId) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–º–µ—Ç–∫—É
            updatedNotes.add(jsonEncode(noteData));
            noteExists = true;
            debugPrint(
              'üìù –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∑–∞–º–µ—Ç–∫–∞ $noteId –≤ –æ—Ñ–ª–∞–π–Ω —Ö—Ä–∞–Ω–∏–ª–∏—â–µ',
            );
          } else {
            updatedNotes.add(noteJson);
          }
        } catch (e) {
          // –ï—Å–ª–∏ —Å –ø–∞—Ä—Å–∏–Ω–≥–æ–º JSON –ø—Ä–æ–±–ª–µ–º–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É
          updatedNotes.add(noteJson);
          debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–º–µ—Ç–∫–∏: $e');
        }
      }

      // –ï—Å–ª–∏ —Ç–∞–∫–æ–π –∑–∞–º–µ—Ç–∫–∏ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é
      if (!noteExists) {
        updatedNotes.add(jsonEncode(noteData));
        debugPrint('üìù –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞ $noteId –≤ –æ—Ñ–ª–∞–π–Ω —Ö—Ä–∞–Ω–∏–ª–∏—â–µ');
      }

      await prefs.setStringList(_offlineNotesKey, updatedNotes);
      debugPrint('‚úÖ –ó–∞–º–µ—Ç–∫–∞ $noteId —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –æ—Ñ–ª–∞–π–Ω —Ö—Ä–∞–Ω–∏–ª–∏—â–µ');

      // –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π, —Ç–∞–∫ –∫–∞–∫ –º—ã —Ç–µ–ø–µ—Ä—å –∏–º–µ–µ–º –ø–æ–ª–Ω—É—é –∫–æ–ø–∏—é –∑–∞–º–µ—Ç–∫–∏
      String offlineUpdatesJson =
          prefs.getString(_offlineNotesUpdatesKey) ?? '{}';
      try {
        Map<String, dynamic> updates =
            jsonDecode(offlineUpdatesJson) as Map<String, dynamic>;
        if (updates.containsKey(noteId.toString())) {
          updates.remove(noteId.toString());
          await prefs.setString(_offlineNotesUpdatesKey, jsonEncode(updates));
          debugPrint('üßπ –£–¥–∞–ª–µ–Ω–æ —É—Å—Ç–∞—Ä–µ–≤—à–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –∑–∞–º–µ—Ç–∫–∏ $noteId');
        }
      } catch (e) {
        debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–ø–∏—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: $e');
      }
    } catch (e) {
      debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏ –≤ –æ—Ñ–ª–∞–π–Ω —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: $e');
      rethrow;
    }
  }

  /// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏
  Future<void> saveNoteUpdate(
    String noteId,
    Map<String, dynamic> noteData,
  ) async {
    try {
      final prefs = await preferences;
      String offlineUpdatesJson =
          prefs.getString(_offlineNotesUpdatesKey) ?? '{}';
      Map<String, dynamic> updates;

      try {
        updates = jsonDecode(offlineUpdatesJson) as Map<String, dynamic>;
      } catch (e) {
        updates = {};
      }

      updates[noteId] = noteData;
      await prefs.setString(_offlineNotesUpdatesKey, jsonEncode(updates));
      debugPrint('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ $noteId —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –æ—Ñ–ª–∞–π–Ω —Ö—Ä–∞–Ω–∏–ª–∏—â–µ');
    } catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏: $e');
      rethrow;
    }
  }

  /// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—É—Ç–∏ –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º –¥–ª—è –∑–∞–º–µ—Ç–∫–∏
  Future<void> saveOfflinePhotoPaths(
    String noteId,
    List<String> photoPaths,
  ) async {
    try {
      final prefs = await preferences;
      String offlinePhotosJson = prefs.getString(_offlinePhotosKey) ?? '{}';
      Map<String, dynamic> photosMap;

      try {
        photosMap = jsonDecode(offlinePhotosJson) as Map<String, dynamic>;
      } catch (e) {
        photosMap = {};
      }

      photosMap[noteId] = photoPaths;
      await prefs.setString(_offlinePhotosKey, jsonEncode(photosMap));
      debugPrint(
        '–ü—É—Ç–∏ –∫ —Ñ–æ—Ç–æ –¥–ª—è –∑–∞–º–µ—Ç–∫–∏ $noteId —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã (${photoPaths.length} —Ñ–æ—Ç–æ)',
      );
    } catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—É—Ç–µ–π –∫ —Ñ–æ—Ç–æ: $e');
      rethrow;
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç–∏ –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º –¥–ª—è –∑–∞–º–µ—Ç–∫–∏
  Future<List<String>> getOfflinePhotoPaths(String noteId) async {
    try {
      final prefs = await preferences;
      String offlinePhotosJson = prefs.getString(_offlinePhotosKey) ?? '{}';
      Map<String, dynamic> photosMap;

      try {
        photosMap = jsonDecode(offlinePhotosJson) as Map<String, dynamic>;
      } catch (e) {
        return [];
      }

      if (photosMap.containsKey(noteId)) {
        return List<String>.from(photosMap[noteId]);
      }

      return [];
    } catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—É—Ç–µ–π –∫ —Ñ–æ—Ç–æ: $e');
      return [];
    }
  }

  /// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–∞—Ä–∫–µ—Ä–Ω—É—é –∫–∞—Ä—Ç—É –≤ –æ—Ñ–ª–∞–π–Ω —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
  Future<void> saveOfflineMarkerMap(Map<String, dynamic> mapData) async {
    try {
      final prefs = await preferences;
      List<String> offlineMapsJson =
          prefs.getStringList(_offlineMarkerMapsKey) ?? [];

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–∞—Ä—Ç–∞ —Å —Ç–∞–∫–∏–º ID
      final mapId = mapData['id'];
      bool mapExists = false;

      List<String> updatedMaps = [];
      for (var mapJson in offlineMapsJson) {
        final map = jsonDecode(mapJson) as Map<String, dynamic>;
        if (map['id'] == mapId) {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞—Ä—Ç—É
          updatedMaps.add(jsonEncode(mapData));
          mapExists = true;
        } else {
          updatedMaps.add(mapJson);
        }
      }

      // –ï—Å–ª–∏ —Ç–∞–∫–æ–π –∫–∞—Ä—Ç—ã –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é
      if (!mapExists) {
        updatedMaps.add(jsonEncode(mapData));
      }

      await prefs.setStringList(_offlineMarkerMapsKey, updatedMaps);
      debugPrint('–ú–∞—Ä–∫–µ—Ä–Ω–∞—è –∫–∞—Ä—Ç–∞ $mapId —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –æ—Ñ–ª–∞–π–Ω —Ö—Ä–∞–Ω–∏–ª–∏—â–µ');
    } catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–∞—Ä–∫–µ—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã: $e');
      rethrow;
    }
  }

  /// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã
  Future<void> saveMarkerMapUpdate(
    String mapId,
    Map<String, dynamic> mapData,
  ) async {
    try {
      final prefs = await preferences;
      String offlineUpdatesJson =
          prefs.getString(_offlineMarkerMapsUpdatesKey) ?? '{}';
      Map<String, dynamic> updates;

      try {
        updates = jsonDecode(offlineUpdatesJson) as Map<String, dynamic>;
      } catch (e) {
        updates = {};
      }

      updates[mapId] = mapData;
      await prefs.setString(_offlineMarkerMapsUpdatesKey, jsonEncode(updates));
      debugPrint('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã $mapId —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ');
    } catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã: $e');
      rethrow;
    }
  }

  /// –û—Ç–º–µ—Ç–∏—Ç—å –æ–±—ä–µ–∫—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
  Future<void> markForDeletion(String id, bool isMarkerMap) async {
    try {
      final prefs = await preferences;
      final key = isMarkerMap ? _mapsToDeleteKey : _notesToDeleteKey;
      List<String> idsToDelete = prefs.getStringList(key) ?? [];

      if (!idsToDelete.contains(id)) {
        idsToDelete.add(id);
      }

      await prefs.setStringList(key, idsToDelete);
      final type = isMarkerMap ? '–º–∞—Ä–∫–µ—Ä–Ω–∞—è –∫–∞—Ä—Ç–∞' : '–∑–∞–º–µ—Ç–∫–∞';
      debugPrint('$type —Å ID $id –æ—Ç–º–µ—á–µ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
    } catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: $e');
      rethrow;
    }
  }

  /// –û—Ç–º–µ—Ç–∏—Ç—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç
  Future<void> markAllMarkerMapsForDeletion() async {
    try {
      final prefs = await preferences;
      await prefs.setBool(_deleteAllMarkerMapsKey, true);
      debugPrint('–í—Å–µ –º–∞—Ä–∫–µ—Ä–Ω—ã–µ –∫–∞—Ä—Ç—ã –æ—Ç–º–µ—á–µ–Ω—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
    } catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –≤—Å–µ—Ö –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: $e');
      rethrow;
    }
  }

  /// –û—Ç–º–µ—Ç–∏—Ç—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–º–µ—Ç–æ–∫
  Future<void> markAllNotesForDeletion() async {
    try {
      final prefs = await preferences;
      await prefs.setBool(_deleteAllNotesKey, true);
      debugPrint('–í—Å–µ –∑–∞–º–µ—Ç–∫–∏ –æ—Ç–º–µ—á–µ–Ω—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
    } catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –≤—Å–µ—Ö –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: $e');
      rethrow;
    }
  }

  /// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫—ç—à —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  Future<void> saveStatisticsCache(Map<String, dynamic> statistics) async {
    try {
      final prefs = await preferences;
      await prefs.setString(_statisticsCacheKey, jsonEncode(statistics));
      debugPrint('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –∫—ç—à');
    } catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –∫—ç—à: $e');
      rethrow;
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –∫—ç—à —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  Future<Map<String, dynamic>?> getStatisticsCache() async {
    try {
      final prefs = await preferences;
      final cachedData = prefs.getString(_statisticsCacheKey);

      if (cachedData == null || cachedData.isEmpty) {
        return null;
      }

      return jsonDecode(cachedData) as Map<String, dynamic>;
    } catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—ç—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: $e');
      return null;
    }
  }

  /// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ñ–ª–∞–π–Ω –¥–æ—Å—Ç—É–ø–∞
  Future<void> saveUserData(Map<String, dynamic> userData) async {
    try {
      final prefs = await preferences;
      await prefs.setString(_userDataKey, jsonEncode(userData));
      debugPrint('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –æ—Ñ–ª–∞–π–Ω —Ö—Ä–∞–Ω–∏–ª–∏—â–µ');
    } catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $e');
      rethrow;
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—Ñ–ª–∞–π–Ω —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
  Future<Map<String, dynamic>?> getUserData() async {
    try {
      final prefs = await preferences;
      final userData = prefs.getString(_userDataKey);

      if (userData == null || userData.isEmpty) {
        return null;
      }

      return jsonDecode(userData) as Map<String, dynamic>;
    } catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $e');
      return null;
    }
  }

  /// –û–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  Future<void> updateLastSyncTime() async {
    try {
      final prefs = await preferences;
      await prefs.setInt(_syncTimeKey, DateTime.now().millisecondsSinceEpoch);
      debugPrint('–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ');
    } catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: $e');
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  Future<DateTime?> getLastSyncTime() async {
    try {
      final prefs = await preferences;
      final timestamp = prefs.getInt(_syncTimeKey);

      if (timestamp == null) {
        return null;
      }

      return DateTime.fromMillisecondsSinceEpoch(timestamp);
    } catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: $e');
      return null;
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ—Ñ–ª–∞–π–Ω –∑–∞–º–µ—Ç–∫–∏
  Future<List<Map<String, dynamic>>> getAllOfflineNotes() async {
    try {
      final prefs = await preferences;
      final offlineNotesJson = prefs.getStringList(_offlineNotesKey) ?? [];

      List<Map<String, dynamic>> notes = [];
      for (var noteJson in offlineNotesJson) {
        try {
          notes.add(jsonDecode(noteJson) as Map<String, dynamic>);
        } catch (e) {
          debugPrint('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏: $e');
          // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–º–µ—Ç–∫–∏ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º JSON
        }
      }

      return notes;
    } catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ñ–ª–∞–π–Ω –∑–∞–º–µ—Ç–æ–∫: $e');
      return [];
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ—Ñ–ª–∞–π–Ω –º–∞—Ä–∫–µ—Ä–Ω—ã–µ –∫–∞—Ä—Ç—ã
  Future<List<Map<String, dynamic>>> getAllOfflineMarkerMaps() async {
    try {
      final prefs = await preferences;
      final offlineMapsJson = prefs.getStringList(_offlineMarkerMapsKey) ?? [];

      List<Map<String, dynamic>> maps = [];
      for (var mapJson in offlineMapsJson) {
        try {
          maps.add(jsonDecode(mapJson) as Map<String, dynamic>);
        } catch (e) {
          debugPrint('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–∞—Ä–∫–µ—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã: $e');
          // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–∞—Ä—Ç—ã —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º JSON
        }
      }

      return maps;
    } catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ñ–ª–∞–π–Ω –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç: $e');
      return [];
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫
  Future<Map<String, dynamic>> getAllNoteUpdates() async {
    try {
      final prefs = await preferences;
      final updatesJson = prefs.getString(_offlineNotesUpdatesKey) ?? '{}';

      return jsonDecode(updatesJson) as Map<String, dynamic>;
    } catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∑–∞–º–µ—Ç–æ–∫: $e');
      return {};
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç
  Future<Map<String, dynamic>> getAllMarkerMapUpdates() async {
    try {
      final prefs = await preferences;
      final updatesJson = prefs.getString(_offlineMarkerMapsUpdatesKey) ?? '{}';

      return jsonDecode(updatesJson) as Map<String, dynamic>;
    } catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç: $e');
      return {};
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
  Future<List<String>> getIdsToDelete(bool isMarkerMap) async {
    try {
      final prefs = await preferences;
      final key = isMarkerMap ? _mapsToDeleteKey : _notesToDeleteKey;

      return prefs.getStringList(key) ?? [];
    } catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: $e');
      return [];
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã
  Future<bool> shouldDeleteAll(bool isMarkerMap) async {
    try {
      final prefs = await preferences;
      final key = isMarkerMap ? _deleteAllMarkerMapsKey : _deleteAllNotesKey;

      return prefs.getBool(key) ?? false;
    } catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–ª–∞–≥–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤: $e');
      return false;
    }
  }

  /// –û—á–∏—Å—Ç–∏—Ç—å —Ñ–ª–∞–≥ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤
  Future<void> clearDeleteAllFlag(bool isMarkerMap) async {
    try {
      final prefs = await preferences;
      final key = isMarkerMap ? _deleteAllMarkerMapsKey : _deleteAllNotesKey;

      await prefs.setBool(key, false);
    } catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ñ–ª–∞–≥–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤: $e');
    }
  }

  /// –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
  Future<void> clearIdsToDelete(bool isMarkerMap) async {
    try {
      final prefs = await preferences;
      final key = isMarkerMap ? _mapsToDeleteKey : _notesToDeleteKey;

      await prefs.setStringList(key, []);
    } catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–ø–∏—Å–∫–∞ ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: $e');
    }
  }

  /// –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
  Future<void> clearUpdates(bool isMarkerMap) async {
    try {
      final prefs = await preferences;
      final key =
          isMarkerMap ? _offlineMarkerMapsUpdatesKey : _offlineNotesUpdatesKey;

      await prefs.setString(key, '{}');
    } catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–ø–∏—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: $e');
    }
  }

  /// –£–¥–∞–ª–∏—Ç—å –æ—Ñ–ª–∞–π–Ω –∑–∞–º–µ—Ç–∫—É
  Future<void> removeOfflineNote(String noteId) async {
    try {
      final prefs = await preferences;
      final offlineNotesJson = prefs.getStringList(_offlineNotesKey) ?? [];

      List<String> updatedNotes = [];
      for (var noteJson in offlineNotesJson) {
        try {
          final note = jsonDecode(noteJson) as Map<String, dynamic>;
          if (note['id'] != noteId) {
            updatedNotes.add(noteJson);
          }
        } catch (e) {
          // –ï—Å–ª–∏ JSON –Ω–µ–≤–µ—Ä–Ω—ã–π, –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É –∫–∞–∫ –µ—Å—Ç—å
          updatedNotes.add(noteJson);
        }
      }

      await prefs.setStringList(_offlineNotesKey, updatedNotes);

      // –£–¥–∞–ª—è–µ–º –ø—É—Ç–∏ –∫ —Ñ–æ—Ç–æ –¥–ª—è —ç—Ç–æ–π –∑–∞–º–µ—Ç–∫–∏
      String offlinePhotosJson = prefs.getString(_offlinePhotosKey) ?? '{}';
      try {
        Map<String, dynamic> photosMap =
            jsonDecode(offlinePhotosJson) as Map<String, dynamic>;
        photosMap.remove(noteId);
        await prefs.setString(_offlinePhotosKey, jsonEncode(photosMap));
      } catch (e) {
        debugPrint('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—É—Ç–µ–π –∫ —Ñ–æ—Ç–æ –¥–ª—è –∑–∞–º–µ—Ç–∫–∏ $noteId: $e');
      }

      debugPrint('–ó–∞–º–µ—Ç–∫–∞ $noteId —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –æ—Ñ–ª–∞–π–Ω —Ö—Ä–∞–Ω–∏–ª–∏—â–∞');
    } catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏ –∏–∑ –æ—Ñ–ª–∞–π–Ω —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: $e');
      rethrow;
    }
  }

  /// –£–¥–∞–ª–∏—Ç—å –æ—Ñ–ª–∞–π–Ω –º–∞—Ä–∫–µ—Ä–Ω—É—é –∫–∞—Ä—Ç—É
  Future<void> removeOfflineMarkerMap(String mapId) async {
    try {
      final prefs = await preferences;
      final offlineMapsJson = prefs.getStringList(_offlineMarkerMapsKey) ?? [];

      List<String> updatedMaps = [];
      for (var mapJson in offlineMapsJson) {
        try {
          final map = jsonDecode(mapJson) as Map<String, dynamic>;
          if (map['id'] != mapId) {
            updatedMaps.add(mapJson);
          }
        } catch (e) {
          // –ï—Å–ª–∏ JSON –Ω–µ–≤–µ—Ä–Ω—ã–π, –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –∫–∞–∫ –µ—Å—Ç—å
          updatedMaps.add(mapJson);
        }
      }

      await prefs.setStringList(_offlineMarkerMapsKey, updatedMaps);
      debugPrint('–ú–∞—Ä–∫–µ—Ä–Ω–∞—è –∫–∞—Ä—Ç–∞ $mapId —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –æ—Ñ–ª–∞–π–Ω —Ö—Ä–∞–Ω–∏–ª–∏—â–∞');
    } catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–∞—Ä–∫–µ—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã –∏–∑ –æ—Ñ–ª–∞–π–Ω —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: $e');
      rethrow;
    }
  }

  /// –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –æ—Ñ–ª–∞–π–Ω –¥–∞–Ω–Ω—ã–µ
  Future<void> clearAllOfflineData() async {
    try {
      final prefs = await preferences;
      await prefs.remove(_offlineNotesKey);
      await prefs.remove(_offlineNotesUpdatesKey);
      await prefs.remove(_offlinePhotosKey);
      await prefs.remove(_offlineMarkerMapsKey);
      await prefs.remove(_offlineMarkerMapsUpdatesKey);
      await prefs.remove(_mapsToDeleteKey);
      await prefs.remove(_notesToDeleteKey);
      await prefs.remove(_statisticsCacheKey);
      await prefs.remove(_deleteAllMarkerMapsKey);
      await prefs.remove(_deleteAllNotesKey);

      debugPrint('–í—Å–µ –æ—Ñ–ª–∞–π–Ω –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
    } catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≤—Å–µ—Ö –æ—Ñ–ª–∞–π–Ω –¥–∞–Ω–Ω—ã—Ö: $e');
      rethrow;
    }
  }

  /// –û—á–∏—Å—Ç–∏—Ç—å –ø—Ä–æ–±–ª–µ–º–Ω—É—é –∑–∞–º–µ—Ç–∫—É –ø–æ ID
  Future<bool> clearCorruptedNote(String noteId) async {
    try {
      final prefs = await preferences;
      final offlineNotesJson = prefs.getStringList(_offlineNotesKey) ?? [];

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–º–µ—Ç–∫–∞ —Å —Ç–∞–∫–∏–º ID
      bool noteExists = false;
      List<String> updatedNotes = [];

      for (var noteJson in offlineNotesJson) {
        try {
          final note = jsonDecode(noteJson) as Map<String, dynamic>;
          if (note['id'] == noteId) {
            noteExists = true;
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç—É –∑–∞–º–µ—Ç–∫—É (–Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫)
            debugPrint('–£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—É—é –∑–∞–º–µ—Ç–∫—É —Å ID: $noteId');
          } else {
            updatedNotes.add(noteJson);
          }
        } catch (e) {
          // –ï—Å–ª–∏ JSON –Ω–µ–≤–µ—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç—É –∑–∞–º–µ—Ç–∫—É
          debugPrint('–ü—Ä–æ–ø—É—â–µ–Ω–∞ –∑–∞–º–µ—Ç–∫–∞ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º JSON');
        }
      }

      if (noteExists) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫
        await prefs.setStringList(_offlineNotesKey, updatedNotes);

        // –£–¥–∞–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        String offlineUpdatesJson =
            prefs.getString(_offlineNotesUpdatesKey) ?? '{}';
        try {
          Map<String, dynamic> updates = jsonDecode(offlineUpdatesJson);
          updates.remove(noteId);
          await prefs.setString(_offlineNotesUpdatesKey, jsonEncode(updates));
        } catch (e) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
        }

        // –£–¥–∞–ª—è–µ–º –ø—É—Ç–∏ –∫ —Ñ–æ—Ç–æ
        String offlinePhotosJson = prefs.getString(_offlinePhotosKey) ?? '{}';
        try {
          Map<String, dynamic> photosMap = jsonDecode(offlinePhotosJson);
          photosMap.remove(noteId);
          await prefs.setString(_offlinePhotosKey, jsonEncode(photosMap));
        } catch (e) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ø—É—Ç—è–º–∏ –∫ —Ñ–æ—Ç–æ
        }

        debugPrint('‚úÖ –ü—Ä–æ–±–ª–µ–º–Ω–∞—è –∑–∞–º–µ—Ç–∫–∞ $noteId —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞');
        return true;
      } else {
        debugPrint('‚ö†Ô∏è –ó–∞–º–µ—Ç–∫–∞ $noteId –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ');
        return false;
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏: $e');
      return false;
    }
  }
}
