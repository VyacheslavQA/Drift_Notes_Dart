// –ü—É—Ç—å: lib/services/offline/sync_service.dart

import 'dart:async';
import 'dart:io';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import '../firebase/firebase_service.dart';
import '../subscription/subscription_service.dart';
import 'offline_storage_service.dart';
import '../../utils/network_utils.dart';
import '../local/local_file_service.dart';
import '../../constants/subscription_constants.dart';

/// ‚úÖ –£–ü–†–û–©–ï–ù–ù–´–ô —Å–µ—Ä–≤–∏—Å –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –ª–æ–∫–∞–ª—å–Ω—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º –∏ –æ–±–ª–∞–∫–æ–º
class SyncService {
  static final SyncService _instance = SyncService._internal();
  factory SyncService() => _instance;
  SyncService._internal();

  final FirebaseService _firebaseService = FirebaseService();
  final OfflineStorageService _offlineStorage = OfflineStorageService();
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final LocalFileService _localFileService = LocalFileService();
  final SubscriptionService _subscriptionService = SubscriptionService();

  bool _isSyncing = false;
  Timer? _syncTimer;

  // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
  final Map<String, int> _errorCounters = {};
  final int _maxRetries = 3;

  // ========================================
  // –ü–ï–†–ò–û–î–ò–ß–ï–°–ö–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø
  // ========================================

  /// –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
  void startPeriodicSync({Duration period = const Duration(minutes: 5)}) {
    _syncTimer?.cancel();

    _syncTimer = Timer.periodic(period, (timer) async {
      final isConnected = await NetworkUtils.isNetworkAvailable();
      if (isConnected) {
        await syncAll();
      }
    });

    debugPrint('üïí –ó–∞–ø—É—â–µ–Ω–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ ${period.inMinutes} –º–∏–Ω—É—Ç');
  }

  /// –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
  void stopPeriodicSync() {
    _syncTimer?.cancel();
    _syncTimer = null;
    debugPrint('‚èπÔ∏è –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
  }

  // ========================================
  // –û–°–ù–û–í–ù–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø
  // ========================================

  /// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
  Future<void> syncAll() async {
    if (_isSyncing) {
      debugPrint('‚ö†Ô∏è –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
      return;
    }

    _isSyncing = true;

    try {
      debugPrint('üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö...');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
      final isConnected = await NetworkUtils.isNetworkAvailable();
      if (!isConnected) {
        debugPrint('‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞');
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      final userId = _firebaseService.currentUserId;
      if (userId == null) {
        debugPrint('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞');
        return;
      }

      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
      await Future.wait([
        _syncFishingNotes(userId),
        _syncMarkerMaps(userId),
        _syncBudgetNotes(userId),
        _syncUsageCounters(),
        _syncSubscriptionStatus(),
      ]);

      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      await _offlineStorage.updateLastSyncTime();

      debugPrint('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: $e');
    } finally {
      _isSyncing = false;
    }
  }

  // ========================================
  // –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ó–ê–ú–ï–¢–û–ö –†–´–ë–ê–õ–ö–ò
  // ========================================

  /// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–º–µ—Ç–æ–∫ —Ä—ã–±–∞–ª–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π subcollections
  Future<void> _syncFishingNotes(String userId) async {
    const dataType = 'fishing_notes';

    if (_shouldSkipSync(dataType)) {
      debugPrint('‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∑–∞–º–µ—Ç–æ–∫ —Ä—ã–±–∞–ª–∫–∏ –∏–∑-–∑–∞ —á–∞—Å—Ç—ã—Ö –æ—à–∏–±–æ–∫');
      return;
    }

    try {
      debugPrint('üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∑–∞–º–µ—Ç–æ–∫ —Ä—ã–±–∞–ª–∫–∏...');

      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É subcollections
      final userNotesRef = _firestore
          .collection(SubscriptionConstants.usersCollection)
          .doc(userId)
          .collection(SubscriptionConstants.fishingNotesSubcollection);

      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏—è
      await _syncDeletions(userNotesRef, false);

      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      await _syncNoteUpdates(userNotesRef, userId);

      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –æ—Ñ–ª–∞–π–Ω –∑–∞–º–µ—Ç–∫–∏
      await _syncOfflineNotes(userNotesRef, userId);

      debugPrint('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–º–µ—Ç–æ–∫ —Ä—ã–±–∞–ª–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      _errorCounters[dataType] = 0;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–º–µ—Ç–æ–∫ —Ä—ã–±–∞–ª–∫–∏: $e');
      _incrementErrorCounter(dataType);
      rethrow;
    }
  }

  /// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∑–∞–º–µ—Ç–æ–∫
  Future<void> _syncNoteUpdates(CollectionReference userNotesRef, String userId) async {
    final noteUpdates = await _offlineStorage.getAllNoteUpdates();
    if (noteUpdates.isEmpty) return;

    debugPrint('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∑–∞–º–µ—Ç–æ–∫ (${noteUpdates.length} —à—Ç.)');

    for (var entry in noteUpdates.entries) {
      try {
        final noteId = entry.key;
        final noteData = entry.value as Map<String, dynamic>;

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º userId
        noteData['userId'] = userId;
        noteData['id'] = noteId;

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
        await _processLocalFileUrls(noteData, userId);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É subcollections
        await userNotesRef.doc(noteId).set(noteData, SetOptions(merge: true));

        debugPrint('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ $noteId —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
      } catch (e) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏: $e');
      }
    }

    await _offlineStorage.clearUpdates(false);
  }

  /// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –æ—Ñ–ª–∞–π–Ω –∑–∞–º–µ—Ç–æ–∫
  Future<void> _syncOfflineNotes(CollectionReference userNotesRef, String userId) async {
    final offlineNotes = await _offlineStorage.getAllOfflineNotes();
    if (offlineNotes.isEmpty) return;

    debugPrint('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –æ—Ñ–ª–∞–π–Ω –∑–∞–º–µ—Ç–æ–∫ (${offlineNotes.length} —à—Ç.)');

    for (var noteData in offlineNotes) {
      try {
        final noteId = noteData['id']?.toString();
        if (noteId == null || noteId.isEmpty) continue;

        noteData['userId'] = userId;

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        await _processPhotos(noteData, noteId, userId);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É subcollections
        await userNotesRef.doc(noteId).set(noteData);

        // –£–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        await _offlineStorage.removeOfflineNote(noteId);

        debugPrint('‚úÖ –û—Ñ–ª–∞–π–Ω –∑–∞–º–µ—Ç–∫–∞ $noteId —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
      } catch (e) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Ñ–ª–∞–π–Ω –∑–∞–º–µ—Ç–∫–∏: $e');
      }
    }
  }

  // ========================================
  // –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ú–ê–†–ö–ï–†–ù–´–• –ö–ê–†–¢
  // ========================================

  /// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π subcollections
  Future<void> _syncMarkerMaps(String userId) async {
    const dataType = 'marker_maps';

    if (_shouldSkipSync(dataType)) {
      debugPrint('‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç –∏–∑-–∑–∞ —á–∞—Å—Ç—ã—Ö –æ—à–∏–±–æ–∫');
      return;
    }

    try {
      debugPrint('üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç...');

      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É subcollections
      final userMapsRef = _firestore
          .collection(SubscriptionConstants.usersCollection)
          .doc(userId)
          .collection(SubscriptionConstants.markerMapsSubcollection);

      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏—è
      await _syncDeletions(userMapsRef, true);

      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      await _syncMapUpdates(userMapsRef, userId);

      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –æ—Ñ–ª–∞–π–Ω –∫–∞—Ä—Ç—ã
      await _syncOfflineMaps(userMapsRef, userId);

      debugPrint('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      _errorCounters[dataType] = 0;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç: $e');
      _incrementErrorCounter(dataType);
      rethrow;
    }
  }

  /// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç
  Future<void> _syncMapUpdates(CollectionReference userMapsRef, String userId) async {
    final mapUpdates = await _offlineStorage.getAllMarkerMapUpdates();
    if (mapUpdates.isEmpty) return;

    debugPrint('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç (${mapUpdates.length} —à—Ç.)');

    for (var entry in mapUpdates.entries) {
      try {
        final mapId = entry.key;
        final mapData = entry.value as Map<String, dynamic>;

        mapData['userId'] = userId;
        mapData['id'] = mapId;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É subcollections
        await userMapsRef.doc(mapId).set(mapData, SetOptions(merge: true));

        debugPrint('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã $mapId —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
      } catch (e) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã: $e');
      }
    }

    await _offlineStorage.clearUpdates(true);
  }

  /// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –æ—Ñ–ª–∞–π–Ω –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç
  Future<void> _syncOfflineMaps(CollectionReference userMapsRef, String userId) async {
    final offlineMaps = await _offlineStorage.getAllOfflineMarkerMaps();
    if (offlineMaps.isEmpty) return;

    debugPrint('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –æ—Ñ–ª–∞–π–Ω –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç (${offlineMaps.length} —à—Ç.)');

    for (var mapData in offlineMaps) {
      try {
        final mapId = mapData['id']?.toString();
        if (mapId == null || mapId.isEmpty) continue;

        mapData['userId'] = userId;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É subcollections
        await userMapsRef.doc(mapId).set(mapData);

        // –£–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        await _offlineStorage.removeOfflineMarkerMap(mapId);

        debugPrint('‚úÖ –û—Ñ–ª–∞–π–Ω –º–∞—Ä–∫–µ—Ä–Ω–∞—è –∫–∞—Ä—Ç–∞ $mapId —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
      } catch (e) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Ñ–ª–∞–π–Ω –º–∞—Ä–∫–µ—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã: $e');
      }
    }
  }

  // ========================================
  // –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ó–ê–ú–ï–¢–û–ö –ë–Æ–î–ñ–ï–¢–ê
  // ========================================

  /// ‚úÖ –ù–û–í–û–ï: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π subcollections
  Future<void> _syncBudgetNotes(String userId) async {
    const dataType = 'budget_notes';

    if (_shouldSkipSync(dataType)) {
      debugPrint('‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞ –∏–∑-–∑–∞ —á–∞—Å—Ç—ã—Ö –æ—à–∏–±–æ–∫');
      return;
    }

    try {
      debugPrint('üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞...');

      // ‚úÖ –ù–û–í–û–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É subcollections
      final userBudgetRef = _firestore
          .collection(SubscriptionConstants.usersCollection)
          .doc(userId)
          .collection(SubscriptionConstants.budgetNotesSubcollection);

      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏—è
      await _syncDeletions(userBudgetRef, false);

      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞
      await _syncBudgetUpdates(userBudgetRef, userId);

      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –æ—Ñ–ª–∞–π–Ω –∑–∞–º–µ—Ç–∫–∏ –±—é–¥–∂–µ—Ç–∞
      await _syncOfflineBudgetNotes(userBudgetRef, userId);

      debugPrint('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      _errorCounters[dataType] = 0;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞: $e');
      _incrementErrorCounter(dataType);
      rethrow;
    }
  }

  /// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞
  Future<void> _syncBudgetUpdates(CollectionReference userBudgetRef, String userId) async {
    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –æ—Ñ–ª–∞–π–Ω —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    final budgetUpdates = await _offlineStorage.getAllBudgetNoteUpdates();
    if (budgetUpdates.isEmpty) return;

    debugPrint('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞ (${budgetUpdates.length} —à—Ç.)');

    for (var entry in budgetUpdates.entries) {
      try {
        final budgetId = entry.key;
        final budgetData = entry.value as Map<String, dynamic>;

        budgetData['userId'] = userId;
        budgetData['id'] = budgetId;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É subcollections
        await userBudgetRef.doc(budgetId).set(budgetData, SetOptions(merge: true));

        debugPrint('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –±—é–¥–∂–µ—Ç–∞ $budgetId —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
      } catch (e) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ –±—é–¥–∂–µ—Ç–∞: $e');
      }
    }

    await _offlineStorage.clearBudgetUpdates();
  }

  /// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –æ—Ñ–ª–∞–π–Ω –∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞
  Future<void> _syncOfflineBudgetNotes(CollectionReference userBudgetRef, String userId) async {
    final offlineBudgetNotes = await _offlineStorage.getAllOfflineBudgetNotes();
    if (offlineBudgetNotes.isEmpty) return;

    debugPrint('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –æ—Ñ–ª–∞–π–Ω –∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞ (${offlineBudgetNotes.length} —à—Ç.)');

    for (var budgetData in offlineBudgetNotes) {
      try {
        final budgetId = budgetData['id']?.toString();
        if (budgetId == null || budgetId.isEmpty) continue;

        budgetData['userId'] = userId;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É subcollections
        await userBudgetRef.doc(budgetId).set(budgetData);

        // –£–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        await _offlineStorage.removeOfflineBudgetNote(budgetId);

        debugPrint('‚úÖ –û—Ñ–ª–∞–π–Ω –∑–∞–º–µ—Ç–∫–∞ –±—é–¥–∂–µ—Ç–∞ $budgetId —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
      } catch (e) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Ñ–ª–∞–π–Ω –∑–∞–º–µ—Ç–∫–∏ –±—é–¥–∂–µ—Ç–∞: $e');
      }
    }
  }

  // ========================================
  // –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –°–ß–ï–¢–ß–ò–ö–û–í –ò –ü–û–î–ü–ò–°–ö–ò
  // ========================================

  /// ‚úÖ –£–ü–†–û–©–ï–ù–û: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–µ–∑ grace period
  Future<void> _syncUsageCounters() async {
    try {
      debugPrint('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è...');

      if (!await NetworkUtils.isNetworkAvailable()) {
        debugPrint('‚ùå –ù–µ—Ç —Å–µ—Ç–∏ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—á–µ—Ç—á–∏–∫–æ–≤');
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏
      final localCounters = await _offlineStorage.getAllLocalUsageCounters();
      if (localCounters.isEmpty) {
        debugPrint('‚úÖ –ù–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
        return;
      }

      debugPrint('üìä –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤: ${localCounters.length}');

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –≤ Firebase
      for (final entry in localCounters.entries) {
        final contentType = entry.key;
        final localCount = entry.value;

        if (localCount > 0) {
          await _incrementServerCounter(contentType, localCount);
        }
      }

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏ –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      await _offlineStorage.resetLocalUsageCounters();

      debugPrint('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—á–µ—Ç—á–∏–∫–æ–≤: $e');
    }
  }

  /// –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
  Future<void> _incrementServerCounter(ContentType contentType, int count) async {
    try {
      final firebaseKey = SubscriptionConstants.getFirebaseCountField(contentType);
      await _firebaseService.incrementUsageCount(firebaseKey, increment: count);
      debugPrint('‚úÖ –°—á–µ—Ç—á–∏–∫ $firebaseKey —É–≤–µ–ª–∏—á–µ–Ω –Ω–∞ $count');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: $e');
    }
  }

  /// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏
  Future<void> _syncSubscriptionStatus() async {
    try {
      debugPrint('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏...');

      if (!await NetworkUtils.isNetworkAvailable()) {
        return;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –ø–æ–¥–ø–∏—Å–∫–∏
      await _subscriptionService.refreshSubscriptionCache();

      debugPrint('‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: $e');
    }
  }

  // ========================================
  // –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
  // ========================================

  /// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏–π
  Future<void> _syncDeletions(CollectionReference collectionRef, bool isMarkerMaps) async {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    final shouldDeleteAll = await _offlineStorage.shouldDeleteAll(isMarkerMaps);
    if (shouldDeleteAll) {
      debugPrint('‚ö†Ô∏è –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏');

      final snapshot = await collectionRef.get();
      final batch = _firestore.batch();

      for (var doc in snapshot.docs) {
        batch.delete(doc.reference);
      }

      await batch.commit();
      await _offlineStorage.clearDeleteAllFlag(isMarkerMaps);
      debugPrint('‚úÖ –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —É–¥–∞–ª–µ–Ω—ã (${snapshot.docs.length} —à—Ç.)');
      return;
    }

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —É–¥–∞–ª–µ–Ω–∏—è
    final idsToDelete = await _offlineStorage.getIdsToDelete(isMarkerMaps);
    if (idsToDelete.isNotEmpty) {
      debugPrint('üóëÔ∏è –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏–π (${idsToDelete.length} —à—Ç.)');

      for (var id in idsToDelete) {
        try {
          await collectionRef.doc(id).delete();
          debugPrint('‚úÖ –≠–ª–µ–º–µ–Ω—Ç $id —É–¥–∞–ª–µ–Ω');
        } catch (e) {
          debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ $id: $e');
        }
      }

      await _offlineStorage.clearIdsToDelete(isMarkerMaps);
    }
  }

  /// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
  Future<void> _processLocalFileUrls(Map<String, dynamic> data, String userId) async {
    if (data['photoUrls'] is List) {
      final photoUrls = List<String>.from(data['photoUrls']);
      final List<String> processedUrls = [];

      for (var url in photoUrls) {
        if (_localFileService.isLocalFileUri(url)) {
          try {
            final file = _localFileService.localUriToFile(url);
            if (file != null && await file.exists()) {
              final bytes = await file.readAsBytes();
              final fileName = '${DateTime.now().millisecondsSinceEpoch}_${url.hashCode}.jpg';
              final path = 'users/$userId/photos/$fileName';

              final serverUrl = await _firebaseService.uploadImage(path, bytes);
              processedUrls.add(serverUrl);

              await _localFileService.deleteLocalFile(url);
              debugPrint('‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–Ω—ã–π');
            }
          } catch (e) {
            debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: $e');
            processedUrls.add(url);
          }
        } else if (url != 'offline_photo') {
          processedUrls.add(url);
        }
      }

      data['photoUrls'] = processedUrls;
    }
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –∑–∞–º–µ—Ç–æ–∫
  Future<void> _processPhotos(Map<String, dynamic> noteData, String noteId, String userId) async {
    final photoPaths = await _offlineStorage.getOfflinePhotoPaths(noteId);
    if (photoPaths.isEmpty) return;

    debugPrint('üñºÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –∑–∞–º–µ—Ç–∫–∏ $noteId (${photoPaths.length} —à—Ç.)');

    List<String> photoUrls = [];
    if (noteData['photoUrls'] is List) {
      photoUrls = List<String>.from(noteData['photoUrls']);
    }

    for (var path in photoPaths) {
      try {
        final file = File(path);
        if (await file.exists()) {
          final bytes = await file.readAsBytes();
          final fileName = '${DateTime.now().millisecondsSinceEpoch}_${photoPaths.indexOf(path)}.jpg';
          final storagePath = 'users/$userId/photos/$fileName';

          final url = await _firebaseService.uploadImage(storagePath, bytes);
          if (!photoUrls.contains(url)) {
            photoUrls.add(url);
          }
          debugPrint('‚úÖ –§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: $url');
        }
      } catch (e) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ: $e');
      }
    }

    noteData['photoUrls'] = photoUrls;
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
  bool _shouldSkipSync(String dataType) {
    final errorCount = _errorCounters[dataType] ?? 0;
    return errorCount >= _maxRetries;
  }

  /// –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
  void _incrementErrorCounter(String dataType) {
    _errorCounters[dataType] = (_errorCounters[dataType] ?? 0) + 1;
    debugPrint('‚ö†Ô∏è –°—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è $dataType: ${_errorCounters[dataType]}');
  }

  // ========================================
  // –ü–£–ë–õ–ò–ß–ù–´–ï –ú–ï–¢–û–î–´
  // ========================================

  /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  Future<Map<String, dynamic>> getSyncStatus() async {
    try {
      final lastSyncTime = await _offlineStorage.getLastSyncTime();

      final offlineNotes = await _offlineStorage.getAllOfflineNotes();
      final offlineNoteUpdates = await _offlineStorage.getAllNoteUpdates();
      final offlineMaps = await _offlineStorage.getAllOfflineMarkerMaps();
      final offlineMapUpdates = await _offlineStorage.getAllMarkerMapUpdates();

      final notesToDelete = await _offlineStorage.getIdsToDelete(false);
      final mapsToDelete = await _offlineStorage.getIdsToDelete(true);

      final pendingChanges = offlineNotes.length +
          offlineNoteUpdates.length +
          offlineMaps.length +
          offlineMapUpdates.length +
          notesToDelete.length +
          mapsToDelete.length;

      final isConnected = await NetworkUtils.isNetworkAvailable();
      final localCounters = await _offlineStorage.getAllLocalUsageCounters();

      return {
        'lastSyncTime': lastSyncTime,
        'isSyncing': _isSyncing,
        'pendingChanges': pendingChanges,
        'offlineNotes': offlineNotes.length,
        'offlineNoteUpdates': offlineNoteUpdates.length,
        'offlineMaps': offlineMaps.length,
        'offlineMapUpdates': offlineMapUpdates.length,
        'notesToDelete': notesToDelete.length,
        'mapsToDelete': mapsToDelete.length,
        'isOnline': isConnected,
        'errorCounters': _errorCounters,
        'localCounters': localCounters.map((k, v) => MapEntry(k.name, v)),
      };
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: $e');
      return {'error': e.toString()};
    }
  }

  /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
  Future<bool> forceSyncAll() async {
    try {
      if (_isSyncing) {
        debugPrint('‚ö†Ô∏è –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞');
        return false;
      }

      final isConnected = await NetworkUtils.isNetworkAvailable();
      if (!isConnected) {
        debugPrint('‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É');
        return false;
      }

      _errorCounters.clear();
      await syncAll();
      return true;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: $e');
      return false;
    }
  }

  /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ —Å—á–µ—Ç—á–∏–∫–æ–≤
  Future<bool> forceSyncCounters() async {
    try {
      if (_isSyncing) return false;

      final isConnected = await NetworkUtils.isNetworkAvailable();
      if (!isConnected) return false;

      await _syncUsageCounters();
      return true;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—á–µ—Ç—á–∏–∫–æ–≤: $e');
      return false;
    }
  }
}