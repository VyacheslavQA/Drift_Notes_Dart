// –ü—É—Ç—å: lib/services/offline/sync_service.dart

import 'dart:async';
import 'dart:developer';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:connectivity_plus/connectivity_plus.dart';
import 'package:firebase_auth/firebase_auth.dart';
import '../../models/isar/fishing_note_entity.dart';
import '../../models/isar/budget_note_entity.dart';
import '../../models/isar/marker_map_entity.dart';
import '../isar_service.dart';

class SyncService {
  static SyncService? _instance;
  final IsarService _isarService = IsarService.instance;
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final FirebaseAuth _auth = FirebaseAuth.instance;

  SyncService._();

  static SyncService get instance {
    _instance ??= SyncService._();
    return _instance!;
  }

  factory SyncService() => instance;

  /// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫
  DateTime _parseTimestamp(dynamic value) {
    if (value == null) return DateTime.now();
    if (value is Timestamp) return value.toDate();
    if (value is int) return DateTime.fromMillisecondsSinceEpoch(value);
    if (value is String) {
      try {
        return DateTime.parse(value);
      } catch (e) {
        return DateTime.now();
      }
    }
    return DateTime.now();
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
  Future<bool> _hasInternetConnection() async {
    final connectivityResult = await Connectivity().checkConnectivity();
    return connectivityResult != ConnectivityResult.none;
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Firestore
  CollectionReference? _getUserCollection(String collectionName) {
    final user = _auth.currentUser;
    if (user == null) {
      log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      return null;
    }
    return _firestore.collection('users').doc(user.uid).collection(collectionName);
  }

  // ========================================
  // –ú–ï–¢–û–î–´ –î–õ–Ø FISHING NOTES
  // ========================================

  /// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è FishingNoteEntity –≤ Map –¥–ª—è Firestore
  Map<String, dynamic> _fishingNoteEntityToFirestore(FishingNoteEntity entity) {
    return {
      'title': entity.title,
      'description': entity.description,
      'date': Timestamp.fromDate(entity.date),
      'location': entity.location,
      'createdAt': Timestamp.fromDate(entity.createdAt),
      'updatedAt': Timestamp.fromDate(entity.updatedAt),
      'weatherData': entity.weatherData != null ? {
        'temperature': entity.weatherData!.temperature,
        'humidity': entity.weatherData!.humidity,
        'windSpeed': entity.weatherData!.windSpeed,
        'windDirection': entity.weatherData!.windDirection,
        'pressure': entity.weatherData!.pressure,
        'condition': entity.weatherData!.condition,
        'recordedAt': entity.weatherData!.recordedAt != null
            ? Timestamp.fromDate(entity.weatherData!.recordedAt!)
            : null,
      } : null,
      'biteRecords': entity.biteRecords.map((bite) => {
        'time': bite.time != null ? Timestamp.fromDate(bite.time!) : null,
        'fishType': bite.fishType,
        'baitUsed': bite.baitUsed,
        'success': bite.success,
        'fishWeight': bite.fishWeight,
        'fishLength': bite.fishLength,
        'notes': bite.notes,
      }).toList(),
    };
  }

  /// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Firestore –≤ FishingNoteEntity
  FishingNoteEntity _firestoreToFishingNoteEntity(String firebaseId, Map<String, dynamic> data) {
    final entity = FishingNoteEntity()
      ..firebaseId = firebaseId
      ..title = data['title'] ?? ''
      ..description = data['description']
      ..date = _parseTimestamp(data['date'])  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û
      ..location = data['location']
      ..createdAt = _parseTimestamp(data['createdAt'])  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û
      ..updatedAt = _parseTimestamp(data['updatedAt'])  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û
      ..isSynced = true;

    // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è endDate –∏ isMultiDay
    if (data['endDate'] != null) {
      entity.endDate = _parseTimestamp(data['endDate']);
    }
    entity.isMultiDay = data['isMultiDay'] ?? false;

    // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É weather –¥–∞–Ω–Ω—ã—Ö
    if (data['weather'] != null) {
      final weatherMap = data['weather'] as Map<String, dynamic>;
      entity.weatherData = WeatherDataEntity()
        ..temperature = weatherMap['temperature']?.toDouble()
        ..humidity = weatherMap['humidity'].toDouble()
        ..windSpeed = weatherMap['windSpeed']?.toDouble()
        ..windDirection = weatherMap['windDirection']
        ..pressure = weatherMap['pressure']?.toDouble()
        ..condition = weatherMap['condition']
        ..recordedAt = weatherMap['observationTime'] != null
            ? _parseTimestamp(weatherMap['observationTime'])
            : null
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∏–∑ Firebase
        ..feelsLike = weatherMap['feelsLike']?.toDouble()
        ..cloudCover = weatherMap['cloudCover']?.toDouble()
        ..isDay = weatherMap['isDay'] ?? true
        ..sunrise = weatherMap['sunrise']
        ..sunset = weatherMap['sunset'];
    }

    // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–ø–∏—Å–µ–π –æ –ø–æ–∫–ª–µ–≤–∫–∞—Ö
    if (data['biteRecords'] != null) {
      final List<dynamic> biteList = data['biteRecords'];
      entity.biteRecords = biteList.map((bite) {
        final biteMap = bite as Map<String, dynamic>;
        return BiteRecordEntity()
          ..time = biteMap['time'] != null
              ? _parseTimestamp(biteMap['time'])  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û
              : null
          ..fishType = biteMap['fishType']
          ..baitUsed = biteMap['baitUsed']
          ..success = biteMap['success'] ?? false
          ..fishWeight = biteMap['weight']?.toDouble()  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: weight –≤–º–µ—Å—Ç–æ fishWeight
          ..fishLength = biteMap['length']?.toDouble()  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: length –≤–º–µ—Å—Ç–æ fishLength
          ..notes = biteMap['notes'];
      }).toList();
    }

    return entity;
  }

  /// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö FishingNotes –≤ Firestore
  Future<bool> syncFishingNotesToFirebase() async {
    try {
      if (!await _hasInternetConnection()) {
        log('–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É');
        return false;
      }

      final collection = _getUserCollection('fishing_notes');
      if (collection == null) return false;

      final unsyncedNotes = await _isarService.getUnsyncedNotes();
      log('–ù–∞–π–¥–µ–Ω–æ ${unsyncedNotes.length} –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä—ã–±–æ–ª–æ–≤–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫');

      for (final note in unsyncedNotes) {
        try {
          if (note.firebaseId != null) {
            await collection.doc(note.firebaseId).update(_fishingNoteEntityToFirestore(note));
            log('–û–±–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–º–µ—Ç–∫–∞: ${note.firebaseId}');
          } else {
            final docRef = await collection.add(_fishingNoteEntityToFirestore(note));
            await _isarService.markAsSynced(note.id, docRef.id);
            log('–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞: ${docRef.id}');
            continue;
          }
          await _isarService.markAsSynced(note.id, note.firebaseId!);
        } catch (e) {
          log('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–º–µ—Ç–∫–∏ ${note.id}: $e');
        }
      }

      return true;
    } catch (e) {
      log('–û—à–∏–±–∫–∞ syncFishingNotesToFirebase: $e');
      return false;
    }
  }

  /// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è FishingNotes –∏–∑ Firestore –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –ë–î
  Future<bool> syncFishingNotesFromFirebase() async {
    try {
      if (!await _hasInternetConnection()) {
        log('–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É');
        return false;
      }

      final collection = _getUserCollection('fishing_notes');
      if (collection == null) return false;

      final querySnapshot = await collection.orderBy('date', descending: true).get();
      log('–ü–æ–ª—É—á–µ–Ω–æ ${querySnapshot.docs.length} —Ä—ã–±–æ–ª–æ–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ Firebase');

      for (final doc in querySnapshot.docs) {
        try {
          final firebaseId = doc.id;
          final data = doc.data() as Map<String, dynamic>;

          final existingNote = await _isarService.getFishingNoteByFirebaseId(firebaseId);

          if (existingNote == null) {
            final entity = _firestoreToFishingNoteEntity(firebaseId, data);
            await _isarService.insertFishingNote(entity);
            log('–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞ –∏–∑ Firebase: $firebaseId');
          } else {
            final firebaseUpdatedAt = _parseTimestamp(data['updatedAt']);  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û
            if (firebaseUpdatedAt.isAfter(existingNote.updatedAt)) {
              final updatedEntity = _firestoreToFishingNoteEntity(firebaseId, data);
              updatedEntity.id = existingNote.id;
              await _isarService.updateFishingNote(updatedEntity);
              log('–û–±–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–º–µ—Ç–∫–∞ –∏–∑ Firebase: $firebaseId');
            }
          }
        } catch (e) {
          log('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ ${doc.id}: $e');
        }
      }

      return true;
    } catch (e) {
      log('–û—à–∏–±–∫–∞ syncFishingNotesFromFirebase: $e');
      return false;
    }
  }

  // ========================================
  // –ú–ï–¢–û–î–´ –î–õ–Ø BUDGET NOTES
  // ========================================

  /// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è BudgetNotes —Å Firebase
  Future<bool> syncBudgetNotesToFirebase() async {
    try {
      if (!await _hasInternetConnection()) return false;

      final collection = _getUserCollection('budget_notes');
      if (collection == null) return false;

      final userId = _auth.currentUser?.uid;
      if (userId == null) return false;

      final unsyncedNotes = await _isarService.getUnsyncedBudgetNotes(userId);
      log('–ù–∞–π–¥–µ–Ω–æ ${unsyncedNotes.length} –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –±—é–¥–∂–µ—Ç–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫');

      for (final note in unsyncedNotes) {
        try {
          final data = note.toFirestoreMap();

          if (note.firebaseId != null) {
            await collection.doc(note.firebaseId).update(data);
            log('–û–±–Ω–æ–≤–ª–µ–Ω–∞ –±—é–¥–∂–µ—Ç–Ω–∞—è –∑–∞–º–µ—Ç–∫–∞: ${note.firebaseId}');
          } else {
            final docRef = await collection.add(data);
            await _isarService.markBudgetNoteAsSynced(note.id, docRef.id);
            log('–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –±—é–¥–∂–µ—Ç–Ω–∞—è –∑–∞–º–µ—Ç–∫–∞: ${docRef.id}');
            continue;
          }
          await _isarService.markBudgetNoteAsSynced(note.id, note.firebaseId!);
        } catch (e) {
          log('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –±—é–¥–∂–µ—Ç–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏ ${note.id}: $e');
        }
      }

      return true;
    } catch (e) {
      log('–û—à–∏–±–∫–∞ syncBudgetNotesToFirebase: $e');
      return false;
    }
  }

  /// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è BudgetNotes –∏–∑ Firebase
  Future<bool> syncBudgetNotesFromFirebase() async {
    try {
      if (!await _hasInternetConnection()) return false;

      final collection = _getUserCollection('budget_notes');
      if (collection == null) return false;

      final userId = _auth.currentUser?.uid;
      if (userId == null) return false;

      final querySnapshot = await collection.orderBy('date', descending: true).get();
      log('–ü–æ–ª—É—á–µ–Ω–æ ${querySnapshot.docs.length} –±—é–¥–∂–µ—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ Firebase');

      for (final doc in querySnapshot.docs) {
        try {
          final firebaseId = doc.id;
          final data = doc.data() as Map<String, dynamic>;

          final existingNote = await _isarService.getBudgetNoteByFirebaseId(firebaseId);

          if (existingNote == null) {
            final entity = BudgetNoteEntity.fromFirestoreMap(firebaseId, data);
            await _isarService.insertBudgetNote(entity);
            log('–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –±—é–¥–∂–µ—Ç–Ω–∞—è –∑–∞–º–µ—Ç–∫–∞ –∏–∑ Firebase: $firebaseId');
          } else {
            final firebaseUpdatedAt = _parseTimestamp(data['updatedAt']);  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û
            if (firebaseUpdatedAt.isAfter(existingNote.updatedAt)) {
              final updatedEntity = BudgetNoteEntity.fromFirestoreMap(firebaseId, data);
              updatedEntity.id = existingNote.id;
              await _isarService.updateBudgetNote(updatedEntity);
              log('–û–±–Ω–æ–≤–ª–µ–Ω–∞ –±—é–¥–∂–µ—Ç–Ω–∞—è –∑–∞–º–µ—Ç–∫–∞ –∏–∑ Firebase: $firebaseId');
            }
          }
        } catch (e) {
          log('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±—é–¥–∂–µ—Ç–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ ${doc.id}: $e');
        }
      }

      return true;
    } catch (e) {
      log('–û—à–∏–±–∫–∞ syncBudgetNotesFromFirebase: $e');
      return false;
    }
  }

  // ========================================
  // –ú–ï–¢–û–î–´ –î–õ–Ø MARKER MAPS
  // ========================================

  /// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è MarkerMaps —Å Firebase
  Future<bool> syncMarkerMapsToFirebase() async {
    try {
      if (!await _hasInternetConnection()) return false;

      final collection = _getUserCollection('marker_maps');
      if (collection == null) return false;

      final userId = _auth.currentUser?.uid;
      if (userId == null) return false;

      final unsyncedMaps = await _isarService.getUnsyncedMarkerMaps(userId);
      log('–ù–∞–π–¥–µ–Ω–æ ${unsyncedMaps.length} –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç —Å –º–∞—Ä–∫–µ—Ä–∞–º–∏');

      for (final map in unsyncedMaps) {
        try {
          final data = map.toFirestoreMap();

          if (map.firebaseId != null) {
            await collection.doc(map.firebaseId).update(data);
            log('–û–±–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞—Ä—Ç–∞: ${map.firebaseId}');
          } else {
            final docRef = await collection.add(data);
            await _isarService.markMarkerMapAsSynced(map.id, docRef.id);
            log('–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∫–∞—Ä—Ç–∞: ${docRef.id}');
            continue;
          }
          await _isarService.markMarkerMapAsSynced(map.id, map.firebaseId!);
        } catch (e) {
          log('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã ${map.id}: $e');
        }
      }

      return true;
    } catch (e) {
      log('–û—à–∏–±–∫–∞ syncMarkerMapsToFirebase: $e');
      return false;
    }
  }

  /// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è MarkerMaps –∏–∑ Firebase
  Future<bool> syncMarkerMapsFromFirebase() async {
    try {
      if (!await _hasInternetConnection()) return false;

      final collection = _getUserCollection('marker_maps');
      if (collection == null) return false;

      final userId = _auth.currentUser?.uid;
      if (userId == null) return false;

      final querySnapshot = await collection.orderBy('date', descending: true).get();
      log('–ü–æ–ª—É—á–µ–Ω–æ ${querySnapshot.docs.length} –∫–∞—Ä—Ç –∏–∑ Firebase');

      for (final doc in querySnapshot.docs) {
        try {
          final firebaseId = doc.id;
          final data = doc.data() as Map<String, dynamic>;

          final existingMap = await _isarService.getMarkerMapByFirebaseId(firebaseId);

          if (existingMap == null) {
            final entity = MarkerMapEntity.fromFirestoreMap(firebaseId, data);
            await _isarService.insertMarkerMap(entity);
            log('–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –∏–∑ Firebase: $firebaseId');
          } else {
            final firebaseUpdatedAt = _parseTimestamp(data['updatedAt']);  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û
            if (firebaseUpdatedAt.isAfter(existingMap.updatedAt)) {
              final updatedEntity = MarkerMapEntity.fromFirestoreMap(firebaseId, data);
              updatedEntity.id = existingMap.id;
              await _isarService.updateMarkerMap(updatedEntity);
              log('–û–±–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞—Ä—Ç–∞ –∏–∑ Firebase: $firebaseId');
            }
          }
        } catch (e) {
          log('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞—Ä—Ç—ã ${doc.id}: $e');
        }
      }

      return true;
    } catch (e) {
      log('–û—à–∏–±–∫–∞ syncMarkerMapsFromFirebase: $e');
      return false;
    }
  }

  // ========================================
  // –û–ë–©–ò–ï –ú–ï–¢–û–î–´
  // ========================================

  /// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –≤ Firebase
  Future<bool> syncAll() async {
    try {
      log('–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö');

      final results = await Future.wait([
        syncFishingNotesToFirebase(),
        syncBudgetNotesToFirebase(),
        syncMarkerMapsToFirebase(),
      ]);

      final success = results.every((result) => result);
      log('–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –≤ Firebase –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—Ö: $success');
      return success;
    } catch (e) {
      log('–û—à–∏–±–∫–∞ syncAll: $e');
      return false;
    }
  }

  /// –ü–æ–ª–Ω–∞—è –¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
  Future<bool> fullSync() async {
    try {
      log('–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è');

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ Firebase
      final toFirebaseResults = await Future.wait([
        syncFishingNotesToFirebase(),
        syncBudgetNotesToFirebase(),
        syncMarkerMapsToFirebase(),
      ]);

      // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ Firebase
      final fromFirebaseResults = await Future.wait([
        syncFishingNotesFromFirebase(),
        syncBudgetNotesFromFirebase(),
        syncMarkerMapsFromFirebase(),
      ]);

      final success = [...toFirebaseResults, ...fromFirebaseResults].every((result) => result);
      log('–ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—Ö: $success');

      return success;
    } catch (e) {
      log('–û—à–∏–±–∫–∞ fullSync: $e');
      return false;
    }
  }

  /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
  Future<bool> forceSyncAll() async {
    return await fullSync();
  }

  /// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)
  void startPeriodicSync() {
    Timer.periodic(const Duration(minutes: 5), (timer) async {
      if (await _hasInternetConnection()) {
        await fullSync();
      }
    });
  }

  /// üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –ø–æ Firebase ID (–Ω–æ–≤—ã–π –º–µ—Ç–æ–¥)
  Future<bool> deleteNoteByFirebaseId(String firebaseId) async {
    try {
      log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –ø–æ Firebase ID: $firebaseId');

      // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –∏–∑ Firebase
      if (await _hasInternetConnection()) {
        final collection = _getUserCollection('fishing_notes');
        if (collection != null) {
          try {
            await collection.doc(firebaseId).delete();
            log('‚úÖ –ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ Firebase: $firebaseId');
          } catch (e) {
            log('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ Firebase: $e');
            // –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º false, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ Isar
          }
        }
      }

      // –ó–∞—Ç–µ–º –Ω–∞—Ö–æ–¥–∏–º –∏ —É–¥–∞–ª—è–µ–º –∏–∑ Isar –ø–æ firebaseId
      final entity = await _isarService.getFishingNoteByFirebaseId(firebaseId);
      if (entity != null) {
        await _isarService.deleteFishingNote(entity.id);
        log('‚úÖ –ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ Isar: ${entity.id}');
      }

      return true;
    } catch (e) {
      log('‚ùå –û—à–∏–±–∫–∞ deleteNoteByFirebaseId: $e');
      return false;
    }
  }

  /// –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å Firebase
  Future<bool> deleteNoteAndSync(int localId) async {
    try {
      final note = await _isarService.getFishingNoteById(localId);
      if (note == null) return false;

      // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –∏–∑ Firebase, –ø–æ—Ç–æ–º –∏–∑ Isar
      if (note.firebaseId != null && await _hasInternetConnection()) {
        final collection = _getUserCollection('fishing_notes');
        if (collection != null) {
          try {
            // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ Firebase
            await collection.doc(note.firebaseId).delete();
            log('‚úÖ –ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ Firebase: ${note.firebaseId}');
          } catch (e) {
            log('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ Firebase: $e');
            // –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º false, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ Isar
          }
        }
      }

      // –£–¥–∞–ª—è–µ–º –∏–∑ Isar –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ Firebase
      await _isarService.deleteFishingNote(localId);
      log('‚úÖ –ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ Isar: $localId');

      return true;
    } catch (e) {
      log('‚ùå –û—à–∏–±–∫–∞ deleteNoteAndSync: $e');
      return false;
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
  Future<Map<String, dynamic>> getSyncStatus() async {
    final userId = _auth.currentUser?.uid;
    if (userId == null) {
      return {
        'fishingNotes': {'total': 0, 'unsynced': 0, 'synced': 0},
        'budgetNotes': {'total': 0, 'unsynced': 0, 'synced': 0},
        'markerMaps': {'total': 0, 'unsynced': 0, 'synced': 0},
      };
    }

    final fishingNotesTotal = await _isarService.getNotesCount();
    final fishingNotesUnsynced = await _isarService.getUnsyncedNotesCount();

    final budgetNotesTotal = await _isarService.getBudgetNotesCount(userId);
    final budgetNotesUnsynced = await _isarService.getUnsyncedBudgetNotesCount(userId);

    final markerMapsTotal = await _isarService.getMarkerMapsCount(userId);
    final markerMapsUnsynced = await _isarService.getUnsyncedMarkerMapsCount(userId);

    return {
      'fishingNotes': {
        'total': fishingNotesTotal,
        'unsynced': fishingNotesUnsynced,
        'synced': fishingNotesTotal - fishingNotesUnsynced,
      },
      'budgetNotes': {
        'total': budgetNotesTotal,
        'unsynced': budgetNotesUnsynced,
        'synced': budgetNotesTotal - budgetNotesUnsynced,
      },
      'markerMaps': {
        'total': markerMapsTotal,
        'unsynced': markerMapsUnsynced,
        'synced': markerMapsTotal - markerMapsUnsynced,
      },
    };
  }
}