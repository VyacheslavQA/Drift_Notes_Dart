// –ü—É—Ç—å: lib/services/offline/sync_service.dart

import 'dart:async';
import 'dart:convert';
import 'dart:developer';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:connectivity_plus/connectivity_plus.dart';
import 'package:firebase_auth/firebase_auth.dart';
import '../../models/isar/fishing_note_entity.dart';
import '../../models/isar/budget_note_entity.dart';
import '../../models/isar/marker_map_entity.dart';
import '../../models/isar/policy_acceptance_entity.dart';
import '../../models/isar/user_usage_limits_entity.dart'; // üÜï –î–û–ë–ê–í–õ–ï–ù–û
import '../isar_service.dart';

class SyncService {
  static SyncService? _instance;
  final IsarService _isarService = IsarService.instance;
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final FirebaseAuth _auth = FirebaseAuth.instance;

  SyncService._();

  static SyncService get instance {
    _instance ??= SyncService._();
    return _instance!;
  }

  factory SyncService() => instance;

  /// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫
  DateTime _parseTimestamp(dynamic value) {
    if (value == null) return DateTime.now();
    if (value is Timestamp) return value.toDate();
    if (value is int) return DateTime.fromMillisecondsSinceEpoch(value);
    if (value is String) {
      try {
        return DateTime.parse(value);
      } catch (e) {
        return DateTime.now();
      }
    }
    return DateTime.now();
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
  Future<bool> _hasInternetConnection() async {
    final connectivityResult = await Connectivity().checkConnectivity();
    return connectivityResult != ConnectivityResult.none;
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Firestore
  CollectionReference? _getUserCollection(String collectionName) {
    final user = _auth.currentUser;
    if (user == null) {
      log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      return null;
    }
    return _firestore.collection('users').doc(user.uid).collection(collectionName);
  }

  // ========================================
  // –ú–ï–¢–û–î–´ –î–õ–Ø FISHING NOTES
  // ========================================

  /// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è FishingNoteEntity –≤ Map –¥–ª—è Firestore
  Map<String, dynamic> _fishingNoteEntityToFirestore(FishingNoteEntity entity) {
    final map = <String, dynamic>{
      'title': entity.title,
      'description': entity.description,
      'date': entity.date.millisecondsSinceEpoch, // –ò—Å–ø–æ–ª—å–∑—É–µ–º int –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      'location': entity.location,
      'createdAt': Timestamp.fromDate(entity.createdAt),
      'updatedAt': Timestamp.fromDate(entity.updatedAt),

      // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è
      'tackle': entity.tackle,
      'fishingType': entity.fishingType,
      'notes': entity.notes,
      'latitude': entity.latitude,
      'longitude': entity.longitude,
      'photoUrls': entity.photoUrls,
      'isOffline': false, // –ü–æ–º–µ—Ç–∫–∞ —á—Ç–æ –∑–∞–º–µ—Ç–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞

      // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –ú–Ω–æ–≥–æ–¥–Ω–µ–≤–Ω—ã–µ —Ä—ã–±–∞–ª–∫–∏
      'isMultiDay': entity.isMultiDay,
    };

    // –î–æ–±–∞–≤–ª—è–µ–º endDate –µ—Å–ª–∏ –µ—Å—Ç—å
    if (entity.endDate != null) {
      map['endDate'] = entity.endDate!.millisecondsSinceEpoch;
    }

    // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ mapMarkers –∏–∑ JSON
    if (entity.mapMarkersJson != null && entity.mapMarkersJson!.isNotEmpty) {
      try {
        map['mapMarkers'] = jsonDecode(entity.mapMarkersJson!);
      } catch (e) {
        log('–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è mapMarkers: $e');
        map['mapMarkers'] = [];
      }
    } else {
      map['mapMarkers'] = [];
    }

    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–≥–æ–¥—ã (–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–ª–µ weather)
    if (entity.weatherData != null) {
      map['weather'] = {
        'temperature': entity.weatherData!.temperature,
        'feelsLike': entity.weatherData!.feelsLike,
        'humidity': entity.weatherData!.humidity,
        'windSpeed': entity.weatherData!.windSpeed,
        'windDirection': entity.weatherData!.windDirection,
        'pressure': entity.weatherData!.pressure,
        'cloudCover': entity.weatherData!.cloudCover,
        'isDay': entity.weatherData!.isDay,
        'sunrise': entity.weatherData!.sunrise,
        'sunset': entity.weatherData!.sunset,
        'condition': entity.weatherData!.condition,
      };

      // –î–æ–±–∞–≤–ª—è–µ–º observationTime (–ù–ï recordedAt!)
      if (entity.weatherData!.recordedAt != null) {
        map['weather']['observationTime'] = Timestamp.fromDate(entity.weatherData!.recordedAt!);
      }

      // –î–æ–±–∞–≤–ª—è–µ–º timestamp –µ—Å–ª–∏ –µ—Å—Ç—å
      if (entity.weatherData!.timestamp != null) {
        map['weather']['timestamp'] = entity.weatherData!.timestamp;
      }
    }

    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫–ª–µ–≤–æ–∫ (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–æ–ª—è weight/length)
    map['biteRecords'] = entity.biteRecords.map((bite) {
      final biteMap = <String, dynamic>{
        'fishType': bite.fishType,
        'notes': bite.notes,
        'weight': bite.fishWeight, // fishWeight -> weight –¥–ª—è Firebase
        'length': bite.fishLength, // fishLength -> length –¥–ª—è Firebase
        'photoUrls': bite.photoUrls,
      };

      // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –µ—Å–ª–∏ –µ—Å—Ç—å
      if (bite.time != null) {
        biteMap['time'] = bite.time!.millisecondsSinceEpoch;
      }

      // –î–æ–±–∞–≤–ª—è–µ–º ID –µ—Å–ª–∏ –µ—Å—Ç—å
      if (bite.biteId != null && bite.biteId!.isNotEmpty) {
        biteMap['id'] = bite.biteId;
      }

      return biteMap;
    }).toList();

    // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: AI –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
    if (entity.aiPrediction != null) {
      map['aiPrediction'] = {
        'activityLevel': entity.aiPrediction!.activityLevel,
        'confidencePercent': entity.aiPrediction!.confidencePercent,
        'fishingType': entity.aiPrediction!.fishingType,
        'overallScore': entity.aiPrediction!.overallScore,
        'recommendation': entity.aiPrediction!.recommendation,
        'timestamp': entity.aiPrediction!.timestamp,
      };

      // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–≤–µ—Ç—ã –∏–∑ JSON
      if (entity.aiPrediction!.tipsJson != null && entity.aiPrediction!.tipsJson!.isNotEmpty) {
        try {
          map['aiPrediction']['tips'] = jsonDecode(entity.aiPrediction!.tipsJson!);
        } catch (e) {
          log('–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è AI tips: $e');
          map['aiPrediction']['tips'] = [];
        }
      }
    }

    return map;
  }

  /// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Firestore –≤ FishingNoteEntity
  FishingNoteEntity _firestoreToFishingNoteEntity(String firebaseId, Map<String, dynamic> data) {
    final entity = FishingNoteEntity()
      ..firebaseId = firebaseId
      ..title = data['title'] ?? ''
      ..description = data['description']
      ..date = _parseTimestamp(data['date'])
      ..location = data['location']
      ..createdAt = _parseTimestamp(data['createdAt'])
      ..updatedAt = _parseTimestamp(data['updatedAt'])
      ..isSynced = true;

    // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è
    entity.tackle = data['tackle'];
    entity.fishingType = data['fishingType'];
    entity.notes = data['notes'];
    entity.latitude = data['latitude']?.toDouble();
    entity.longitude = data['longitude']?.toDouble();

    // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –§–æ—Ç–æ –∑–∞–º–µ—Ç–∫–∏
    if (data['photoUrls'] != null) {
      entity.photoUrls = List<String>.from(data['photoUrls']);
    }

    // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –ú–Ω–æ–≥–æ–¥–Ω–µ–≤–Ω—ã–µ —Ä—ã–±–∞–ª–∫–∏
    entity.isMultiDay = data['isMultiDay'] ?? false;
    if (data['endDate'] != null) {
      entity.endDate = _parseTimestamp(data['endDate']);
    }

    // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –ú–∞—Ä–∫–µ—Ä—ã –∫–∞—Ä—Ç—ã –∫–∞–∫ JSON
    if (data['mapMarkers'] != null) {
      try {
        entity.mapMarkersJson = jsonEncode(data['mapMarkers']);
      } catch (e) {
        log('–û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è mapMarkers: $e');
        entity.mapMarkersJson = '[]';
      }
    }

    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–≥–æ–¥—ã (–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–ª–µ weather)
    if (data['weather'] != null) {
      final weatherMap = data['weather'] as Map<String, dynamic>;
      entity.weatherData = WeatherDataEntity()
        ..temperature = weatherMap['temperature']?.toDouble()
        ..feelsLike = weatherMap['feelsLike']?.toDouble()
        ..humidity = weatherMap['humidity']?.toDouble()
        ..windSpeed = weatherMap['windSpeed']?.toDouble()
        ..windDirection = weatherMap['windDirection']
        ..pressure = weatherMap['pressure']?.toDouble()
        ..cloudCover = weatherMap['cloudCover']?.toDouble()
        ..isDay = weatherMap['isDay'] ?? true
        ..sunrise = weatherMap['sunrise']
        ..sunset = weatherMap['sunset']
        ..condition = weatherMap['condition'];

      // –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–ª–µ observationTime (–ù–ï recordedAt!)
      if (weatherMap['observationTime'] != null) {
        entity.weatherData!.recordedAt = _parseTimestamp(weatherMap['observationTime']);
      }

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π timestamp
      if (weatherMap['timestamp'] != null) {
        entity.weatherData!.timestamp = weatherMap['timestamp'];
      }
    }

    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫–ª–µ–≤–æ–∫ (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–æ–ª—è weight/length)
    if (data['biteRecords'] != null) {
      final List<dynamic> biteList = data['biteRecords'];
      entity.biteRecords = biteList.map((bite) {
        final biteMap = bite as Map<String, dynamic>;
        final biteEntity = BiteRecordEntity()
          ..biteId = biteMap['id'] // ID –ø–æ–∫–ª–µ–≤–∫–∏ –∏–∑ Firebase
          ..fishType = biteMap['fishType']
          ..notes = biteMap['notes']
          ..fishWeight = biteMap['weight']?.toDouble() // weight -> fishWeight
          ..fishLength = biteMap['length']?.toDouble(); // length -> fishLength

        // –í—Ä–µ–º—è –ø–æ–∫–ª–µ–≤–∫–∏
        if (biteMap['time'] != null) {
          biteEntity.time = _parseTimestamp(biteMap['time']);
        }

        // –§–æ—Ç–æ –ø–æ–∫–ª–µ–≤–∫–∏
        if (biteMap['photoUrls'] != null) {
          biteEntity.photoUrls = List<String>.from(biteMap['photoUrls']);
        }

        return biteEntity;
      }).toList();
    }

    // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: AI –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
    if (data['aiPrediction'] != null) {
      final aiMap = data['aiPrediction'] as Map<String, dynamic>;
      entity.aiPrediction = AiPredictionEntity()
        ..activityLevel = aiMap['activityLevel']
        ..confidencePercent = aiMap['confidencePercent']
        ..fishingType = aiMap['fishingType']
        ..overallScore = aiMap['overallScore']
        ..recommendation = aiMap['recommendation']
        ..timestamp = aiMap['timestamp'];

      // –°–æ–≤–µ—Ç—ã –∫–∞–∫ JSON
      if (aiMap['tips'] != null) {
        try {
          entity.aiPrediction!.tipsJson = jsonEncode(aiMap['tips']);
        } catch (e) {
          log('–û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è AI tips: $e');
          entity.aiPrediction!.tipsJson = '[]';
        }
      }
    }

    return entity;
  }

  /// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö FishingNotes –≤ Firestore
  Future<bool> syncFishingNotesToFirebase() async {
    try {
      if (!await _hasInternetConnection()) {
        log('–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –¥–ª—è FishingNotes');
        return false;
      }

      final collection = _getUserCollection('fishing_notes');
      if (collection == null) return false;

      final unsyncedNotes = await _isarService.getUnsyncedNotes();
      log('üîÑ –ù–∞–π–¥–µ–Ω–æ ${unsyncedNotes.length} –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä—ã–±–æ–ª–æ–≤–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫');

      for (final note in unsyncedNotes) {
        try {
          final firebaseData = _fishingNoteEntityToFirestore(note);

          // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ—Ñ–ª–∞–π–Ω –∑–∞–º–µ—Ç–æ–∫
          if (note.firebaseId != null) {
            // ‚úÖ –ü–†–û–í–ï–†–Ø–ï–ú: –°—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –≤ Firebase
            final docRef = collection.doc(note.firebaseId);
            final docSnapshot = await docRef.get();

            if (docSnapshot.exists) {
              // –î–æ–∫—É–º–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –æ–±–Ω–æ–≤–ª—è–µ–º
              await docRef.update(firebaseData);
              log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Ä—ã–±–æ–ª–æ–≤–Ω–∞—è –∑–∞–º–µ—Ç–∫–∞: ${note.firebaseId}');
            } else {
              // –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
              await docRef.set(firebaseData);
              log('‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä—ã–±–æ–ª–æ–≤–Ω–∞—è –∑–∞–º–µ—Ç–∫–∞ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º ID: ${note.firebaseId}');
            }
            await _isarService.markAsSynced(note.id, note.firebaseId!);
          } else {
            // firebaseId == null - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
            final docRef = await collection.add(firebaseData);
            await _isarService.markAsSynced(note.id, docRef.id);
            log('‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Ä—ã–±–æ–ª–æ–≤–Ω–∞—è –∑–∞–º–µ—Ç–∫–∞: ${docRef.id}');
          }
        } catch (e) {
          log('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ä—ã–±–æ–ª–æ–≤–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏ ${note.id}: $e');
        }
      }

      return true;
    } catch (e) {
      log('‚ùå –û—à–∏–±–∫–∞ syncFishingNotesToFirebase: $e');
      return false;
    }
  }

  /// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è FishingNotes –∏–∑ Firestore –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –ë–î
  Future<bool> syncFishingNotesFromFirebase() async {
    try {
      if (!await _hasInternetConnection()) {
        log('–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ FishingNotes');
        return false;
      }

      final collection = _getUserCollection('fishing_notes');
      if (collection == null) return false;

      final querySnapshot = await collection.orderBy('date', descending: true).get();
      log('üì• –ü–æ–ª—É—á–µ–Ω–æ ${querySnapshot.docs.length} —Ä—ã–±–æ–ª–æ–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ Firebase');

      for (final doc in querySnapshot.docs) {
        try {
          final firebaseId = doc.id;
          final data = doc.data() as Map<String, dynamic>;

          final existingNote = await _isarService.getFishingNoteByFirebaseId(firebaseId);

          if (existingNote == null) {
            final entity = _firestoreToFishingNoteEntity(firebaseId, data);
            await _isarService.insertFishingNote(entity);
            log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è —Ä—ã–±–æ–ª–æ–≤–Ω–∞—è –∑–∞–º–µ—Ç–∫–∞ –∏–∑ Firebase: $firebaseId');
          } else {
            final firebaseUpdatedAt = _parseTimestamp(data['updatedAt']);
            if (firebaseUpdatedAt.isAfter(existingNote.updatedAt)) {
              final updatedEntity = _firestoreToFishingNoteEntity(firebaseId, data);
              updatedEntity.id = existingNote.id;
              await _isarService.updateFishingNote(updatedEntity);
              log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Ä—ã–±–æ–ª–æ–≤–Ω–∞—è –∑–∞–º–µ—Ç–∫–∞ –∏–∑ Firebase: $firebaseId');
            }
          }
        } catch (e) {
          log('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä—ã–±–æ–ª–æ–≤–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ ${doc.id}: $e');
        }
      }

      return true;
    } catch (e) {
      log('‚ùå –û—à–∏–±–∫–∞ syncFishingNotesFromFirebase: $e');
      return false;
    }
  }

  // ========================================
  // –ú–ï–¢–û–î–´ –î–õ–Ø BUDGET NOTES
  // ========================================

  /// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è BudgetNotes —Å Firebase —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
  Future<bool> syncBudgetNotesToFirebase() async {
    try {
      if (!await _hasInternetConnection()) {
        log('–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –¥–ª—è BudgetNotes');
        return false;
      }

      final collection = _getUserCollection('budget_notes');
      if (collection == null) return false;

      final userId = _auth.currentUser?.uid;
      if (userId == null) return false;

      final unsyncedNotes = await _isarService.getUnsyncedBudgetNotes(userId);
      log('üîÑ –ù–∞–π–¥–µ–Ω–æ ${unsyncedNotes.length} –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –±—é–¥–∂–µ—Ç–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫');

      for (final note in unsyncedNotes) {
        try {
          final data = note.toFirestoreMap();

          // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–∫–∞–∫ —É FishingNotes)
          if (note.firebaseId != null) {
            // ‚úÖ –ü–†–û–í–ï–†–Ø–ï–ú: –°—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –≤ Firebase
            final docRef = collection.doc(note.firebaseId);
            final docSnapshot = await docRef.get();

            if (docSnapshot.exists) {
              // –î–æ–∫—É–º–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –æ–±–Ω–æ–≤–ª—è–µ–º
              await docRef.update(data);
              log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –±—é–¥–∂–µ—Ç–Ω–∞—è –∑–∞–º–µ—Ç–∫–∞: ${note.firebaseId}');
            } else {
              // –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
              await docRef.set(data);
              log('‚úÖ –°–æ–∑–¥–∞–Ω–∞ –±—é–¥–∂–µ—Ç–Ω–∞—è –∑–∞–º–µ—Ç–∫–∞ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º ID: ${note.firebaseId}');
            }
            await _isarService.markBudgetNoteAsSynced(note.id, note.firebaseId!);
          } else {
            // firebaseId == null - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
            final docRef = await collection.add(data);
            await _isarService.markBudgetNoteAsSynced(note.id, docRef.id);
            log('‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –±—é–¥–∂–µ—Ç–Ω–∞—è –∑–∞–º–µ—Ç–∫–∞: ${docRef.id}');
          }
        } catch (e) {
          log('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –±—é–¥–∂–µ—Ç–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏ ${note.id}: $e');
        }
      }

      return true;
    } catch (e) {
      log('‚ùå –û—à–∏–±–∫–∞ syncBudgetNotesToFirebase: $e');
      return false;
    }
  }

  /// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è BudgetNotes –∏–∑ Firebase —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  Future<bool> syncBudgetNotesFromFirebase() async {
    try {
      if (!await _hasInternetConnection()) {
        log('–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ BudgetNotes');
        return false;
      }

      final collection = _getUserCollection('budget_notes');
      if (collection == null) return false;

      final userId = _auth.currentUser?.uid;
      if (userId == null) return false;

      final querySnapshot = await collection.orderBy('date', descending: true).get();
      log('üì• –ü–æ–ª—É—á–µ–Ω–æ ${querySnapshot.docs.length} –±—é–¥–∂–µ—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ Firebase');

      for (final doc in querySnapshot.docs) {
        try {
          final firebaseId = doc.id;
          final data = doc.data() as Map<String, dynamic>;

          final existingNote = await _isarService.getBudgetNoteByFirebaseId(firebaseId);

          if (existingNote == null) {
            final entity = BudgetNoteEntity.fromFirestoreMap(firebaseId, data);
            await _isarService.insertBudgetNote(entity);
            log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –±—é–¥–∂–µ—Ç–Ω–∞—è –∑–∞–º–µ—Ç–∫–∞ –∏–∑ Firebase: $firebaseId');
          } else {
            final firebaseUpdatedAt = _parseTimestamp(data['updatedAt']);
            if (firebaseUpdatedAt.isAfter(existingNote.updatedAt)) {
              final updatedEntity = BudgetNoteEntity.fromFirestoreMap(firebaseId, data);
              updatedEntity.id = existingNote.id;
              await _isarService.updateBudgetNote(updatedEntity);
              log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –±—é–¥–∂–µ—Ç–Ω–∞—è –∑–∞–º–µ—Ç–∫–∞ –∏–∑ Firebase: $firebaseId');
            }
          }
        } catch (e) {
          log('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±—é–¥–∂–µ—Ç–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ ${doc.id}: $e');
        }
      }

      return true;
    } catch (e) {
      log('‚ùå –û—à–∏–±–∫–∞ syncBudgetNotesFromFirebase: $e');
      return false;
    }
  }

  // ========================================
  // –ú–ï–¢–û–î–´ –î–õ–Ø MARKER MAPS
  // ========================================

  /// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è MarkerMaps —Å Firebase —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
  Future<bool> syncMarkerMapsToFirebase() async {
    try {
      if (!await _hasInternetConnection()) {
        log('–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –¥–ª—è MarkerMaps');
        return false;
      }

      final collection = _getUserCollection('marker_maps');
      if (collection == null) return false;

      final userId = _auth.currentUser?.uid;
      if (userId == null) return false;

      final unsyncedMaps = await _isarService.getUnsyncedMarkerMaps(userId);
      log('üîÑ –ù–∞–π–¥–µ–Ω–æ ${unsyncedMaps.length} –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç —Å –º–∞—Ä–∫–µ—Ä–∞–º–∏');

      for (final map in unsyncedMaps) {
        try {
          final data = map.toFirestoreMap();

          // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–∫–∞–∫ —É FishingNotes)
          if (map.firebaseId != null) {
            // ‚úÖ –ü–†–û–í–ï–†–Ø–ï–ú: –°—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –≤ Firebase
            final docRef = collection.doc(map.firebaseId);
            final docSnapshot = await docRef.get();

            if (docSnapshot.exists) {
              // –î–æ–∫—É–º–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –æ–±–Ω–æ–≤–ª—è–µ–º
              await docRef.update(data);
              log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∫–∞—Ä—Ç–∞: ${map.firebaseId}');
            } else {
              // –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
              await docRef.set(data);
              log('‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ä—Ç–∞ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º ID: ${map.firebaseId}');
            }
            await _isarService.markMarkerMapAsSynced(map.id, map.firebaseId!);
          } else {
            // firebaseId == null - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
            final docRef = await collection.add(data);
            await _isarService.markMarkerMapAsSynced(map.id, docRef.id);
            log('‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∫–∞—Ä—Ç–∞: ${docRef.id}');
          }
        } catch (e) {
          log('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã ${map.id}: $e');
        }
      }

      return true;
    } catch (e) {
      log('‚ùå –û—à–∏–±–∫–∞ syncMarkerMapsToFirebase: $e');
      return false;
    }
  }

  /// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è MarkerMaps –∏–∑ Firebase —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  Future<bool> syncMarkerMapsFromFirebase() async {
    try {
      if (!await _hasInternetConnection()) {
        log('–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ MarkerMaps');
        return false;
      }

      final collection = _getUserCollection('marker_maps');
      if (collection == null) return false;

      final userId = _auth.currentUser?.uid;
      if (userId == null) return false;

      final querySnapshot = await collection.orderBy('date', descending: true).get();
      log('üì• –ü–æ–ª—É—á–µ–Ω–æ ${querySnapshot.docs.length} –∫–∞—Ä—Ç –∏–∑ Firebase');

      for (final doc in querySnapshot.docs) {
        try {
          final firebaseId = doc.id;
          final data = doc.data() as Map<String, dynamic>;

          final existingMap = await _isarService.getMarkerMapByFirebaseId(firebaseId);

          if (existingMap == null) {
            final entity = MarkerMapEntity.fromFirestoreMap(firebaseId, data);
            await _isarService.insertMarkerMap(entity);
            log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –∏–∑ Firebase: $firebaseId');
          } else {
            final firebaseUpdatedAt = _parseTimestamp(data['updatedAt']);
            if (firebaseUpdatedAt.isAfter(existingMap.updatedAt)) {
              final updatedEntity = MarkerMapEntity.fromFirestoreMap(firebaseId, data);
              updatedEntity.id = existingMap.id;
              await _isarService.updateMarkerMap(updatedEntity);
              log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞—Ä—Ç–∞ –∏–∑ Firebase: $firebaseId');
            }
          }
        } catch (e) {
          log('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞—Ä—Ç—ã ${doc.id}: $e');
        }
      }

      return true;
    } catch (e) {
      log('‚ùå –û—à–∏–±–∫–∞ syncMarkerMapsFromFirebase: $e');
      return false;
    }
  }

  // ========================================
  // –ú–ï–¢–û–î–´ –î–õ–Ø POLICY ACCEPTANCE
  // ========================================

  /// ‚úÖ –°–£–©–ï–°–¢–í–£–Æ–©–ï–ï: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è PolicyAcceptance —Å Firebase
  Future<bool> syncPolicyAcceptanceToFirebase() async {
    try {
      if (!await _hasInternetConnection()) {
        log('–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –¥–ª—è PolicyAcceptance');
        return false;
      }

      final userId = _auth.currentUser?.uid;
      if (userId == null) {
        log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ PolicyAcceptance');
        return false;
      }

      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é —Å–æ–≥–ª–∞—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      final userConsentsCollection = _firestore
          .collection('users')
          .doc(userId)
          .collection('user_consents');

      final unsyncedPolicies = await _isarService.getUnsyncedPolicyAcceptances();
      log('üîÑ –ù–∞–π–¥–µ–Ω–æ ${unsyncedPolicies.length} –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–≥–ª–∞—Å–∏–π –ø–æ–ª–∏—Ç–∏–∫–∏');

      for (final policy in unsyncedPolicies) {
        try {
          final data = policy.toFirestoreMap();

          // PolicyAcceptance –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID 'consents'
          final docRef = userConsentsCollection.doc('consents');
          final docSnapshot = await docRef.get();

          if (docSnapshot.exists) {
            // –î–æ–∫—É–º–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –æ–±–Ω–æ–≤–ª—è–µ–º
            await docRef.update(data);
            log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–æ–≥–ª–∞—Å–∏—è –ø–æ–ª–∏—Ç–∏–∫–∏: consents');
          } else {
            // –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
            await docRef.set(data);
            log('‚úÖ –°–æ–∑–¥–∞–Ω—ã –Ω–æ–≤—ã–µ —Å–æ–≥–ª–∞—Å–∏—è –ø–æ–ª–∏—Ç–∏–∫–∏: consents');
          }

          // –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
          await _isarService.markPolicyAcceptanceAsSynced(policy.id, 'consents');
        } catch (e) {
          log('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–æ–≥–ª–∞—Å–∏–π –ø–æ–ª–∏—Ç–∏–∫–∏ ${policy.id}: $e');
        }
      }

      return true;
    } catch (e) {
      log('‚ùå –û—à–∏–±–∫–∞ syncPolicyAcceptanceToFirebase: $e');
      return false;
    }
  }

  /// ‚úÖ –°–£–©–ï–°–¢–í–£–Æ–©–ï–ï: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è PolicyAcceptance –∏–∑ Firebase
  Future<bool> syncPolicyAcceptanceFromFirebase() async {
    try {
      if (!await _hasInternetConnection()) {
        log('–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ PolicyAcceptance');
        return false;
      }

      final userId = _auth.currentUser?.uid;
      if (userId == null) {
        log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ PolicyAcceptance');
        return false;
      }

      final docRef = _firestore
          .collection('users')
          .doc(userId)
          .collection('user_consents')
          .doc('consents');

      final docSnapshot = await docRef.get();
      log('üì• –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–∏–π –ø–æ–ª–∏—Ç–∏–∫–∏ –∏–∑ Firebase –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $userId');

      if (docSnapshot.exists) {
        try {
          final data = docSnapshot.data() as Map<String, dynamic>;

          // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–æ–≥–ª–∞—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Isar
          final existingPolicies = await _isarService.getAllPolicyAcceptances();
          final existingPolicy = existingPolicies
              .where((p) => p.userId == userId)
              .firstOrNull;

          if (existingPolicy == null) {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ–≥–ª–∞—Å–∏—è
            final entity = PolicyAcceptanceEntity.fromFirestoreMap(userId, data);
            await _isarService.insertPolicyAcceptance(entity);
            log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ —Å–æ–≥–ª–∞—Å–∏—è –ø–æ–ª–∏—Ç–∏–∫–∏ –∏–∑ Firebase');
          } else {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            final firebaseUpdatedAt = _parseTimestamp(data['updatedAt']);
            if (firebaseUpdatedAt.isAfter(existingPolicy.updatedAt)) {
              final updatedEntity = PolicyAcceptanceEntity.fromFirestoreMap(userId, data);
              updatedEntity.id = existingPolicy.id;
              await _isarService.updatePolicyAcceptance(updatedEntity);
              log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã —Å–æ–≥–ª–∞—Å–∏—è –ø–æ–ª–∏—Ç–∏–∫–∏ –∏–∑ Firebase');
            } else {
              log('üìã –°–æ–≥–ª–∞—Å–∏—è –ø–æ–ª–∏—Ç–∏–∫–∏ —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã');
            }
          }
        } catch (e) {
          log('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å–æ–≥–ª–∞—Å–∏–π –ø–æ–ª–∏—Ç–∏–∫–∏: $e');
        }
      } else {
        log('üìã –°–æ–≥–ª–∞—Å–∏—è –ø–æ–ª–∏—Ç–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ Firebase');
      }

      return true;
    } catch (e) {
      log('‚ùå –û—à–∏–±–∫–∞ syncPolicyAcceptanceFromFirebase: $e');
      return false;
    }
  }

  // ========================================
  // üÜï –ú–ï–¢–û–î–´ –î–õ–Ø USER USAGE LIMITS
  // ========================================

  /// üÜï –ù–û–í–û–ï: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è UserUsageLimits —Å Firebase
  Future<bool> syncUserUsageLimitsToFirebase() async {
    try {
      if (!await _hasInternetConnection()) {
        log('–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –¥–ª—è UserUsageLimits');
        return false;
      }

      final userId = _auth.currentUser?.uid;
      if (userId == null) {
        log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ UserUsageLimits');
        return false;
      }

      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é –ª–∏–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      final userLimitsCollection = _firestore
          .collection('users')
          .doc(userId)
          .collection('user_usage_limits');

      final unsyncedLimits = await _isarService.getUnsyncedUserUsageLimits();
      log('üîÑ –ù–∞–π–¥–µ–Ω–æ ${unsyncedLimits.length} –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');

      for (final limits in unsyncedLimits) {
        try {
          final data = limits.toFirestoreMap();

          // UserUsageLimits –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID 'current'
          final docRef = userLimitsCollection.doc('current');
          final docSnapshot = await docRef.get();

          if (docSnapshot.exists) {
            // –î–æ–∫—É–º–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –æ–±–Ω–æ–≤–ª—è–µ–º
            await docRef.update(data);
            log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: current');
          } else {
            // –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
            await docRef.set(data);
            log('‚úÖ –°–æ–∑–¥–∞–Ω—ã –Ω–æ–≤—ã–µ –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: current');
          }

          // –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
          await _isarService.markUserUsageLimitsAsSynced(limits.id, 'current');

          if (limits.userId == userId) {
            log('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –ª–∏–º–∏—Ç—ã: notes=${limits.notesCount}, budget=${limits.budgetNotesCount}, maps=${limits.markerMapsCount}');
          }
        } catch (e) {
          log('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ª–∏–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${limits.id}: $e');
        }
      }

      return true;
    } catch (e) {
      log('‚ùå –û—à–∏–±–∫–∞ syncUserUsageLimitsToFirebase: $e');
      return false;
    }
  }

  /// üÜï –ù–û–í–û–ï: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è UserUsageLimits –∏–∑ Firebase
  Future<bool> syncUserUsageLimitsFromFirebase() async {
    try {
      if (!await _hasInternetConnection()) {
        log('–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ UserUsageLimits');
        return false;
      }

      final userId = _auth.currentUser?.uid;
      if (userId == null) {
        log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ UserUsageLimits');
        return false;
      }

      final docRef = _firestore
          .collection('users')
          .doc(userId)
          .collection('user_usage_limits')
          .doc('current');

      final docSnapshot = await docRef.get();
      log('üì• –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Firebase –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $userId');

      if (docSnapshot.exists) {
        try {
          final data = docSnapshot.data() as Map<String, dynamic>;

          // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Isar
          final existingLimits = await _isarService.getUserUsageLimitsByUserId(userId);

          if (existingLimits == null) {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –ª–∏–º–∏—Ç—ã
            final entity = UserUsageLimitsEntity.fromFirestoreMap('current', data, userId);
            await _isarService.insertUserUsageLimits(entity);
            log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Firebase');
            log('üìä –õ–∏–º–∏—Ç—ã: notes=${entity.notesCount}, budget=${entity.budgetNotesCount}, maps=${entity.markerMapsCount}');
          } else {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            final firebaseUpdatedAt = _parseTimestamp(data['updatedAt']);
            if (firebaseUpdatedAt.isAfter(existingLimits.updatedAt)) {
              final updatedEntity = UserUsageLimitsEntity.fromFirestoreMap('current', data, userId);
              updatedEntity.id = existingLimits.id;
              await _isarService.updateUserUsageLimits(updatedEntity);
              log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Firebase');
              log('üìä –ù–æ–≤—ã–µ –ª–∏–º–∏—Ç—ã: notes=${updatedEntity.notesCount}, budget=${updatedEntity.budgetNotesCount}, maps=${updatedEntity.markerMapsCount}');
            } else {
              log('üìã –õ–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã');
            }
          }
        } catch (e) {
          log('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ª–∏–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $e');
        }
      } else {
        log('üìã –õ–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ Firebase - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
      }

      return true;
    } catch (e) {
      log('‚ùå –û—à–∏–±–∫–∞ syncUserUsageLimitsFromFirebase: $e');
      return false;
    }
  }

  // ========================================
  // ‚úÖ –ù–û–í–´–ï –ú–ï–¢–û–î–´ –£–î–ê–õ–ï–ù–ò–Ø (–≠–¢–ê–ü 15)
  // ========================================

  /// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –ø–æ Firebase ID —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  Future<bool> deleteNoteByFirebaseId(String firebaseId) async {
    try {
      log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –ø–æ Firebase ID: $firebaseId');

      // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –∏–∑ Firebase
      if (await _hasInternetConnection()) {
        final collection = _getUserCollection('fishing_notes');
        if (collection != null) {
          try {
            await collection.doc(firebaseId).delete();
            log('‚úÖ –ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ Firebase: $firebaseId');
          } catch (e) {
            log('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ Firebase: $e');
            // –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º false, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ Isar
          }
        }
      }

      // –ó–∞—Ç–µ–º –Ω–∞—Ö–æ–¥–∏–º –∏ —É–¥–∞–ª—è–µ–º –∏–∑ Isar –ø–æ firebaseId
      final entity = await _isarService.getFishingNoteByFirebaseId(firebaseId);
      if (entity != null) {
        await _isarService.deleteFishingNote(entity.id);
        log('‚úÖ –ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ Isar: ${entity.id}');
      }

      return true;
    } catch (e) {
      log('‚ùå –û—à–∏–±–∫–∞ deleteNoteByFirebaseId: $e');
      return false;
    }
  }

  /// ‚úÖ –ù–û–í–û–ï: –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –±—é–¥–∂–µ—Ç–∞ –ø–æ Firebase ID —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  Future<bool> deleteBudgetNoteByFirebaseId(String firebaseId) async {
    try {
      log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –±—é–¥–∂–µ—Ç–∞ –ø–æ Firebase ID: $firebaseId');

      // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –∏–∑ Firebase
      if (await _hasInternetConnection()) {
        final collection = _getUserCollection('budget_notes');
        if (collection != null) {
          try {
            await collection.doc(firebaseId).delete();
            log('‚úÖ –ó–∞–º–µ—Ç–∫–∞ –±—é–¥–∂–µ—Ç–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ Firebase: $firebaseId');
          } catch (e) {
            log('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ –±—é–¥–∂–µ—Ç–∞ –∏–∑ Firebase: $e');
            // –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º false, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ Isar
          }
        }
      }

      // –ó–∞—Ç–µ–º –Ω–∞—Ö–æ–¥–∏–º –∏ —É–¥–∞–ª—è–µ–º –∏–∑ Isar –ø–æ firebaseId
      final entity = await _isarService.getBudgetNoteByFirebaseId(firebaseId);
      if (entity != null) {
        await _isarService.deleteBudgetNote(entity.id);
        log('‚úÖ –ó–∞–º–µ—Ç–∫–∞ –±—é–¥–∂–µ—Ç–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ Isar: ${entity.id}');
      } else {
        log('‚ö†Ô∏è –ó–∞–º–µ—Ç–∫–∞ –±—é–¥–∂–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ Isar: $firebaseId');
      }

      return true;
    } catch (e) {
      log('‚ùå –û—à–∏–±–∫–∞ deleteBudgetNoteByFirebaseId: $e');
      return false;
    }
  }

  /// ‚úÖ –ù–û–í–û–ï: –£–¥–∞–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã –ø–æ Firebase ID —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  Future<bool> deleteMarkerMapByFirebaseId(String firebaseId) async {
    try {
      log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã –ø–æ Firebase ID: $firebaseId');

      // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –∏–∑ Firebase
      if (await _hasInternetConnection()) {
        final collection = _getUserCollection('marker_maps');
        if (collection != null) {
          try {
            await collection.doc(firebaseId).delete();
            log('‚úÖ –ú–∞—Ä–∫–µ—Ä–Ω–∞—è –∫–∞—Ä—Ç–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ Firebase: $firebaseId');
          } catch (e) {
            log('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã –∏–∑ Firebase: $e');
            // –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º false, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ Isar
          }
        }
      }

      // –ó–∞—Ç–µ–º –Ω–∞—Ö–æ–¥–∏–º –∏ —É–¥–∞–ª—è–µ–º –∏–∑ Isar –ø–æ firebaseId
      final entity = await _isarService.getMarkerMapByFirebaseId(firebaseId);
      if (entity != null) {
        await _isarService.deleteMarkerMapByFirebaseId(firebaseId);
        log('‚úÖ –ú–∞—Ä–∫–µ—Ä–Ω–∞—è –∫–∞—Ä—Ç–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ Isar: ${entity.id}');
      } else {
        log('‚ö†Ô∏è –ú–∞—Ä–∫–µ—Ä–Ω–∞—è –∫–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ Isar: $firebaseId');
      }

      return true;
    } catch (e) {
      log('‚ùå –û—à–∏–±–∫–∞ deleteMarkerMapByFirebaseId: $e');
      return false;
    }
  }

  // ========================================
  // –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –û–ë–©–ò–ï –ú–ï–¢–û–î–´
  // ========================================

  /// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å Firebase
  Future<bool> deleteNoteAndSync(int localId) async {
    try {
      log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–º–µ—Ç–∫–∏ —Å localId: $localId');

      final note = await _isarService.getFishingNoteById(localId);
      if (note == null) {
        log('‚ö†Ô∏è –ó–∞–º–µ—Ç–∫–∞ —Å ID $localId –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ Isar');
        return false;
      }

      // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –∏–∑ Firebase, –ø–æ—Ç–æ–º –∏–∑ Isar
      if (note.firebaseId != null && await _hasInternetConnection()) {
        final collection = _getUserCollection('fishing_notes');
        if (collection != null) {
          try {
            await collection.doc(note.firebaseId).delete();
            log('‚úÖ –ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ Firebase: ${note.firebaseId}');
          } catch (e) {
            log('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ Firebase: $e');
            // –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º false, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ Isar
          }
        }
      }

      // –£–¥–∞–ª—è–µ–º –∏–∑ Isar –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ Firebase
      await _isarService.deleteFishingNote(localId);
      log('‚úÖ –ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ Isar: $localId');

      return true;
    } catch (e) {
      log('‚ùå –û—à–∏–±–∫–∞ deleteNoteAndSync: $e');
      return false;
    }
  }

  /// ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –≤ Firebase –≤–∫–ª—é—á–∞—è UserUsageLimits
  Future<bool> syncAll() async {
    try {
      log('üîÑ –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –≤ Firebase');

      final results = await Future.wait([
        syncFishingNotesToFirebase(),
        syncBudgetNotesToFirebase(),
        syncMarkerMapsToFirebase(),
        syncPolicyAcceptanceToFirebase(),
        syncUserUsageLimitsToFirebase(), // üÜï –î–û–ë–ê–í–õ–ï–ù–û
      ]);

      final success = results.every((result) => result);
      log('üì§ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –≤ Firebase –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—Ö: $success');
      log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: FishingNotes=${results[0]}, BudgetNotes=${results[1]}, MarkerMaps=${results[2]}, PolicyAcceptance=${results[3]}, UserUsageLimits=${results[4]}');

      return success;
    } catch (e) {
      log('‚ùå –û—à–∏–±–∫–∞ syncAll: $e');
      return false;
    }
  }

  /// ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –ü–æ–ª–Ω–∞—è –¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö –≤–∫–ª—é—á–∞—è UserUsageLimits
  Future<bool> fullSync() async {
    try {
      log('üîÑ –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø–æ–ª–Ω–∞—è –¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è');

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ Firebase
      log('üì§ –≠—Ç–∞–ø 1: –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ Firebase');
      final toFirebaseResults = await Future.wait([
        syncFishingNotesToFirebase(),
        syncBudgetNotesToFirebase(),
        syncMarkerMapsToFirebase(),
        syncPolicyAcceptanceToFirebase(),
        syncUserUsageLimitsToFirebase(), // üÜï –î–û–ë–ê–í–õ–ï–ù–û
      ]);

      // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ Firebase
      log('üì• –≠—Ç–∞–ø 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏–∑ Firebase');
      final fromFirebaseResults = await Future.wait([
        syncFishingNotesFromFirebase(),
        syncBudgetNotesFromFirebase(),
        syncMarkerMapsFromFirebase(),
        syncPolicyAcceptanceFromFirebase(),
        syncUserUsageLimitsFromFirebase(), // üÜï –î–û–ë–ê–í–õ–ï–ù–û
      ]);

      final success = [...toFirebaseResults, ...fromFirebaseResults].every((result) => result);
      log('‚úÖ –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—â–∏–π —É—Å–ø–µ—Ö: $success');
      log('üìä –ö Firebase: FishingNotes=${toFirebaseResults[0]}, BudgetNotes=${toFirebaseResults[1]}, MarkerMaps=${toFirebaseResults[2]}, PolicyAcceptance=${toFirebaseResults[3]}, UserUsageLimits=${toFirebaseResults[4]}');
      log('üìä –ò–∑ Firebase: FishingNotes=${fromFirebaseResults[0]}, BudgetNotes=${fromFirebaseResults[1]}, MarkerMaps=${fromFirebaseResults[2]}, PolicyAcceptance=${fromFirebaseResults[3]}, UserUsageLimits=${fromFirebaseResults[4]}');

      return success;
    } catch (e) {
      log('‚ùå –û—à–∏–±–∫–∞ fullSync: $e');
      return false;
    }
  }

  /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
  Future<bool> forceSyncAll() async {
    log('üîÑ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
    return await fullSync();
  }

  /// –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
  Future<bool> performFullSync() async {
    return await fullSync();
  }

  /// ‚úÖ –£–õ–£–ß–®–ï–ù–û: –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  void startPeriodicSync() {
    log('‚è∞ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)');
    Timer.periodic(const Duration(minutes: 5), (timer) async {
      if (await _hasInternetConnection()) {
        log('‚è∞ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
        final result = await fullSync();
        log('‚è∞ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: $result');
      } else {
        log('‚è∞ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞ - –Ω–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞');
      }
    });
  }

  /// ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö –≤–∫–ª—é—á–∞—è UserUsageLimits
  Future<Map<String, dynamic>> getSyncStatus() async {
    try {
      final userId = _auth.currentUser?.uid;
      if (userId == null) {
        log('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
        return {
          'fishingNotes': {'total': 0, 'unsynced': 0, 'synced': 0},
          'budgetNotes': {'total': 0, 'unsynced': 0, 'synced': 0},
          'markerMaps': {'total': 0, 'unsynced': 0, 'synced': 0},
          'policyAcceptance': {'total': 0, 'unsynced': 0, 'synced': 0},
          'userUsageLimits': {'total': 0, 'unsynced': 0, 'synced': 0}, // üÜï –î–û–ë–ê–í–õ–ï–ù–û
        };
      }

      log('üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $userId');

      final fishingNotesTotal = await _isarService.getNotesCount();
      final fishingNotesUnsynced = await _isarService.getUnsyncedNotesCount();

      final budgetNotesTotal = await _isarService.getBudgetNotesCount(userId);
      final budgetNotesUnsynced = await _isarService.getUnsyncedBudgetNotesCount(userId);

      final markerMapsTotal = await _isarService.getMarkerMapsCount(userId);
      final markerMapsUnsynced = await _isarService.getUnsyncedMarkerMapsCount(userId);

      final policyAcceptanceTotal = await _isarService.getPolicyAcceptancesCount();
      final policyAcceptanceUnsynced = await _isarService.getUnsyncedPolicyAcceptancesCount();

      // üÜï –î–û–ë–ê–í–õ–ï–ù–û: –°—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ UserUsageLimits
      final userUsageLimitsTotal = await _isarService.getUserUsageLimitsCount();
      final userUsageLimitsUnsynced = await _isarService.getUnsyncedUserUsageLimitsCount();

      final status = {
        'fishingNotes': {
          'total': fishingNotesTotal,
          'unsynced': fishingNotesUnsynced,
          'synced': fishingNotesTotal - fishingNotesUnsynced,
        },
        'budgetNotes': {
          'total': budgetNotesTotal,
          'unsynced': budgetNotesUnsynced,
          'synced': budgetNotesTotal - budgetNotesUnsynced,
        },
        'markerMaps': {
          'total': markerMapsTotal,
          'unsynced': markerMapsUnsynced,
          'synced': markerMapsTotal - markerMapsUnsynced,
        },
        'policyAcceptance': {
          'total': policyAcceptanceTotal,
          'unsynced': policyAcceptanceUnsynced,
          'synced': policyAcceptanceTotal - policyAcceptanceUnsynced,
        },
        'userUsageLimits': { // üÜï –î–û–ë–ê–í–õ–ï–ù–û
          'total': userUsageLimitsTotal,
          'unsynced': userUsageLimitsUnsynced,
          'synced': userUsageLimitsTotal - userUsageLimitsUnsynced,
        },
      };

      log('üìä –°—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: FishingNotes(${fishingNotesTotal}/${fishingNotesUnsynced}), BudgetNotes(${budgetNotesTotal}/${budgetNotesUnsynced}), MarkerMaps(${markerMapsTotal}/${markerMapsUnsynced}), PolicyAcceptance(${policyAcceptanceTotal}/${policyAcceptanceUnsynced}), UserUsageLimits(${userUsageLimitsTotal}/${userUsageLimitsUnsynced})');

      return status;
    } catch (e) {
      log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: $e');
      return {
        'fishingNotes': {'total': 0, 'unsynced': 0, 'synced': 0},
        'budgetNotes': {'total': 0, 'unsynced': 0, 'synced': 0},
        'markerMaps': {'total': 0, 'unsynced': 0, 'synced': 0},
        'policyAcceptance': {'total': 0, 'unsynced': 0, 'synced': 0},
        'userUsageLimits': {'total': 0, 'unsynced': 0, 'synced': 0}, // üÜï –î–û–ë–ê–í–õ–ï–ù–û
        'error': e.toString(),
      };
    }
  }
}