// –ü—É—Ç—å: lib/services/offline/sync_service.dart

import 'dart:async';
import 'dart:io';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import '../firebase/firebase_service.dart';
import '../subscription/subscription_service.dart';
import 'offline_storage_service.dart';
import '../../utils/network_utils.dart';
import '../local/local_file_service.dart';
import '../../constants/subscription_constants.dart';

/// –°–µ—Ä–≤–∏—Å –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –ª–æ–∫–∞–ª—å–Ω—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º –∏ –æ–±–ª–∞–∫–æ–º
class SyncService {
  static final SyncService _instance = SyncService._internal();

  factory SyncService() {
    return _instance;
  }

  SyncService._internal();

  final FirebaseService _firebaseService = FirebaseService();
  final OfflineStorageService _offlineStorage = OfflineStorageService();
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final LocalFileService _localFileService = LocalFileService();

  // üî• –ù–û–í–´–ï –ü–û–õ–Ø –¥–ª—è –æ—Ñ–ª–∞–π–Ω –ø—Ä–µ–º–∏—É–º
  final SubscriptionService _subscriptionService = SubscriptionService();

  bool _isSyncing = false;
  Timer? _syncTimer;

  // –•—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–ø—ã—Ç–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö
  final Map<String, DateTime> _lastSyncAttempt = {};
  // –°—á–µ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
  final Map<String, int> _errorCounters = {};
  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
  final int _maxRetries = 3;

  /// –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö
  void startPeriodicSync({Duration period = const Duration(minutes: 5)}) {
    // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –∑–∞–ø—É—â–µ–Ω
    _syncTimer?.cancel();

    // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä
    _syncTimer = Timer.periodic(period, (timer) async {
      final isConnected = await NetworkUtils.isNetworkAvailable();
      if (isConnected) {
        await syncAll();
      }
    });

    debugPrint(
      'üïí –ó–∞–ø—É—â–µ–Ω–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ ${period.inMinutes} –º–∏–Ω—É—Ç',
    );
  }

  /// –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
  void stopPeriodicSync() {
    _syncTimer?.cancel();
    _syncTimer = null;
    debugPrint('‚èπÔ∏è –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
  }

  /// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
  Future<void> syncAll() async {
    if (_isSyncing) {
      debugPrint('‚ö†Ô∏è –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
      return;
    }

    _isSyncing = true;

    try {
      debugPrint('üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö...');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
      final isConnected = await NetworkUtils.isNetworkAvailable();
      if (!isConnected) {
        debugPrint('‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞');
        _isSyncing = false;
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      final userId = _firebaseService.currentUserId;
      if (userId == null) {
        debugPrint('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞');
        _isSyncing = false;
        return;
      }

      // üî• –ù–û–í–û–ï: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ü–ï–†–í–´–ú–ò
      await syncUsageCounters();

      // üî• –ù–û–í–û–ï: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
      await syncSubscriptionStatus();

      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
      await Future.wait([_syncMarkerMaps(userId), _syncNotes(userId)]);

      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      await _offlineStorage.updateLastSyncTime();

      debugPrint('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: $e');
    } finally {
      _isSyncing = false;
    }
  }

  // üî• –ù–û–í–´–ï –ú–ï–¢–û–î–´ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—á–µ—Ç—á–∏–∫–æ–≤

  /// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ç–∏
  Future<void> syncUsageCounters() async {
    try {
      if (kDebugMode) {
        debugPrint('üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å—á–µ—Ç—á–∏–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è...');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ç–∏
      if (!await NetworkUtils.isNetworkAvailable()) {
        if (kDebugMode) {
          debugPrint('‚ùå –ù–µ—Ç —Å–µ—Ç–∏ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—á–µ—Ç—á–∏–∫–æ–≤');
        }
        return;
      }

      // 1. –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏
      final localCounters = await _offlineStorage.getAllLocalUsageCounters();

      if (localCounters.isEmpty) {
        if (kDebugMode) {
          debugPrint('‚úÖ –ù–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
        }
        return;
      }

      if (kDebugMode) {
        debugPrint('üìä –õ–æ–∫–∞–ª—å–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:');
        for (final entry in localCounters.entries) {
          debugPrint('   ${entry.key.name}: ${entry.value}');
        }
      }

      // 2. –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ª–∏–º–∏—Ç—ã —Å —Å–µ—Ä–≤–µ—Ä–∞
      await _subscriptionService.refreshUsageLimits();

      // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤
      bool hasOverages = false;
      for (final entry in localCounters.entries) {
        final contentType = entry.key;
        final localCount = entry.value;

        if (localCount > 0) {
          await _checkAndHandleLimitOverage(contentType, localCount);
          hasOverages = true;
        }
      }

      // 4. –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      await _offlineStorage.resetLocalUsageCounters();

      if (kDebugMode) {
        debugPrint('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      }

      // 5. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      await _showSyncNotification(hasOverages);

    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—á–µ—Ç—á–∏–∫–æ–≤: $e');
      }
      rethrow;
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤
  Future<void> _checkAndHandleLimitOverage(ContentType contentType, int localCount) async {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
      final serverUsage = await _subscriptionService.getCurrentUsage(contentType);
      final limit = _subscriptionService.getLimit(contentType);
      final totalUsage = serverUsage + localCount;

      if (kDebugMode) {
        debugPrint('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –¥–ª—è $contentType:');
        debugPrint('   –°–µ—Ä–≤–µ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $serverUsage');
        debugPrint('   –õ–æ–∫–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $localCount');
        debugPrint('   –û–±—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $totalUsage');
        debugPrint('   –õ–∏–º–∏—Ç: $limit');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ + grace period
      if (totalUsage > limit + SubscriptionConstants.offlineGraceLimit) {
        await handleOfflineLimitExceeded(contentType, totalUsage - limit);
      } else if (totalUsage > limit) {
        await _handleGracePeriodUsage(contentType, totalUsage - limit);
      }
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è $contentType: $e');
      }
    }
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ + grace period
  Future<void> handleOfflineLimitExceeded(ContentType contentType, int exceededBy) async {
    try {
      if (kDebugMode) {
        debugPrint('üö® –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –¥–ª—è $contentType –Ω–∞ $exceededBy —ç–ª–µ–º–µ–Ω—Ç–æ–≤');
      }

      // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ
      await _logLimitExceeded(contentType, exceededBy);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await _showLimitExceededNotification(contentType, exceededBy);

    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞: $e');
      }
    }
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö grace period
  Future<void> _handleGracePeriodUsage(ContentType contentType, int overageCount) async {
    try {
      if (kDebugMode) {
        debugPrint('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ grace period –¥–ª—è $contentType: +$overageCount —ç–ª–µ–º–µ–Ω—Ç–æ–≤');
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏ –∫ –ª–∏–º–∏—Ç—É
      await _showGracePeriodWarning(contentType, overageCount);

    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ grace period: $e');
      }
    }
  }

  /// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏
  Future<void> syncSubscriptionStatus() async {
    try {
      if (kDebugMode) {
        debugPrint('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏...');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ç–∏
      if (!await NetworkUtils.isNetworkAvailable()) {
        if (kDebugMode) {
          debugPrint('‚ùå –ù–µ—Ç —Å–µ—Ç–∏ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏');
        }
        return;
      }

      // –ö—ç—à–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
      await _subscriptionService.cacheSubscriptionDataOnline();

      if (kDebugMode) {
        debugPrint('‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω');
      }
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: $e');
      }
    }
  }

  /// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞
  Future<void> _logLimitExceeded(ContentType contentType, int exceededBy) async {
    try {
      final logData = {
        'timestamp': DateTime.now().toIso8601String(),
        'contentType': contentType.name,
        'exceededBy': exceededBy,
        'userId': _firebaseService.currentUserId,
        'type': 'limit_exceeded_offline',
      };

      // –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ
      if (kDebugMode) {
        debugPrint('üìä –õ–æ–≥ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞: $logData');
      }
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞: $e');
      }
    }
  }

  /// –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
  Future<void> _showLimitExceededNotification(ContentType contentType, int exceededBy) async {
    try {
      final contentName = SubscriptionConstants.getContentTypeName(contentType);

      if (kDebugMode) {
        debugPrint('üö® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç $contentName –Ω–∞ $exceededBy —ç–ª–µ–º–µ–Ω—Ç–æ–≤');
      }

      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      // –ù–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ NotificationService –∏–ª–∏ SnackBar

    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞: $e');
      }
    }
  }

  /// –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ grace period
  Future<void> _showGracePeriodWarning(ContentType contentType, int overageCount) async {
    try {
      final contentName = SubscriptionConstants.getContentTypeName(contentType);
      final remaining = SubscriptionConstants.offlineGraceLimit - overageCount;

      if (kDebugMode) {
        debugPrint('‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ $overageCount –∏–∑ ${SubscriptionConstants.offlineGraceLimit} –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö $contentName. –û—Å—Ç–∞–ª–æ—Å—å: $remaining');
      }

      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∫–∞–∑ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è grace period: $e');
      }
    }
  }

  /// –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  Future<void> _showSyncNotification(bool hasOverages) async {
    try {
      if (hasOverages) {
        if (kDebugMode) {
          debugPrint('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è–º–∏ –ª–∏–º–∏—Ç–æ–≤');
        }
      } else {
        if (kDebugMode) {
          debugPrint('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
        }
      }

      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: $e');
      }
    }
  }

  /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–µ URI —Ñ–∞–π–ª–æ–≤ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–º–µ–Ω—è–µ—Ç –∏—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ URL
  Future<void> _processLocalFileUrls(
      Map<String, dynamic> data,
      String userId,
      ) async {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–ø–∏—Å–∫–∞ photoUrls
    if (data['photoUrls'] is List) {
      final photoUrls = List<String>.from(data['photoUrls']);
      final List<String> processedUrls = [];
      bool hasChanges = false;

      for (var url in photoUrls) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL –ª–æ–∫–∞–ª—å–Ω—ã–º —Ñ–∞–π–ª–æ–º –∏–ª–∏ placeholder
        if (_localFileService.isLocalFileUri(url)) {
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
          try {
            final file = _localFileService.localUriToFile(url);
            if (file != null && await file.exists()) {
              // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä
              final bytes = await file.readAsBytes();
              final fileName =
                  '${DateTime.now().millisecondsSinceEpoch}_${url.hashCode}.jpg';
              final path = 'users/$userId/photos/$fileName';
              final serverUrl = await _firebaseService.uploadImage(path, bytes);

              processedUrls.add(serverUrl);
              hasChanges = true;

              // –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ–ø–∏—é –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
              await _localFileService.deleteLocalFile(url);
              debugPrint(
                'üîÑ –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª $url –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–Ω—ã–π $serverUrl',
              );
            } else {
              // –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π URL (–±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∫–∞–∫ –æ—à–∏–±–∫–∞)
              processedUrls.add(url);
              debugPrint('‚ö†Ô∏è –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª $url –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
            }
          } catch (e) {
            debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ $url: $e');
            // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π URL
            processedUrls.add(url);
          }
        } else if (url == 'offline_photo') {
          // –£–¥–∞–ª—è–µ–º placeholder
          hasChanges = true;
          debugPrint('üßπ –£–¥–∞–ª–µ–Ω placeholder offline_photo');
        } else {
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π URL
          processedUrls.add(url);
        }
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ URL —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
      if (hasChanges) {
        // –§–∏–ª—å—Ç—Ä—É–µ–º, —É–¥–∞–ª—è—è placeholder 'offline_photo'
        data['photoUrls'] =
            processedUrls.where((url) => url != 'offline_photo').toList();
      }
    }
  }

  /// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏
  Future<void> _syncNotes(String userId) async {
    const dataType = 'notes';

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –ø–æ–ø—ã—Ç–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –æ—à–∏–±–∫–∞–º–∏
    if (_shouldSkipSync(dataType)) {
      debugPrint('‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∑–∞–º–µ—Ç–æ–∫ –∏–∑-–∑–∞ —á–∞—Å—Ç—ã—Ö –æ—à–∏–±–æ–∫');
      return;
    }

    try {
      debugPrint('üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∑–∞–º–µ—Ç–æ–∫...');
      _lastSyncAttempt[dataType] = DateTime.now();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–º–µ—Ç–æ–∫
      final shouldDeleteAll = await _offlineStorage.shouldDeleteAll(false);
      if (shouldDeleteAll) {
        debugPrint('‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ñ–ª–∞–≥ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–º–µ—Ç–æ–∫');

        try {
          // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É–¥–∞–ª—è–µ–º –∏—Ö
          final snapshot =
          await _firestore
              .collection('fishing_notes')
              .where('userId', isEqualTo: userId)
              .get();

          // –°–æ–∑–¥–∞–µ–º –ø–∞–∫–µ—Ç–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
          final batch = _firestore.batch();
          for (var doc in snapshot.docs) {
            batch.delete(doc.reference);
          }

          await batch.commit();
          await _offlineStorage.clearDeleteAllFlag(false);
          debugPrint(
            '‚úÖ –í—Å–µ –∑–∞–º–µ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–¥–∞–ª–µ–Ω—ã (${snapshot.docs.length} —à—Ç.)',
          );
        } catch (e) {
          debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Å–µ—Ö –∑–∞–º–µ—Ç–æ–∫: $e');
          _incrementErrorCounter(dataType);
        }

        // –ï—Å–ª–∏ –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏ —É–¥–∞–ª–µ–Ω—ã, –Ω–µ—Ç —Å–º—ã—Å–ª–∞ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
        return;
      }

      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —É–¥–∞–ª–µ–Ω–∏—è
      final notesToDelete = await _offlineStorage.getIdsToDelete(false);
      if (notesToDelete.isNotEmpty) {
        debugPrint(
          'üóëÔ∏è –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏–π –∑–∞–º–µ—Ç–æ–∫ (${notesToDelete.length} —à—Ç.)',
        );

        for (var noteId in notesToDelete) {
          try {
            await _firestore.collection('fishing_notes').doc(noteId).delete();
            debugPrint('‚úÖ –ó–∞–º–µ—Ç–∫–∞ $noteId —É–¥–∞–ª–µ–Ω–∞ –∏–∑ Firestore');
          } catch (e) {
            debugPrint(
              '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏ $noteId –∏–∑ Firestore: $e',
            );
          }
        }

        // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        await _offlineStorage.clearIdsToDelete(false);
      }

      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫
      final noteUpdates = await _offlineStorage.getAllNoteUpdates();
      if (noteUpdates.isNotEmpty) {
        debugPrint(
          'üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∑–∞–º–µ—Ç–æ–∫ (${noteUpdates.length} —à—Ç.)',
        );

        for (var entry in noteUpdates.entries) {
          try {
            final noteId = entry.key;
            final noteData = entry.value as Map<String, dynamic>;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º userId
            if (noteData['userId'] == null || noteData['userId'].isEmpty) {
              noteData['userId'] = userId;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ ID –≤ –¥–∞–Ω–Ω—ã—Ö
            if (!noteData.containsKey('id')) {
              noteData['id'] = noteId;
            }

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ URI —Ñ–∞–π–ª–æ–≤ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
            await _processLocalFileUrls(noteData, userId);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ Firestore
            await _firestore
                .collection('fishing_notes')
                .doc(noteId)
                .set(noteData, SetOptions(merge: true));

            debugPrint('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ $noteId —É—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
          } catch (e) {
            debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏: $e');
            _incrementErrorCounter(dataType);
          }
        }

        // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        await _offlineStorage.clearUpdates(false);
      }

      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –∑–∞–º–µ—Ç–∫–∏
      final offlineNotes = await _offlineStorage.getAllOfflineNotes();
      if (offlineNotes.isNotEmpty) {
        debugPrint(
          'üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –∑–∞–º–µ—Ç–æ–∫ (${offlineNotes.length} —à—Ç.)',
        );

        for (var noteData in offlineNotes) {
          try {
            // –£–¥–æ—Å—Ç–æ–≤–µ—Ä—è–µ–º—Å—è, —á—Ç–æ —É –∑–∞–º–µ—Ç–∫–∏ –µ—Å—Ç—å ID –∏ UserID
            final noteId = noteData['id']?.toString();
            if (noteId == null || noteId.isEmpty) {
              debugPrint('‚ö†Ô∏è –ó–∞–º–µ—Ç–∫–∞ –±–µ–∑ ID, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
              continue;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º userId
            if (noteData['userId'] == null || noteData['userId'].isEmpty) {
              noteData['userId'] = userId;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            final photoPaths = await _offlineStorage.getOfflinePhotoPaths(
              noteId,
            );

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ URI –≤ –¥–∞–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–∫–∏
            await _processLocalFileUrls(noteData, userId);

            // –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø—É—Ç–µ–π
            if (photoPaths.isNotEmpty) {
              debugPrint(
                'üñºÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –∑–∞–º–µ—Ç–∫–∏ $noteId (${photoPaths.length} —à—Ç.)',
              );

              // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ URL —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
              List<String> photoUrls = [];
              if (noteData['photoUrls'] is List) {
                photoUrls = List<String>.from(noteData['photoUrls']);
              }

              for (var path in photoPaths) {
                try {
                  final file = File(path);
                  if (await file.exists()) {
                    final bytes = await file.readAsBytes();
                    final fileName =
                        '${DateTime.now().millisecondsSinceEpoch}_${photoPaths.indexOf(path)}.jpg';
                    final storagePath = 'users/$userId/photos/$fileName';

                    final url = await _firebaseService.uploadImage(
                      storagePath,
                      bytes,
                    );
                    // –î–æ–±–∞–≤–ª—è–µ–º URL —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ
                    if (!photoUrls.contains(url)) {
                      photoUrls.add(url);
                    }
                    debugPrint('‚úÖ –§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: $url');
                  } else {
                    debugPrint('‚ö†Ô∏è –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: $path');
                  }
                } catch (e) {
                  debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ –∏–∑ $path: $e');
                }
              }

              // –û–±–Ω–æ–≤–ª—è–µ–º URL —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ –¥–∞–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–∫–∏
              noteData['photoUrls'] = photoUrls;
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É –≤ Firestore
            await _firestore
                .collection('fishing_notes')
                .doc(noteId)
                .set(noteData);

            // –£–¥–∞–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            await _offlineStorage.removeOfflineNote(noteId);

            debugPrint('‚úÖ –ó–∞–º–µ—Ç–∫–∞ $noteId —É—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
          } catch (e) {
            debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–º–µ—Ç–∫–∏: $e');
            _incrementErrorCounter(dataType);
          }
        }
      }

      debugPrint('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–º–µ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫, –µ—Å–ª–∏ –≤—Å–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
      _errorCounters[dataType] = 0;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–º–µ—Ç–æ–∫: $e');
      _incrementErrorCounter(dataType);
      rethrow;
    }
  }

  /// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ä–∫–µ—Ä–Ω—ã–µ –∫–∞—Ä—Ç—ã
  Future<void> _syncMarkerMaps(String userId) async {
    const dataType = 'marker_maps';

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –ø–æ–ø—ã—Ç–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –æ—à–∏–±–∫–∞–º–∏
    if (_shouldSkipSync(dataType)) {
      debugPrint(
        '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç –∏–∑-–∑–∞ —á–∞—Å—Ç—ã—Ö –æ—à–∏–±–æ–∫',
      );
      return;
    }

    try {
      debugPrint('üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç...');
      _lastSyncAttempt[dataType] = DateTime.now();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç
      final shouldDeleteAll = await _offlineStorage.shouldDeleteAll(true);
      if (shouldDeleteAll) {
        debugPrint('‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ñ–ª–∞–≥ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç');

        try {
          // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–∞—Ä–∫–µ—Ä–Ω—ã–µ –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É–¥–∞–ª—è–µ–º –∏—Ö
          final snapshot =
          await _firestore
              .collection('marker_maps')
              .where('userId', isEqualTo: userId)
              .get();

          // –°–æ–∑–¥–∞–µ–º –ø–∞–∫–µ—Ç–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
          final batch = _firestore.batch();
          for (var doc in snapshot.docs) {
            batch.delete(doc.reference);
          }

          await batch.commit();
          await _offlineStorage.clearDeleteAllFlag(true);
          debugPrint(
            '‚úÖ –í—Å–µ –º–∞—Ä–∫–µ—Ä–Ω—ã–µ –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–¥–∞–ª–µ–Ω—ã (${snapshot.docs.length} —à—Ç.)',
          );
        } catch (e) {
          debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Å–µ—Ö –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç: $e');
          _incrementErrorCounter(dataType);
        }

        // –ï—Å–ª–∏ –≤—Å–µ –º–∞—Ä–∫–µ—Ä–Ω—ã–µ –∫–∞—Ä—Ç—ã —É–¥–∞–ª–µ–Ω—ã, –Ω–µ—Ç —Å–º—ã—Å–ª–∞ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
        return;
      }

      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —É–¥–∞–ª–µ–Ω–∏—è
      final mapsToDelete = await _offlineStorage.getIdsToDelete(true);
      if (mapsToDelete.isNotEmpty) {
        debugPrint(
          'üóëÔ∏è –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏–π –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç (${mapsToDelete.length} —à—Ç.)',
        );

        for (var mapId in mapsToDelete) {
          try {
            await _firestore.collection('marker_maps').doc(mapId).delete();
            debugPrint('‚úÖ –ú–∞—Ä–∫–µ—Ä–Ω–∞—è –∫–∞—Ä—Ç–∞ $mapId —É–¥–∞–ª–µ–Ω–∞ –∏–∑ Firestore');
          } catch (e) {
            debugPrint(
              '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–∞—Ä–∫–µ—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã $mapId –∏–∑ Firestore: $e',
            );
          }
        }

        // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        await _offlineStorage.clearIdsToDelete(true);
      }

      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç
      final mapUpdates = await _offlineStorage.getAllMarkerMapUpdates();
      if (mapUpdates.isNotEmpty) {
        debugPrint(
          'üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç (${mapUpdates.length} —à—Ç.)',
        );

        for (var entry in mapUpdates.entries) {
          try {
            final mapId = entry.key;
            final mapData = entry.value as Map<String, dynamic>;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º userId
            if (mapData['userId'] == null || mapData['userId'].isEmpty) {
              mapData['userId'] = userId;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ ID –≤ –¥–∞–Ω–Ω—ã—Ö
            if (!mapData.containsKey('id')) {
              mapData['id'] = mapId;
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ Firestore
            await _firestore
                .collection('marker_maps')
                .doc(mapId)
                .set(mapData, SetOptions(merge: true));

            debugPrint(
              '‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã $mapId —É—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ',
            );
          } catch (e) {
            debugPrint(
              '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã: $e',
            );
            _incrementErrorCounter(dataType);
          }
        }

        // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        await _offlineStorage.clearUpdates(true);
      }

      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –º–∞—Ä–∫–µ—Ä–Ω—ã–µ –∫–∞—Ä—Ç—ã
      final offlineMaps = await _offlineStorage.getAllOfflineMarkerMaps();
      if (offlineMaps.isNotEmpty) {
        debugPrint(
          'üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç (${offlineMaps.length} —à—Ç.)',
        );

        for (var mapData in offlineMaps) {
          try {
            // –£–¥–æ—Å—Ç–æ–≤–µ—Ä—è–µ–º—Å—è, —á—Ç–æ —É –∫–∞—Ä—Ç—ã –µ—Å—Ç—å ID –∏ UserID
            final mapId = mapData['id']?.toString();
            if (mapId == null || mapId.isEmpty) {
              debugPrint('‚ö†Ô∏è –ú–∞—Ä–∫–µ—Ä–Ω–∞—è –∫–∞—Ä—Ç–∞ –±–µ–∑ ID, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
              continue;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º userId
            if (mapData['userId'] == null || mapData['userId'].isEmpty) {
              mapData['userId'] = userId;
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Ä–∫–µ—Ä–Ω—É—é –∫–∞—Ä—Ç—É –≤ Firestore
            await _firestore.collection('marker_maps').doc(mapId).set(mapData);

            // –£–¥–∞–ª—è–µ–º –º–∞—Ä–∫–µ—Ä–Ω—É—é –∫–∞—Ä—Ç—É –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            await _offlineStorage.removeOfflineMarkerMap(mapId);

            debugPrint('‚úÖ –ú–∞—Ä–∫–µ—Ä–Ω–∞—è –∫–∞—Ä—Ç–∞ $mapId —É—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
          } catch (e) {
            debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –º–∞—Ä–∫–µ—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã: $e');
            _incrementErrorCounter(dataType);
          }
        }
      }

      debugPrint('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∞');

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫, –µ—Å–ª–∏ –≤—Å–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
      _errorCounters[dataType] = 0;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç: $e');
      _incrementErrorCounter(dataType);
      rethrow;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å–ª–µ–¥—É–µ—Ç –ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö
  bool _shouldSkipSync(String dataType) {
    final lastAttempt = _lastSyncAttempt[dataType];
    final errorCount = _errorCounters[dataType] ?? 0;

    // –ï—Å–ª–∏ –æ—à–∏–±–æ–∫ –Ω–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
    if (errorCount < _maxRetries) return false;

    // –ï—Å–ª–∏ –±—ã–ª–∞ –ø–æ–ø—ã—Ç–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –º–µ–Ω–µ–µ 5 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥ –∏ –±—ã–ª–∏ —á–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏,
    // –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
    if (lastAttempt != null &&
        DateTime.now().difference(lastAttempt).inMinutes < 5 &&
        errorCount >= _maxRetries) {
      return true;
    }

    // –í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
    return false;
  }

  // –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö
  void _incrementErrorCounter(String dataType) {
    _errorCounters[dataType] = (_errorCounters[dataType] ?? 0) + 1;
    debugPrint('‚ö†Ô∏è –°—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è $dataType: ${_errorCounters[dataType]}');
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  Future<Map<String, dynamic>> getSyncStatus() async {
    try {
      final lastSyncTime = await _offlineStorage.getLastSyncTime();

      final offlineNotes = await _offlineStorage.getAllOfflineNotes();
      final offlineNoteUpdates = await _offlineStorage.getAllNoteUpdates();
      final offlineMaps = await _offlineStorage.getAllOfflineMarkerMaps();
      final offlineMapUpdates = await _offlineStorage.getAllMarkerMapUpdates();

      final notesToDelete = await _offlineStorage.getIdsToDelete(false);
      final mapsToDelete = await _offlineStorage.getIdsToDelete(true);

      final pendingChanges =
          offlineNotes.length +
              offlineNoteUpdates.length +
              offlineMaps.length +
              offlineMapUpdates.length +
              notesToDelete.length +
              mapsToDelete.length;

      final isConnected = await NetworkUtils.isNetworkAvailable();

      // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
      final localFilesCount = await _getLocalFilesCount();
      final localFilesCacheSize = await _localFileService.getCacheSize();

      // üî• –ù–û–í–û–ï: –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Å—á–µ—Ç—á–∏–∫–∞—Ö
      final localCounters = await _offlineStorage.getAllLocalUsageCounters();
      final subscriptionCacheInfo = await _subscriptionService.getSubscriptionCacheInfo();

      return {
        'lastSyncTime': lastSyncTime,
        'isSyncing': _isSyncing,
        'pendingChanges': pendingChanges,
        'offlineNotes': offlineNotes.length,
        'offlineNoteUpdates': offlineNoteUpdates.length,
        'offlineMaps': offlineMaps.length,
        'offlineMapUpdates': offlineMapUpdates.length,
        'notesToDelete': notesToDelete.length,
        'mapsToDelete': mapsToDelete.length,
        'isOnline': isConnected,
        'errorCounters': _errorCounters,
        'localFilesCount': localFilesCount,
        'localFilesCacheSize': _formatFileSize(localFilesCacheSize),
        // üî• –ù–û–í–´–ï –ü–û–õ–Ø
        'localCounters': localCounters.map((k, v) => MapEntry(k.name, v)),
        'subscriptionCache': subscriptionCacheInfo,
      };
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: $e');
      return {'error': e.toString()};
    }
  }

  /// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
  String _formatFileSize(int bytes) {
    if (bytes < 1024) return '$bytes –ë';
    if (bytes < 1024 * 1024) return '${(bytes / 1024).toStringAsFixed(1)} –ö–ë';
    if (bytes < 1024 * 1024 * 1024)
      return '${(bytes / (1024 * 1024)).toStringAsFixed(1)} –ú–ë';
    return '${(bytes / (1024 * 1024 * 1024)).toStringAsFixed(1)} –ì–ë';
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
  Future<int> _getLocalFilesCount() async {
    try {
      final cachePath = await _localFileService.getCacheDirectoryPath();
      final directory = Directory(cachePath);

      if (!await directory.exists()) return 0;

      final files =
      await directory.list().where((entity) => entity is File).toList();
      return files.length;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: $e');
      return 0;
    }
  }

  /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
  Future<bool> forceSyncAll() async {
    try {
      if (_isSyncing) {
        debugPrint('‚ö†Ô∏è –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
        return false;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
      final isConnected = await NetworkUtils.isNetworkAvailable();
      if (!isConnected) {
        debugPrint('‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞');
        return false;
      }

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
      _errorCounters.clear();

      await syncAll();
      return true;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: $e');
      return false;
    }
  }

  /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ —Å—á–µ—Ç—á–∏–∫–æ–≤
  Future<bool> forceSyncCounters() async {
    try {
      if (_isSyncing) {
        debugPrint('‚ö†Ô∏è –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
        return false;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
      final isConnected = await NetworkUtils.isNetworkAvailable();
      if (!isConnected) {
        debugPrint('‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞');
        return false;
      }

      await syncUsageCounters();
      return true;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—á–µ—Ç—á–∏–∫–æ–≤: $e');
      return false;
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ñ–ª–∞–π–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
  Future<Map<String, dynamic>> getOfflineUsageStatistics() async {
    try {
      return await _subscriptionService.getOfflineUsageStatistics();
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ñ–ª–∞–π–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: $e');
      return {};
    }
  }
}