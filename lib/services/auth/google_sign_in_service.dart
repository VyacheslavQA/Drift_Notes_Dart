// –ü—É—Ç—å: lib/services/auth/google_sign_in_service.dart

import 'package:firebase_auth/firebase_auth.dart';
import 'package:google_sign_in/google_sign_in.dart';
import 'package:flutter/material.dart';
import 'package:flutter/foundation.dart';
import '../firebase/firebase_service.dart';
import '../../repositories/user_repository.dart';
import '../../localization/app_localizations.dart';
import '../user_consent_service.dart'; // –ù–û–í–´–ô –ò–ú–ü–û–†–¢!

/// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Sign-In
class GoogleSignInService {
  static final GoogleSignInService _instance = GoogleSignInService._internal();
  factory GoogleSignInService() => _instance;
  GoogleSignInService._internal();

  final GoogleSignIn _googleSignIn = GoogleSignIn(scopes: ['email', 'profile']);

  final FirebaseAuth _auth = FirebaseAuth.instance;
  final FirebaseService _firebaseService = FirebaseService();
  final UserConsentService _consentService = UserConsentService(); // –ù–û–í–û–ï!

  /// –í—Ö–æ–¥ —á–µ—Ä–µ–∑ Google –∞–∫–∫–∞—É–Ω—Ç
  Future<UserCredential?> signInWithGoogle([BuildContext? context]) async {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
      if (kIsWeb) {
        return await _signInWithGoogleWeb(context);
      } else {
        return await _signInWithGoogleMobile(context);
      }
    } catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Google: $e');
      _handleGoogleSignInError(e, context);
      return null;
    }
  }

  /// –í—Ö–æ–¥ —á–µ—Ä–µ–∑ Google –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
  Future<UserCredential?> _signInWithGoogleMobile([
    BuildContext? context,
  ]) async {
    try {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ Google
      final GoogleSignInAccount? googleUser = await _googleSignIn.signIn();

      if (googleUser == null) {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –≤—Ö–æ–¥
        debugPrint('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ Google');
        return null;
      }

      // –ü–æ–ª—É—á–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      final GoogleSignInAuthentication googleAuth =
          await googleUser.authentication;

      // –°–æ–∑–¥–∞–µ–º credential –¥–ª—è Firebase
      final credential = GoogleAuthProvider.credential(
        accessToken: googleAuth.accessToken,
        idToken: googleAuth.idToken,
      );

      // –í—Ö–æ–¥–∏–º –≤ Firebase —Å Google credential
      final UserCredential userCredential = await _auth.signInWithCredential(
        credential,
      );

      // –ö—ç—à–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Firebase —Å–µ—Ä–≤–∏—Å
      await _firebaseService.cacheUserDataFromCredential(userCredential);

      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Firestore
      await _createOrUpdateUserDocument(userCredential);

      debugPrint('–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ Google: ${userCredential.user?.email}');
      return userCredential;
    } catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Google (–º–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è): $e');
      rethrow;
    }
  }

  /// –í—Ö–æ–¥ —á–µ—Ä–µ–∑ Google –¥–ª—è –≤–µ–±-–ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
  Future<UserCredential?> _signInWithGoogleWeb([BuildContext? context]) async {
    try {
      // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è Google
      GoogleAuthProvider googleProvider = GoogleAuthProvider();

      googleProvider.addScope('email');
      googleProvider.addScope('profile');

      // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ popup
      final UserCredential userCredential = await _auth.signInWithPopup(
        googleProvider,
      );

      // –ö—ç—à–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Firebase —Å–µ—Ä–≤–∏—Å
      await _firebaseService.cacheUserDataFromCredential(userCredential);

      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Firestore
      await _createOrUpdateUserDocument(userCredential);

      debugPrint(
        '–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ Google (–≤–µ–±): ${userCredential.user?.email}',
      );
      return userCredential;
    } catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Google (–≤–µ–±-–≤–µ—Ä—Å–∏—è): $e');
      rethrow;
    }
  }

  /// –°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Firestore
  Future<void> _createOrUpdateUserDocument(
    UserCredential userCredential,
  ) async {
    try {
      final user = userCredential.user;
      if (user == null) return;

      final userRepository = UserRepository();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      final existingUser = await userRepository.getUserData(user.uid);

      if (existingUser == null) {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        final userData = {
          'uid': user.uid,
          'email': user.email ?? '',
          'displayName': user.displayName ?? '',
          'photoUrl': user.photoURL ?? '',
          'authProvider': 'google',
          'createdAt': DateTime.now().toIso8601String(),
          // –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
          'country': '',
          'city': '',
          'experience': null,
          'fishingTypes': [],
        };

        await userRepository.updateUserData(userData);
        debugPrint(
          '‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Firestore –¥–ª—è Google –∞–∫–∫–∞—É–Ω—Ç–∞: ${user.email}',
        );
      } else {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç —Ç–æ–ª—å–∫–æ —Å Google –¥–∞–Ω–Ω—ã–º–∏
        final userData = {
          'email':
              user.email ?? existingUser.email, // –û–±–Ω–æ–≤–ª—è–µ–º email –∏–∑ Google
          'displayName': user.displayName ?? existingUser.displayName,
          'photoUrl': user.photoURL ?? existingUser.photoUrl,
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
          'country': existingUser.country ?? '',
          'city': existingUser.city ?? '',
          'experience': existingUser.experience,
          'fishingTypes': existingUser.fishingTypes,
        };

        await userRepository.updateUserData(userData);
        debugPrint(
          '‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Firestore –¥–ª—è Google –∞–∫–∫–∞—É–Ω—Ç–∞: ${user.email}',
        );
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $e');
      // –ù–µ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ, —á—Ç–æ–±—ã –Ω–µ –Ω–∞—Ä—É—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –≤—Ö–æ–¥–∞
    }
  }

  /// –í—ã—Ö–æ–¥ –∏–∑ Google –∞–∫–∫–∞—É–Ω—Ç–∞ (–ò–°–ü–†–ê–í–õ–ï–ù–û!)
  Future<void> signOutGoogle() async {
    try {
      // –í–ê–ñ–ù–û: –û—á–∏—â–∞–µ–º —Å–æ–≥–ª–∞—Å–∏—è –ü–ï–†–ï–î –≤—ã—Ö–æ–¥–æ–º
      debugPrint('üßπ –û—á–∏—â–∞–µ–º —Å–æ–≥–ª–∞—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º');
      await _consentService.clearAllConsents();

      // –í—ã—Ö–æ–¥–∏–º –∏–∑ Google
      await _googleSignIn.signOut();

      // –í—ã—Ö–æ–¥–∏–º –∏–∑ Firebase
      await _firebaseService.signOut();

      debugPrint('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—ã—Ö–æ–¥ –∏–∑ Google –∞–∫–∫–∞—É–Ω—Ç–∞ (—Å –æ—á–∏—Å—Ç–∫–æ–π —Å–æ–≥–ª–∞—Å–∏–π)');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ Google –∞–∫–∫–∞—É–Ω—Ç–∞: $e');
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞, –≤—ã–ø–æ–ª–Ω–µ–Ω –ª–∏ –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ Google
  bool get isSignedInGoogle => _googleSignIn.currentUser != null;

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ Google –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  GoogleSignInAccount? get currentGoogleUser => _googleSignIn.currentUser;

  /// –°–≤—è–∑—ã–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ —Å Google
  Future<UserCredential?> linkWithGoogle([BuildContext? context]) async {
    try {
      final User? currentUser = _auth.currentUser;
      if (currentUser == null) {
        throw Exception(
          context != null
              ? AppLocalizations.of(context).translate('user_not_authorized')
              : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω',
        );
      }

      // –ü–æ–ª—É—á–∞–µ–º Google credentials
      final GoogleSignInAccount? googleUser = await _googleSignIn.signIn();
      if (googleUser == null) return null;

      final GoogleSignInAuthentication googleAuth =
          await googleUser.authentication;
      final credential = GoogleAuthProvider.credential(
        accessToken: googleAuth.accessToken,
        idToken: googleAuth.idToken,
      );

      // –°–≤—è–∑—ã–≤–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã
      final UserCredential userCredential = await currentUser
          .linkWithCredential(credential);

      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ —Å–≤—è–∑—ã–≤–∞–Ω–∏—è
      await _createOrUpdateUserDocument(userCredential);

      debugPrint('–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–≤—è–∑–∞–Ω —Å Google');
      return userCredential;
    } catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤—è–∑—ã–≤–∞–Ω–∏–∏ —Å Google: $e');
      _handleGoogleSignInError(e, context);
      return null;
    }
  }

  /// –û—Ç–≤—è–∑–∫–∞ Google –∞–∫–∫–∞—É–Ω—Ç–∞
  Future<void> unlinkGoogle([BuildContext? context]) async {
    try {
      final User? currentUser = _auth.currentUser;
      if (currentUser == null) {
        throw Exception(
          context != null
              ? AppLocalizations.of(context).translate('user_not_authorized')
              : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω',
        );
      }

      // –û—Ç–≤—è–∑—ã–≤–∞–µ–º Google –ø—Ä–æ–≤–∞–π–¥–µ—Ä
      await currentUser.unlink(GoogleAuthProvider.PROVIDER_ID);

      // –í—ã—Ö–æ–¥–∏–º –∏–∑ Google
      await _googleSignIn.signOut();

      debugPrint('Google –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω');
    } catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤—è–∑–∫–µ Google –∞–∫–∫–∞—É–Ω—Ç–∞: $e');
      _handleGoogleSignInError(e, context);
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å–≤—è–∑–∞–Ω –ª–∏ —Ç–µ–∫—É—â–∏–π –∞–∫–∫–∞—É–Ω—Ç —Å Google
  bool get isLinkedWithGoogle {
    final User? currentUser = _auth.currentUser;
    if (currentUser == null) return false;

    return currentUser.providerData.any(
      (provider) => provider.providerId == GoogleAuthProvider.PROVIDER_ID,
    );
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ Google Sign-In
  void _handleGoogleSignInError(dynamic error, [BuildContext? context]) {
    String errorMessage;

    if (context != null) {
      final localizations = AppLocalizations.of(context);

      if (error.toString().contains('network_error') ||
          error.toString().contains('NetworkError')) {
        errorMessage = localizations.translate('network_request_failed');
      } else if (error.toString().contains('sign_in_canceled')) {
        errorMessage = localizations.translate('google_sign_in_canceled');
      } else if (error.toString().contains('sign_in_failed')) {
        errorMessage = localizations.translate('google_sign_in_failed');
      } else if (error.toString().contains(
        'account-exists-with-different-credential',
      )) {
        errorMessage = localizations.translate(
          'account_exists_different_credential',
        );
      } else {
        errorMessage = localizations.translate('google_sign_in_error');
      }
    } else {
      // Fallback —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º
      if (error.toString().contains('network_error') ||
          error.toString().contains('NetworkError')) {
        errorMessage = '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É';
      } else if (error.toString().contains('sign_in_canceled')) {
        errorMessage = '–í—Ö–æ–¥ —á–µ—Ä–µ–∑ Google –æ—Ç–º–µ–Ω–µ–Ω';
      } else if (error.toString().contains('sign_in_failed')) {
        errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Google';
      } else if (error.toString().contains(
        'account-exists-with-different-credential',
      )) {
        errorMessage = '–ê–∫–∫–∞—É–Ω—Ç —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç';
      } else {
        errorMessage = '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Google';
      }
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
    if (context != null) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(errorMessage),
          backgroundColor: Colors.red,
          duration: const Duration(seconds: 4),
        ),
      );
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ Google
  Future<Map<String, dynamic>?> getGoogleProfile() async {
    try {
      final GoogleSignInAccount? currentUser = _googleSignIn.currentUser;
      if (currentUser == null) return null;

      return {
        'displayName': currentUser.displayName ?? '',
        'email': currentUser.email,
        'photoUrl': currentUser.photoUrl,
        'id': currentUser.id,
      };
    } catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è Google: $e');
      return null;
    }
  }

  /// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–∏—Ö–∏–π –≤—Ö–æ–¥ (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤—Ö–æ–¥–∏–ª)
  Future<GoogleSignInAccount?> signInSilently() async {
    try {
      return await _googleSignIn.signInSilently();
    } catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–∏—Ö–æ–º –≤—Ö–æ–¥–µ —á–µ—Ä–µ–∑ Google: $e');
      return null;
    }
  }
}
