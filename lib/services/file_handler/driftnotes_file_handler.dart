// –ü—É—Ç—å: lib/services/file_handler/driftnotes_file_handler.dart

import 'dart:convert';
import 'dart:io';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../../providers/subscription_provider.dart';
import '../../services/marker_map_share/marker_map_share_service.dart';
import '../../services/fishing_diary_share/fishing_diary_sharing_service.dart';
import '../../screens/marker_maps/marker_map_import_preview_screen.dart';
import '../../screens/fishing_diary/fishing_diary_import_preview_screen.dart';
import '../../screens/subscription/paywall_screen.dart';
import '../../localization/app_localizations.dart';

class DriftNotesFileHandler {
  // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ñ–∞–π–ª–æ–≤
  static const String _markerMapFormat = 'DriftNotes Marker Map';
  static const String _fishingDiaryFormat = 'DriftNotes Fishing Diary';

  /// üöÄ –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö: –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Ñ–∞–π–ª–∞ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –µ–≥–æ
  static Future<void> handleDriftNotesFile(BuildContext context, String filePath) async {
    debugPrint('üîç handleDriftNotesFile: –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞ $filePath');

    try {
      // 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
      final fileType = await _detectFileType(filePath);
      debugPrint('üìã –¢–∏–ø —Ñ–∞–π–ª–∞: $fileType');

      if (fileType == null) {
        debugPrint('‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞');
        _showErrorMessage(context, '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞');
        return;
      }

      // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º Premium —Å—Ç–∞—Ç—É—Å
      debugPrint('üîí –ü—Ä–æ–≤–µ—Ä—è–µ–º Premium —Å—Ç–∞—Ç—É—Å...');
      final subscriptionProvider = Provider.of<SubscriptionProvider>(context, listen: false);
      final hasPremium = subscriptionProvider.hasPremiumAccess;
      debugPrint('üîí Premium —Å—Ç–∞—Ç—É—Å: $hasPremium');

      if (!hasPremium) {
        debugPrint('‚ùå –ù–µ—Ç Premium - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º PaywallScreen');
        await _showPaywallForFileType(context, fileType);
        return;
      }

      // 3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
      switch (fileType) {
        case DriftNotesFileType.markerMap:
          await _handleMarkerMapFile(context, filePath);
          break;
        case DriftNotesFileType.fishingDiary:
          await _handleFishingDiaryFile(context, filePath);
          break;
      }

    } catch (e) {
      debugPrint('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: $e');
      debugPrint('‚ùå Stack trace: ${StackTrace.current}');

      if (context.mounted) {
        _showErrorMessage(context, '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: $e');
      }
    }
  }

  /// üîç –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –¢–ò–ü–ê: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
  static Future<DriftNotesFileType?> _detectFileType(String filePath) async {
    try {
      debugPrint('üìÑ –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞: $filePath');

      // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
      final file = File(filePath);
      if (!await file.exists()) {
        debugPrint('‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $filePath');
        return null;
      }

      final bytes = await file.readAsBytes();
      final jsonString = utf8.decode(bytes);

      // –ü–∞—Ä—Å–∏–º JSON
      final Map<String, dynamic> data = json.decode(jsonString);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–µ fileFormat
      final fileFormat = data['fileFormat'] as String?;
      debugPrint('üìã –û–±–Ω–∞—Ä—É–∂–µ–Ω fileFormat: $fileFormat');

      switch (fileFormat) {
        case _markerMapFormat:
          return DriftNotesFileType.markerMap;
        case _fishingDiaryFormat:
          return DriftNotesFileType.fishingDiary;
        default:
          debugPrint('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: $fileFormat');
          return null;
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞: $e');
      return null;
    }
  }

  /// üó∫Ô∏è –û–ë–†–ê–ë–û–¢–ö–ê –ú–ê–†–ö–ï–†–ù–û–ô –ö–ê–†–¢–´
  static Future<void> _handleMarkerMapFile(BuildContext context, String filePath) async {
    debugPrint('üó∫Ô∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª –º–∞—Ä–∫–µ—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã...');

    try {
      // –ü–∞—Ä—Å–∏–º —Ñ–∞–π–ª –º–∞—Ä–∫–µ—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã
      final importResult = await MarkerMapShareService.parseMarkerMapFile(filePath);
      debugPrint('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –º–∞—Ä–∫–µ—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã: success=${importResult.isSuccess}');

      if (!importResult.isSuccess || importResult.markerMap == null) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –º–∞—Ä–∫–µ—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã: ${importResult.error}');
        if (context.mounted) {
          _showErrorMessage(context, importResult.error ?? '–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–∞—Ä–∫–µ—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã');
        }
        return;
      }

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —ç–∫—Ä–∞–Ω—É –ø—Ä–µ–≤—å—é –º–∞—Ä–∫–µ—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã
      debugPrint('üöÄ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–µ–≤—å—é –º–∞—Ä–∫–µ—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã...');
      if (context.mounted) {
        await Navigator.push(
          context,
          MaterialPageRoute(
            builder: (context) => MarkerMapImportPreviewScreen(
              importResult: importResult,
              sourceFilePath: filePath,
            ),
          ),
        );
      }

    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∞—Ä–∫–µ—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã: $e');
      if (context.mounted) {
        _showErrorMessage(context, '–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–∞—Ä–∫–µ—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã: $e');
      }
    }
  }

  /// üìî –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–ü–ò–°–ò –î–ù–ï–í–ù–ò–ö–ê
  static Future<void> _handleFishingDiaryFile(BuildContext context, String filePath) async {
    debugPrint('üìî –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª –∑–∞–ø–∏—Å–∏ –¥–Ω–µ–≤–Ω–∏–∫–∞...');

    try {
      // –ü–∞—Ä—Å–∏–º —Ñ–∞–π–ª –∑–∞–ø–∏—Å–∏ –¥–Ω–µ–≤–Ω–∏–∫–∞
      final importResult = await FishingDiarySharingService.parseDiaryEntryFile(filePath);
      debugPrint('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞–ø–∏—Å–∏ –¥–Ω–µ–≤–Ω–∏–∫–∞: success=${importResult.isSuccess}');

      if (!importResult.isSuccess || importResult.diaryEntry == null) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞–ø–∏—Å–∏ –¥–Ω–µ–≤–Ω–∏–∫–∞: ${importResult.error}');
        if (context.mounted) {
          _showErrorMessage(context, importResult.error ?? '–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∑–∞–ø–∏—Å–∏ –¥–Ω–µ–≤–Ω–∏–∫–∞');
        }
        return;
      }

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —ç–∫—Ä–∞–Ω—É –ø—Ä–µ–≤—å—é –∑–∞–ø–∏—Å–∏ –¥–Ω–µ–≤–Ω–∏–∫–∞
      debugPrint('üöÄ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–µ–≤—å—é –∑–∞–ø–∏—Å–∏ –¥–Ω–µ–≤–Ω–∏–∫–∞...');
      if (context.mounted) {
        await Navigator.push(
          context,
          MaterialPageRoute(
            builder: (context) => FishingDiaryImportPreviewScreen(
              importResult: importResult,
              sourceFilePath: filePath,
            ),
          ),
        );
      }

    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø–∏—Å–∏ –¥–Ω–µ–≤–Ω–∏–∫–∞: $e');
      if (context.mounted) {
        _showErrorMessage(context, '–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∑–∞–ø–∏—Å–∏ –¥–Ω–µ–≤–Ω–∏–∫–∞: $e');
      }
    }
  }

  /// üí≥ –ü–û–ö–ê–ó PAYWALL –í –ó–ê–í–ò–°–ò–ú–û–°–¢–ò –û–¢ –¢–ò–ü–ê –§–ê–ô–õ–ê
  static Future<void> _showPaywallForFileType(BuildContext context, DriftNotesFileType fileType) async {
    String contentType;
    String blockedFeature;

    switch (fileType) {
      case DriftNotesFileType.markerMap:
        contentType = 'marker_map_sharing';
        blockedFeature = '–ò–º–ø–æ—Ä—Ç –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç';
        break;
      case DriftNotesFileType.fishingDiary:
        contentType = 'fishing_diary_sharing';
        blockedFeature = '–ò–º–ø–æ—Ä—Ç –∑–∞–ø–∏—Å–µ–π –¥–Ω–µ–≤–Ω–∏–∫–∞';
        break;
    }

    if (context.mounted) {
      await Navigator.push(
        context,
        MaterialPageRoute(
          builder: (context) => PaywallScreen(
            contentType: contentType,
            blockedFeature: blockedFeature,
          ),
        ),
      );
    }
  }

  /// ‚ùå –ü–û–ö–ê–ó –°–û–û–ë–©–ï–ù–ò–Ø –û–ë –û–®–ò–ë–ö–ï
  static void _showErrorMessage(BuildContext context, String message) {
    if (context.mounted) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(message),
          backgroundColor: Colors.red,
          duration: const Duration(seconds: 3),
        ),
      );
    }
  }

  /// üìä –ü–û–õ–£–ß–ï–ù–ò–ï –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –§–ê–ô–õ–ï (–±–µ–∑ –∏–º–ø–æ—Ä—Ç–∞)
  static Future<DriftNotesFileInfo?> getFileInfo(String filePath) async {
    try {
      debugPrint('üìä –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ: $filePath');

      final fileType = await _detectFileType(filePath);
      if (fileType == null) {
        return null;
      }

      final file = File(filePath);
      final bytes = await file.readAsBytes();
      final jsonString = utf8.decode(bytes);
      final Map<String, dynamic> data = json.decode(jsonString);

      final metadata = data['metadata'] as Map<String, dynamic>?;
      final version = data['version'] as int?;

      return DriftNotesFileInfo(
        fileType: fileType,
        version: version ?? 1,
        originalFileName: metadata?['originalFileName'],
        exportDate: metadata?['exportDate'] != null
            ? DateTime.tryParse(metadata!['exportDate'])
            : null,
        appName: metadata?['appName'],
      );

    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ: $e');
      return null;
    }
  }
}

/// üìÇ –¢–ò–ü–´ –§–ê–ô–õ–û–í DRIFTNOTES
enum DriftNotesFileType {
  markerMap,
  fishingDiary,
}

/// üìä –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –§–ê–ô–õ–ï DRIFTNOTES
class DriftNotesFileInfo {
  final DriftNotesFileType fileType;
  final int version;
  final String? originalFileName;
  final DateTime? exportDate;
  final String? appName;

  DriftNotesFileInfo({
    required this.fileType,
    required this.version,
    this.originalFileName,
    this.exportDate,
    this.appName,
  });

  /// üìù –ü–æ–ª—É—á–∏—Ç—å —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
  String getFileTypeName() {
    switch (fileType) {
      case DriftNotesFileType.markerMap:
        return '–ú–∞—Ä–∫–µ—Ä–Ω–∞—è –∫–∞—Ä—Ç–∞';
      case DriftNotesFileType.fishingDiary:
        return '–ó–∞–ø–∏—Å—å –¥–Ω–µ–≤–Ω–∏–∫–∞';
    }
  }

  /// üéØ –ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É –¥–ª—è —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
  IconData getFileTypeIcon() {
    switch (fileType) {
      case DriftNotesFileType.markerMap:
        return Icons.map;
      case DriftNotesFileType.fishingDiary:
        return Icons.book;
    }
  }
}