// –ü—É—Ç—å: lib/services/scheduled_reminder_service.dart

import 'dart:async';
import 'dart:convert';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'notification_service.dart';
import '../models/notification_model.dart';
import '../localization/app_localizations.dart';

class ScheduledReminderService {
  static final ScheduledReminderService _instance = ScheduledReminderService._internal();
  factory ScheduledReminderService() => _instance;
  ScheduledReminderService._internal();

  final NotificationService _notificationService = NotificationService();
  final Map<String, Timer> _activeTimers = {};
  final Map<String, ScheduledReminder> _scheduledReminders = {};

  static const String _scheduledRemindersKey = 'scheduled_reminders_v2';

  BuildContext? _context;
  bool _isInitialized = false;

  /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
  void setContext(BuildContext context) {
    _context = context;
  }

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
  Future<void> initialize() async {
    if (_isInitialized) return;

    try {
      debugPrint('‚è∞ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —Ç–æ—á–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...');

      await _loadScheduledReminders();
      await _restoreActiveTimers();

      _isInitialized = true;
      debugPrint('‚úÖ –°–µ—Ä–≤–∏—Å —Ç–æ—á–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      debugPrint('üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤: ${_activeTimers.length}');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞ —Ç–æ—á–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: $e');
    }
  }

  /// –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è
  Future<void> scheduleReminder({
    required String id,
    required String title,
    required String message,
    required DateTime reminderDateTime,
    required NotificationType type,
    Map<String, dynamic> data = const {},
  }) async {
    try {
      debugPrint('‚è∞ –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: $title –Ω–∞ ${_formatDateTime(reminderDateTime)}');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º
      final now = DateTime.now();
      if (reminderDateTime.isBefore(now)) {
        debugPrint('‚ö†Ô∏è –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –ø—Ä–æ—à–ª–æ–º, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
        return;
      }

      // –û—Ç–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
      await cancelReminder(id);

      // –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
      final reminder = ScheduledReminder(
        id: id,
        title: title,
        message: message,
        reminderDateTime: reminderDateTime,
        type: type,
        data: data,
        createdAt: now,
      );

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å –∏ –Ω–∞ –¥–∏—Å–∫
      _scheduledReminders[id] = reminder;
      await _saveScheduledReminders();

      // –í—ã—á–∏—Å–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
      final delay = reminderDateTime.difference(now);
      debugPrint('‚è∞ –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è: ${delay.inMinutes} –º–∏–Ω—É—Ç ${delay.inSeconds % 60} —Å–µ–∫—É–Ω–¥');

      // –°–æ–∑–¥–∞–µ–º —Ç–∞–π–º–µ—Ä
      final timer = Timer(delay, () {
        _triggerReminder(reminder);
      });

      _activeTimers[id] = timer;

      debugPrint('‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: $title');

    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: $e');
    }
  }

  /// –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
  Future<void> cancelReminder(String id) async {
    try {
      // –û—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–µ—Ä
      _activeTimers[id]?.cancel();
      _activeTimers.remove(id);

      // –£–¥–∞–ª—è–µ–º –∏–∑ –ø–∞–º—è—Ç–∏ –∏ —Å –¥–∏—Å–∫–∞
      _scheduledReminders.remove(id);
      await _saveScheduledReminders();

      debugPrint('üö´ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ: $id');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: $e');
    }
  }

  /// –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
  Future<void> updateReminder({
    required String id,
    required String title,
    required String message,
    required DateTime reminderDateTime,
    required NotificationType type,
    Map<String, dynamic> data = const {},
  }) async {
    // –ü—Ä–æ—Å—Ç–æ –æ—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä–æ–µ –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
    await cancelReminder(id);
    await scheduleReminder(
      id: id,
      title: title,
      message: message,
      reminderDateTime: reminderDateTime,
      type: type,
      data: data,
    );
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
  List<ScheduledReminder> getScheduledReminders() {
    return _scheduledReminders.values.toList();
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã
  Map<String, Timer> getActiveTimers() {
    return Map.from(_activeTimers);
  }

  /// –ò–°–ü–†–ê–í–õ–ï–ù–û: –°—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
  Future<void> _triggerReminder(ScheduledReminder reminder) async {
    try {
      debugPrint('üîî –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: ${reminder.title}');

      // –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
      String title = reminder.title;
      if (_context != null && reminder.type == NotificationType.tournamentReminder) {
        try {
          final localizations = AppLocalizations.of(_context!);
          title = localizations.translate('tournament_reminder_title');
        } catch (e) {
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        }
      }

      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      if (reminder.type == NotificationType.tournamentReminder) {
        await _notificationService.addTournamentReminderNotification(
          id: reminder.id,
          title: title,
          message: reminder.message,
          data: {
            'sourceId': reminder.data['sourceId'] ?? '', // ID —Ç—É—Ä–Ω–∏—Ä–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            'eventId': reminder.data['eventId'] ?? '',
            'eventType': reminder.data['eventType'] ?? '',
            'eventTitle': reminder.data['eventTitle'] ?? reminder.title,
            'location': reminder.data['location'] ?? '',
          },
        );
      } else if (reminder.type == NotificationType.fishingReminder) {
        await _notificationService.addFishingReminderNotification(
          id: reminder.id,
          title: title,
          message: reminder.message,
          data: {
            'sourceId': reminder.data['sourceId'] ?? '', // ID –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            'eventId': reminder.data['eventId'] ?? '',
            'eventType': reminder.data['eventType'] ?? '',
            'eventTitle': reminder.data['eventTitle'] ?? reminder.title,
            'location': reminder.data['location'] ?? '',
          },
        );
      } else {
        // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π –º–µ—Ç–æ–¥
        await _notificationService.createNotification(
          title: title,
          message: reminder.message,
          type: reminder.type,
          data: reminder.data,
        );
      }

      // –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
      _activeTimers.remove(reminder.id);
      _scheduledReminders.remove(reminder.id);
      await _saveScheduledReminders();

      debugPrint('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ: ${reminder.title}');

    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: $e');
    }
  }

  /// –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
  Future<void> _loadScheduledReminders() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final remindersJson = prefs.getStringList(_scheduledRemindersKey) ?? [];

      _scheduledReminders.clear();

      final now = DateTime.now();
      bool hasExpiredReminders = false;

      for (final reminderJson in remindersJson) {
        try {
          final reminderMap = json.decode(reminderJson);
          final reminder = ScheduledReminder.fromJson(reminderMap);

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è
          if (reminder.reminderDateTime.isAfter(now)) {
            _scheduledReminders[reminder.id] = reminder;
          } else {
            hasExpiredReminders = true;
            debugPrint('‚è∞ –ü—Ä–æ–ø—É—â–µ–Ω–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ: ${reminder.title}');
          }
        } catch (e) {
          debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: $e');
        }
      }

      // –ï—Å–ª–∏ –±—ã–ª–∏ –∏—Å—Ç–µ–∫—à–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
      if (hasExpiredReminders) {
        await _saveScheduledReminders();
      }

      debugPrint('üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: ${_scheduledReminders.length}');

    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: $e');
    }
  }

  /// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  Future<void> _restoreActiveTimers() async {
    try {
      final now = DateTime.now();

      for (final reminder in _scheduledReminders.values) {
        if (reminder.reminderDateTime.isAfter(now)) {
          final delay = reminder.reminderDateTime.difference(now);

          debugPrint('üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è: ${reminder.title}');
          debugPrint('‚è∞ –í—Ä–µ–º–µ–Ω–∏ –¥–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è: ${delay.inMinutes} –º–∏–Ω—É—Ç');

          final timer = Timer(delay, () {
            _triggerReminder(reminder);
          });

          _activeTimers[reminder.id] = timer;
        }
      }

      debugPrint('üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ç–∞–π–º–µ—Ä–æ–≤: ${_activeTimers.length}');

    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–æ–≤: $e');
    }
  }

  /// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
  Future<void> _saveScheduledReminders() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final remindersJson = _scheduledReminders.values
          .map((reminder) => json.encode(reminder.toJson()))
          .toList();

      await prefs.setStringList(_scheduledRemindersKey, remindersJson);
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: $e');
    }
  }

  /// –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
  Future<void> clearAllReminders() async {
    try {
      // –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã
      for (final timer in _activeTimers.values) {
        timer.cancel();
      }
      _activeTimers.clear();

      // –û—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å –∏ –¥–∏—Å–∫
      _scheduledReminders.clear();
      await _saveScheduledReminders();

      debugPrint('üßπ –í—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—á–∏—â–µ–Ω—ã');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: $e');
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  Map<String, dynamic> getStatistics() {
    final now = DateTime.now();
    final activeCount = _scheduledReminders.values
        .where((r) => r.reminderDateTime.isAfter(now))
        .length;

    return {
      'totalScheduled': _scheduledReminders.length,
      'activeTimers': _activeTimers.length,
      'activeReminders': activeCount,
      'isInitialized': _isInitialized,
    };
  }

  /// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
  String _formatDateTime(DateTime dateTime) {
    return '${dateTime.day.toString().padLeft(2, '0')}.${dateTime.month.toString().padLeft(2, '0')}.${dateTime.year} ${dateTime.hour.toString().padLeft(2, '0')}:${dateTime.minute.toString().padLeft(2, '0')}';
  }

  /// –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
  void dispose() {
    for (final timer in _activeTimers.values) {
      timer.cancel();
    }
    _activeTimers.clear();
    debugPrint('üßπ ScheduledReminderService: —Ä–µ—Å—É—Ä—Å—ã –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã');
  }
}

/// –ú–æ–¥–µ–ª—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
class ScheduledReminder {
  final String id;
  final String title;
  final String message;
  final DateTime reminderDateTime;
  final NotificationType type;
  final Map<String, dynamic> data;
  final DateTime createdAt;

  ScheduledReminder({
    required this.id,
    required this.title,
    required this.message,
    required this.reminderDateTime,
    required this.type,
    this.data = const {},
    required this.createdAt,
  });

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'title': title,
      'message': message,
      'reminderDateTime': reminderDateTime.millisecondsSinceEpoch,
      'type': type.toString(),
      'data': data,
      'createdAt': createdAt.millisecondsSinceEpoch,
    };
  }

  factory ScheduledReminder.fromJson(Map<String, dynamic> json) {
    return ScheduledReminder(
      id: json['id'] ?? '',
      title: json['title'] ?? '',
      message: json['message'] ?? '',
      reminderDateTime: DateTime.fromMillisecondsSinceEpoch(json['reminderDateTime'] ?? 0),
      type: NotificationType.values.firstWhere(
            (e) => e.toString() == json['type'],
        orElse: () => NotificationType.general,
      ),
      data: Map<String, dynamic>.from(json['data'] ?? {}),
      createdAt: DateTime.fromMillisecondsSinceEpoch(json['createdAt'] ?? DateTime.now().millisecondsSinceEpoch),
    );
  }
}