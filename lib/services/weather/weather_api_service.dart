// –ü—É—Ç—å: lib/services/weather/weather_api_service.dart

import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:flutter/foundation.dart';
import '../../models/weather_api_model.dart';
import '../../config/api_keys.dart';
import '../../utils/network_utils.dart';
import '../../models/fishing_note_model.dart';

class WeatherApiService {
  static const String _baseUrl = 'https://api.weatherapi.com/v1';

  // Singleton pattern
  static final WeatherApiService _instance = WeatherApiService._internal();
  factory WeatherApiService() => _instance;
  WeatherApiService._internal();

  /// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
  Future<WeatherApiResponse> getCurrentWeather({
    required double latitude,
    required double longitude,
    bool includeAirQuality = false,
  }) async {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
    final isConnected = await NetworkUtils.isNetworkAvailable();
    if (!isConnected) {
      throw Exception('–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É');
    }

    final query = '$latitude,$longitude';

    final uri = Uri.parse('$_baseUrl/current.json').replace(queryParameters: {
      'key': ApiKeys.weatherApiKey,
      'q': query,
      'aqi': includeAirQuality ? 'yes' : 'no',
      'lang': 'en', // –ò–∑–º–µ–Ω–µ–Ω–æ —Å 'ru' –Ω–∞ 'en'
    });

    try {
      debugPrint('üå§Ô∏è –ó–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã: $uri');

      final response = await http.get(
        uri,
        headers: {
          'Content-Type': 'application/json; charset=utf-8', // –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∞
        },
      ).timeout(const Duration(seconds: 10));

      debugPrint('üå§Ô∏è –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.statusCode}');

      if (response.statusCode == 200) {
        final jsonData = json.decode(utf8.decode(response.bodyBytes)); // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
        debugPrint('‚úÖ –ü–æ–≥–æ–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');

        return WeatherApiResponse.fromJson(jsonData);
      } else {
        final errorData = json.decode(utf8.decode(response.bodyBytes)); // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
        final errorMessage = errorData['error']?['message'] ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
        throw Exception('–û—à–∏–±–∫–∞ API: $errorMessage');
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã: $e');
      rethrow;
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π
  Future<WeatherApiResponse> getForecast({
    required double latitude,
    required double longitude,
    int days = 3,
    bool includeAirQuality = false,
    bool includeAlerts = false,
  }) async {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
    final isConnected = await NetworkUtils.isNetworkAvailable();
    if (!isConnected) {
      throw Exception('–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É');
    }

    // –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–æ 3 –¥–Ω–µ–π
    if (days > 3) {
      days = 3;
      debugPrint('‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–æ –¥–æ 3 –¥–Ω–µ–π –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–ª–∞–Ω–∞');
    }

    final query = '$latitude,$longitude';

    final uri = Uri.parse('$_baseUrl/forecast.json').replace(queryParameters: {
      'key': ApiKeys.weatherApiKey,
      'q': query,
      'days': days.toString(),
      'aqi': includeAirQuality ? 'yes' : 'no',
      'alerts': includeAlerts ? 'yes' : 'no',
      'lang': 'en', // –ò–∑–º–µ–Ω–µ–Ω–æ —Å 'ru' –Ω–∞ 'en'
    });

    try {
      debugPrint('üå§Ô∏è –ó–∞–ø—Ä–æ—Å –ø—Ä–æ–≥–Ω–æ–∑–∞: $uri');

      final response = await http.get(
        uri,
        headers: {
          'Content-Type': 'application/json; charset=utf-8', // –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∞
        },
      ).timeout(const Duration(seconds: 15));

      debugPrint('üå§Ô∏è –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞: ${response.statusCode}');

      if (response.statusCode == 200) {
        final jsonData = json.decode(utf8.decode(response.bodyBytes)); // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
        debugPrint('‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ');

        return WeatherApiResponse.fromJson(jsonData);
      } else {
        final errorData = json.decode(utf8.decode(response.bodyBytes)); // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
        final errorMessage = errorData['error']?['message'] ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
        throw Exception('–û—à–∏–±–∫–∞ API: $errorMessage');
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞: $e');
      rethrow;
    }
  }

  /// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö WeatherAPI –≤ –º–æ–¥–µ–ª—å FishingWeather –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  static FishingWeather convertToFishingWeather(WeatherApiResponse weatherData) {
    final current = weatherData.current;
    final location = weatherData.location;

    // –ü–æ–ª—É—á–∞–µ–º –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–æ–≥–Ω–æ–∑–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
    String sunrise = '';
    String sunset = '';

    if (weatherData.forecast.isNotEmpty) {
      final today = weatherData.forecast.first;
      sunrise = today.astro.sunrise;
      sunset = today.astro.sunset;
    }

    // –ü–µ—Ä–µ–≤–æ–¥–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã
    final translatedDescription = _translateWeatherDescription(current.condition.text);

    return FishingWeather(
      temperature: current.tempC,
      feelsLike: current.feelslikeC,
      humidity: current.humidity,
      pressure: current.pressureMb,
      windSpeed: current.windKph / 3.6, // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–º/—á –≤ –º/—Å
      windDirection: _translateWindDirection(current.windDir),
      weatherDescription: translatedDescription,
      cloudCover: current.cloud,
      moonPhase: weatherData.forecast.isNotEmpty
          ? _translateMoonPhase(weatherData.forecast.first.astro.moonPhase)
          : '–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã',
      observationTime: DateTime.now(),
      sunrise: sunrise,
      sunset: sunset,
      isDay: current.isDay == 1,
    );
  }

  /// –ü–µ—Ä–µ–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–≥–æ–¥—ã —Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
  static String _translateWeatherDescription(String englishDescription) {
    final translations = {
      // –Ø—Å–Ω–∞—è –ø–æ–≥–æ–¥–∞
      'Sunny': '–°–æ–ª–Ω–µ—á–Ω–æ',
      'Clear': '–Ø—Å–Ω–æ',

      // –û–±–ª–∞—á–Ω–æ—Å—Ç—å (–≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞)
      'Partly cloudy': '–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å',
      'Partly Cloudy': '–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å',
      'PARTLY CLOUDY': '–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å',
      'Cloudy': '–û–±–ª–∞—á–Ω–æ',
      'cloudy': '–û–±–ª–∞—á–Ω–æ',
      'CLOUDY': '–û–±–ª–∞—á–Ω–æ',
      'Overcast': '–ü–∞—Å–º—É—Ä–Ω–æ',
      'overcast': '–ü–∞—Å–º—É—Ä–Ω–æ',
      'OVERCAST': '–ü–∞—Å–º—É—Ä–Ω–æ',

      // –¢—É–º–∞–Ω
      'Mist': '–î—ã–º–∫–∞',
      'mist': '–î—ã–º–∫–∞',
      'Fog': '–¢—É–º–∞–Ω',
      'fog': '–¢—É–º–∞–Ω',
      'Freezing fog': '–õ–µ–¥—è–Ω–æ–π —Ç—É–º–∞–Ω',
      'freezing fog': '–õ–µ–¥—è–Ω–æ–π —Ç—É–º–∞–Ω',

      // –î–æ–∂–¥—å - –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
      'Patchy rain possible': '–ú–µ—Å—Ç–∞–º–∏ –¥–æ–∂–¥—å',
      'patchy rain possible': '–ú–µ—Å—Ç–∞–º–∏ –¥–æ–∂–¥—å',
      'Patchy rain nearby': '–ú–µ—Å—Ç–∞–º–∏ –¥–æ–∂–¥—å –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏',
      'patchy rain nearby': '–ú–µ—Å—Ç–∞–º–∏ –¥–æ–∂–¥—å –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏',
      'Patchy light drizzle': '–ú–µ—Å—Ç–∞–º–∏ –ª–µ–≥–∫–∞—è –º–æ—Ä–æ—Å—å',
      'patchy light drizzle': '–ú–µ—Å—Ç–∞–º–∏ –ª–µ–≥–∫–∞—è –º–æ—Ä–æ—Å—å',
      'Light drizzle': '–õ–µ–≥–∫–∞—è –º–æ—Ä–æ—Å—å',
      'light drizzle': '–õ–µ–≥–∫–∞—è –º–æ—Ä–æ—Å—å',
      'Freezing drizzle': '–õ–µ–¥—è–Ω–∞—è –º–æ—Ä–æ—Å—å',
      'freezing drizzle': '–õ–µ–¥—è–Ω–∞—è –º–æ—Ä–æ—Å—å',
      'Heavy freezing drizzle': '–°–∏–ª—å–Ω–∞—è –ª–µ–¥—è–Ω–∞—è –º–æ—Ä–æ—Å—å',
      'heavy freezing drizzle': '–°–∏–ª—å–Ω–∞—è –ª–µ–¥—è–Ω–∞—è –º–æ—Ä–æ—Å—å',
      'Patchy light rain': '–ú–µ—Å—Ç–∞–º–∏ –ª–µ–≥–∫–∏–π –¥–æ–∂–¥—å',
      'patchy light rain': '–ú–µ—Å—Ç–∞–º–∏ –ª–µ–≥–∫–∏–π –¥–æ–∂–¥—å',
      'Light rain': '–õ–µ–≥–∫–∏–π –¥–æ–∂–¥—å',
      'light rain': '–õ–µ–≥–∫–∏–π –¥–æ–∂–¥—å',
      'Moderate rain at times': '–í—Ä–µ–º–µ–Ω–∞–º–∏ —É–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å',
      'moderate rain at times': '–í—Ä–µ–º–µ–Ω–∞–º–∏ —É–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å',
      'Moderate rain': '–£–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å',
      'moderate rain': '–£–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å',
      'Heavy rain at times': '–í—Ä–µ–º–µ–Ω–∞–º–∏ —Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å',
      'heavy rain at times': '–í—Ä–µ–º–µ–Ω–∞–º–∏ —Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å',
      'Heavy rain': '–°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å',
      'heavy rain': '–°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å',
      'Light freezing rain': '–õ–µ–≥–∫–∏–π –ª–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—å',
      'light freezing rain': '–õ–µ–≥–∫–∏–π –ª–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—å',
      'Moderate or heavy freezing rain': '–£–º–µ—Ä–µ–Ω–Ω—ã–π –∏–ª–∏ —Å–∏–ª—å–Ω—ã–π –ª–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—å',
      'moderate or heavy freezing rain': '–£–º–µ—Ä–µ–Ω–Ω—ã–π –∏–ª–∏ —Å–∏–ª—å–Ω—ã–π –ª–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—å',
      'Light showers of ice pellets': '–õ–µ–≥–∫–∏–π –ª–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—å',
      'light showers of ice pellets': '–õ–µ–≥–∫–∏–π –ª–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—å',
      'Moderate or heavy showers of ice pellets': '–£–º–µ—Ä–µ–Ω–Ω—ã–π –∏–ª–∏ —Å–∏–ª—å–Ω—ã–π –ª–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—å',
      'moderate or heavy showers of ice pellets': '–£–º–µ—Ä–µ–Ω–Ω—ã–π –∏–ª–∏ —Å–∏–ª—å–Ω—ã–π –ª–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—å',

      // –°–Ω–µ–≥ - –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
      'Patchy snow possible': '–ú–µ—Å—Ç–∞–º–∏ —Å–Ω–µ–≥',
      'patchy snow possible': '–ú–µ—Å—Ç–∞–º–∏ —Å–Ω–µ–≥',
      'Patchy snow nearby': '–ú–µ—Å—Ç–∞–º–∏ —Å–Ω–µ–≥ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏',
      'patchy snow nearby': '–ú–µ—Å—Ç–∞–º–∏ —Å–Ω–µ–≥ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏',
      'Patchy light snow': '–ú–µ—Å—Ç–∞–º–∏ –ª–µ–≥–∫–∏–π —Å–Ω–µ–≥',
      'patchy light snow': '–ú–µ—Å—Ç–∞–º–∏ –ª–µ–≥–∫–∏–π —Å–Ω–µ–≥',
      'Light snow': '–õ–µ–≥–∫–∏–π —Å–Ω–µ–≥',
      'light snow': '–õ–µ–≥–∫–∏–π —Å–Ω–µ–≥',
      'Patchy moderate snow': '–ú–µ—Å—Ç–∞–º–∏ —É–º–µ—Ä–µ–Ω–Ω—ã–π —Å–Ω–µ–≥',
      'patchy moderate snow': '–ú–µ—Å—Ç–∞–º–∏ —É–º–µ—Ä–µ–Ω–Ω—ã–π —Å–Ω–µ–≥',
      'Moderate snow': '–£–º–µ—Ä–µ–Ω–Ω—ã–π —Å–Ω–µ–≥',
      'moderate snow': '–£–º–µ—Ä–µ–Ω–Ω—ã–π —Å–Ω–µ–≥',
      'Patchy heavy snow': '–ú–µ—Å—Ç–∞–º–∏ —Å–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥',
      'patchy heavy snow': '–ú–µ—Å—Ç–∞–º–∏ —Å–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥',
      'Heavy snow': '–°–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥',
      'heavy snow': '–°–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥',
      'Ice pellets': '–õ–µ–¥—è–Ω–∞—è –∫—Ä—É–ø–∞',
      'ice pellets': '–õ–µ–¥—è–Ω–∞—è –∫—Ä—É–ø–∞',
      'Light snow showers': '–õ–µ–≥–∫–∏–µ —Å–Ω–µ–∂–Ω—ã–µ –ª–∏–≤–Ω–∏',
      'light snow showers': '–õ–µ–≥–∫–∏–µ —Å–Ω–µ–∂–Ω—ã–µ –ª–∏–≤–Ω–∏',
      'Moderate or heavy snow showers': '–£–º–µ—Ä–µ–Ω–Ω—ã–µ –∏–ª–∏ —Å–∏–ª—å–Ω—ã–µ —Å–Ω–µ–∂–Ω—ã–µ –ª–∏–≤–Ω–∏',
      'moderate or heavy snow showers': '–£–º–µ—Ä–µ–Ω–Ω—ã–µ –∏–ª–∏ —Å–∏–ª—å–Ω—ã–µ —Å–Ω–µ–∂–Ω—ã–µ –ª–∏–≤–Ω–∏',
      'Patchy light snow with thunder': '–ú–µ—Å—Ç–∞–º–∏ –ª–µ–≥–∫–∏–π —Å–Ω–µ–≥ —Å –≥—Ä–æ–∑–æ–π',
      'patchy light snow with thunder': '–ú–µ—Å—Ç–∞–º–∏ –ª–µ–≥–∫–∏–π —Å–Ω–µ–≥ —Å –≥—Ä–æ–∑–æ–π',
      'Moderate or heavy snow with thunder': '–£–º–µ—Ä–µ–Ω–Ω—ã–π –∏–ª–∏ —Å–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥ —Å –≥—Ä–æ–∑–æ–π',
      'moderate or heavy snow with thunder': '–£–º–µ—Ä–µ–Ω–Ω—ã–π –∏–ª–∏ —Å–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥ —Å –≥—Ä–æ–∑–æ–π',

      // –î–æ–∂–¥—å —Å –ª–∏–≤–Ω—è–º–∏
      'Light rain shower': '–õ–µ–≥–∫–∏–π –ª–∏–≤–µ–Ω—å',
      'light rain shower': '–õ–µ–≥–∫–∏–π –ª–∏–≤–µ–Ω—å',
      'Moderate or heavy rain shower': '–£–º–µ—Ä–µ–Ω–Ω—ã–π –∏–ª–∏ —Å–∏–ª—å–Ω—ã–π –ª–∏–≤–µ–Ω—å',
      'moderate or heavy rain shower': '–£–º–µ—Ä–µ–Ω–Ω—ã–π –∏–ª–∏ —Å–∏–ª—å–Ω—ã–π –ª–∏–≤–µ–Ω—å',
      'Torrential rain shower': '–ü—Ä–æ–ª–∏–≤–Ω–æ–π –ª–∏–≤–µ–Ω—å',
      'torrential rain shower': '–ü—Ä–æ–ª–∏–≤–Ω–æ–π –ª–∏–≤–µ–Ω—å',

      // –ì—Ä–æ–∑–∞
      'Thundery outbreaks possible': '–í–æ–∑–º–æ–∂–Ω—ã –≥—Ä–æ–∑—ã',
      'thundery outbreaks possible': '–í–æ–∑–º–æ–∂–Ω—ã –≥—Ä–æ–∑—ã',
      'Patchy light rain with thunder': '–ú–µ—Å—Ç–∞–º–∏ –ª–µ–≥–∫–∏–π –¥–æ–∂–¥—å —Å –≥—Ä–æ–∑–æ–π',
      'patchy light rain with thunder': '–ú–µ—Å—Ç–∞–º–∏ –ª–µ–≥–∫–∏–π –¥–æ–∂–¥—å —Å –≥—Ä–æ–∑–æ–π',
      'Moderate or heavy rain with thunder': '–£–º–µ—Ä–µ–Ω–Ω—ã–π –∏–ª–∏ —Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å —Å –≥—Ä–æ–∑–æ–π',
      'moderate or heavy rain with thunder': '–£–º–µ—Ä–µ–Ω–Ω—ã–π –∏–ª–∏ —Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å —Å –≥—Ä–æ–∑–æ–π',

      // –ì—Ä–∞–¥ –∏ –º–æ–∫—Ä—ã–π —Å–Ω–µ–≥
      'Patchy sleet possible': '–ú–µ—Å—Ç–∞–º–∏ –º–æ–∫—Ä—ã–π —Å–Ω–µ–≥',
      'patchy sleet possible': '–ú–µ—Å—Ç–∞–º–∏ –º–æ–∫—Ä—ã–π —Å–Ω–µ–≥',
      'Patchy sleet nearby': '–ú–µ—Å—Ç–∞–º–∏ –º–æ–∫—Ä—ã–π —Å–Ω–µ–≥ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏',
      'patchy sleet nearby': '–ú–µ—Å—Ç–∞–º–∏ –º–æ–∫—Ä—ã–π —Å–Ω–µ–≥ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏',
      'Light sleet': '–õ–µ–≥–∫–∏–π –º–æ–∫—Ä—ã–π —Å–Ω–µ–≥',
      'light sleet': '–õ–µ–≥–∫–∏–π –º–æ–∫—Ä—ã–π —Å–Ω–µ–≥',
      'Moderate or heavy sleet': '–£–º–µ—Ä–µ–Ω–Ω—ã–π –∏–ª–∏ —Å–∏–ª—å–Ω—ã–π –º–æ–∫—Ä—ã–π —Å–Ω–µ–≥',
      'moderate or heavy sleet': '–£–º–µ—Ä–µ–Ω–Ω—ã–π –∏–ª–∏ —Å–∏–ª—å–Ω—ã–π –º–æ–∫—Ä—ã–π —Å–Ω–µ–≥',
      'Light sleet showers': '–õ–µ–≥–∫–∏–µ –ª–∏–≤–Ω–∏ —Å –º–æ–∫—Ä—ã–º —Å–Ω–µ–≥–æ–º',
      'light sleet showers': '–õ–µ–≥–∫–∏–µ –ª–∏–≤–Ω–∏ —Å –º–æ–∫—Ä—ã–º —Å–Ω–µ–≥–æ–º',
      'Moderate or heavy sleet showers': '–£–º–µ—Ä–µ–Ω–Ω—ã–µ –∏–ª–∏ —Å–∏–ª—å–Ω—ã–µ –ª–∏–≤–Ω–∏ —Å –º–æ–∫—Ä—ã–º —Å–Ω–µ–≥–æ–º',
      'moderate or heavy sleet showers': '–£–º–µ—Ä–µ–Ω–Ω—ã–µ –∏–ª–∏ —Å–∏–ª—å–Ω—ã–µ –ª–∏–≤–Ω–∏ —Å –º–æ–∫—Ä—ã–º —Å–Ω–µ–≥–æ–º',

      // –î—Ä—É–≥–∏–µ —É—Å–ª–æ–≤–∏—è
      'Blowing snow': '–ú–µ—Ç–µ–ª—å',
      'blowing snow': '–ú–µ—Ç–µ–ª—å',
      'Blizzard': '–ë—É—Ä–∞–Ω',
      'blizzard': '–ë—É—Ä–∞–Ω',

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
      'Fair': '–Ø—Å–Ω–æ',
      'fair': '—è—Å–Ω–æ',
      'Hot': '–ñ–∞—Ä–∫–æ',
      'hot': '–∂–∞—Ä–∫–æ',
      'Cold': '–•–æ–ª–æ–¥–Ω–æ',
      'cold': '—Ö–æ–ª–æ–¥–Ω–æ',
      'Windy': '–í–µ—Ç—Ä–µ–Ω–æ',
      'windy': '–≤–µ—Ç—Ä–µ–Ω–æ',
    };

    return translations[englishDescription] ?? englishDescription;
  }

  /// –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ç—Ä–∞
  static String _translateWindDirection(String windDir) {
    final translations = {
      'N': '–°',
      'NNE': '–°–°–í',
      'NE': '–°–í',
      'ENE': '–í–°–í',
      'E': '–í',
      'ESE': '–í–Æ–í',
      'SE': '–Æ–í',
      'SSE': '–Æ–Æ–í',
      'S': '–Æ',
      'SSW': '–Æ–Æ–ó',
      'SW': '–Æ–ó',
      'WSW': '–ó–Æ–ó',
      'W': '–ó',
      'WNW': '–ó–°–ó',
      'NW': '–°–ó',
      'NNW': '–°–°–ó',
    };

    return translations[windDir] ?? windDir;
  }

  /// –ü–µ—Ä–µ–≤–æ–¥ —Ñ–∞–∑—ã –ª—É–Ω—ã
  static String _translateMoonPhase(String moonPhase) {
    final translations = {
      'New Moon': '–ù–æ–≤–æ–ª—É–Ω–∏–µ',
      'new moon': '–ù–æ–≤–æ–ª—É–Ω–∏–µ',
      'Waxing Crescent': '–†–∞—Å—Ç—É—â–∞—è –ª—É–Ω–∞',
      'waxing crescent': '–†–∞—Å—Ç—É—â–∞—è –ª—É–Ω–∞',
      'First Quarter': '–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å',
      'first quarter': '–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å',
      'Waxing Gibbous': '–†–∞—Å—Ç—É—â–∞—è –ª—É–Ω–∞',
      'waxing gibbous': '–†–∞—Å—Ç—É—â–∞—è –ª—É–Ω–∞',
      'Full Moon': '–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ',
      'full moon': '–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ',
      'Waning Gibbous': '–£–±—ã–≤–∞—é—â–∞—è –ª—É–Ω–∞',
      'waning gibbous': '–£–±—ã–≤–∞—é—â–∞—è –ª—É–Ω–∞',
      'Last Quarter': '–ü–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å',
      'last quarter': '–ü–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å',
      'Third Quarter': '–¢—Ä–µ—Ç—å—è —á–µ—Ç–≤–µ—Ä—Ç—å',
      'third quarter': '–¢—Ä–µ—Ç—å—è —á–µ—Ç–≤–µ—Ä—Ç—å',
      'Waning Crescent': '–£–±—ã–≤–∞—é—â–∞—è –ª—É–Ω–∞',
      'waning crescent': '–£–±—ã–≤–∞—é—â–∞—è –ª—É–Ω–∞',
    };

    return translations[moonPhase] ?? moonPhase;
  }
}