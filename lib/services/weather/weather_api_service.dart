// –ü—É—Ç—å: lib/services/weather/weather_api_service.dart
// –í–ê–ñ–ù–û: –ó–∞–º–µ–Ω–∏—Ç—å –≤–µ—Å—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª –Ω–∞ —ç—Ç–æ—Ç –∫–æ–¥

import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:flutter/material.dart';
import '../../models/weather_api_model.dart';
import '../../models/fishing_note_model.dart';
import '../../config/api_keys.dart';
import '../../localization/app_localizations.dart';

class WeatherApiService {
  static const String _baseUrl = 'https://api.weatherapi.com/v1';

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º API –∫–ª—é—á –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
  static String get _apiKey => ApiKeys.weatherApiKey;

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ API –∫–ª—é—á–∞
  bool get hasValidApiKey => ApiKeys.hasWeatherKey;

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã
  Future<WeatherApiResponse> getCurrentWeather({
    required double latitude,
    required double longitude,
    BuildContext? context,
  }) async {
    if (!hasValidApiKey) {
      debugPrint(
        '‚ùå ${_getDebugText(context, 'weather_api_key_not_configured_debug')}',
      );
      debugPrint(
        'üìù ${_getDebugText(context, 'current_key')}: ${ApiKeys.getMaskedKey(_apiKey)}',
      );
      throw Exception(_getErrorText(context, 'weather_api_key_not_configured'));
    }

    try {
      final url =
          '$_baseUrl/current.json?key=$_apiKey&q=$latitude,$longitude&aqi=no';
      debugPrint(
        'üå§Ô∏è ${_getDebugText(context, 'current_weather_request')}: $latitude, $longitude',
      );

      final response = await http
          .get(Uri.parse(url), headers: {'Content-Type': 'application/json'})
          .timeout(const Duration(seconds: 10));

      debugPrint(
        'üå§Ô∏è ${_getDebugText(context, 'weather_api_response')}: ${response.statusCode}',
      );

      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        debugPrint(
          '‚úÖ ${_getDebugText(context, 'weather_received_successfully')}: ${data['location']['name']}',
        );
        return WeatherApiResponse.fromJson(data);
      } else {
        final errorBody = response.body;
        debugPrint(
          '‚ùå ${_getDebugText(context, 'weather_api_error')}: ${response.statusCode}',
        );
        debugPrint('‚ùå ${_getDebugText(context, 'error_body')}: $errorBody');

        if (response.statusCode == 401) {
          throw Exception(_getErrorText(context, 'weather_api_invalid_key'));
        } else if (response.statusCode == 403) {
          throw Exception(_getErrorText(context, 'weather_api_access_denied'));
        } else {
          throw Exception(
            'Weather API error: ${response.statusCode} - $errorBody',
          );
        }
      }
    } catch (e) {
      debugPrint(
        '‚ùå ${_getDebugText(context, 'error_getting_current_weather')}: $e',
      );
      rethrow;
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã
  Future<WeatherApiResponse> getForecast({
    required double latitude,
    required double longitude,
    required int days,
    BuildContext? context,
  }) async {
    if (!hasValidApiKey) {
      debugPrint(
        '‚ùå ${_getDebugText(context, 'weather_api_key_not_configured_debug')}',
      );
      debugPrint(
        'üìù ${_getDebugText(context, 'current_key')}: ${ApiKeys.getMaskedKey(_apiKey)}',
      );
      throw Exception(_getErrorText(context, 'weather_api_key_not_configured'));
    }

    try {
      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –≤–∞—à–µ–≥–æ –ø–ª–∞–Ω–∞ (–¥–æ 7 –¥–Ω–µ–π)
      final limitedDays = days > 7 ? 7 : days;

      final url =
          '$_baseUrl/forecast.json?key=$_apiKey&q=$latitude,$longitude&days=$limitedDays&aqi=no&alerts=no';
      debugPrint(
        'üå§Ô∏è ${_getDebugText(context, 'forecast_request')} $limitedDays ${_getDebugText(context, 'days_for_coordinates')}: $latitude, $longitude',
      );

      final response = await http
          .get(Uri.parse(url), headers: {'Content-Type': 'application/json'})
          .timeout(const Duration(seconds: 15));

      debugPrint(
        'üå§Ô∏è ${_getDebugText(context, 'weather_api_response')}: ${response.statusCode}',
      );

      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        debugPrint(
          '‚úÖ ${_getDebugText(context, 'forecast_received_successfully')}: ${data['forecast']['forecastday'].length} ${_getDebugText(context, 'days_received')}',
        );

        // –û–¢–õ–ê–î–ö–ê –†–ï–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–• –û–¢ API
        _debugApiData(data);

        return WeatherApiResponse.fromJson(data);
      } else {
        final errorBody = response.body;
        debugPrint(
          '‚ùå ${_getDebugText(context, 'weather_api_error')}: ${response.statusCode}',
        );
        debugPrint('‚ùå ${_getDebugText(context, 'error_body')}: $errorBody');

        if (response.statusCode == 401) {
          throw Exception(_getErrorText(context, 'weather_api_invalid_key'));
        } else if (response.statusCode == 403) {
          throw Exception(_getErrorText(context, 'weather_api_access_denied'));
        } else {
          throw Exception(
            'Weather API error: ${response.statusCode} - $errorBody',
          );
        }
      }
    } catch (e) {
      debugPrint('‚ùå ${_getDebugText(context, 'error_getting_forecast')}: $e');
      rethrow;
    }
  }

  /// –ù–û–í–´–ô –ú–ï–¢–û–î: –û—Ç–ª–∞–¥–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç API
  void _debugApiData(Map<String, dynamic> data) {
    try {
      debugPrint('üîç ===== –û–¢–õ–ê–î–ö–ê –î–ê–ù–ù–´–• –û–¢ API =====');

      final current = data['current'];
      final forecast = data['forecast']['forecastday'];

      debugPrint('üìç –õ–æ–∫–∞—Ü–∏—è: ${data['location']['name']}, ${data['location']['region']}');
      debugPrint('üïê –í—Ä–µ–º—è: ${current['last_updated']}');

      debugPrint('üå°Ô∏è –¢–ï–ö–£–©–ê–Ø –¢–ï–ú–ü–ï–†–ê–¢–£–†–ê: ${current['temp_c']}¬∞C');
      debugPrint('üå°Ô∏è –û–©–£–©–ê–ï–¢–°–Ø –ö–ê–ö: ${current['feelslike_c']}¬∞C');
      debugPrint('üí® –í–ï–¢–ï–†: ${current['wind_kph']} –∫–º/—á, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${current['wind_dir']}');
      debugPrint('üíß –í–õ–ê–ñ–ù–û–°–¢–¨: ${current['humidity']}%');
      debugPrint('üìä –î–ê–í–õ–ï–ù–ò–ï: ${current['pressure_mb']} –º–± (${(current['pressure_mb'] * 0.75).round()} –º–º —Ä—Ç.—Å—Ç.)');
      debugPrint('üëÅÔ∏è –í–ò–î–ò–ú–û–°–¢–¨: ${current['vis_km']} –∫–º');
      debugPrint('‚òÄÔ∏è –£–§-–ò–ù–î–ï–ö–°: ${current['uv']}');
      debugPrint('‚òÅÔ∏è –û–ë–õ–ê–ß–ù–û–°–¢–¨: ${current['cloud']}%');
      debugPrint('üå§Ô∏è –£–°–õ–û–í–ò–Ø: ${current['condition']['text']}');

      debugPrint('üìÖ –ü–†–û–ì–ù–û–ó –ù–ê ${forecast.length} –î–ù–ï–ô:');
      for (int i = 0; i < forecast.length && i < 3; i++) {
        final day = forecast[i];
        final dayData = day['day'];
        final astro = day['astro'];

        debugPrint('üìÖ –î–µ–Ω—å ${i + 1} (${day['date']}):');
        debugPrint('   üå°Ô∏è –ú–∏–Ω: ${dayData['mintemp_c']}¬∞C, –ú–∞–∫—Å: ${dayData['maxtemp_c']}¬∞C');
        debugPrint('   üí® –ú–∞–∫—Å –≤–µ—Ç–µ—Ä: ${dayData['maxwind_kph']} –∫–º/—á');
        debugPrint('   üíß –°—Ä–µ–¥–Ω—è—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å: ${dayData['avghumidity']}%');
        debugPrint('   ‚òÄÔ∏è –î–ù–ï–í–ù–û–ô –£–§: ${dayData['uv'] ?? 'N/A'}');
        debugPrint('   üåÖ –í–æ—Å—Ö–æ–¥: ${astro['sunrise']}');
        debugPrint('   üåá –ó–∞–∫–∞—Ç: ${astro['sunset']}');
        debugPrint('   üåô –§–∞–∑–∞ –ª—É–Ω—ã: ${astro['moon_phase']}');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—á–∞—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        final hours = day['hour'] as List;
        if (hours.length >= 16) {
          final hour15 = hours[15]; // 15:00
          debugPrint('   üïí –í 15:00:');
          debugPrint('      üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${hour15['temp_c']}¬∞C');
          debugPrint('      üí® –í–µ—Ç–µ—Ä: ${hour15['wind_kph']} –∫–º/—á, ${hour15['wind_dir']}');
          debugPrint('      üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: ${hour15['humidity']}%');
          debugPrint('      üìä –î–∞–≤–ª–µ–Ω–∏–µ: ${hour15['pressure_mb']} –º–±');
          debugPrint('      üåßÔ∏è –®–∞–Ω—Å –¥–æ–∂–¥—è: ${hour15['chance_of_rain']}%');
          debugPrint('      ‚òÄÔ∏è –£–§ –≤ 15:00: ${hour15['uv'] ?? 'N/A'}');
        }
      }

      debugPrint('üîç ===== –ö–û–ù–ï–¶ –û–¢–õ–ê–î–ö–ò =====');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏ –¥–∞–Ω–Ω—ã—Ö: $e');
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ
  Future<WeatherApiResponse> getHistoricalWeather({
    required double latitude,
    required double longitude,
    required DateTime date,
    BuildContext? context,
  }) async {
    if (!hasValidApiKey) {
      debugPrint(
        '‚ùå ${_getDebugText(context, 'weather_api_key_not_configured_debug')}',
      );
      throw Exception(_getErrorText(context, 'weather_api_key_not_configured'));
    }

    try {
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
      final dateString =
          '${date.year}-${date.month.toString().padLeft(2, '0')}-${date.day.toString().padLeft(2, '0')}';

      final url =
          '$_baseUrl/history.json?key=$_apiKey&q=$latitude,$longitude&dt=$dateString';
      debugPrint(
        'üìÖ –ó–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞ $dateString –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: $latitude, $longitude',
      );

      final response = await http
          .get(Uri.parse(url), headers: {'Content-Type': 'application/json'})
          .timeout(const Duration(seconds: 15));

      debugPrint('üìÖ –ò—Å—Ç–æ—Ä–∏—è –ø–æ–≥–æ–¥—ã –æ—Ç–≤–µ—Ç: ${response.statusCode}');

      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        debugPrint('‚úÖ –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∑–∞ $dateString');
        return WeatherApiResponse.fromJson(data);
      } else {
        final errorBody = response.body;
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: ${response.statusCode}');
        debugPrint('‚ùå –¢–µ–ª–æ –æ—à–∏–±–∫–∏: $errorBody');

        if (response.statusCode == 401) {
          throw Exception(_getErrorText(context, 'weather_api_invalid_key'));
        } else if (response.statusCode == 403) {
          throw Exception(_getErrorText(context, 'weather_api_access_denied'));
        } else {
          throw Exception(
            'Weather API History error: ${response.statusCode} - $errorBody',
          );
        }
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: $e');
      rethrow;
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –¥–∞–≤–ª–µ–Ω–∏–∏ (–∏—Å—Ç–æ—Ä–∏—è + –ø—Ä–æ–≥–Ω–æ–∑)
  Future<Map<String, dynamic>> getExtendedPressureData({
    required double latitude,
    required double longitude,
    BuildContext? context,
  }) async {
    if (!hasValidApiKey) {
      throw Exception(_getErrorText(context, 'weather_api_key_not_set'));
    }

    try {
      debugPrint(
        'üîÑ ${_getDebugText(context, 'getting_extended_pressure_data')}',
      );

      List<WeatherApiResponse> allData = [];
      final now = DateTime.now();

      // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
      debugPrint('üìÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞ 7 –¥–Ω–µ–π...');
      for (int i = 7; i >= 1; i--) {
        try {
          final historyDate = now.subtract(Duration(days: i));
          final historicalData = await getHistoricalWeather(
            latitude: latitude,
            longitude: longitude,
            date: historyDate,
            context: context,
          );
          allData.add(historicalData);

          // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å –ª–∏–º–∏—Ç—ã API
          await Future.delayed(const Duration(milliseconds: 200));
        } catch (e) {
          debugPrint('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ –¥–µ–Ω—å -$i: $e');
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∞–∂–µ –µ—Å–ª–∏ –æ–¥–∏–Ω –∏–∑ –¥–Ω–µ–π –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è
        }
      }

      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 7 –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥
      debugPrint('üîÆ –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ 7 –¥–Ω–µ–π...');
      try {
        final forecast = await getForecast(
          latitude: latitude,
          longitude: longitude,
          days: 7,
          context: context,
        );
        allData.add(forecast);
      } catch (e) {
        debugPrint('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑: $e');
      }

      debugPrint(
        '‚úÖ ${_getDebugText(context, 'extended_data_received')}: ${allData.length} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö',
      );

      return {
        'allData': allData,
        'historicalDays': allData.length - 1, // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–Ω–µ–π
        'hasForecast': allData.isNotEmpty,
      };
    } catch (e) {
      debugPrint(
        '‚ùå ${_getDebugText(context, 'error_getting_extended_data')}: $e',
      );
      rethrow;
    }
  }

  /// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –º–æ–¥–µ–ª—å FishingWeather –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  static FishingWeather convertToFishingWeather(
      WeatherApiResponse weatherData, [
        BuildContext? context,
      ]) {
    try {
      final current = weatherData.current;
      final astro =
      weatherData.forecast.isNotEmpty
          ? weatherData.forecast.first.astro
          : null;

      return FishingWeather(
        temperature: current.tempC,
        feelsLike: current.feelslikeC,
        humidity: current.humidity,
        pressure: current.pressureMb,
        windSpeed: current.windKph,
        windDirection: _translateWindDirection(current.windDir),
        weatherDescription: _generateDescription(current, context),
        cloudCover: current.cloud,
        moonPhase: astro?.moonPhase ?? 'Unknown',
        observationTime: DateTime.now(),
        sunrise: astro?.sunrise ?? '',
        sunset: astro?.sunset ?? '',
        isDay: current.isDay == 1,
      );
    } catch (e) {
      debugPrint(
        '‚ùå ${_getDebugText(context, 'error_converting_weather_data')}: $e',
      );
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      return FishingWeather(
        temperature: 15.0,
        feelsLike: 15.0,
        humidity: 50,
        pressure: 1013.0,
        windSpeed: 5.0,
        windDirection: '–°',
        weatherDescription: _getErrorText(context, 'data_unavailable'),
        cloudCover: 50,
        moonPhase: 'Unknown',
        observationTime: DateTime.now(),
        sunrise: '06:00',
        sunset: '18:00',
        isDay: true,
      );
    }
  }

  /// –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ç—Ä–∞
  static String _translateWindDirection(String direction) {
    const Map<String, String> directions = {
      'N': '–°',
      'NNE': '–°–°–í',
      'NE': '–°–í',
      'ENE': '–í–°–í',
      'E': '–í',
      'ESE': '–í–Æ–í',
      'SE': '–Æ–í',
      'SSE': '–Æ–Æ–í',
      'S': '–Æ',
      'SSW': '–Æ–Æ–ó',
      'SW': '–Æ–ó',
      'WSW': '–ó–Æ–ó',
      'W': '–ó',
      'WNW': '–ó–°–ó',
      'NW': '–°–ó',
      'NNW': '–°–°–ó',
    };
    return directions[direction] ?? direction;
  }

  /// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–≥–æ–¥—ã —Å –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–µ–π
  static String _generateDescription(Current current, [BuildContext? context]) {
    final temp = current.tempC.round();
    final feelsLike = current.feelslikeC.round();
    final wind = (current.windKph / 3.6).round();
    final humidity = current.humidity;
    final pressure = (current.pressureMb / 1.333).round();

    if (context != null) {
      final localizations = AppLocalizations.of(context);
      return '${current.condition.text}, $temp¬∞C, ${localizations.translate('feels_like_short')} $feelsLike¬∞C\n'
          '${localizations.translate('wind_short')}: ${_translateWindDirection(current.windDir)}, $wind –º/—Å\n'
          '${localizations.translate('humidity_short')}: $humidity%, ${localizations.translate('pressure_short')}: $pressure –º–º —Ä—Ç.—Å—Ç.\n'
          '${localizations.translate('cloudiness_short')}: ${current.cloud}%';
    } else {
      // Fallback –¥–ª—è —Å–ª—É—á–∞–µ–≤ –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
      return '${current.condition.text}, $temp¬∞C, –æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ $feelsLike¬∞C\n'
          '–í–µ—Ç–µ—Ä: ${_translateWindDirection(current.windDir)}, $wind –º/—Å\n'
          '–í–ª–∞–∂–Ω–æ—Å—Ç—å: $humidity%, –î–∞–≤–ª–µ–Ω–∏–µ: $pressure –º–º —Ä—Ç.—Å—Ç.\n'
          '–û–±–ª–∞—á–Ω–æ—Å—Ç—å: ${current.cloud}%';
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ—à–∏–±–æ–∫
  static String _getErrorText(BuildContext? context, String key) {
    if (context != null) {
      return AppLocalizations.of(context).translate(key);
    }
    // Fallback –Ω–∞ —Ä—É—Å—Å–∫–∏–π –¥–ª—è —Å–ª—É—á–∞–µ–≤ –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    return _getRussianFallback(key);
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è debug —Å–æ–æ–±—â–µ–Ω–∏–π
  static String _getDebugText(BuildContext? context, String key) {
    if (context != null) {
      return AppLocalizations.of(context).translate(key);
    }
    // Fallback –Ω–∞ —Ä—É—Å—Å–∫–∏–π –¥–ª—è —Å–ª—É—á–∞–µ–≤ –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    return _getRussianFallback(key);
  }

  /// Fallback –ø–µ—Ä–µ–≤–æ–¥—ã –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
  static String _getRussianFallback(String key) {
    const Map<String, String> fallbacks = {
      'weather_api_key_not_configured':
      'WeatherAPI –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ó–∞–º–µ–Ω–∏—Ç–µ "—Ç—É—Ç –º–æ–π –∫–ª—é—á" –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∫–ª—é—á –≤ config/api_keys.dart',
      'weather_api_invalid_key':
      '–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á WeatherAPI. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á –≤ config/api_keys.dart',
      'weather_api_access_denied':
      '–î–æ—Å—Ç—É–ø –∫ WeatherAPI –∑–∞–ø—Ä–µ—â–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏',
      'weather_api_key_not_set': 'WeatherAPI –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω',
      'current_weather_request': '–ó–∞–ø—Ä–æ—Å —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç',
      'forecast_request': '–ó–∞–ø—Ä–æ—Å –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –Ω–∞',
      'days_for_coordinates': '–¥–Ω–µ–π –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç',
      'weather_api_response': '–û—Ç–≤–µ—Ç Weather API',
      'weather_received_successfully': '–ü–æ–≥–æ–¥–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞',
      'forecast_received_successfully': '–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω',
      'days_received': '–¥–Ω–µ–π',
      'getting_extended_pressure_data':
      '–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –¥–∞–≤–ª–µ–Ω–∏–∏...',
      'extended_data_received': '–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã',
      'feels_like_short': '–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫',
      'wind_short': '–í–µ—Ç–µ—Ä',
      'humidity_short': '–í–ª–∞–∂–Ω–æ—Å—Ç—å',
      'pressure_short': '–î–∞–≤–ª–µ–Ω–∏–µ',
      'cloudiness_short': '–û–±–ª–∞—á–Ω–æ—Å—Ç—å',
      'data_unavailable': '–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã',
      'weather_api_key_not_configured_debug':
      'WeatherAPI –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ config/api_keys.dart',
      'current_key': '–¢–µ–∫—É—â–∏–π –∫–ª—é—á',
      'weather_api_error': '–û—à–∏–±–∫–∞ Weather API',
      'error_body': '–¢–µ–ª–æ –æ—à–∏–±–∫–∏',
      'error_getting_current_weather': '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã',
      'error_getting_forecast': '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã',
      'error_getting_extended_data': '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö',
      'error_converting_weather_data': '–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –ø–æ–≥–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö',
    };
    return fallbacks[key] ?? key;
  }
}