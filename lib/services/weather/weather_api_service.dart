// –ü—É—Ç—å: lib/services/weather/weather_api_service.dart

import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:flutter/foundation.dart';
import '../../models/weather_api_model.dart';
import '../../config/api_keys.dart';
import '../../utils/network_utils.dart';
import '../../models/fishing_note_model.dart';

class WeatherApiService {
  static const String _baseUrl = 'https://api.weatherapi.com/v1';

  // Singleton pattern
  static final WeatherApiService _instance = WeatherApiService._internal();
  factory WeatherApiService() => _instance;
  WeatherApiService._internal();

  /// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
  Future<WeatherApiResponse> getCurrentWeather({
    required double latitude,
    required double longitude,
    bool includeAirQuality = false,
  }) async {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
    final isConnected = await NetworkUtils.isNetworkAvailable();
    if (!isConnected) {
      throw Exception('–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É');
    }

    final query = '$latitude,$longitude';

    final uri = Uri.parse('$_baseUrl/current.json').replace(queryParameters: {
      'key': ApiKeys.weatherApiKey,
      'q': query,
      'aqi': includeAirQuality ? 'yes' : 'no',
      'lang': 'ru', // –†—É—Å—Å–∫–∏–π —è–∑—ã–∫ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏–π
    });

    try {
      debugPrint('üå§Ô∏è –ó–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã: $uri');

      final response = await http.get(
        uri,
        headers: {
          'Content-Type': 'application/json',
        },
      ).timeout(const Duration(seconds: 10));

      debugPrint('üå§Ô∏è –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.statusCode}');

      if (response.statusCode == 200) {
        final jsonData = json.decode(response.body);
        debugPrint('‚úÖ –ü–æ–≥–æ–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');

        return WeatherApiResponse.fromJson(jsonData);
      } else {
        final errorData = json.decode(response.body);
        final errorMessage = errorData['error']?['message'] ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
        throw Exception('–û—à–∏–±–∫–∞ API: $errorMessage');
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã: $e');
      rethrow;
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π
  Future<WeatherApiResponse> getForecast({
    required double latitude,
    required double longitude,
    int days = 3,
    bool includeAirQuality = false,
    bool includeAlerts = false,
  }) async {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
    final isConnected = await NetworkUtils.isNetworkAvailable();
    if (!isConnected) {
      throw Exception('–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É');
    }

    // –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–æ 3 –¥–Ω–µ–π
    if (days > 3) {
      days = 3;
      debugPrint('‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–æ –¥–æ 3 –¥–Ω–µ–π –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–ª–∞–Ω–∞');
    }

    final query = '$latitude,$longitude';

    final uri = Uri.parse('$_baseUrl/forecast.json').replace(queryParameters: {
      'key': ApiKeys.weatherApiKey,
      'q': query,
      'days': days.toString(),
      'aqi': includeAirQuality ? 'yes' : 'no',
      'alerts': includeAlerts ? 'yes' : 'no',
      'lang': 'ru',
    });

    try {
      debugPrint('üå§Ô∏è –ó–∞–ø—Ä–æ—Å –ø—Ä–æ–≥–Ω–æ–∑–∞: $uri');

      final response = await http.get(
        uri,
        headers: {
          'Content-Type': 'application/json',
        },
      ).timeout(const Duration(seconds: 15));

      debugPrint('üå§Ô∏è –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞: ${response.statusCode}');

      if (response.statusCode == 200) {
        final jsonData = json.decode(response.body);
        debugPrint('‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ');

        return WeatherApiResponse.fromJson(jsonData);
      } else {
        final errorData = json.decode(response.body);
        final errorMessage = errorData['error']?['message'] ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
        throw Exception('–û—à–∏–±–∫–∞ API: $errorMessage');
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞: $e');
      rethrow;
    }
  }

  /// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö WeatherAPI –≤ –º–æ–¥–µ–ª—å FishingWeather –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  static FishingWeather convertToFishingWeather(WeatherApiResponse weatherData) {
    final current = weatherData.current;
    final location = weatherData.location;

    // –ü–æ–ª—É—á–∞–µ–º –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–æ–≥–Ω–æ–∑–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
    String sunrise = '';
    String sunset = '';

    if (weatherData.forecast.isNotEmpty) {
      final today = weatherData.forecast.first;
      sunrise = today.astro.sunrise;
      sunset = today.astro.sunset;
    }

    return FishingWeather(
      temperature: current.tempC,
      feelsLike: current.feelslikeC,
      humidity: current.humidity,
      pressure: current.pressureMb,
      windSpeed: current.windKph / 3.6, // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–º/—á –≤ –º/—Å
      windDirection: current.windDir,
      weatherDescription: current.condition.text,
      cloudCover: current.cloud,
      moonPhase: weatherData.forecast.isNotEmpty
          ? weatherData.forecast.first.astro.moonPhase
          : '–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã',
      observationTime: DateTime.now(),
      sunrise: sunrise,
      sunset: sunset,
      isDay: current.isDay == 1,
    );
  }
}