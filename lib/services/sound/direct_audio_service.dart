// –ü—É—Ç—å: lib/services/sound/direct_audio_service.dart

import 'dart:async';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';
import 'package:audioplayers/audioplayers.dart';
import 'package:path_provider/path_provider.dart';
import 'dart:io';

class DirectAudioService {
  static final DirectAudioService _instance = DirectAudioService._internal();

  factory DirectAudioService() {
    return _instance;
  }

  DirectAudioService._internal();

  final Map<String, AudioPlayer> _activePlayers = {};
  final Map<String, String> _tempFilePaths = {};
  bool _initialized = false;

  // –ó–≤—É–∫–∏ –∏ –∏—Ö –ø—É—Ç–∏
  final Map<String, String> _soundAssetPaths = {
    'default_alert.mp3': 'assets/sounds/default_alert.mp3',
    'fish_splash.mp3': 'assets/sounds/fish_splash.mp3',
    'bell.mp3': 'assets/sounds/bell.mp3',
    'alarm.mp3': 'assets/sounds/alarm.mp3',
  };

  Future<void> initialize() async {
    if (_initialized) return;

    debugPrint('üéµ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DirectAudioService...');

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏ –∫–æ–ø–∏—Ä—É–µ–º –∑–≤—É–∫–∏ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
      await _prepareAudioFiles();
      _initialized = true;
      debugPrint('‚úÖ DirectAudioService —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ DirectAudioService: $e');
    }
  }

  // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ (–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ö –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é)
  Future<void> _prepareAudioFiles() async {
    try {
      final tempDir = await getTemporaryDirectory();

      for (final entry in _soundAssetPaths.entries) {
        final soundName = entry.key;
        final assetPath = entry.value;

        try {
          // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ—Å—É—Ä—Å–æ–≤
          final ByteData data = await rootBundle.load(assetPath);
          final List<int> bytes = data.buffer.asUint8List(
            data.offsetInBytes,
            data.lengthInBytes,
          );

          // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
          final tempFile = File('${tempDir.path}/$soundName');
          await tempFile.writeAsBytes(bytes);

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
          _tempFilePaths[soundName] = tempFile.path;

          debugPrint(
            '‚úÖ –ó–≤—É–∫ $soundName —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: ${tempFile.path}',
          );
        } catch (e) {
          debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–≤—É–∫–∞ $soundName: $e');
        }
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤: $e');
    }
  }

  // –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
  Future<bool> playSound(String soundName) async {
    if (!_initialized) {
      await initialize();
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è —ç—Ç–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
    final playerId = '${soundName}_${DateTime.now().millisecondsSinceEpoch}';

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–≤—É–∫ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
      if (!_tempFilePaths.containsKey(soundName)) {
        debugPrint('‚ùå –ó–≤—É–∫ $soundName –Ω–µ –Ω–∞–π–¥–µ–Ω –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏');
        return false;
      }

      final filePath = _tempFilePaths[soundName]!;
      final player = AudioPlayer();
      _activePlayers[playerId] = player;

      debugPrint('üéµ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞ $soundName –∏–∑ —Ñ–∞–π–ª–∞ $filePath');

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º DeviceFileSource –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
      final source = DeviceFileSource(filePath);
      await player.play(source);

      debugPrint('‚úÖ –ó–≤—É–∫ $soundName –∑–∞–ø—É—â–µ–Ω —Å ID $playerId');

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—á–∏—â–µ–Ω–∏–µ –ø–ª–µ–µ—Ä–∞ –ø–æ—Å–ª–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
      player.onPlayerComplete.listen((event) {
        _cleanupPlayer(playerId);
      });

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–∞–π–º–µ—Ä –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø–ª–µ–µ—Ä–∞ (–µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ–π–¥–µ—Ç –Ω–µ —Ç–∞–∫)
      Timer(Duration(seconds: 5), () {
        _cleanupPlayer(playerId);
      });

      return true;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ –∑–≤—É–∫–∞ $soundName: $e');
      _cleanupPlayer(playerId);

      // –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥
      return _playWithAlternativeMethod(soundName);
    }
  }

  // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
  Future<bool> _playWithAlternativeMethod(String soundName) async {
    try {
      debugPrint('üéµ –ü–æ–ø—ã—Ç–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞ $soundName');

      final playerId =
          'alt_${soundName}_${DateTime.now().millisecondsSinceEpoch}';
      final player = AudioPlayer();
      _activePlayers[playerId] = player;

      // –ü—É—Ç—å –∫ —Ä–µ—Å—É—Ä—Å—É
      final assetPath = _soundAssetPaths[soundName];
      if (assetPath == null) {
        debugPrint('‚ùå –ü—É—Ç—å –∫ —Ä–µ—Å—É—Ä—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∑–≤—É–∫–∞ $soundName');
        return false;
      }

      // –ü—Ä–æ–±—É–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ —Ä–µ—Å—É—Ä—Å–æ–≤
      final source = AssetSource(assetPath.replaceFirst('assets/', ''));
      await player.play(source);

      debugPrint(
        '‚úÖ –ó–≤—É–∫ $soundName –∑–∞–ø—É—â–µ–Ω –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º –º–µ—Ç–æ–¥–æ–º —Å ID $playerId',
      );

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—á–∏—â–µ–Ω–∏–µ –ø–ª–µ–µ—Ä–∞ –ø–æ—Å–ª–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
      player.onPlayerComplete.listen((event) {
        _cleanupPlayer(playerId);
      });

      Timer(Duration(seconds: 5), () {
        _cleanupPlayer(playerId);
      });

      return true;
    } catch (e) {
      debugPrint(
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ –∑–≤—É–∫–∞ $soundName: $e',
      );
      return false;
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ –ø–ª–µ–µ—Ä–∞ –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
  void _cleanupPlayer(String playerId) {
    try {
      if (_activePlayers.containsKey(playerId)) {
        final player = _activePlayers[playerId]!;
        player.stop();
        player.dispose();
        _activePlayers.remove(playerId);
        debugPrint('üßπ –ü–ª–µ–µ—Ä $playerId –æ—á–∏—â–µ–Ω');
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø–ª–µ–µ—Ä–∞ $playerId: $e');
    }
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –ø–ª–µ–µ—Ä—ã
  void stopAllSounds() {
    for (final playerId in _activePlayers.keys.toList()) {
      _cleanupPlayer(playerId);
    }
    debugPrint('üîá –í—Å–µ –∑–≤—É–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∑–≤—É–∫–∞
  bool isSoundAvailable(String soundName) {
    return _soundAssetPaths.containsKey(soundName) ||
        _tempFilePaths.containsKey(soundName);
  }

  // –¢–µ—Å—Ç –∑–≤—É–∫–∞ (–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ)
  Future<Map<String, dynamic>> testSound(String soundName) async {
    if (!_initialized) {
      await initialize();
    }

    final result = {
      'sound': soundName,
      'assetPath': _soundAssetPaths[soundName],
      'tempFilePath': _tempFilePaths[soundName],
      'assetExists': false,
      'tempFileExists': false,
      'playAttempt': false,
      'playSuccess': false,
      'error': null,
    };

    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–∞
      if (_soundAssetPaths.containsKey(soundName)) {
        try {
          await rootBundle.load(_soundAssetPaths[soundName]!);
          result['assetExists'] = true;
        } catch (e) {
          result['error'] = '–†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω: $e';
        }
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
      if (_tempFilePaths.containsKey(soundName)) {
        final file = File(_tempFilePaths[soundName]!);
        result['tempFileExists'] = await file.exists();
      }

      // –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
      result['playAttempt'] = true;
      result['playSuccess'] = await playSound(soundName);
    } catch (e) {
      result['error'] = e.toString();
    }

    return result;
  }

  // –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
  void dispose() {
    stopAllSounds();
    _initialized = false;
    debugPrint('üéµ DirectAudioService –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω');
  }
}
