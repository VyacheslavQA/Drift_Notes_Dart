import 'dart:async';
import 'dart:convert';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:flutter/foundation.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'notification_service.dart';
import '../models/notification_model.dart';
import 'firebase/firebase_service.dart';

class FirebaseMessagingService {
  static final FirebaseMessagingService _instance = FirebaseMessagingService._internal();
  factory FirebaseMessagingService() => _instance;
  FirebaseMessagingService._internal();

  final FirebaseMessaging _firebaseMessaging = FirebaseMessaging.instance;
  final NotificationService _notificationService = NotificationService();
  final FirebaseService _firebaseService = FirebaseService();

  String? _fcmToken;
  bool _isInitialized = false;

  // –ö–ª—é—á–∏ –¥–ª—è SharedPreferences
  static const String _fcmTokenKey = 'fcm_token';
  static const String _fcmEnabledKey = 'fcm_enabled';

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase Cloud Messaging
  Future<void> initialize() async {
    if (_isInitialized) return;

    try {
      debugPrint('üî• –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase Cloud Messaging...');

      // 1. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
      await _requestPermissions();

      // 2. –ü–æ–ª—É—á–∞–µ–º FCM —Ç–æ–∫–µ–Ω
      await _getFCMToken();

      // 3. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
      _setupMessageHandlers();

      // 4. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
      await _handleInitialMessage();

      _isInitialized = true;
      debugPrint('‚úÖ Firebase Cloud Messaging –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ FCM: $e');
    }
  }

  /// –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –Ω–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  Future<void> _requestPermissions() async {
    try {
      final settings = await _firebaseMessaging.requestPermission(
        alert: true,
        badge: true,
        sound: true,
        provisional: false,
        criticalAlert: false,
        carPlay: false,
        announcement: false,
      );

      if (settings.authorizationStatus == AuthorizationStatus.authorized) {
        debugPrint('‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã');
        await _setFCMEnabled(true);
      } else if (settings.authorizationStatus == AuthorizationStatus.provisional) {
        debugPrint('‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω—ã –ø—Ä–æ–≤–∏–∑–æ—Ä–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
        await _setFCMEnabled(true);
      } else {
        debugPrint('‚ùå –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã');
        await _setFCMEnabled(false);
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π FCM: $e');
      await _setFCMEnabled(false);
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ FCM —Ç–æ–∫–µ–Ω–∞
  Future<void> _getFCMToken() async {
    try {
      _fcmToken = await _firebaseMessaging.getToken();

      if (_fcmToken != null) {
        debugPrint('‚úÖ FCM —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: ${_fcmToken!.substring(0, 20)}...');


        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ
        await _saveFCMToken(_fcmToken!);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω)
        await _sendTokenToServer(_fcmToken!);
      } else {
        debugPrint('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å FCM —Ç–æ–∫–µ–Ω');
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è FCM —Ç–æ–∫–µ–Ω–∞: $e');
    }
  }

  /// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
  void _setupMessageHandlers() {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–æ–≥–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ foreground
    FirebaseMessaging.onMessage.listen(_handleForegroundMessage);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ–≥–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ background
    FirebaseMessaging.onMessageOpenedApp.listen(_handleBackgroundMessageTap);

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
    _firebaseMessaging.onTokenRefresh.listen(_onTokenRefresh);
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ foreground
  Future<void> _handleForegroundMessage(RemoteMessage message) async {
    try {
      debugPrint('üì± –ü–æ–ª—É—á–µ–Ω–æ FCM —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ foreground: ${message.messageId}');

      await _processRemoteMessage(message, isBackground: false);
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ foreground —Å–æ–æ–±—â–µ–Ω–∏—è: $e');
    }
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–∑ background
  Future<void> _handleBackgroundMessageTap(RemoteMessage message) async {
    try {
      debugPrint('üì± –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ FCM —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–∑ background: ${message.messageId}');

      await _processRemoteMessage(message, isBackground: true, isTap: true);
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ background tap: $e');
    }
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∏–∑ terminated state)
  Future<void> _handleInitialMessage() async {
    try {
      final initialMessage = await _firebaseMessaging.getInitialMessage();

      if (initialMessage != null) {
        debugPrint('üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ –∏–∑ FCM —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${initialMessage.messageId}');
        await _processRemoteMessage(initialMessage, isBackground: true, isTap: true);
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ initial message: $e');
    }
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
  Future<void> _onTokenRefresh(String newToken) async {
    try {
      debugPrint('üîÑ FCM —Ç–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω');

      _fcmToken = newToken;
      await _saveFCMToken(newToken);
      await _sendTokenToServer(newToken);
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: $e');
    }
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  Future<void> _processRemoteMessage(
      RemoteMessage message, {
        bool isBackground = false,
        bool isTap = false,
      }) async {
    try {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
      final title = message.notification?.title ?? '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ';
      final body = message.notification?.body ?? '';
      final data = message.data;

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      final notificationType = _getNotificationTypeFromData(data);

      // –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      final notification = NotificationModel(
        id: message.messageId ?? DateTime.now().millisecondsSinceEpoch.toString(),
        title: title,
        message: body,
        type: notificationType,
        timestamp: DateTime.now(),
        data: data,
        isRead: isTap, // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, —Å—á–∏—Ç–∞–µ–º –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º
      );

      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      await _notificationService.addNotification(notification);

      debugPrint('‚úÖ FCM —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: $title');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ FCM —Å–æ–æ–±—â–µ–Ω–∏—è: $e');
    }
  }

  /// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö
  NotificationType _getNotificationTypeFromData(Map<String, dynamic> data) {
    final type = data['type']?.toString() ?? '';

    switch (type) {
      case 'fishing_reminder':
        return NotificationType.fishingReminder;
      case 'tournament_reminder':
        return NotificationType.tournamentReminder;
      case 'bite_forecast':
        return NotificationType.biteForecast;
      case 'weather_update':
        return NotificationType.weatherUpdate;
      case 'new_features':
        return NotificationType.newFeatures;
      case 'system_update':
        return NotificationType.systemUpdate;
      case 'policy_update':
        return NotificationType.policyUpdate;
      default:
        return NotificationType.general;
    }
  }

  /// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–∫–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
  Future<void> _sendTokenToServer(String token) async {
    try {
      if (!_firebaseService.isUserLoggedIn) {
        debugPrint('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, —Ç–æ–∫–µ–Ω –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
        return;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await _firebaseService.updateUserProfile({
        'fcmToken': token,
        'fcmTokenUpdatedAt': DateTime.now().toIso8601String(),
        'devicePlatform': defaultTargetPlatform.name,
      });

      debugPrint('‚úÖ FCM —Ç–æ–∫–µ–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä: $e');
    }
  }

  /// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ FCM —Ç–æ–∫–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ
  Future<void> _saveFCMToken(String token) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setString(_fcmTokenKey, token);
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è FCM —Ç–æ–∫–µ–Ω–∞: $e');
    }
  }

  /// –ó–∞–≥—Ä—É–∑–∫–∞ FCM —Ç–æ–∫–µ–Ω–∞
  Future<String?> _loadFCMToken() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      return prefs.getString(_fcmTokenKey);
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ FCM —Ç–æ–∫–µ–Ω–∞: $e');
      return null;
    }
  }

  /// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ FCM
  Future<void> _setFCMEnabled(bool enabled) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setBool(_fcmEnabledKey, enabled);
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ FCM: $e');
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ FCM
  Future<bool> isFCMEnabled() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      return prefs.getBool(_fcmEnabledKey) ?? false;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ FCM: $e');
      return false;
    }
  }

  /// –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–æ–ø–∏–∫
  Future<void> subscribeToTopic(String topic) async {
    try {
      await _firebaseMessaging.subscribeToTopic(topic);
      debugPrint('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–æ–ø–∏–∫: $topic');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ç–æ–ø–∏–∫ $topic: $e');
    }
  }

  /// –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Ç–æ–ø–∏–∫–∞
  Future<void> unsubscribeFromTopic(String topic) async {
    try {
      await _firebaseMessaging.unsubscribeFromTopic(topic);
      debugPrint('‚úÖ –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Ç–æ–ø–∏–∫–∞: $topic');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç —Ç–æ–ø–∏–∫–∞ $topic: $e');
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ FCM —Ç–æ–∫–µ–Ω–∞
  String? get fcmToken => _fcmToken;

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  bool get isInitialized => _isInitialized;
}

/// Background message handler (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å top-level —Ñ—É–Ω–∫—Ü–∏–µ–π)
@pragma('vm:entry-point')
Future<void> firebaseMessagingBackgroundHandler(RemoteMessage message) async {
  debugPrint('üì± Background FCM —Å–æ–æ–±—â–µ–Ω–∏–µ: ${message.messageId}');

  // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É background —Å–æ–æ–±—â–µ–Ω–∏–π
  // –ù–∞–ø—Ä–∏–º–µ—Ä, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
}