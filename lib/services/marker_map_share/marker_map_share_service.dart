// –ü—É—Ç—å: lib/services/marker_map_share/marker_map_share_service.dart

import 'dart:convert';
import 'dart:io';
import 'dart:typed_data';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:path_provider/path_provider.dart';
import 'package:share_plus/share_plus.dart';
import 'package:uuid/uuid.dart';
import '../../models/marker_map_model.dart';
import '../../localization/app_localizations.dart';
import '../../constants/app_constants.dart';

class MarkerMapShareService {
  static const String _fileExtension = '.fmm'; // Fishing Marker Map
  static const String _mimeType = 'application/octet-stream';
  static const int _currentVersion = 1;

  // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞
  static const String _appName = 'Fishing Buddy';
  static const String _fileFormatName = 'Fishing Marker Map';

  /// üöÄ –≠–ö–°–ü–û–†–¢: –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –º–∞—Ä–∫–µ—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã
  static Future<bool> exportMarkerMap({
    required MarkerMapModel markerMap,
    required BuildContext context,
  }) async {
    try {
      debugPrint('üì§ –ù–∞—á–∏–Ω–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç –º–∞—Ä–∫–µ—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã: ${markerMap.name}');

      // 1. –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
      final exportData = _createExportData(markerMap);

      // 2. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JSON
      final jsonString = json.encode(exportData);
      final bytes = utf8.encode(jsonString);

      // 3. –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
      final tempDir = await getTemporaryDirectory();
      final fileName = _sanitizeFileName(markerMap.name) + _fileExtension;
      final file = File('${tempDir.path}/$fileName');

      await file.writeAsBytes(bytes);

      debugPrint('‚úÖ –§–∞–π–ª —Å–æ–∑–¥–∞–Ω: ${file.path}');

      // 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–µ –º–µ–Ω—é "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è"
      final result = await Share.shareXFiles(
        [XFile(file.path)],
        text: AppLocalizations.of(context).translate('share_marker_map_text')
            .replaceAll('{mapName}', markerMap.name),
        subject: '${AppLocalizations.of(context).translate('marker_map')}: ${markerMap.name}',
      );

      debugPrint('üì§ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏: ${result.status}');

      // 5. –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
      Future.delayed(const Duration(seconds: 5), () async {
        try {
          if (await file.exists()) {
            await file.delete();
            debugPrint('üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω');
          }
        } catch (e) {
          debugPrint('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: $e');
        }
      });

      return result.status == ShareResultStatus.success;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: $e');
      return false;
    }
  }

  /// üîç –ò–ú–ü–û–†–¢: –ü–∞—Ä—Å–∏–Ω–≥ —Ñ–∞–π–ª–∞ –º–∞—Ä–∫–µ—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã
  static Future<ImportResult> parseMarkerMapFile(String filePath) async {
    try {
      debugPrint('üì• –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Ñ–∞–π–ª–∞: $filePath');

      // 1. –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
      final file = File(filePath);
      if (!await file.exists()) {
        return ImportResult.error('–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      final bytes = await file.readAsBytes();
      final jsonString = utf8.decode(bytes);

      // 2. –ü–∞—Ä—Å–∏–º JSON
      final Map<String, dynamic> data = json.decode(jsonString);

      // 3. –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–∞
      final validation = _validateImportData(data);
      if (!validation.isValid) {
        return ImportResult.error(validation.error ?? '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞');
      }

      // 4. –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã
      final mapData = data['mapData'] as Map<String, dynamic>;

      // 5. –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å –∫–∞—Ä—Ç—ã —Å –Ω–æ–≤—ã–º ID
      final newId = const Uuid().v4();
      final markerMap = MarkerMapModel.fromJson({
        ...mapData,
        'id': newId,
      });

      debugPrint('‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω: ${markerMap.name}');

      return ImportResult.success(
        markerMap: markerMap,
        originalFileName: data['metadata']['originalFileName'] ?? 'unknown',
        exportDate: DateTime.tryParse(data['metadata']['exportDate'] ?? '') ?? DateTime.now(),
        markersCount: markerMap.markers.length,
      );
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–∞–π–ª–∞: $e');
      return ImportResult.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: $e');
    }
  }

  /// üìä –ò–ú–ü–û–†–¢: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç—ã –≤ –±–∞–∑—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static Future<bool> importMarkerMap({
    required MarkerMapModel markerMap,
    required Function(MarkerMapModel) onImport,
  }) async {
    try {
      debugPrint('üíæ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –≤ –±–∞–∑—É: ${markerMap.name}');

      // –í—ã–∑—ã–≤–∞–µ–º callback –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ Repository
      await onImport(markerMap);

      debugPrint('‚úÖ –ö–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞');
      return true;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∫–∞—Ä—Ç—ã: $e');
      return false;
    }
  }

  /// üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
  static Map<String, dynamic> _createExportData(MarkerMapModel markerMap) {
    return {
      'fileFormat': _fileFormatName,
      'version': _currentVersion,
      'metadata': {
        'appName': _appName,
        'exportDate': DateTime.now().toIso8601String(),
        'originalFileName': _sanitizeFileName(markerMap.name),
        'markersCount': markerMap.markers.length,
      },
      'mapData': {
        // –ò—Å–∫–ª—é—á–∞–µ–º userId –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        'name': markerMap.name,
        'date': markerMap.date.millisecondsSinceEpoch,
        'sector': markerMap.sector,
        'markers': markerMap.markers.map((marker) {
          // –û—á–∏—â–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã –æ—Ç —Å–ª—É–∂–µ–±–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
          final cleanMarker = Map<String, dynamic>.from(marker);
          cleanMarker.remove('_hitboxCenter');
          cleanMarker.remove('_hitboxRadius');
          return cleanMarker;
        }).toList(),
      },
    };
  }

  /// ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–∞
  static ValidationResult _validateImportData(Map<String, dynamic> data) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
      if (!data.containsKey('fileFormat') || data['fileFormat'] != _fileFormatName) {
        return ValidationResult(false, '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞');
      }

      if (!data.containsKey('version')) {
        return ValidationResult(false, '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤–µ—Ä—Å–∏—è —Ñ–∞–π–ª–∞');
      }

      final version = data['version'] as int?;
      if (version == null || version > _currentVersion) {
        return ValidationResult(false, '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –≤–µ—Ä—Å–∏—è —Ñ–∞–π–ª–∞');
      }

      if (!data.containsKey('mapData')) {
        return ValidationResult(false, '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã');
      }

      final mapData = data['mapData'] as Map<String, dynamic>?;
      if (mapData == null) {
        return ValidationResult(false, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∫–∞—Ä—Ç—ã
      if (!mapData.containsKey('name') || (mapData['name'] as String?)?.trim().isEmpty == true) {
        return ValidationResult(false, '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–æ–¥–æ–µ–º–∞');
      }

      if (!mapData.containsKey('date')) {
        return ValidationResult(false, '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–∞—Ç–∞ –∫–∞—Ä—Ç—ã');
      }

      if (!mapData.containsKey('markers')) {
        return ValidationResult(false, '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –º–∞—Ä–∫–µ—Ä—ã');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ä–∫–µ—Ä—ã
      final markers = mapData['markers'] as List?;
      if (markers == null) {
        return ValidationResult(false, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–∞—Ä–∫–µ—Ä–æ–≤');
      }

      // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –º–∞—Ä–∫–µ—Ä
      for (final marker in markers) {
        if (marker is! Map<String, dynamic>) {
          return ValidationResult(false, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –º–∞—Ä–∫–µ—Ä–∞');
        }

        final markerMap = marker as Map<String, dynamic>;
        if (!markerMap.containsKey('id') ||
            !markerMap.containsKey('rayIndex') ||
            !markerMap.containsKey('distance')) {
          return ValidationResult(false, '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–∞—Ä–∫–µ—Ä–∞');
        }
      }

      return ValidationResult(true);
    } catch (e) {
      return ValidationResult(false, '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: $e');
    }
  }

  /// üßπ –û—á–∏—Å—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
  static String _sanitizeFileName(String fileName) {
    // –£–¥–∞–ª—è–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    return fileName
        .replaceAll(RegExp(r'[<>:"/\\|?*]'), '_')
        .replaceAll(RegExp(r'\s+'), '_')
        .substring(0, fileName.length > 50 ? 50 : fileName.length);
  }
}

/// üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–º–ø–æ—Ä—Ç–∞
class ImportResult {
  final bool isSuccess;
  final MarkerMapModel? markerMap;
  final String? error;
  final String? originalFileName;
  final DateTime? exportDate;
  final int? markersCount;

  ImportResult.success({
    required this.markerMap,
    this.originalFileName,
    this.exportDate,
    this.markersCount,
  }) : isSuccess = true, error = null;

  ImportResult.error(this.error)
      : isSuccess = false,
        markerMap = null,
        originalFileName = null,
        exportDate = null,
        markersCount = null;
}

/// ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
class ValidationResult {
  final bool isValid;
  final String? error;

  ValidationResult(this.isValid, [this.error]);
}