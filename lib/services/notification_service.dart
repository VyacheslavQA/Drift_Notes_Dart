// –ü—É—Ç—å: lib/services/notification_service.dart

import 'dart:async';
import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:uuid/uuid.dart';
import '../models/notification_model.dart';
import 'local_push_notification_service.dart';  // –ù–û–í–´–ô –ò–ú–ü–û–†–¢

class NotificationService {
  static final NotificationService _instance = NotificationService._internal();
  factory NotificationService() => _instance;
  NotificationService._internal();

  final Uuid _uuid = const Uuid();
  final List<NotificationModel> _notifications = [];

  // –ù–û–í–´–ô: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å push-—Å–µ—Ä–≤–∏—Å–æ–º
  final LocalPushNotificationService _pushService = LocalPushNotificationService();

  // Stream –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è UI –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
  final StreamController<List<NotificationModel>> _notificationsController =
  StreamController<List<NotificationModel>>.broadcast();

  Stream<List<NotificationModel>> get notificationsStream => _notificationsController.stream;

  // –ö–ª—é—á –¥–ª—è SharedPreferences
  static const String _notificationsKey = 'local_notifications';

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
  Future<void> initialize() async {
    debugPrint('üì± –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');

    try {
      // –ù–û–í–´–ô: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º push-—Å–µ—Ä–≤–∏—Å
      await _pushService.initialize();

      await _loadNotificationsFromStorage();

      // –ù–û–í–´–ô: –û–±–Ω–æ–≤–ª—è–µ–º –±–µ–π–¥–∂ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      await _updateBadgeCount();

      // –ù–û–í–´–ô: –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –Ω–∞–∂–∞—Ç–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      _pushService.notificationTapStream.listen(_handleNotificationTap);

      debugPrint('‚úÖ –°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${_notifications.length} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: $e');
    }
  }

  /// –ù–û–í–´–ô: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  void _handleNotificationTap(String payload) {
    try {
      final payloadData = json.decode(payload);
      final notificationId = payloadData['id'] as String?;

      if (notificationId != null) {
        // –û—Ç–º–µ—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏
        markAsRead(notificationId);
        debugPrint('üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ: $notificationId');
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: $e');
    }
  }

  /// –ó–∞–≥—Ä—É–∑–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
  Future<void> _loadNotificationsFromStorage() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final notificationsJson = prefs.getStringList(_notificationsKey) ?? [];

      _notifications.clear();

      for (final notificationJson in notificationsJson) {
        try {
          final notificationMap = json.decode(notificationJson);
          final notification = NotificationModel.fromJson(notificationMap);
          _notifications.add(notification);
        } catch (e) {
          debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: $e');
        }
      }

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
      _notifications.sort((a, b) => b.timestamp.compareTo(a.timestamp));

      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–º–∞–∫—Å–∏–º—É–º 100)
      if (_notifications.length > 100) {
        _notifications.removeRange(100, _notifications.length);
        await _saveNotificationsToStorage();
      }

    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: $e');
    }
  }

  /// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
  Future<void> _saveNotificationsToStorage() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final notificationsJson = _notifications
          .map((notification) => json.encode(notification.toJson()))
          .toList();

      await prefs.setStringList(_notificationsKey, notificationsJson);
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: $e');
    }
  }

  /// –ù–û–í–´–ô: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –±–µ–π–¥–∂–∞
  Future<void> _updateBadgeCount() async {
    try {
      final unreadCount = getUnreadCount();
      await _pushService.setBadgeCount(unreadCount);
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–µ–π–¥–∂–∞: $e');
    }
  }

  /// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  Future<void> addNotification(NotificationModel notification) async {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–ø–æ ID)
      final existingIndex = _notifications.indexWhere((n) => n.id == notification.id);

      if (existingIndex != -1) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ
        _notifications[existingIndex] = notification;
      } else {
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
        _notifications.insert(0, notification);
      }

      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      if (_notifications.length > 100) {
        _notifications.removeRange(100, _notifications.length);
      }

      await _saveNotificationsToStorage();

      // –ù–û–í–´–ô: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      await _pushService.showNotification(notification);

      // –ù–û–í–´–ô: –û–±–Ω–æ–≤–ª—è–µ–º –±–µ–π–¥–∂
      await _updateBadgeCount();

      // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª–µ–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
      _notificationsController.add(List.from(_notifications));

      debugPrint('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: ${notification.title}');

    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: $e');
    }
  }

  /// –°–æ–∑–¥–∞–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥)
  Future<void> createNotification({
    required String title,
    required String message,
    NotificationType type = NotificationType.general,
    Map<String, dynamic> data = const {},
  }) async {
    final notification = NotificationModel(
      id: _uuid.v4(),
      title: title,
      message: message,
      type: type,
      timestamp: DateTime.now(),
      data: data,
    );

    await addNotification(notification);
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  List<NotificationModel> getAllNotifications() {
    return List.from(_notifications);
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  List<NotificationModel> getUnreadNotifications() {
    return _notifications.where((notification) => !notification.isRead).toList();
  }

  /// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  int getUnreadCount() {
    return _notifications.where((notification) => !notification.isRead).length;
  }

  /// –û—Ç–º–µ—Ç–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
  Future<void> markAsRead(String notificationId) async {
    try {
      final index = _notifications.indexWhere((n) => n.id == notificationId);

      if (index != -1) {
        _notifications[index] = _notifications[index].copyWith(isRead: true);
        await _saveNotificationsToStorage();

        // –ù–û–í–´–ô: –û–±–Ω–æ–≤–ª—è–µ–º –±–µ–π–¥–∂
        await _updateBadgeCount();

        _notificationsController.add(List.from(_notifications));

        debugPrint('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ: $notificationId');
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ: $e');
    }
  }

  /// –û—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
  Future<void> markAllAsRead() async {
    try {
      bool hasChanges = false;

      for (int i = 0; i < _notifications.length; i++) {
        if (!_notifications[i].isRead) {
          _notifications[i] = _notifications[i].copyWith(isRead: true);
          hasChanges = true;
        }
      }

      if (hasChanges) {
        await _saveNotificationsToStorage();

        // –ù–û–í–´–ô: –û—á–∏—â–∞–µ–º –±–µ–π–¥–∂ –ø—Ä–∏ –ø—Ä–æ—á—Ç–µ–Ω–∏–∏ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        await _pushService.clearBadge();

        _notificationsController.add(List.from(_notifications));

        debugPrint('‚úÖ –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ');
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö: $e');
    }
  }

  /// –£–¥–∞–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  Future<void> removeNotification(String notificationId) async {
    try {
      final initialLength = _notifications.length;
      _notifications.removeWhere((notification) => notification.id == notificationId);

      if (_notifications.length != initialLength) {
        await _saveNotificationsToStorage();

        // –ù–û–í–´–ô: –û–±–Ω–æ–≤–ª—è–µ–º –±–µ–π–¥–∂
        await _updateBadgeCount();

        // –ù–û–í–´–ô: –û—Ç–º–µ–Ω—è–µ–º push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await _pushService.cancelNotification(notificationId);

        _notificationsController.add(List.from(_notifications));

        debugPrint('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ: $notificationId');
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: $e');
    }
  }

  /// –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  Future<void> clearAllNotifications() async {
    try {
      _notifications.clear();
      await _saveNotificationsToStorage();

      // –ù–û–í–´–ô: –û—á–∏—â–∞–µ–º –≤—Å–µ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –±–µ–π–¥–∂
      await _pushService.cancelAllNotifications();
      await _pushService.clearBadge();

      _notificationsController.add(List.from(_notifications));

      debugPrint('‚úÖ –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: $e');
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ —Ç–∏–ø—É
  List<NotificationModel> getNotificationsByType(NotificationType type) {
    return _notifications.where((notification) => notification.type == type).toList();
  }

  /// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
  Future<void> addTestNotification() async {
    await createNotification(
      title: '–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
      message: '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã',
      type: NotificationType.general,
      data: {
        'test': true,
        'timestamp': DateTime.now().millisecondsSinceEpoch,
      },
    );
  }

  /// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö –¥–ª—è —Ä—ã–±–∞–ª–∫–∏
  Future<void> addFavorableConditionsNotification({
    required int scorePoints,
    required String bestTime,
    Map<String, dynamic> additionalData = const {},
  }) async {
    await createNotification(
      title: '–û—Ç–ª–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ä—ã–±–∞–ª–∫–∏!',
      message: '–ü—Ä–æ–≥–Ω–æ–∑ –∫–ª–µ–≤–∞: $scorePoints –±–∞–ª–ª–æ–≤ –∏–∑ 100. –õ—É—á—à–µ–µ –≤—Ä–µ–º—è: $bestTime',
      type: NotificationType.biteForecast,
      data: {
        'scorePoints': scorePoints,
        'bestTime': bestTime,
        ...additionalData,
      },
    );
  }

  /// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã
  Future<void> addWeatherChangeNotification({
    required String title,
    required String description,
    Map<String, dynamic> weatherData = const {},
  }) async {
    await createNotification(
      title: title,
      message: description,
      type: NotificationType.weatherUpdate,
      data: {
        'weatherChange': true,
        ...weatherData,
      },
    );
  }

  /// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ä—ã–±–∞–ª–∫–µ
  Future<void> addFishingReminder({
    required String location,
    required DateTime scheduledTime,
    Map<String, dynamic> additionalData = const {},
  }) async {
    await createNotification(
      title: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ä—ã–±–∞–ª–∫–µ',
      message: '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä—ã–±–∞–ª–∫–∞ –≤ $location',
      type: NotificationType.fishingReminder,
      data: {
        'location': location,
        'scheduledTime': scheduledTime.toIso8601String(),
        ...additionalData,
      },
    );
  }

  /// –ù–û–í–´–ô: –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∑–≤—É–∫–∞
  get soundSettings => _pushService.soundSettings;

  /// –ù–û–í–´–ô: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∑–≤—É–∫–∞
  Future<void> updateSoundSettings(settings) async {
    await _pushService.updateSoundSettings(settings);
  }

  /// –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
  void dispose() {
    _notificationsController.close();
    _pushService.dispose();
  }
}