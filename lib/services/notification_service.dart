// –ü—É—Ç—å: lib/services/notification_service.dart

import 'dart:async';
import 'dart:convert';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:uuid/uuid.dart';
import '../models/notification_model.dart';
import 'local_push_notification_service.dart';

class NotificationService {
  static final NotificationService _instance = NotificationService._internal();
  factory NotificationService() => _instance;
  NotificationService._internal();

  final Uuid _uuid = const Uuid();
  final List<NotificationModel> _notifications = [];

  // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å push-—Å–µ—Ä–≤–∏—Å–æ–º
  final LocalPushNotificationService _pushService = LocalPushNotificationService();

  // Stream –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è UI –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
  final StreamController<List<NotificationModel>> _notificationsController = StreamController<List<NotificationModel>>.broadcast();

  Stream<List<NotificationModel>> get notificationsStream => _notificationsController.stream;

  // –ö–ª—é—á –¥–ª—è SharedPreferences
  static const String _notificationsKey = 'local_notifications';

  /// –§–∏–ª—å—Ç—Ä –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
  String _cleanErrorMessage(String message, String title) {
    final lowercaseMessage = message.toLowerCase();
    final lowercaseTitle = title.toLowerCase();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫
    if (_isNetworkError(lowercaseMessage, lowercaseTitle)) {
      return '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É';
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫–∏ API
    if (_isApiError(lowercaseMessage, lowercaseTitle)) {
      return '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ';
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫–∏ –ø–æ–≥–æ–¥—ã
    if (_isWeatherError(lowercaseMessage, lowercaseTitle)) {
      return '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–≥–æ–¥—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç';
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
    if (_isTechnicalError(message)) {
      return '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ';
    }

    // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–±–æ–ª—å—à–µ 200 —Å–∏–º–≤–æ–ª–æ–≤), –æ–±—Ä–µ–∑–∞–µ–º
    if (message.length > 200) {
      return '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö';
    }

    return message;
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫
  bool _isNetworkError(String message, String title) {
    final networkKeywords = [
      'socketexception',
      'failed host lookup',
      'network is unreachable',
      'connection timed out',
      'connection refused',
      'no address associated with hostname',
      'clientexception',
      'handshakeexception',
      'certificateexception',
      '–Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è',
      '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ',
      '–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç',
      'no internet',
      'connection error',
      'network error',
    ];

    final combinedText = '$message $title';
    return networkKeywords.any((keyword) => combinedText.contains(keyword));
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–æ–∫ API
  bool _isApiError(String message, String title) {
    final apiKeywords = [
      'weather api error',
      'api key',
      'invalid key',
      'access denied',
      'unauthorized',
      '401',
      '403',
      '500',
      '502',
      '503',
      '504',
      '–æ—à–∏–±–∫–∞ api',
      '–Ω–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á',
    ];

    final combinedText = '$message $title';
    return apiKeywords.any((keyword) => combinedText.contains(keyword));
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–æ–∫ –ø–æ–≥–æ–¥—ã
  bool _isWeatherError(String message, String title) {
    final weatherKeywords = [
      'weather',
      '–ø–æ–≥–æ–¥–∞',
      '–ø—Ä–æ–≥–Ω–æ–∑',
      'forecast',
      '–º–µ—Ç–µ–æ',
      'open-meteo',
      'weatherapi',
    ];

    final errorKeywords = [
      '–æ—à–∏–±–∫–∞',
      'error',
      'failed',
      'exception',
    ];

    final combinedText = '$message $title';
    return weatherKeywords.any((keyword) => combinedText.contains(keyword)) &&
        errorKeywords.any((keyword) => combinedText.contains(keyword));
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ (–ø–æ –¥–ª–∏–Ω–µ –∏ –Ω–∞–ª–∏—á–∏—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤)
  bool _isTechnicalError(String message) {
    // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —ç—Ç–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞
    if (message.length > 300) return true;

    final technicalKeywords = [
      'exception',
      'stacktrace',
      'at line',
      'http://',
      'https://',
      'api.',
      '.com/',
      'latitude=',
      'longitude=',
      'temperature_',
      'pressure_',
      'wind_',
      'humidity_',
      'errno',
      'uri=',
      'stacktrace',
      'runtimeerror',
      'formatexception',
    ];

    return technicalKeywords.any((keyword) => message.toLowerCase().contains(keyword));
  }

  /// –û—á–∏—Å—Ç–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –æ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
  String _cleanErrorTitle(String title) {
    if (title.toLowerCase().contains('–æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏') &&
        title.toLowerCase().contains('exception')) {
      return '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏';
    }

    if (title.toLowerCase().contains('clientexception') ||
        title.toLowerCase().contains('socketexception')) {
      return '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è';
    }

    if (title.toLowerCase().contains('weather') &&
        title.toLowerCase().contains('error')) {
      return '–û—à–∏–±–∫–∞ –ø–æ–≥–æ–¥—ã';
    }

    // –ï—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, —Å–æ–∫—Ä–∞—â–∞–µ–º
    if (title.length > 50) {
      return '–û—à–∏–±–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è';
    }

    return title;
  }

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
  Future<void> initialize() async {
    // ‚úÖ –£–ë–†–ê–ù–û: debugPrint('üì± –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');

    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º push-—Å–µ—Ä–≤–∏—Å
      await _pushService.initialize();

      await _loadNotificationsFromStorage();

      // –û–±–Ω–æ–≤–ª—è–µ–º –±–µ–π–¥–∂ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      await _updateBadgeCount();

      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint('‚úÖ –°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${_notifications.length} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
    } catch (e) {
      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –¥–µ—Ç–∞–ª—è–º–∏ –æ—à–∏–±–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    }
  }

  /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  void _handleNotificationTap(String payload) {
    try {
      final payloadData = json.decode(payload);
      final notificationId = payloadData['id'] as String?;

      if (notificationId != null) {
        // –û—Ç–º–µ—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏
        markAsRead(notificationId);
        // ‚úÖ –£–ë–†–ê–ù–û: debugPrint('üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ: $notificationId');
      }
    } catch (e) {
      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –¥–µ—Ç–∞–ª—è–º–∏ –æ—à–∏–±–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    }
  }

  /// –ó–∞–≥—Ä—É–∑–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
  Future<void> _loadNotificationsFromStorage() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final notificationsJson = prefs.getStringList(_notificationsKey) ?? [];

      _notifications.clear();

      for (final notificationJson in notificationsJson) {
        try {
          final notificationMap = json.decode(notificationJson);
          final notification = NotificationModel.fromJson(notificationMap);
          _notifications.add(notification);
        } catch (e) {
          // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –¥–µ—Ç–∞–ª—è–º–∏ –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        }
      }

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
      _notifications.sort((a, b) => b.timestamp.compareTo(a.timestamp));

      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–º–∞–∫—Å–∏–º—É–º 100)
      if (_notifications.length > 100) {
        _notifications.removeRange(100, _notifications.length);
        await _saveNotificationsToStorage();
      }
    } catch (e) {
      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –¥–µ—Ç–∞–ª—è–º–∏ –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    }
  }

  /// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
  Future<void> _saveNotificationsToStorage() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final notificationsJson = _notifications
          .map((notification) => json.encode(notification.toJson()))
          .toList();

      await prefs.setStringList(_notificationsKey, notificationsJson);
    } catch (e) {
      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –¥–µ—Ç–∞–ª—è–º–∏ –æ—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    }
  }

  /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –±–µ–π–¥–∂–∞
  Future<void> _updateBadgeCount() async {
    try {
      final unreadCount = getUnreadCount();
      await _pushService.setBadgeCount(unreadCount);
      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint('‚úÖ –ë–µ–π–¥–∂ –æ–±–Ω–æ–≤–ª–µ–Ω: $unreadCount');
    } catch (e) {
      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –¥–µ—Ç–∞–ª—è–º–∏ –æ—à–∏–±–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–µ–π–¥–∂–∞
    }
  }

  /// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –æ—à–∏–±–æ–∫
  Future<void> addNotification(NotificationModel notification) async {
    try {
      // –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
      final cleanedTitle = _cleanErrorTitle(notification.title);
      final cleanedMessage = _cleanErrorMessage(notification.message, notification.title);

      // –°–æ–∑–¥–∞–µ–º –æ—á–∏—â–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      final cleanedNotification = notification.copyWith(
        title: cleanedTitle,
        message: cleanedMessage,
      );

      // ‚úÖ –£–ë–†–ê–ù–û: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –¥–µ—Ç–∞–ª—è–º–∏

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–ø–æ ID)
      final existingIndex = _notifications.indexWhere((n) => n.id == cleanedNotification.id);

      if (existingIndex != -1) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ
        _notifications[existingIndex] = cleanedNotification;
      } else {
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
        _notifications.insert(0, cleanedNotification);
      }

      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      if (_notifications.length > 100) {
        _notifications.removeRange(100, _notifications.length);
      }

      await _saveNotificationsToStorage();

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—á–∏—â–µ–Ω–Ω–æ–µ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      await _pushService.showNotification(cleanedNotification);

      // –û–±–Ω–æ–≤–ª—è–µ–º –±–µ–π–¥–∂
      await _updateBadgeCount();

      // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª–µ–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
      _notificationsController.add(List.from(_notifications));

      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: ${cleanedNotification.title}');
    } catch (e) {
      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –¥–µ—Ç–∞–ª—è–º–∏ –æ—à–∏–±–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    }
  }

  /// –°–æ–∑–¥–∞–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥)
  Future<void> createNotification({
    required String title,
    required String message,
    NotificationType type = NotificationType.general,
    Map<String, dynamic> data = const {},
  }) async {
    final notification = NotificationModel(
      id: _uuid.v4(),
      title: title,
      message: message,
      type: type,
      timestamp: DateTime.now(),
      data: data,
    );

    await addNotification(notification);
  }

  /// –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ç—É—Ä–Ω–∏—Ä–∞—Ö
  Future<void> addTournamentReminderNotification({
    required String id,
    required String title,
    required String message,
    required Map<String, dynamic> data,
  }) async {
    try {
      // –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
      String cleanMessage = message;

      // –£–¥–∞–ª—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
      final lines = cleanMessage.split('\n');
      final filteredLines = lines.where((line) {
        return !line.startsWith('eventId:') &&
            !line.startsWith('eventType:') &&
            !line.startsWith('location:') &&
            !line.startsWith('eventTitle:') &&
            !line.startsWith('eventStartDate:') &&
            !line.trim().startsWith('–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:');
      }).toList();

      cleanMessage = filteredLines.join('\n').trim();

      final notification = NotificationModel(
        id: id,
        title: title,
        message: cleanMessage,
        type: NotificationType.tournamentReminder,
        timestamp: DateTime.now(),
        data: data,
      );

      await addNotification(notification);

      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –¥–µ—Ç–∞–ª—è–º–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç—É—Ä–Ω–∏—Ä–µ
    } catch (e) {
      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –¥–µ—Ç–∞–ª—è–º–∏ –æ—à–∏–±–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç—É—Ä–Ω–∏—Ä–µ
    }
  }

  /// –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ä—ã–±–∞–ª–∫–µ
  Future<void> addFishingReminderNotification({
    required String id,
    required String title,
    required String message,
    required Map<String, dynamic> data,
  }) async {
    try {
      // –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
      String cleanMessage = message;

      // –£–¥–∞–ª—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
      final lines = cleanMessage.split('\n');
      final filteredLines = lines.where((line) {
        return !line.startsWith('eventId:') &&
            !line.startsWith('eventType:') &&
            !line.startsWith('location:') &&
            !line.startsWith('eventTitle:') &&
            !line.startsWith('eventStartDate:') &&
            !line.trim().startsWith('–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:');
      }).toList();

      cleanMessage = filteredLines.join('\n').trim();

      final notification = NotificationModel(
        id: id,
        title: title,
        message: cleanMessage,
        type: NotificationType.fishingReminder,
        timestamp: DateTime.now(),
        data: data,
      );

      await addNotification(notification);

      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä—ã–±–∞–ª–∫–µ
    } catch (e) {
      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –¥–µ—Ç–∞–ª—è–º–∏ –æ—à–∏–±–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä—ã–±–∞–ª–∫–µ
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  List<NotificationModel> getAllNotifications() {
    return List.from(_notifications);
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  List<NotificationModel> getUnreadNotifications() {
    return _notifications.where((notification) => !notification.isRead).toList();
  }

  /// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  int getUnreadCount() {
    return _notifications.where((notification) => !notification.isRead).length;
  }

  /// –û—Ç–º–µ—Ç–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
  Future<void> markAsRead(String notificationId) async {
    try {
      final index = _notifications.indexWhere((n) => n.id == notificationId);

      if (index != -1) {
        _notifications[index] = _notifications[index].copyWith(isRead: true);
        await _saveNotificationsToStorage();

        // –û–±–Ω–æ–≤–ª—è–µ–º –±–µ–π–¥–∂
        await _updateBadgeCount();

        _notificationsController.add(List.from(_notifications));

        // ‚úÖ –£–ë–†–ê–ù–û: debugPrint('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ: $notificationId');
      }
    } catch (e) {
      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –¥–µ—Ç–∞–ª—è–º–∏ –æ—à–∏–±–∫–∏ –æ—Ç–º–µ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ
    }
  }

  /// –û—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
  Future<void> markAllAsRead() async {
    try {
      bool hasChanges = false;

      for (int i = 0; i < _notifications.length; i++) {
        if (!_notifications[i].isRead) {
          _notifications[i] = _notifications[i].copyWith(isRead: true);
          hasChanges = true;
        }
      }

      if (hasChanges) {
        await _saveNotificationsToStorage();

        // –û—á–∏—â–∞–µ–º –±–µ–π–¥–∂ –ø—Ä–∏ –ø—Ä–æ—á—Ç–µ–Ω–∏–∏ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        await _pushService.clearBadge();

        _notificationsController.add(List.from(_notifications));

        // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –æ—Ç–º–µ—Ç–∫–∏ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
      }
    } catch (e) {
      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –¥–µ—Ç–∞–ª—è–º–∏ –æ—à–∏–±–∫–∏ –æ—Ç–º–µ—Ç–∫–∏ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
    }
  }

  /// –£–¥–∞–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  Future<void> removeNotification(String notificationId) async {
    try {
      final initialLength = _notifications.length;
      _notifications.removeWhere((notification) => notification.id == notificationId);

      if (_notifications.length != initialLength) {
        await _saveNotificationsToStorage();

        // –û–±–Ω–æ–≤–ª—è–µ–º –±–µ–π–¥–∂
        await _updateBadgeCount();

        // –û—Ç–º–µ–Ω—è–µ–º push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await _pushService.cancelNotification(notificationId);

        _notificationsController.add(List.from(_notifications));

        // ‚úÖ –£–ë–†–ê–ù–û: debugPrint('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ: $notificationId');
      }
    } catch (e) {
      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –¥–µ—Ç–∞–ª—è–º–∏ –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    }
  }

  /// –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  Future<void> clearAllNotifications() async {
    try {
      _notifications.clear();
      await _saveNotificationsToStorage();

      // –û—á–∏—â–∞–µ–º –≤—Å–µ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –±–µ–π–¥–∂
      await _pushService.cancelAllNotifications();
      await _pushService.clearBadge();

      _notificationsController.add(List.from(_notifications));

      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    } catch (e) {
      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –¥–µ—Ç–∞–ª—è–º–∏ –æ—à–∏–±–∫–∏ –æ—á–∏—Å—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ —Ç–∏–ø—É
  List<NotificationModel> getNotificationsByType(NotificationType type) {
    return _notifications.where((notification) => notification.type == type).toList();
  }

  /// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–µ–π
  Future<void> addTestNotification({
    required String title,
    required String message,
  }) async {
    await createNotification(
      title: title,
      message: message,
      type: NotificationType.general,
      data: {'test': true, 'timestamp': DateTime.now().millisecondsSinceEpoch},
    );
  }

  /// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö –¥–ª—è —Ä—ã–±–∞–ª–∫–∏
  Future<void> addFavorableConditionsNotification({
    required String title,
    required String message,
    required int scorePoints,
    required String bestTime,
    Map<String, dynamic> additionalData = const {},
  }) async {
    await createNotification(
      title: title,
      message: message,
      type: NotificationType.biteForecast,
      data: {
        'scorePoints': scorePoints,
        'bestTime': bestTime,
        ...additionalData,
      },
    );
  }

  /// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã
  Future<void> addWeatherChangeNotification({
    required String title,
    required String description,
    Map<String, dynamic> weatherData = const {},
  }) async {
    await createNotification(
      title: title,
      message: description,
      type: NotificationType.weatherUpdate,
      data: {'weatherChange': true, ...weatherData},
    );
  }

  /// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ä—ã–±–∞–ª–∫–µ
  Future<void> addFishingReminder({
    required String title,
    required String message,
    required String location,
    required DateTime scheduledTime,
    Map<String, dynamic> additionalData = const {},
  }) async {
    await createNotification(
      title: title,
      message: message,
      type: NotificationType.fishingReminder,
      data: {
        'location': location,
        'scheduledTime': scheduledTime.toIso8601String(),
        ...additionalData,
      },
    );
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∑–≤—É–∫–∞
  get soundSettings => _pushService.soundSettings;

  /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∑–≤—É–∫–∞
  Future<void> updateSoundSettings(settings) async {
    await _pushService.updateSoundSettings(settings);
  }

  /// –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
  void dispose() {
    _notificationsController.close();
    _pushService.dispose();
  }
}