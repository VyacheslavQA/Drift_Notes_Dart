// –ü—É—Ç—å: lib/services/weather_settings_service.dart
// –í–ê–ñ–ù–û: –ó–∞–º–µ–Ω–∏—Ç—å –≤–µ—Å—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª –Ω–∞ —ç—Ç–æ—Ç –∫–æ–¥

import 'package:shared_preferences/shared_preferences.dart';
import 'package:flutter/material.dart';

enum TemperatureUnit { celsius, fahrenheit }

enum WindSpeedUnit { ms, kmh, mph }

enum PressureUnit { mmhg, hpa, inhg }

class WeatherSettingsService {
  static final WeatherSettingsService _instance =
  WeatherSettingsService._internal();
  factory WeatherSettingsService() => _instance;
  WeatherSettingsService._internal();

  // –ö–ª—é—á–∏ –¥–ª—è SharedPreferences
  static const String _temperatureUnitKey = 'weather_temperature_unit';
  static const String _windSpeedUnitKey = 'weather_wind_speed_unit';
  static const String _pressureUnitKey = 'weather_pressure_unit';
  static const String _barometerCalibrationKey =
      'weather_barometer_calibration';

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  TemperatureUnit _temperatureUnit = TemperatureUnit.celsius;
  WindSpeedUnit _windSpeedUnit = WindSpeedUnit.ms;
  PressureUnit _pressureUnit = PressureUnit.mmhg;
  double _barometerCalibration = 0.0;

  // –î–û–ë–ê–í–õ–ï–ù–û: –¢–µ–∫—É—â–∞—è –ª–æ–∫–∞–ª—å –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
  String _currentLocale = 'ru';

  // –ì–µ—Ç—Ç–µ—Ä—ã
  TemperatureUnit get temperatureUnit => _temperatureUnit;
  WindSpeedUnit get windSpeedUnit => _windSpeedUnit;
  PressureUnit get pressureUnit => _pressureUnit;
  double get barometerCalibration => _barometerCalibration;

  // –î–û–ë–ê–í–õ–ï–ù–û: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–æ–∫–∞–ª–∏
  void setLocale(String locale) {
    _currentLocale = locale;
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è - –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  Future<void> initialize() async {
    await _loadSettings();
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ SharedPreferences
  Future<void> _loadSettings() async {
    try {
      final prefs = await SharedPreferences.getInstance();

      // –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
      final tempIndex = prefs.getInt(_temperatureUnitKey) ?? 0;
      _temperatureUnit = TemperatureUnit.values[tempIndex];

      // –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞
      final windIndex = prefs.getInt(_windSpeedUnitKey) ?? 0;
      _windSpeedUnit = WindSpeedUnit.values[windIndex];

      // –î–∞–≤–ª–µ–Ω–∏–µ
      final pressureIndex = prefs.getInt(_pressureUnitKey) ?? 0;
      _pressureUnit = PressureUnit.values[pressureIndex];

      // –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –±–∞—Ä–æ–º–µ—Ç—Ä–∞
      _barometerCalibration = prefs.getDouble(_barometerCalibrationKey) ?? 0.0;

      debugPrint(
        'üå§Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–≥–æ–¥—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã: T:$_temperatureUnit, W:$_windSpeedUnit, P:$_pressureUnit',
      );
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–≥–æ–¥—ã: $e');
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  Future<void> _saveSettings() async {
    try {
      final prefs = await SharedPreferences.getInstance();

      await prefs.setInt(_temperatureUnitKey, _temperatureUnit.index);
      await prefs.setInt(_windSpeedUnitKey, _windSpeedUnit.index);
      await prefs.setInt(_pressureUnitKey, _pressureUnit.index);
      await prefs.setDouble(_barometerCalibrationKey, _barometerCalibration);

      debugPrint('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–≥–æ–¥—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–≥–æ–¥—ã: $e');
    }
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –µ–¥–∏–Ω–∏—Ü—ã —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
  Future<void> setTemperatureUnit(TemperatureUnit unit) async {
    _temperatureUnit = unit;
    await _saveSettings();
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –µ–¥–∏–Ω–∏—Ü—ã —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤–µ—Ç—Ä–∞
  Future<void> setWindSpeedUnit(WindSpeedUnit unit) async {
    _windSpeedUnit = unit;
    await _saveSettings();
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –µ–¥–∏–Ω–∏—Ü—ã –¥–∞–≤–ª–µ–Ω–∏—è
  Future<void> setPressureUnit(PressureUnit unit) async {
    _pressureUnit = unit;
    await _saveSettings();
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –±–∞—Ä–æ–º–µ—Ç—Ä–∞
  Future<void> setBarometerCalibration(double calibration) async {
    _barometerCalibration = calibration;
    await _saveSettings();
  }

  // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
  double convertTemperature(double celsius) {
    switch (_temperatureUnit) {
      case TemperatureUnit.celsius:
        return celsius;
      case TemperatureUnit.fahrenheit:
        return (celsius * 9 / 5) + 32;
    }
  }

  // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤–µ—Ç—Ä–∞ (–∏–∑ –∫–º/—á)
  double convertWindSpeed(double kmh) {
    switch (_windSpeedUnit) {
      case WindSpeedUnit.ms:
        return kmh / 3.6;
      case WindSpeedUnit.kmh:
        return kmh;
      case WindSpeedUnit.mph:
        return kmh / 1.609344;
    }
  }

  // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –¥–∞–≤–ª–µ–Ω–∏—è (–∏–∑ –º–±–∞—Ä)
  double convertPressure(double mbar) {
    double calibratedPressure = mbar + _barometerCalibration;

    switch (_pressureUnit) {
      case PressureUnit.mmhg:
        return calibratedPressure / 1.333;
      case PressureUnit.hpa:
        return calibratedPressure;
      case PressureUnit.inhg:
        return calibratedPressure / 33.8639;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞ –µ–¥–∏–Ω–∏—Ü—ã —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
  String getTemperatureUnitSymbol() {
    switch (_temperatureUnit) {
      case TemperatureUnit.celsius:
        return '¬∞C';
      case TemperatureUnit.fahrenheit:
        return '¬∞F';
    }
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–æ–≤ —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤–µ—Ç—Ä–∞
  String getWindSpeedUnitSymbol() {
    switch (_windSpeedUnit) {
      case WindSpeedUnit.ms:
        return _currentLocale == 'en' ? 'm/s' : '–º/—Å';
      case WindSpeedUnit.kmh:
        return _currentLocale == 'en' ? 'km/h' : '–∫–º/—á';
      case WindSpeedUnit.mph:
        return 'mph'; // –û–¥–∏–Ω–∞–∫–æ–≤–æ –¥–ª—è –≤—Å–µ—Ö —è–∑—ã–∫–æ–≤
    }
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–æ–≤ –¥–∞–≤–ª–µ–Ω–∏—è
  String getPressureUnitSymbol() {
    switch (_pressureUnit) {
      case PressureUnit.mmhg:
        if (_currentLocale == 'en') {
          return 'mmHg';
        } else {
          return '–º–º —Ä—Ç.—Å—Ç.';
        }
      case PressureUnit.hpa:
        if (_currentLocale == 'en') {
          return 'hPa';
        } else {
          return '–≥–ü–∞';
        }
      case PressureUnit.inhg:
        return 'inHg'; // –û–¥–∏–Ω–∞–∫–æ–≤–æ –¥–ª—è –≤—Å–µ—Ö —è–∑—ã–∫–æ–≤
    }
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –µ–¥–∏–Ω–∏—Ü —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
  String getTemperatureUnitName() {
    switch (_temperatureUnit) {
      case TemperatureUnit.celsius:
        if (_currentLocale == 'en') {
          return 'Celsius';
        } else if (_currentLocale == 'kz') {
          return '–¶–µ–ª—å—Å–∏–π';
        } else {
          return '–¶–µ–ª—å—Å–∏–π';
        }
      case TemperatureUnit.fahrenheit:
        if (_currentLocale == 'en') {
          return 'Fahrenheit';
        } else if (_currentLocale == 'kz') {
          return '–§–∞—Ä–µ–Ω–≥–µ–π—Ç';
        } else {
          return '–§–∞—Ä–µ–Ω–≥–µ–π—Ç';
        }
    }
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –µ–¥–∏–Ω–∏—Ü —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤–µ—Ç—Ä–∞
  String getWindSpeedUnitName() {
    switch (_windSpeedUnit) {
      case WindSpeedUnit.ms:
        if (_currentLocale == 'en') {
          return 'Meters per second';
        } else if (_currentLocale == 'kz') {
          return '–ú–µ—Ç—Ä —Å–µ–∫—É–Ω–¥—ã–Ω–∞';
        } else {
          return '–ú–µ—Ç—Ä—ã –≤ —Å–µ–∫—É–Ω–¥—É';
        }
      case WindSpeedUnit.kmh:
        if (_currentLocale == 'en') {
          return 'Kilometers per hour';
        } else if (_currentLocale == 'kz') {
          return '–ö–∏–ª–æ–º–µ—Ç—Ä —Å–∞“ì–∞—Ç—ã–Ω–∞';
        } else {
          return '–ö–∏–ª–æ–º–µ—Ç—Ä—ã –≤ —á–∞—Å';
        }
      case WindSpeedUnit.mph:
        if (_currentLocale == 'en') {
          return 'Miles per hour';
        } else if (_currentLocale == 'kz') {
          return '–ú–∏–ª—å —Å–∞“ì–∞—Ç—ã–Ω–∞';
        } else {
          return '–ú–∏–ª–∏ –≤ —á–∞—Å';
        }
    }
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –µ–¥–∏–Ω–∏—Ü –¥–∞–≤–ª–µ–Ω–∏—è
  String getPressureUnitName() {
    switch (_pressureUnit) {
      case PressureUnit.mmhg:
        if (_currentLocale == 'en') {
          return 'Millimeters of mercury';
        } else if (_currentLocale == 'kz') {
          return '–°—ã–Ω–∞–ø –±–∞“ì–∞–Ω–∞—Å—ã–Ω—ã“£ –º–∏–ª–ª–∏–º–µ—Ç—Ä—ñ';
        } else {
          return '–ú–∏–ª–ª–∏–º–µ—Ç—Ä—ã —Ä—Ç—É—Ç–Ω–æ–≥–æ —Å—Ç–æ–ª–±–∞';
        }
      case PressureUnit.hpa:
        if (_currentLocale == 'en') {
          return 'Hectopascals';
        } else if (_currentLocale == 'kz') {
          return '–ì–µ–∫—Ç–æ–ø–∞—Å–∫–∞–ª—å';
        } else {
          return '–ì–µ–∫—Ç–æ–ø–∞—Å–∫–∞–ª–∏';
        }
      case PressureUnit.inhg:
        if (_currentLocale == 'en') {
          return 'Inches of mercury';
        } else if (_currentLocale == 'kz') {
          return '–°—ã–Ω–∞–ø –±–∞“ì–∞–Ω–∞—Å—ã–Ω—ã“£ –¥—é–π–º—ñ';
        } else {
          return '–î—é–π–º—ã —Ä—Ç—É—Ç–Ω–æ–≥–æ —Å—Ç–æ–ª–±–∞';
        }
    }
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —Å –µ–¥–∏–Ω–∏—Ü–µ–π
  String formatTemperature(double celsius, {bool showUnit = true}) {
    final converted = convertTemperature(celsius);
    final rounded = converted.round();
    return showUnit ? '$rounded${getTemperatureUnitSymbol()}' : '$rounded';
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤–µ—Ç—Ä–∞ —Å –µ–¥–∏–Ω–∏—Ü–µ–π
  String formatWindSpeed(double kmh, {bool showUnit = true, int decimals = 0}) {
    final converted = convertWindSpeed(kmh);
    final formatted =
    decimals == 0
        ? converted.round().toString()
        : converted.toStringAsFixed(decimals);
    return showUnit ? '$formatted ${getWindSpeedUnitSymbol()}' : formatted;
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–≤–ª–µ–Ω–∏—è —Å –µ–¥–∏–Ω–∏—Ü–µ–π
  String formatPressure(double mbar, {bool showUnit = true, int decimals = 0}) {
    final converted = convertPressure(mbar);
    final formatted =
    decimals == 0
        ? converted.round().toString()
        : converted.toStringAsFixed(decimals);
    return showUnit ? '$formatted ${getPressureUnitSymbol()}' : formatted;
  }
}