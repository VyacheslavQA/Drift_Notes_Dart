// –ü—É—Ç—å: lib/services/bite_forecast_service.dart

import 'dart:math' as math;
import 'package:flutter/material.dart';
import '../models/weather_api_model.dart';
import '../models/bite_forecast_model.dart';
import '../localization/app_localizations.dart';

class BiteForecastService {
  // Singleton pattern
  static final BiteForecastService _instance = BiteForecastService._internal();
  factory BiteForecastService() => _instance;
  BiteForecastService._internal();

  /// –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –∫–ª–µ–≤–∞
  Future<BiteForecastModel> calculateBiteForecast({
    required WeatherApiResponse weather,
    required double latitude,
    required double longitude,
    BuildContext? context,
  }) async {
    debugPrint('üé£ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—á–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –∫–ª–µ–≤–∞...');

    try {
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —Ñ–∞–∫—Ç–æ—Ä—ã
      final factors = await _analyzeAllFactors(weather, latitude, longitude, context);

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
      final overallActivity = _calculateOverallActivity(factors);

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∏ –±–∞–ª–ª—ã
      final scorePoints = (overallActivity * 100).round();
      final level = _determineForecastLevel(scorePoints);

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
      final recommendation = _generateRecommendation(factors, level, context);
      final tips = _generateTips(factors, weather, context);

      // –ù–∞—Ö–æ–¥–∏–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫–Ω–∞
      final bestTimeWindows = _findOptimalTimeWindows(weather, factors, context);

      debugPrint('‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ –∫–ª–µ–≤–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω: $scorePoints –±–∞–ª–ª–æ–≤, —É—Ä–æ–≤–µ–Ω—å: $level');

      return BiteForecastModel(
        overallActivity: overallActivity,
        scorePoints: scorePoints,
        level: level,
        recommendation: recommendation,
        tips: tips,
        factors: factors,
        bestTimeWindows: bestTimeWindows,
        calculatedAt: DateTime.now(),
      );
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –∫–ª–µ–≤–∞: $e');

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      return BiteForecastModel(
        overallActivity: 0.5,
        scorePoints: 50,
        level: BiteForecastLevel.moderate,
        recommendation: context != null
            ? AppLocalizations.of(context).translate('moderate_conditions_recommendation')
            : '–£–º–µ—Ä–µ–Ω–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ä—ã–±–∞–ª–∫–∏',
        tips: [],
        factors: {},
        bestTimeWindows: [],
        calculatedAt: DateTime.now(),
      );
    }
  }

  /// –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤, –≤–ª–∏—è—é—â–∏—Ö –Ω–∞ –∫–ª–µ–≤
  Future<Map<String, BiteFactor>> _analyzeAllFactors(
      WeatherApiResponse weather,
      double latitude,
      double longitude,
      BuildContext? context,
      ) async {
    final factors = <String, BiteFactor>{};

    try {
      // 1. –ê–Ω–∞–ª–∏–∑ –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–≥–æ –¥–∞–≤–ª–µ–Ω–∏—è
      factors['pressure'] = _analyzePressure(weather);

      // 2. –ê–Ω–∞–ª–∏–∑ –≤–µ—Ç—Ä–∞
      factors['wind'] = _analyzeWind(weather);

      // 3. –ê–Ω–∞–ª–∏–∑ —Ñ–∞–∑—ã –ª—É–Ω—ã
      factors['moon'] = _analyzeMoonPhase(weather);

      // 4. –ê–Ω–∞–ª–∏–∑ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
      factors['temperature'] = _analyzeTemperature(weather);

      // 5. –ê–Ω–∞–ª–∏–∑ –æ–±–ª–∞—á–Ω–æ—Å—Ç–∏ –∏ –æ—Å–∞–¥–∫–æ–≤
      factors['cloudiness'] = _analyzeCloudiness(weather);

      // 6. –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
      factors['timeOfDay'] = _analyzeTimeOfDay(weather);

      // 7. –ê–Ω–∞–ª–∏–∑ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏
      factors['humidity'] = _analyzeHumidity(weather);

      debugPrint('üîç –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–∫—Ç–æ—Ä–æ–≤: ${factors.length}');

    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–∞–∫—Ç–æ—Ä–æ–≤: $e');
    }

    return factors;
  }

  /// –ê–Ω–∞–ª–∏–∑ –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–≥–æ –¥–∞–≤–ª–µ–Ω–∏—è
  BiteFactor _analyzePressure(WeatherApiResponse weather) {
    final pressure = weather.current.pressureMb;
    double value = 0.5; // –ë–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    FactorImpact impact = FactorImpact.neutral;
    String description = '–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ';

    // –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —Ä—ã–±–∞–ª–∫–∏: 1010-1025 –≥–ü–∞
    if (pressure >= 1010 && pressure <= 1025) {
      value = 0.8;
      impact = FactorImpact.positive;
      description = '–°—Ç–∞–±–∏–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ, –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ –¥–ª—è –∫–ª–µ–≤–∞';
    } else if (pressure < 1000) {
      value = 0.3;
      impact = FactorImpact.negative;
      description = '–ù–∏–∑–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ, —Ä—ã–±–∞ –ø–∞—Å—Å–∏–≤–Ω–∞';
    } else if (pressure > 1030) {
      value = 0.4;
      impact = FactorImpact.negative;
      description = '–í—ã—Å–æ–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ, –∫–ª–µ–≤ —Å–ª–∞–±—ã–π';
    } else {
      value = 0.6;
      impact = FactorImpact.neutral;
      description = '–£–º–µ—Ä–µ–Ω–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –∫–ª–µ–≤';
    }

    return BiteFactor(
      name: 'pressure',
      value: value,
      weight: 0.25, // –í—ã—Å–æ–∫–∞—è –≤–∞–∂–Ω–æ—Å—Ç—å
      impact: impact,
      description: description,
    );
  }

  /// –ê–Ω–∞–ª–∏–∑ –≤–µ—Ç—Ä–∞
  BiteFactor _analyzeWind(WeatherApiResponse weather) {
    final windKph = weather.current.windKph;
    final windDir = weather.current.windDir;

    double value = 0.5;
    FactorImpact impact = FactorImpact.neutral;
    String description = '–£–º–µ—Ä–µ–Ω–Ω—ã–π –≤–µ—Ç–µ—Ä';

    // –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: 3-15 –∫–º/—á
    if (windKph >= 3 && windKph <= 15) {
      value = 0.8;
      impact = FactorImpact.positive;
      description = '–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä –¥–ª—è —Ä—ã–±–∞–ª–∫–∏';
    } else if (windKph < 3) {
      value = 0.4;
      impact = FactorImpact.negative;
      description = '–®—Ç–∏–ª—å, —Ä—ã–±–∞ –º–µ–Ω–µ–µ –∞–∫—Ç–∏–≤–Ω–∞';
    } else if (windKph > 25) {
      value = 0.2;
      impact = FactorImpact.veryNegative;
      description = '–°–∏–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä, —Ä—ã–±–∞–ª–∫–∞ –∑–∞—Ç—Ä—É–¥–Ω–µ–Ω–∞';
    } else {
      value = 0.6;
      description = '–°–≤–µ–∂–∏–π –≤–µ—Ç–µ—Ä, –ø—Ä–∏–µ–º–ª–µ–º–æ –¥–ª—è —Ä—ã–±–∞–ª–∫–∏';
    }

    // –ë–æ–Ω—É—Å –∑–∞ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞
    if (['S', 'SW', 'SE'].contains(windDir)) {
      value = math.min(1.0, value + 0.1);
      description += ' (—é–∂–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ - –ø–ª—é—Å)';
    }

    return BiteFactor(
      name: 'wind',
      value: value,
      weight: 0.2,
      impact: impact,
      description: description,
    );
  }

  /// –ê–Ω–∞–ª–∏–∑ —Ñ–∞–∑—ã –ª—É–Ω—ã
  BiteFactor _analyzeMoonPhase(WeatherApiResponse weather) {
    if (weather.forecast.isEmpty) {
      return BiteFactor(
        name: 'moon',
        value: 0.5,
        weight: 0.15,
        impact: FactorImpact.neutral,
        description: '–î–∞–Ω–Ω—ã–µ –æ –ª—É–Ω–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã',
      );
    }

    final moonPhase = weather.forecast.first.astro.moonPhase.toLowerCase();
    double value = 0.5;
    FactorImpact impact = FactorImpact.neutral;
    String description = '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ –ª—É–Ω—ã';

    if (moonPhase.contains('new') || moonPhase.contains('full')) {
      value = 0.8;
      impact = FactorImpact.positive;
      description = '–ê–∫—Ç–∏–≤–Ω–∞—è —Ñ–∞–∑–∞ –ª—É–Ω—ã, –∫–ª–µ–≤ —É—Å–∏–ª–µ–Ω';
    } else if (moonPhase.contains('waxing') || moonPhase.contains('waning')) {
      value = 0.6;
      impact = FactorImpact.neutral;
      description = '–ü–µ—Ä–µ—Ö–æ–¥–Ω–∞—è —Ñ–∞–∑–∞ –ª—É–Ω—ã';
    } else {
      value = 0.4;
      impact = FactorImpact.negative;
      description = '–ü–∞—Å—Å–∏–≤–Ω–∞—è —Ñ–∞–∑–∞ –ª—É–Ω—ã';
    }

    return BiteFactor(
      name: 'moon',
      value: value,
      weight: 0.15,
      impact: impact,
      description: description,
    );
  }

  /// –ê–Ω–∞–ª–∏–∑ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
  BiteFactor _analyzeTemperature(WeatherApiResponse weather) {
    final temp = weather.current.tempC;
    double value = 0.5;
    FactorImpact impact = FactorImpact.neutral;
    String description = '–£–º–µ—Ä–µ–Ω–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞';

    // –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è —Ä—ã–±–∞–ª–∫–∏: 15-25¬∞C
    if (temp >= 15 && temp <= 25) {
      value = 0.8;
      impact = FactorImpact.positive;
      description = '–ö–æ–º—Ñ–æ—Ä—Ç–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è —Ä—ã–±–∞–ª–∫–∏';
    } else if (temp < 5) {
      value = 0.3;
      impact = FactorImpact.negative;
      description = '–•–æ–ª–æ–¥–Ω–æ, —Ä—ã–±–∞ –º–∞–ª–æ–∞–∫—Ç–∏–≤–Ω–∞';
    } else if (temp > 30) {
      value = 0.4;
      impact = FactorImpact.negative;
      description = '–ñ–∞—Ä–∫–æ, —Ä—ã–±–∞ —É—Ö–æ–¥–∏—Ç –Ω–∞ –≥–ª—É–±–∏–Ω—É';
    } else {
      value = 0.6;
      description = '–ü—Ä–∏–µ–º–ª–µ–º–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞';
    }

    return BiteFactor(
      name: 'temperature',
      value: value,
      weight: 0.15,
      impact: impact,
      description: description,
    );
  }

  /// –ê–Ω–∞–ª–∏–∑ –æ–±–ª–∞—á–Ω–æ—Å—Ç–∏ –∏ –æ—Å–∞–¥–∫–æ–≤
  BiteFactor _analyzeCloudiness(WeatherApiResponse weather) {
    final cloudCover = weather.current.cloud;
    final condition = weather.current.condition.text.toLowerCase();

    double value = 0.5;
    FactorImpact impact = FactorImpact.neutral;
    String description = '–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å';

    // –õ–µ–≥–∫–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å –ª—É—á—à–µ –¥–ª—è —Ä—ã–±–∞–ª–∫–∏
    if (cloudCover >= 20 && cloudCover <= 70) {
      value = 0.7;
      impact = FactorImpact.positive;
      description = '–û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å';
    } else if (cloudCover < 20) {
      value = 0.5;
      description = '–Ø—Å–Ω–∞—è –ø–æ–≥–æ–¥–∞';
    } else {
      value = 0.4;
      impact = FactorImpact.negative;
      description = '–°–∏–ª—å–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å';
    }

    // –®—Ç—Ä–∞—Ñ –∑–∞ –æ—Å–∞–¥–∫–∏
    if (condition.contains('rain') || condition.contains('drizzle')) {
      value *= 0.7;
      impact = FactorImpact.negative;
      description = '–î–æ–∂–¥—å —É—Ö—É–¥—à–∞–µ—Ç –∫–ª–µ–≤';
    } else if (condition.contains('thunderstorm')) {
      value *= 0.3;
      impact = FactorImpact.veryNegative;
      description = '–ì—Ä–æ–∑–∞ - —Ä—ã–±–∞–ª–∫–∞ –æ–ø–∞—Å–Ω–∞';
    }

    return BiteFactor(
      name: 'cloudiness',
      value: value,
      weight: 0.1,
      impact: impact,
      description: description,
    );
  }

  /// –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
  BiteFactor _analyzeTimeOfDay(WeatherApiResponse weather) {
    final hour = DateTime.now().hour;
    double value = 0.5;
    FactorImpact impact = FactorImpact.neutral;
    String description = '–î–Ω–µ–≤–Ω–æ–µ –≤—Ä–µ–º—è';

    // –õ—É—á—à–µ–µ –≤—Ä–µ–º—è: —Ä–∞—Å—Å–≤–µ—Ç (5-8) –∏ –∑–∞–∫–∞—Ç (18-21)
    if ((hour >= 5 && hour <= 8) || (hour >= 18 && hour <= 21)) {
      value = 0.9;
      impact = FactorImpact.veryPositive;
      description = '–ó–æ–ª–æ—Ç–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Ä—ã–±–∞–ª–∫–∏';
    } else if ((hour >= 9 && hour <= 11) || (hour >= 15 && hour <= 17)) {
      value = 0.7;
      impact = FactorImpact.positive;
      description = '–•–æ—Ä–æ—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –∫–ª–µ–≤–∞';
    } else if (hour >= 22 || hour <= 4) {
      value = 0.4;
      impact = FactorImpact.negative;
      description = '–ù–æ—á–Ω–æ–µ –≤—Ä–µ–º—è, –Ω–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å';
    } else {
      value = 0.5;
      description = '–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –¥–ª—è —Ä—ã–±–∞–ª–∫–∏';
    }

    return BiteFactor(
      name: 'timeOfDay',
      value: value,
      weight: 0.1,
      impact: impact,
      description: description,
    );
  }

  /// –ê–Ω–∞–ª–∏–∑ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏
  BiteFactor _analyzeHumidity(WeatherApiResponse weather) {
    final humidity = weather.current.humidity;
    double value = 0.5;
    FactorImpact impact = FactorImpact.neutral;
    String description = '–ù–æ—Ä–º–∞–ª—å–Ω–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å';

    // –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å: 60-80%
    if (humidity >= 60 && humidity <= 80) {
      value = 0.7;
      impact = FactorImpact.positive;
      description = '–•–æ—Ä–æ—à–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å –¥–ª—è –∫–ª–µ–≤–∞';
    } else if (humidity < 40) {
      value = 0.4;
      impact = FactorImpact.negative;
      description = '–ù–∏–∑–∫–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å';
    } else if (humidity > 90) {
      value = 0.4;
      impact = FactorImpact.negative;
      description = '–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å';
    }

    return BiteFactor(
      name: 'humidity',
      value: value,
      weight: 0.05,
      impact: impact,
      description: description,
    );
  }

  /// –†–∞—Å—á–µ—Ç –æ–±—â–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤
  double _calculateOverallActivity(Map<String, BiteFactor> factors) {
    if (factors.isEmpty) return 0.5;

    double weightedSum = 0.0;
    double totalWeight = 0.0;

    for (final factor in factors.values) {
      final adjustedValue = factor.value * factor.impact.multiplier;
      weightedSum += adjustedValue * factor.weight;
      totalWeight += factor.weight;
    }

    final activity = totalWeight > 0 ? weightedSum / totalWeight : 0.5;
    return math.max(0.0, math.min(1.0, activity));
  }

  /// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ –±–∞–ª–ª–∞–º
  BiteForecastLevel _determineForecastLevel(int scorePoints) {
    if (scorePoints >= 80) return BiteForecastLevel.excellent;
    if (scorePoints >= 60) return BiteForecastLevel.good;
    if (scorePoints >= 40) return BiteForecastLevel.moderate;
    if (scorePoints >= 20) return BiteForecastLevel.poor;
    return BiteForecastLevel.veryPoor;
  }

  /// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  String _generateRecommendation(
      Map<String, BiteFactor> factors,
      BiteForecastLevel level,
      BuildContext? context,
      ) {
    if (context == null) {
      switch (level) {
        case BiteForecastLevel.excellent:
          return '–û—Ç–ª–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è! –°–∞–º–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Ä—ã–±–∞–ª–∫–∏.';
        case BiteForecastLevel.good:
          return '–•–æ—Ä–æ—à–∏–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –∫–ª–µ–≤–∞.';
        case BiteForecastLevel.moderate:
          return '–£–º–µ—Ä–µ–Ω–Ω—ã–µ —É—Å–ª–æ–≤–∏—è, —Å—Ç–æ–∏—Ç –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å.';
        case BiteForecastLevel.poor:
          return '–£—Å–ª–æ–≤–∏—è –Ω–µ –æ—á–µ–Ω—å, –Ω–æ —à–∞–Ω—Å –µ—Å—Ç—å.';
        case BiteForecastLevel.veryPoor:
          return '–ü–ª–æ—Ö–∏–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ä—ã–±–∞–ª–∫–∏.';
      }
    }

    final localizations = AppLocalizations.of(context);

    switch (level) {
      case BiteForecastLevel.excellent:
        return localizations.translate('excellent_conditions_recommendation');
      case BiteForecastLevel.good:
        return localizations.translate('good_conditions_recommendation');
      case BiteForecastLevel.moderate:
        return localizations.translate('moderate_conditions_recommendation');
      case BiteForecastLevel.poor:
        return localizations.translate('poor_conditions_recommendation');
      case BiteForecastLevel.veryPoor:
        return localizations.translate('very_poor_conditions_recommendation');
    }
  }

  /// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–≤–µ—Ç–æ–≤
  List<String> _generateTips(
      Map<String, BiteFactor> factors,
      WeatherApiResponse weather,
      BuildContext? context,
      ) {
    final tips = <String>[];

    try {
      // –°–æ–≤–µ—Ç—ã –ø–æ –¥–∞–≤–ª–µ–Ω–∏—é
      final pressure = factors['pressure'];
      if (pressure != null && pressure.value < 0.5) {
        tips.add(context != null
            ? AppLocalizations.of(context).translate('low_pressure_tip')
            : '–ü—Ä–∏ –Ω–∏–∑–∫–æ–º –¥–∞–≤–ª–µ–Ω–∏–∏ –ª–æ–≤–∏—Ç–µ –Ω–∞ –≥–ª—É–±–∏–Ω–µ');
      }

      // –°–æ–≤–µ—Ç—ã –ø–æ –≤–µ—Ç—Ä—É
      final wind = factors['wind'];
      if (wind != null) {
        if (wind.value > 0.7) {
          tips.add(context != null
              ? AppLocalizations.of(context).translate('good_wind_tip')
              : '–•–æ—Ä–æ—à–∏–π –≤–µ—Ç–µ—Ä - –ª–æ–≤–∏—Ç–µ —Å –Ω–∞–≤–µ—Ç—Ä–µ–Ω–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã');
        } else if (wind.value < 0.4) {
          tips.add(context != null
              ? AppLocalizations.of(context).translate('calm_weather_tip')
              : '–í —à—Ç–∏–ª—å –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª–µ–≥–∫–∏–µ –ø—Ä–∏–º–∞–Ω–∫–∏');
        }
      }

      // –°–æ–≤–µ—Ç—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏
      final timeOfDay = factors['timeOfDay'];
      if (timeOfDay != null && timeOfDay.value > 0.8) {
        tips.add(context != null
            ? AppLocalizations.of(context).translate('golden_hour_tip')
            : '–ó–æ–ª–æ—Ç–æ–µ –≤—Ä–µ–º—è - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–º–∞–Ω–∫–∏');
      }

      // –°–æ–≤–µ—Ç—ã –ø–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ
      final temp = factors['temperature'];
      if (temp != null && temp.value < 0.5) {
        tips.add(context != null
            ? AppLocalizations.of(context).translate('cold_weather_tip')
            : '–í —Ö–æ–ª–æ–¥–Ω—É—é –ø–æ–≥–æ–¥—É —Ä—ã–±–∞ –º–µ–Ω–µ–µ –∞–∫—Ç–∏–≤–Ω–∞ - –∑–∞–º–µ–¥–ª–∏—Ç–µ –ø—Ä–æ–≤–æ–¥–∫—É');
      }

    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–≤–µ—Ç–æ–≤: $e');
    }

    return tips;
  }

  /// –ü–æ–∏—Å–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫–æ–Ω
  List<OptimalTimeWindow> _findOptimalTimeWindows(
      WeatherApiResponse weather,
      Map<String, BiteFactor> factors,
      BuildContext? context,
      ) {
    final windows = <OptimalTimeWindow>[];
    final now = DateTime.now();

    try {
      // –£—Ç—Ä–µ–Ω–Ω–µ–µ –æ–∫–Ω–æ (—Ä–∞—Å—Å–≤–µ—Ç)
      if (weather.forecast.isNotEmpty) {
        final astro = weather.forecast.first.astro;
        final sunriseTime = _parseTime(astro.sunrise, now);

        if (sunriseTime != null) {
          windows.add(OptimalTimeWindow(
            startTime: sunriseTime.subtract(const Duration(hours: 1)),
            endTime: sunriseTime.add(const Duration(hours: 2)),
            activity: 0.85,
            reason: context != null
                ? AppLocalizations.of(context).translate('sunrise_activity_reason')
                : '–£—Ç—Ä–µ–Ω–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä—ã–±—ã',
            recommendations: [
              context != null
                  ? AppLocalizations.of(context).translate('morning_bait_recommendation')
                  : '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —è—Ä–∫–∏–µ –ø—Ä–∏–º–∞–Ω–∫–∏'
            ],
          ));
        }

        // –í–µ—á–µ—Ä–Ω–µ–µ –æ–∫–Ω–æ (–∑–∞–∫–∞—Ç)
        final sunsetTime = _parseTime(astro.sunset, now);

        if (sunsetTime != null) {
          windows.add(OptimalTimeWindow(
            startTime: sunsetTime.subtract(const Duration(hours: 2)),
            endTime: sunsetTime.add(const Duration(hours: 1)),
            activity: 0.9,
            reason: context != null
                ? AppLocalizations.of(context).translate('sunset_activity_reason')
                : '–í–µ—á–µ—Ä–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä—ã–±—ã',
            recommendations: [
              context != null
                  ? AppLocalizations.of(context).translate('evening_bait_recommendation')
                  : '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω—ã–µ –ø—Ä–∏–º–∞–Ω–∫–∏'
            ],
          ));
        }
      }

    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω: $e');
    }

    return windows;
  }

  /// –ü–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ "6:30 AM"
  DateTime? _parseTime(String timeStr, DateTime baseDate) {
    try {
      final cleanTime = timeStr.trim().toLowerCase();
      final parts = cleanTime.split(':');

      if (parts.length >= 2) {
        final hourPart = parts[0];
        final minuteAndPeriod = parts[1].split(' ');

        var hour = int.tryParse(hourPart) ?? 0;
        final minute = int.tryParse(minuteAndPeriod[0]) ?? 0;

        if (minuteAndPeriod.length > 1) {
          final period = minuteAndPeriod[1];
          if (period == 'pm' && hour != 12) {
            hour += 12;
          } else if (period == 'am' && hour == 12) {
            hour = 0;
          }
        }

        return DateTime(baseDate.year, baseDate.month, baseDate.day, hour, minute);
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏ "$timeStr": $e');
    }

    return null;
  }
}