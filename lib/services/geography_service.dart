// –ü—É—Ç—å: lib/services/geography_service.dart

import 'dart:convert';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';
import 'package:flutter/material.dart';
import '../localization/app_localizations.dart';

class GeographyService {
  static final GeographyService _instance = GeographyService._internal();
  factory GeographyService() => _instance;
  GeographyService._internal();

  // –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —è–∑—ã–∫–∞
  Map<String, Map<String, dynamic>> _geographyCache = {};

  /// –ó–∞–≥—Ä—É–∑–∏—Ç—å –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
  Future<Map<String, dynamic>> _loadGeographyData(String languageCode) async {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    if (_geographyCache.containsKey(languageCode)) {
      return _geographyCache[languageCode]!;
    }

    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º JSON —Ñ–∞–π–ª
      final jsonString = await rootBundle.loadString(
          'assets/localization/geography/geography_$languageCode.json'
      );
      final Map<String, dynamic> data = json.decode(jsonString);

      // –ö—ç—à–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
      _geographyCache[languageCode] = data;

      debugPrint('üåç –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–ª—è —è–∑—ã–∫–∞: $languageCode');
      return data;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è $languageCode: $e');

      // Fallback –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
      if (languageCode != 'ru') {
        debugPrint('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä—É—Å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∫–∞–∫ fallback');
        return await _loadGeographyData('ru');
      }

      // –ï—Å–ª–∏ –∏ —Ä—É—Å—Å–∫–∏–π –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
      return {
        'countries': <String, String>{},
        'cities': <String, Map<String, String>>{},
      };
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω
  Future<List<String>> getLocalizedCountries(BuildContext context) async {
    try {
      final localizations = AppLocalizations.of(context);
      final languageCode = localizations.locale.languageCode;

      final data = await _loadGeographyData(languageCode);
      final countries = data['countries'] as Map<String, dynamic>? ?? {};

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ç—Ä–∞–Ω
      final countryNames = countries.values.cast<String>().toList();
      countryNames.sort();

      return countryNames;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–∞–Ω: $e');
      return [];
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã
  Future<List<String>> getLocalizedCitiesForCountry(
      String countryName,
      BuildContext context
      ) async {
    try {
      final localizations = AppLocalizations.of(context);
      final languageCode = localizations.locale.languageCode;

      final data = await _loadGeographyData(languageCode);
      final countries = data['countries'] as Map<String, dynamic>? ?? {};
      final cities = data['cities'] as Map<String, dynamic>? ?? {};

      // –ù–∞—Ö–æ–¥–∏–º –∫–ª—é—á —Å—Ç—Ä–∞–Ω—ã –ø–æ –µ—ë –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é
      String? countryKey;
      for (final entry in countries.entries) {
        if (entry.value == countryName) {
          countryKey = entry.key;
          break;
        }
      }

      if (countryKey == null) {
        debugPrint('‚ùå –°—Ç—Ä–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: $countryName');
        return [];
      }

      // –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥–∞ –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã
      final countryCities = cities[countryKey] as Map<String, dynamic>? ?? {};
      final cityNames = countryCities.values.cast<String>().toList();
      cityNames.sort();

      return cityNames;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã $countryName: $e');
      return [];
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á —Å—Ç—Ä–∞–Ω—ã –ø–æ –µ—ë –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é
  Future<String?> getCountryKeyByName(String countryName, BuildContext context) async {
    try {
      final localizations = AppLocalizations.of(context);
      final languageCode = localizations.locale.languageCode;

      final data = await _loadGeographyData(languageCode);
      final countries = data['countries'] as Map<String, dynamic>? ?? {};

      for (final entry in countries.entries) {
        if (entry.value == countryName) {
          return entry.key;
        }
      }

      return null;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–ª—é—á–∞ —Å—Ç—Ä–∞–Ω—ã: $e');
      return null;
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á –≥–æ—Ä–æ–¥–∞ –ø–æ –µ–≥–æ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é –∏ —Å—Ç—Ä–∞–Ω–µ
  Future<String?> getCityKeyByName(
      String cityName,
      String countryName,
      BuildContext context
      ) async {
    try {
      final localizations = AppLocalizations.of(context);
      final languageCode = localizations.locale.languageCode;

      final data = await _loadGeographyData(languageCode);
      final countries = data['countries'] as Map<String, dynamic>? ?? {};
      final cities = data['cities'] as Map<String, dynamic>? ?? {};

      // –ù–∞—Ö–æ–¥–∏–º –∫–ª—é—á —Å—Ç—Ä–∞–Ω—ã
      String? countryKey;
      for (final entry in countries.entries) {
        if (entry.value == countryName) {
          countryKey = entry.key;
          break;
        }
      }

      if (countryKey == null) return null;

      // –ù–∞—Ö–æ–¥–∏–º –∫–ª—é—á –≥–æ—Ä–æ–¥–∞
      final countryCities = cities[countryKey] as Map<String, dynamic>? ?? {};
      for (final entry in countryCities.entries) {
        if (entry.value == cityName) {
          return entry.key;
        }
      }

      return null;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–ª—é—á–∞ –≥–æ—Ä–æ–¥–∞: $e');
      return null;
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –ø–æ –∫–ª—é—á—É
  Future<String?> getCountryNameByKey(String countryKey, BuildContext context) async {
    try {
      final localizations = AppLocalizations.of(context);
      final languageCode = localizations.locale.languageCode;

      final data = await _loadGeographyData(languageCode);
      final countries = data['countries'] as Map<String, dynamic>? ?? {};

      return countries[countryKey] as String?;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã: $e');
      return null;
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –ø–æ –∫–ª—é—á—É
  Future<String?> getCityNameByKey(
      String cityKey,
      String countryKey,
      BuildContext context
      ) async {
    try {
      final localizations = AppLocalizations.of(context);
      final languageCode = localizations.locale.languageCode;

      final data = await _loadGeographyData(languageCode);
      final cities = data['cities'] as Map<String, dynamic>? ?? {};

      final countryCities = cities[countryKey] as Map<String, dynamic>? ?? {};
      return countryCities[cityKey] as String?;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞: $e');
      return null;
    }
  }

  /// –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à (–ø–æ–ª–µ–∑–Ω–æ –ø—Ä–∏ —Å–º–µ–Ω–µ —è–∑—ã–∫–∞)
  void clearCache() {
    _geographyCache.clear();
    debugPrint('üóëÔ∏è –ö—ç—à –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω');
  }

  /// –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
  Future<void> preloadData(String languageCode) async {
    await _loadGeographyData(languageCode);
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞
  Map<String, dynamic> getCacheInfo() {
    return {
      'cachedLanguages': _geographyCache.keys.toList(),
      'cacheSize': _geographyCache.length,
    };
  }
}