// –ü—É—Ç—å: lib/services/local/local_file_service.dart

import 'dart:io';
import 'package:flutter/foundation.dart';
import 'package:path_provider/path_provider.dart';
import 'package:uuid/uuid.dart';
import '../photo/photo_service.dart';

class LocalFileService {
  static LocalFileService? _instance;

  factory LocalFileService() {
    _instance ??= LocalFileService._internal();
    return _instance!;
  }

  LocalFileService._internal();

  final PhotoService _photoService = PhotoService();

  /// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∫–æ–ø–∏–π —Ñ–æ—Ç–æ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
  Future<List<String>> saveLocalCopies(List<File> photos) async {
    final localPaths = <String>[];

    if (photos.isEmpty) {
      debugPrint('üì± –ù–µ—Ç —Ñ–æ—Ç–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
      return localPaths;
    }

    try {
      debugPrint('üì± –°–æ—Ö—Ä–∞–Ω—è–µ–º ${photos.length} —Ñ–æ—Ç–æ –ª–æ–∫–∞–ª—å–Ω–æ...');

      for (int i = 0; i < photos.length; i++) {
        final photo = photos[i];
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
          if (!await photo.exists()) {
            debugPrint('‚ùå –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${photo.path}');
            continue;
          }

          // –ß–∏—Ç–∞–µ–º –∏ —Å–∂–∏–º–∞–µ–º —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ PhotoService
          final originalBytes = await photo.readAsBytes();
          final compressedBytes = await _photoService.compressPhotoSmart(originalBytes);

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∂–∞—Ç—É—é –≤–µ—Ä—Å–∏—é
          final localFile = await _photoService.savePermanentPhoto(compressedBytes);
          localPaths.add(localFile.path);

          debugPrint('‚úÖ –õ–æ–∫–∞–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Ñ–æ—Ç–æ ${i + 1}/${photos.length}: ${localFile.path}');
        } catch (e) {
          debugPrint('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ ${i + 1}: $e');

          // Fallback: –ø—ã—Ç–∞–µ–º—Å—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª –±–µ–∑ —Å–∂–∞—Ç–∏—è
          try {
            final fallbackFile = await _copyOriginalFile(photo);
            if (fallbackFile != null) {
              localPaths.add(fallbackFile.path);
              debugPrint('‚ö†Ô∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª –±–µ–∑ —Å–∂–∞—Ç–∏—è: ${fallbackFile.path}');
            }
          } catch (fallbackError) {
            debugPrint('‚ùå Fallback —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: $fallbackError');
          }
        }
      }

      debugPrint('üì± –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${localPaths.length}/${photos.length} —Ñ–æ—Ç–æ');
      return localPaths;
    } catch (e) {
      debugPrint('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: $e');
      return localPaths;
    }
  }

  /// –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
  Future<File?> _copyOriginalFile(File originalFile) async {
    try {
      final appDir = await getApplicationDocumentsDirectory();
      final backupDir = Directory('${appDir.path}/fishing_photos/backup');

      if (!await backupDir.exists()) {
        await backupDir.create(recursive: true);
      }

      final timestamp = DateTime.now().millisecondsSinceEpoch;
      final fileName = 'backup_$timestamp.jpg';
      final backupPath = '${backupDir.path}/$fileName';

      final backupFile = await originalFile.copy(backupPath);
      return backupFile;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: $e');
      return null;
    }
  }

  /// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
  Future<String?> saveLocalFile(File photo) async {
    try {
      if (!await photo.exists()) {
        debugPrint('‚ùå –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${photo.path}');
        return null;
      }

      final originalBytes = await photo.readAsBytes();
      final compressedBytes = await _photoService.compressPhotoSmart(originalBytes);
      final localFile = await _photoService.savePermanentPhoto(compressedBytes);

      debugPrint('‚úÖ –õ–æ–∫–∞–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Ñ–∞–π–ª: ${localFile.path}');
      return localFile.path;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: $e');
      return null;
    }
  }

  /// –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–π –∫–æ–ø–∏–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
  Future<File?> createLocalCopy(File sourceFile, {bool compress = true}) async {
    try {
      if (!await sourceFile.exists()) {
        throw Exception('–ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${sourceFile.path}');
      }

      final sourceBytes = await sourceFile.readAsBytes();

      if (compress) {
        // –°–∂–∏–º–∞–µ–º —á–µ—Ä–µ–∑ PhotoService
        final compressedBytes = await _photoService.compressPhotoSmart(sourceBytes);
        return await _photoService.savePermanentPhoto(compressedBytes);
      } else {
        // –ö–æ–ø–∏—Ä—É–µ–º –±–µ–∑ —Å–∂–∞—Ç–∏—è
        return await _photoService.savePermanentPhoto(sourceBytes);
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–π –∫–æ–ø–∏–∏: $e');
      return null;
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
  Future<Map<String, dynamic>> getLocalStorageInfo() async {
    try {
      final appDir = await getApplicationDocumentsDirectory();
      final fishingPhotosDir = Directory('${appDir.path}/fishing_photos');

      if (!await fishingPhotosDir.exists()) {
        return {
          'totalFiles': 0,
          'totalSizeBytes': 0,
          'totalSizeMB': 0.0,
          'directories': <String>[],
        };
      }

      final allFiles = <File>[];
      final directories = <String>[];

      await for (final entity in fishingPhotosDir.list(recursive: true)) {
        if (entity is File) {
          allFiles.add(entity);
        } else if (entity is Directory) {
          directories.add(entity.path);
        }
      }

      int totalSize = 0;
      final validFiles = <File>[];

      for (final file in allFiles) {
        try {
          final size = await file.length();
          totalSize += size;
          validFiles.add(file);
        } catch (e) {
          debugPrint('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${file.path}');
        }
      }

      return {
        'totalFiles': validFiles.length,
        'totalSizeBytes': totalSize,
        'totalSizeMB': totalSize / (1024 * 1024),
        'directories': directories,
        'validFiles': validFiles.length,
        'invalidFiles': allFiles.length - validFiles.length,
      };
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: $e');
      return {
        'totalFiles': 0,
        'totalSizeBytes': 0,
        'totalSizeMB': 0.0,
        'error': e.toString(),
      };
    }
  }

  /// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
  Future<int> cleanupOldLocalFiles({int maxAgeInDays = 30}) async {
    int deletedCount = 0;

    try {
      final appDir = await getApplicationDocumentsDirectory();
      final fishingPhotosDir = Directory('${appDir.path}/fishing_photos');

      if (!await fishingPhotosDir.exists()) {
        debugPrint('üìÅ –ü–∞–ø–∫–∞ fishing_photos –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        return 0;
      }

      final now = DateTime.now();
      final cutoffDate = now.subtract(Duration(days: maxAgeInDays));

      await for (final entity in fishingPhotosDir.list(recursive: true)) {
        if (entity is File) {
          try {
            final stat = await entity.stat();

            if (stat.modified.isBefore(cutoffDate)) {
              await entity.delete();
              deletedCount++;
              debugPrint('üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª: ${entity.path}');
            }
          } catch (e) {
            debugPrint('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${entity.path}: $e');
          }
        }
      }

      if (deletedCount > 0) {
        debugPrint('üßπ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —É–¥–∞–ª–µ–Ω–æ $deletedCount —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤');
      } else {
        debugPrint('‚úÖ –ù–µ—Ç —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
      }

      return deletedCount;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: $e');
      return deletedCount;
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
  Future<Map<String, dynamic>> validateLocalFiles() async {
    final report = {
      'totalChecked': 0,
      'validFiles': 0,
      'invalidFiles': 0,
      'corruptedFiles': <String>[],
      'missingFiles': <String>[],
      'totalSizeBytes': 0,
    };

    try {
      final appDir = await getApplicationDocumentsDirectory();
      final fishingPhotosDir = Directory('${appDir.path}/fishing_photos');

      if (!await fishingPhotosDir.exists()) {
        return report;
      }

      await for (final entity in fishingPhotosDir.list(recursive: true)) {
        if (entity is File) {
          report['totalChecked'] = (report['totalChecked'] as int) + 1;

          try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
            if (!await entity.exists()) {
              (report['missingFiles'] as List<String>).add(entity.path);
              report['invalidFiles'] = (report['invalidFiles'] as int) + 1;
              continue;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä
            final size = await entity.length();
            if (size == 0) {
              (report['corruptedFiles'] as List<String>).add(entity.path);
              report['invalidFiles'] = (report['invalidFiles'] as int) + 1;
              continue;
            }

            // –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø–µ—Ä–≤—ã–µ –±–∞–π—Ç—ã
            final bytes = await entity.openRead(0, 10).first;
            if (bytes.isEmpty) {
              (report['corruptedFiles'] as List<String>).add(entity.path);
              report['invalidFiles'] = (report['invalidFiles'] as int) + 1;
              continue;
            }

            report['validFiles'] = (report['validFiles'] as int) + 1;
            report['totalSizeBytes'] = (report['totalSizeBytes'] as int) + size;
          } catch (e) {
            (report['corruptedFiles'] as List<String>).add(entity.path);
            report['invalidFiles'] = (report['invalidFiles'] as int) + 1;
          }
        }
      }

      debugPrint('üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${report['validFiles']}/${report['totalChecked']} —Ñ–∞–π–ª–æ–≤ –≤–∞–ª–∏–¥–Ω—ã');
      return report;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: $e');
      report['error'] = e.toString();
      return report;
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ
  Future<List<File>> getAllLocalPhotos() async {
    final localPhotos = <File>[];

    try {
      final appDir = await getApplicationDocumentsDirectory();
      final fishingPhotosDir = Directory('${appDir.path}/fishing_photos');

      if (!await fishingPhotosDir.exists()) {
        return localPhotos;
      }

      await for (final entity in fishingPhotosDir.list(recursive: true)) {
        if (entity is File && entity.path.toLowerCase().endsWith('.jpg')) {
          if (await entity.exists()) {
            localPhotos.add(entity);
          }
        }
      }

      debugPrint('üì± –ù–∞–π–¥–µ–Ω–æ ${localPhotos.length} –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ');
      return localPhotos;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ: $e');
      return localPhotos;
    }
  }

  /// –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
  Future<bool> deleteLocalFile(String filePath) async {
    try {
      final file = File(filePath);

      if (!await file.exists()) {
        debugPrint('‚ö†Ô∏è –§–∞–π–ª —É–∂–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: $filePath');
        return true;
      }

      await file.delete();
      debugPrint('üóëÔ∏è –£–¥–∞–ª–µ–Ω –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª: $filePath');
      return true;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ $filePath: $e');
      return false;
    }
  }

  /// –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –≤–∞–∂–Ω—ã—Ö –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
  Future<List<String>> createBackup(List<String> filePaths) async {
    final backupPaths = <String>[];

    try {
      final appDir = await getApplicationDocumentsDirectory();
      final backupDir = Directory('${appDir.path}/fishing_photos/backup/${DateTime.now().millisecondsSinceEpoch}');

      await backupDir.create(recursive: true);

      for (final filePath in filePaths) {
        try {
          final sourceFile = File(filePath);
          if (!await sourceFile.exists()) continue;

          final fileName = filePath.split('/').last;
          final backupPath = '${backupDir.path}/$fileName';

          await sourceFile.copy(backupPath);
          backupPaths.add(backupPath);

          debugPrint('üíæ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: $backupPath');
        } catch (e) {
          debugPrint('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –¥–ª—è $filePath: $e');
        }
      }

      debugPrint('üíæ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${backupPaths.length}/${filePaths.length} —Ñ–∞–π–ª–æ–≤');
      return backupPaths;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: $e');
      return backupPaths;
    }
  }
}