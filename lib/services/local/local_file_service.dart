// –ü—É—Ç—å: lib/services/local/local_file_service.dart

import 'dart:io';
import 'package:flutter/foundation.dart';
import 'package:path_provider/path_provider.dart';
import 'package:uuid/uuid.dart';
import 'package:path/path.dart' as path;

/// –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ (—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏, –∏ —Ç.–¥.)
class LocalFileService {
  static final LocalFileService _instance = LocalFileService._internal();

  factory LocalFileService() {
    return _instance;
  }

  LocalFileService._internal();

  // –ë–∞–∑–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
  Directory? _cacheDirectory;

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
  Future<void> initialize() async {
    if (_cacheDirectory != null) return;

    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
      final appTempDir = await getTemporaryDirectory();
      final driftNotesDir = Directory('${appTempDir.path}/drift_notes_files');

      // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      if (!await driftNotesDir.exists()) {
        await driftNotesDir.create(recursive: true);
      }

      _cacheDirectory = driftNotesDir;
      debugPrint('üìÅ LocalFileService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: ${driftNotesDir.path}');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ LocalFileService: $e');
      rethrow;
    }
  }

  /// –ö–æ–ø–∏—Ä—É–µ—Ç —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π URI
  Future<String> saveLocalCopy(File sourceFile) async {
    await initialize();

    try {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞, —Å–æ—Ö—Ä–∞–Ω—è—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
      final fileExtension = path.extension(sourceFile.path).toLowerCase();
      final uuid = const Uuid().v4();
      final newFileName = '$uuid$fileExtension';

      // –°–æ–∑–¥–∞–µ–º –ø—É—Ç—å –∫ –Ω–æ–≤–æ–º—É —Ñ–∞–π–ª—É
      final localPath = '${_cacheDirectory!.path}/$newFileName';

      // –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
      final localFile = await sourceFile.copy(localPath);
      debugPrint('üì∑ –°–æ–∑–¥–∞–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–∞—è –∫–æ–ø–∏—è —Ñ–∞–π–ª–∞: $localPath');

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π URI
      return 'file://${localFile.path}';
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π –∫–æ–ø–∏–∏ —Ñ–∞–π–ª–∞: $e');
      rethrow;
    }
  }

  /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ª–æ–∫–∞–ª—å–Ω—ã—Ö URI –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
  Future<List<String>> saveLocalCopies(List<File> sourceFiles) async {
    final List<String> localUris = [];

    for (final file in sourceFiles) {
      try {
        final localUri = await saveLocalCopy(file);
        localUris.add(localUri);
      } catch (e) {
        debugPrint('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–ø–∏—é —Ñ–∞–π–ª–∞ ${file.path}: $e');
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–π —Ñ–∞–π–ª, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
      }
    }

    return localUris;
  }

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
  Future<bool> localFileExists(String localUri) async {
    if (!localUri.startsWith('file://')) return false;

    final filePath = localUri.substring(7); // —É–¥–∞–ª—è–µ–º 'file://'
    return File(filePath).exists();
  }

  /// –£–¥–∞–ª—è–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –ø–æ URI
  Future<void> deleteLocalFile(String localUri) async {
    if (!localUri.startsWith('file://')) return;

    try {
      final filePath = localUri.substring(7); // —É–¥–∞–ª—è–µ–º 'file://'
      final file = File(filePath);

      if (await file.exists()) {
        await file.delete();
        debugPrint('üóëÔ∏è –£–¥–∞–ª–µ–Ω –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª: $filePath');
      }
    } catch (e) {
      debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: $e');
    }
  }

  /// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π URI –≤ –æ–±—ä–µ–∫—Ç File
  File? localUriToFile(String localUri) {
    if (!localUri.startsWith('file://')) return null;

    try {
      final filePath = localUri.substring(7); // —É–¥–∞–ª—è–µ–º 'file://'
      return File(filePath);
    } catch (e) {
      debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ URI –≤ File: $e');
      return null;
    }
  }

  /// –û—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫—ç—à —Ñ–∞–π–ª–æ–≤
  Future<void> clearCache() async {
    await initialize();

    try {
      final allFiles = await _cacheDirectory!.list().toList();

      for (var entity in allFiles) {
        if (entity is File) {
          await entity.delete();
          debugPrint('üóëÔ∏è –£–¥–∞–ª–µ–Ω –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª: ${entity.path}');
        }
      }

      debugPrint('‚úÖ –ö—ç—à —Ñ–∞–π–ª–æ–≤ –æ—á–∏—â–µ–Ω');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞ —Ñ–∞–π–ª–æ–≤: $e');
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL –ª–æ–∫–∞–ª—å–Ω—ã–º —Ñ–∞–π–ª–æ–º
  bool isLocalFileUri(String? url) {
    if (url == null || url.isEmpty) return false;
    return url.startsWith('file://');
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞ –≤ –±–∞–π—Ç–∞—Ö
  Future<int> getCacheSize() async {
    await initialize();

    try {
      int totalSize = 0;
      final allFiles = await _cacheDirectory!.list().toList();

      for (var entity in allFiles) {
        if (entity is File) {
          totalSize += await entity.length();
        }
      }

      return totalSize;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –∫—ç—à–∞: $e');
      return 0;
    }
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –∫ –∫—ç—à-–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
  Future<String> getCacheDirectoryPath() async {
    await initialize();
    return _cacheDirectory!.path;
  }
}