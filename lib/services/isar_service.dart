// –ü—É—Ç—å: lib/services/isar_service.dart

import 'package:flutter/foundation.dart';
import 'package:isar/isar.dart';
import 'package:path_provider/path_provider.dart';
import 'package:firebase_auth/firebase_auth.dart';
import '../models/isar/fishing_note_entity.dart';
import '../models/isar/budget_note_entity.dart';
import '../models/isar/marker_map_entity.dart';
import '../models/isar/policy_acceptance_entity.dart';
import '../models/isar/user_usage_limits_entity.dart';
import '../models/isar/bait_program_entity.dart';
import '../models/isar/fishing_diary_entity.dart';
import '../models/isar/fishing_diary_folder_entity.dart';


class IsarService {
  static IsarService? _instance;
  static Isar? _isar;

  IsarService._();

  static IsarService get instance {
    _instance ??= IsarService._();
    return _instance!;
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  bool get isInitialized => _isar != null;

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Isar
  Future<void> init() async {
    if (_isar != null) return;

    final dir = await getApplicationDocumentsDirectory();

    _isar = await Isar.open(
      [
        FishingNoteEntitySchema,
        BudgetNoteEntitySchema,
        MarkerMapEntitySchema,
        PolicyAcceptanceEntitySchema,
        UserUsageLimitsEntitySchema,
        BaitProgramEntitySchema,
        FishingDiaryEntitySchema,
        FishingDiaryFolderEntitySchema
      ],
      directory: dir.path,
    );
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Isar
  Isar get isar {
    if (_isar == null) {
      throw Exception('IsarService –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –í—ã–∑–æ–≤–∏—Ç–µ init() —Å–Ω–∞—á–∞–ª–∞.');
    }
    return _isar!;
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (alias –¥–ª—è isar)
  Future<Isar> get database async {
    if (_isar == null) {
      await init();
    }
    return _isar!;
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  String? getCurrentUserId() {
    final user = FirebaseAuth.instance.currentUser;
    return user?.uid;
  }

  // ========================================
  // üî• –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø FISHING NOTES –° –ü–û–î–î–ï–†–ñ–ö–û–ô –û–§–õ–ê–ô–ù –£–î–ê–õ–ï–ù–ò–Ø
  // ========================================

  /// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –í—Å—Ç–∞–≤–∫–∞ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ —Ä—ã–±–æ–ª–æ–≤–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  Future<int> insertFishingNote(FishingNoteEntity note) async {
    final result = await isar.writeTxn(() async {
      return await isar.fishingNoteEntitys.put(note);
    });

    debugPrint('üìù IsarService: –í—Å—Ç–∞–≤–ª–µ–Ω–∞ FishingNote —Å ID=$result, firebaseId=${note.firebaseId}, markedForDeletion=${note.markedForDeletion}');
    return result;
  }

  /// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ê–ö–¢–ò–í–ù–´–• —Ä—ã–±–æ–ª–æ–≤–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫ (–∏—Å–∫–ª—é—á–∞—è –ø–æ–º–µ—á–µ–Ω–Ω—ã–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è)
  Future<List<FishingNoteEntity>> getAllFishingNotes() async {
    final userId = getCurrentUserId();
    if (userId == null) {
      debugPrint('‚ö†Ô∏è IsarService: getCurrentUserId() –≤–µ—Ä–Ω—É–ª null');
      return [];
    }

    // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ—Å—Ç–æ–π —Ñ–∏–ª—å—Ç—Ä - –∏—Å–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ —è–≤–Ω–æ –ø–æ–º–µ—á–µ–Ω–Ω—ã–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    final notes = await isar.fishingNoteEntitys
        .filter()
        .userIdEqualTo(userId)
        .and()
        .not() // –ù–ï —Ä–∞–≤–Ω–æ true
        .markedForDeletionEqualTo(true)
        .sortByDateDesc()
        .findAll();

    debugPrint('üìã IsarService: –ù–∞–π–¥–µ–Ω–æ ${notes.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö FishingNotes –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $userId');
    debugPrint('üìä IsarService: –î–µ—Ç–∞–ª–∏ –∑–∞–º–µ—Ç–æ–∫:');
    for (final note in notes) {
      debugPrint('  - ID=${note.id}, firebaseId=${note.firebaseId}, markedForDeletion=${note.markedForDeletion}');
    }
    return notes;
  }

  /// ‚úÖ –ù–û–í–û–ï: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–º–µ—Ç–æ–∫ –≤–∫–ª—é—á–∞—è –ø–æ–º–µ—á–µ–Ω–Ω—ã–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏)
  Future<List<FishingNoteEntity>> getAllFishingNotesIncludingDeleted() async {
    final userId = getCurrentUserId();
    if (userId == null) {
      return [];
    }

    final notes = await isar.fishingNoteEntitys
        .filter()
        .userIdEqualTo(userId)
        .sortByDateDesc()
        .findAll();

    debugPrint('üìã IsarService: –ù–∞–π–¥–µ–Ω–æ ${notes.length} –í–°–ï–• FishingNotes (–≤–∫–ª—é—á–∞—è —É–¥–∞–ª–µ–Ω–Ω—ã–µ) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $userId');
    return notes;
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –ø–æ ID
  Future<FishingNoteEntity?> getFishingNoteById(int id) async {
    final note = await isar.fishingNoteEntitys.get(id);
    debugPrint('üîç IsarService: getFishingNoteById($id) = ${note != null ? "–Ω–∞–π–¥–µ–Ω–∞" : "–Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}');
    return note;
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –ø–æ Firebase ID
  Future<FishingNoteEntity?> getFishingNoteByFirebaseId(String firebaseId) async {
    final note = await isar.fishingNoteEntitys
        .filter()
        .firebaseIdEqualTo(firebaseId)
        .findFirst();

    debugPrint('üîç IsarService: getFishingNoteByFirebaseId($firebaseId) = ${note != null ? "–Ω–∞–π–¥–µ–Ω–∞" : "–Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}');
    if (note != null) {
      debugPrint('üìù IsarService: –ó–∞–º–µ—Ç–∫–∞ markedForDeletion=${note.markedForDeletion}, isSynced=${note.isSynced}');
    }
    return note;
  }

  /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–º–µ—Ç–∫–∏
  Future<int> updateFishingNote(FishingNoteEntity note) async {
    note.updatedAt = DateTime.now();
    final result = await isar.writeTxn(() async {
      return await isar.fishingNoteEntitys.put(note);
    });

    debugPrint('üîÑ IsarService: –û–±–Ω–æ–≤–ª–µ–Ω–∞ FishingNote ID=${note.id}, firebaseId=${note.firebaseId}, markedForDeletion=${note.markedForDeletion}, isSynced=${note.isSynced}');
    return result;
  }

  /// ‚úÖ –ù–û–í–û–ï: –ü–æ–º–µ—Ç–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –¥–ª—è –æ—Ñ–ª–∞–π–Ω —É–¥–∞–ª–µ–Ω–∏—è
  Future<void> markFishingNoteForDeletion(String firebaseId) async {
    final note = await getFishingNoteByFirebaseId(firebaseId);
    if (note == null) {
      debugPrint('‚ùå IsarService: –ó–∞–º–µ—Ç–∫–∞ —Å firebaseId=$firebaseId –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è');
      throw Exception('–ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ');
    }

    note.markedForDeletion = true;
    note.isSynced = false; // –¢—Ä–µ–±—É–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è
    note.updatedAt = DateTime.now();

    await updateFishingNote(note);
    debugPrint('‚úÖ IsarService: –ó–∞–º–µ—Ç–∫–∞ $firebaseId –ø–æ–º–µ—á–µ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
  }

  /// ‚úÖ –ù–û–í–û–ï: –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫ –ø–æ–º–µ—á–µ–Ω–Ω—ã—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏)
  Future<List<FishingNoteEntity>> getMarkedForDeletionFishingNotes() async {
    final userId = getCurrentUserId();
    if (userId == null) {
      return [];
    }

    final notes = await isar.fishingNoteEntitys
        .filter()
        .userIdEqualTo(userId)
        .and()
        .markedForDeletionEqualTo(true)
        .findAll();

    debugPrint('üóëÔ∏è IsarService: –ù–∞–π–¥–µ–Ω–æ ${notes.length} –∑–∞–º–µ—Ç–æ–∫ –ø–æ–º–µ—á–µ–Ω–Ω—ã—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
    return notes;
  }

  /// –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –ø–æ ID (—Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ)
  Future<bool> deleteFishingNote(int id) async {
    final result = await isar.writeTxn(() async {
      return await isar.fishingNoteEntitys.delete(id);
    });

    debugPrint('üóëÔ∏è IsarService: –§–∏–∑–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω–∞ FishingNote ID=$id, —Ä–µ–∑—É–ª—å—Ç–∞—Ç=$result');
    return result;
  }

  /// –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –ø–æ Firebase ID (—Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ)
  Future<bool> deleteFishingNoteByFirebaseId(String firebaseId) async {
    final note = await getFishingNoteByFirebaseId(firebaseId);
    if (note != null) {
      final result = await deleteFishingNote(note.id);
      debugPrint('üóëÔ∏è IsarService: –§–∏–∑–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω–∞ FishingNote firebaseId=$firebaseId, —Ä–µ–∑—É–ª—å—Ç–∞—Ç=$result');
      return result;
    }
    debugPrint('‚ö†Ô∏è IsarService: –ó–∞–º–µ—Ç–∫–∞ firebaseId=$firebaseId –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è');
    return false;
  }

  /// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<List<FishingNoteEntity>> getUnsyncedNotes() async {
    final userId = getCurrentUserId();
    if (userId == null) {
      return [];
    }

    final unsyncedNotes = await isar.fishingNoteEntitys
        .filter()
        .userIdEqualTo(userId)
        .and()
        .isSyncedEqualTo(false)
        .findAll();

    debugPrint('üîç IsarService: getUnsyncedNotes –Ω–∞–π–¥–µ–Ω–æ ${unsyncedNotes.length} –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫');

    // –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –æ–±—ã—á–Ω—ã–µ –∏ –ø–æ–º–µ—á–µ–Ω–Ω—ã–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    final normalNotes = unsyncedNotes.where((note) => note.markedForDeletion != true).toList();
    final deletedNotes = unsyncedNotes.where((note) => note.markedForDeletion == true).toList();

    debugPrint('üìä IsarService: –ò–∑ –Ω–∏—Ö ${normalNotes.length} –æ–±—ã—á–Ω—ã—Ö –∏ ${deletedNotes.length} –ø–æ–º–µ—á–µ–Ω–Ω—ã—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');

    // üî• –ù–û–í–û–ï: –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
    cleanupSyncedDeletedNotes();

    return unsyncedNotes;
  }

  /// ‚úÖ –ù–û–í–û–ï: –û—á–∏—Å—Ç–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
  Future<void> cleanupSyncedDeletedNotes() async {
    final userId = getCurrentUserId();
    if (userId == null) {
      return;
    }

    // –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø–∏—Å–∏ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–µ—á–µ–Ω—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ò —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
    final syncedDeletedNotes = await isar.fishingNoteEntitys
        .filter()
        .userIdEqualTo(userId)
        .and()
        .markedForDeletionEqualTo(true)
        .and()
        .isSyncedEqualTo(true)
        .findAll();

    if (syncedDeletedNotes.isNotEmpty) {
      debugPrint('üßπ IsarService: –ù–∞–π–¥–µ–Ω–æ ${syncedDeletedNotes.length} —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—á–∏—Å—Ç–∫–∏');

      // –§–∏–∑–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ–º –∫–∞–∂–¥—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞–ø–∏—Å—å
      for (final note in syncedDeletedNotes) {
        await deleteFishingNote(note.id);
        debugPrint('üóëÔ∏è IsarService: –§–∏–∑–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å ID=${note.id}, firebaseId=${note.firebaseId}');
      }

      debugPrint('‚úÖ IsarService: –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ - —É–¥–∞–ª–µ–Ω–æ ${syncedDeletedNotes.length} –∑–∞–ø–∏—Å–µ–π');
    } else {
      debugPrint('üìù IsarService: –ù–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—á–∏—Å—Ç–∫–∏');
    }
  }

  /// –ü–æ–º–µ—á–∞–µ—Ç –∑–∞–º–µ—Ç–∫—É –∫–∞–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é
  Future<void> markAsSynced(int id, String firebaseId) async {
    bool shouldDelete = false;

    await isar.writeTxn(() async {
      final note = await isar.fishingNoteEntitys.get(id);
      if (note != null) {
        note.isSynced = true;
        note.firebaseId = firebaseId;
        note.updatedAt = DateTime.now();
        await isar.fishingNoteEntitys.put(note);
        debugPrint('‚úÖ IsarService: –ó–∞–º–µ—Ç–∫–∞ ID=$id –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å firebaseId=$firebaseId');

        // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ —É–¥–∞–ª–∏—Ç—å, –Ω–æ –ù–ï —É–¥–∞–ª—è–µ–º –≤–Ω—É—Ç—Ä–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        if (note.markedForDeletion == true) {
          shouldDelete = true;
        }
      }
    });

    // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –§–∏–∑–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ü–û–°–õ–ï –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    if (shouldDelete) {
      await deleteFishingNote(id);
      debugPrint('üßπ IsarService: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–º–µ—á–µ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å ID=$id');
    }
  }

  /// –ü–æ–º–µ—á–∞–µ—Ç –∑–∞–º–µ—Ç–∫—É –∫–∞–∫ –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é (–¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π)
  Future<void> markAsUnsynced(int id) async {
    await isar.writeTxn(() async {
      final note = await isar.fishingNoteEntitys.get(id);
      if (note != null) {
        note.isSynced = false;
        note.updatedAt = DateTime.now();
        await isar.fishingNoteEntitys.put(note);
        debugPrint('üîÑ IsarService: –ó–∞–º–µ—Ç–∫–∞ ID=$id –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è');
      }
    });
  }

  /// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—Å–µ—Ö –∑–∞–º–µ—Ç–æ–∫ (—Ç–µ–ø–µ—Ä—å —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é)
  Future<int> getNotesCount([String? userId]) async {
    if (userId != null) {
      return await getFishingNotesCountByUser(userId);
    }

    // –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏
    return await isar.fishingNoteEntitys.count();
  }

  /// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<int> getUnsyncedNotesCount([String? userId]) async {
    if (userId != null) {
      return await isar.fishingNoteEntitys
          .filter()
          .userIdEqualTo(userId)
          .and()
          .isSyncedEqualTo(false)
          .count();
    }

    // –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏
    return await isar.fishingNoteEntitys
        .filter()
        .isSyncedEqualTo(false)
        .count();
  }

  /// üî• –ö–†–ò–¢–ò–ß–ù–û –î–û–ë–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä—ã–±–æ–ª–æ–≤–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ)
  Future<int> getFishingNotesCountByUser(String userId) async {
    final count = await isar.fishingNoteEntitys
        .filter()
        .userIdEqualTo(userId)
        .and()
        .not() // –ù–ï —Ä–∞–≤–Ω–æ true
        .markedForDeletionEqualTo(true)
        .count();

    debugPrint('üìä IsarService: –ê–∫—Ç–∏–≤–Ω—ã—Ö FishingNotes –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $userId: $count');
    return count;
  }

  // ========================================
  // üî• –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø BUDGET NOTES –° –ü–û–î–î–ï–†–ñ–ö–û–ô –û–§–õ–ê–ô–ù –£–î–ê–õ–ï–ù–ò–Ø
  // ========================================

  /// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –í—Å—Ç–∞–≤–∫–∞ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –∑–∞–º–µ—Ç–∫–∏ –±—é–¥–∂–µ—Ç–∞ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  Future<int> insertBudgetNote(BudgetNoteEntity note) async {
    final result = await isar.writeTxn(() async {
      return await isar.budgetNoteEntitys.put(note);
    });

    debugPrint('üìù IsarService: –í—Å—Ç–∞–≤–ª–µ–Ω–∞ BudgetNote —Å ID=$result, firebaseId=${note.firebaseId}, markedForDeletion=${note.markedForDeletion}');
    return result;
  }

  /// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ê–ö–¢–ò–í–ù–´–• –∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞ (–∏—Å–∫–ª—é—á–∞—è –ø–æ–º–µ—á–µ–Ω–Ω—ã–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è)
  Future<List<BudgetNoteEntity>> getAllBudgetNotes(String userId) async {
    final notes = await isar.budgetNoteEntitys
        .filter()
        .userIdEqualTo(userId)
        .and()
        .not() // –ù–ï —Ä–∞–≤–Ω–æ true
        .markedForDeletionEqualTo(true)
        .sortByDateDesc()
        .findAll();

    debugPrint('üìã IsarService: –ù–∞–π–¥–µ–Ω–æ ${notes.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö BudgetNotes –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $userId');
    debugPrint('üìä IsarService: –î–µ—Ç–∞–ª–∏ –∑–∞–º–µ—Ç–æ–∫:');
    for (final note in notes) {
      debugPrint('  - ID=${note.id}, firebaseId=${note.firebaseId}, markedForDeletion=${note.markedForDeletion}');
    }
    return notes;
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –±—é–¥–∂–µ—Ç–∞ –ø–æ ID
  Future<BudgetNoteEntity?> getBudgetNoteById(int id) async {
    return await isar.budgetNoteEntitys.get(id);
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –±—é–¥–∂–µ—Ç–∞ –ø–æ Firebase ID
  Future<BudgetNoteEntity?> getBudgetNoteByFirebaseId(String firebaseId) async {
    return await isar.budgetNoteEntitys
        .filter()
        .firebaseIdEqualTo(firebaseId)
        .findFirst();
  }

  /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–º–µ—Ç–∫–∏ –±—é–¥–∂–µ—Ç–∞
  Future<int> updateBudgetNote(BudgetNoteEntity note) async {
    note.updatedAt = DateTime.now();
    return await isar.writeTxn(() async {
      return await isar.budgetNoteEntitys.put(note);
    });
  }

  /// ‚úÖ –ù–û–í–û–ï: –ü–æ–º–µ—Ç–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –±—é–¥–∂–µ—Ç–∞ –¥–ª—è –æ—Ñ–ª–∞–π–Ω —É–¥–∞–ª–µ–Ω–∏—è
  Future<void> markBudgetNoteForDeletion(String firebaseId) async {
    final note = await getBudgetNoteByFirebaseId(firebaseId);
    if (note == null) {
      debugPrint('‚ùå IsarService: BudgetNote —Å firebaseId=$firebaseId –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è');
      throw Exception('–ó–∞–º–µ—Ç–∫–∞ –±—é–¥–∂–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ');
    }

    note.markedForDeletion = true;
    note.isSynced = false; // –¢—Ä–µ–±—É–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è
    note.updatedAt = DateTime.now();

    await updateBudgetNote(note);
    debugPrint('‚úÖ IsarService: BudgetNote $firebaseId –ø–æ–º–µ—á–µ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
  }

  /// ‚úÖ –ù–û–í–û–ï: –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞ –ø–æ–º–µ—á–µ–Ω–Ω—ã—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏)
  Future<List<BudgetNoteEntity>> getMarkedForDeletionBudgetNotes(String userId) async {
    final notes = await isar.budgetNoteEntitys
        .filter()
        .userIdEqualTo(userId)
        .and()
        .markedForDeletionEqualTo(true)
        .findAll();

    debugPrint('üóëÔ∏è IsarService: –ù–∞–π–¥–µ–Ω–æ ${notes.length} BudgetNotes –ø–æ–º–µ—á–µ–Ω–Ω—ã—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
    return notes;
  }

  /// ‚úÖ –ù–û–í–û–ï: –û—á–∏—Å—Ç–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞
  Future<void> cleanupSyncedDeletedBudgetNotes(String userId) async {
    // –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø–∏—Å–∏ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–µ—á–µ–Ω—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ò —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
    final syncedDeletedNotes = await isar.budgetNoteEntitys
        .filter()
        .userIdEqualTo(userId)
        .and()
        .markedForDeletionEqualTo(true)
        .and()
        .isSyncedEqualTo(true)
        .findAll();

    if (syncedDeletedNotes.isNotEmpty) {
      debugPrint('üßπ IsarService: –ù–∞–π–¥–µ–Ω–æ ${syncedDeletedNotes.length} —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–¥–∞–ª–µ–Ω–Ω—ã—Ö BudgetNotes –¥–ª—è –æ—á–∏—Å—Ç–∫–∏');

      // –§–∏–∑–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ–º –∫–∞–∂–¥—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞–ø–∏—Å—å
      for (final note in syncedDeletedNotes) {
        await deleteBudgetNote(note.id);
        debugPrint('üóëÔ∏è IsarService: –§–∏–∑–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è BudgetNote ID=${note.id}, firebaseId=${note.firebaseId}');
      }

      debugPrint('‚úÖ IsarService: –û—á–∏—Å—Ç–∫–∞ BudgetNotes –∑–∞–≤–µ—Ä—à–µ–Ω–∞ - —É–¥–∞–ª–µ–Ω–æ ${syncedDeletedNotes.length} –∑–∞–ø–∏—Å–µ–π');
    } else {
      debugPrint('üìù IsarService: –ù–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–¥–∞–ª–µ–Ω–Ω—ã—Ö BudgetNotes –¥–ª—è –æ—á–∏—Å—Ç–∫–∏');
    }
  }

  /// –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –±—é–¥–∂–µ—Ç–∞ –ø–æ ID
  Future<bool> deleteBudgetNote(int id) async {
    return await isar.writeTxn(() async {
      return await isar.budgetNoteEntitys.delete(id);
    });
  }

  /// –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –±—é–¥–∂–µ—Ç–∞ –ø–æ Firebase ID
  Future<bool> deleteBudgetNoteByFirebaseId(String firebaseId) async {
    final note = await getBudgetNoteByFirebaseId(firebaseId);
    if (note != null) {
      return await deleteBudgetNote(note.id);
    }
    return false;
  }

  /// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞ (–≤–∫–ª—é—á–∞—è –ø–æ–º–µ—á–µ–Ω–Ω—ã–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è)
  Future<List<BudgetNoteEntity>> getUnsyncedBudgetNotes(String userId) async {
    final unsyncedNotes = await isar.budgetNoteEntitys
        .filter()
        .userIdEqualTo(userId)
        .and()
        .isSyncedEqualTo(false)
        .findAll();

    debugPrint('üîç IsarService: getUnsyncedBudgetNotes –Ω–∞–π–¥–µ–Ω–æ ${unsyncedNotes.length} –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞');

    // –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –æ–±—ã—á–Ω—ã–µ –∏ –ø–æ–º–µ—á–µ–Ω–Ω—ã–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    final normalNotes = unsyncedNotes.where((note) => note.markedForDeletion != true).toList();
    final deletedNotes = unsyncedNotes.where((note) => note.markedForDeletion == true).toList();

    debugPrint('üìä IsarService: –ò–∑ –Ω–∏—Ö ${normalNotes.length} –æ–±—ã—á–Ω—ã—Ö –∏ ${deletedNotes.length} –ø–æ–º–µ—á–µ–Ω–Ω—ã—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');

    // üî• –ù–û–í–û–ï: –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
    cleanupSyncedDeletedBudgetNotes(userId);

    return unsyncedNotes;
  }

  /// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–º–µ—á–∞–µ—Ç –∑–∞–º–µ—Ç–∫—É –±—é–¥–∂–µ—Ç–∞ –∫–∞–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ–º
  Future<void> markBudgetNoteAsSynced(int id, String firebaseId) async {
    bool shouldDelete = false;

    await isar.writeTxn(() async {
      final note = await isar.budgetNoteEntitys.get(id);
      if (note != null) {
        note.markAsSynced();
        note.firebaseId = firebaseId;
        await isar.budgetNoteEntitys.put(note);
        debugPrint('‚úÖ IsarService: BudgetNote ID=$id –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å firebaseId=$firebaseId');

        // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ —É–¥–∞–ª–∏—Ç—å, –Ω–æ –ù–ï —É–¥–∞–ª—è–µ–º –≤–Ω—É—Ç—Ä–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        if (note.markedForDeletion == true) {
          shouldDelete = true;
        }
      }
    });

    // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –§–∏–∑–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ü–û–°–õ–ï –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    if (shouldDelete) {
      await deleteBudgetNote(id);
      debugPrint('üßπ IsarService: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–º–µ—á–µ–Ω–Ω–∞—è BudgetNote ID=$id');
    }
  }

  /// –ü–æ–º–µ—á–∞–µ—Ç –∑–∞–º–µ—Ç–∫—É –±—é–¥–∂–µ—Ç–∞ –∫–∞–∫ –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é (–¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π)
  Future<void> markBudgetNoteAsUnsynced(int id) async {
    await isar.writeTxn(() async {
      final note = await isar.budgetNoteEntitys.get(id);
      if (note != null) {
        note.markAsModified();
        await isar.budgetNoteEntitys.put(note);
      }
    });
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<int> getBudgetNotesCount(String userId) async {
    return await isar.budgetNoteEntitys
        .filter()
        .userIdEqualTo(userId)
        .and()
        .markedForDeletionEqualTo(false)
        .count();
  }

  /// üÜï –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–ª–∏–∞—Å –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –º–µ—Ç–æ–¥–∞)
  Future<int> getBudgetNotesCountByUser(String userId) async {
    return await getBudgetNotesCount(userId);
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞
  Future<int> getUnsyncedBudgetNotesCount(String userId) async {
    return await isar.budgetNoteEntitys
        .filter()
        .userIdEqualTo(userId)
        .and()
        .isSyncedEqualTo(false)
        .and()
        .markedForDeletionEqualTo(false)
        .count();
  }

  /// –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏ –±—é–¥–∂–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞)
  Future<int> deleteAllBudgetNotes(String userId) async {
    return await isar.writeTxn(() async {
      return await isar.budgetNoteEntitys
          .filter()
          .userIdEqualTo(userId)
          .deleteAll();
    });
  }

  // ========================================
  // üî• –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø MARKER MAPS –° –ü–û–î–î–ï–†–ñ–ö–û–ô –û–§–õ–ê–ô–ù –£–î–ê–õ–ï–ù–ò–Ø
  // ========================================

  /// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –í—Å—Ç–∞–≤–∫–∞ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –º–∞—Ä–∫–µ—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  Future<int> insertMarkerMap(MarkerMapEntity map) async {
    final result = await isar.writeTxn(() async {
      return await isar.markerMapEntitys.put(map);
    });

    debugPrint('üìù IsarService: –í—Å—Ç–∞–≤–ª–µ–Ω–∞ MarkerMap —Å ID=$result, firebaseId=${map.firebaseId}, markedForDeletion=${map.markedForDeletion}');
    return result;
  }

  /// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ê–ö–¢–ò–í–ù–´–• –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç (–∏—Å–∫–ª—é—á–∞—è –ø–æ–º–µ—á–µ–Ω–Ω—ã–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è)
  Future<List<MarkerMapEntity>> getAllMarkerMaps(String userId) async {
    final maps = await isar.markerMapEntitys
        .filter()
        .userIdEqualTo(userId)
        .and()
        .not() // –ù–ï —Ä–∞–≤–Ω–æ true
        .markedForDeletionEqualTo(true)
        .sortByDateDesc()
        .findAll();

    debugPrint('üìã IsarService: –ù–∞–π–¥–µ–Ω–æ ${maps.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö MarkerMaps –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $userId');
    debugPrint('üìä IsarService: –î–µ—Ç–∞–ª–∏ –∫–∞—Ä—Ç:');
    for (final map in maps) {
      debugPrint('  - ID=${map.id}, firebaseId=${map.firebaseId}, markedForDeletion=${map.markedForDeletion}');
    }
    return maps;
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã –ø–æ ID
  Future<MarkerMapEntity?> getMarkerMapById(int id) async {
    return await isar.markerMapEntitys.get(id);
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã –ø–æ Firebase ID
  Future<MarkerMapEntity?> getMarkerMapByFirebaseId(String firebaseId) async {
    return await isar.markerMapEntitys
        .filter()
        .firebaseIdEqualTo(firebaseId)
        .findFirst();
  }

  /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –º–∞—Ä–∫–µ—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã
  Future<int> updateMarkerMap(MarkerMapEntity map) async {
    map.updatedAt = DateTime.now();
    return await isar.writeTxn(() async {
      return await isar.markerMapEntitys.put(map);
    });
  }

  /// –£–¥–∞–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã –ø–æ ID
  Future<bool> deleteMarkerMap(int id) async {
    return await isar.writeTxn(() async {
      return await isar.markerMapEntitys.delete(id);
    });
  }

  /// –£–¥–∞–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã –ø–æ Firebase ID
  Future<bool> deleteMarkerMapByFirebaseId(String firebaseId) async {
    final map = await getMarkerMapByFirebaseId(firebaseId);
    if (map != null) {
      return await deleteMarkerMap(map.id);
    }
    return false;
  }

  /// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç (–≤–∫–ª—é—á–∞—è –ø–æ–º–µ—á–µ–Ω–Ω—ã–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è)
  Future<List<MarkerMapEntity>> getUnsyncedMarkerMaps(String userId) async {
    final unsyncedMaps = await isar.markerMapEntitys
        .filter()
        .userIdEqualTo(userId)
        .and()
        .isSyncedEqualTo(false)
        .findAll();

    debugPrint('üîç IsarService: getUnsyncedMarkerMaps –Ω–∞–π–¥–µ–Ω–æ ${unsyncedMaps.length} –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç');

    // –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –æ–±—ã—á–Ω—ã–µ –∏ –ø–æ–º–µ—á–µ–Ω–Ω—ã–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    final normalMaps = unsyncedMaps.where((map) => map.markedForDeletion != true).toList();
    final deletedMaps = unsyncedMaps.where((map) => map.markedForDeletion == true).toList();

    debugPrint('üìä IsarService: –ò–∑ –Ω–∏—Ö ${normalMaps.length} –æ–±—ã—á–Ω—ã—Ö –∏ ${deletedMaps.length} –ø–æ–º–µ—á–µ–Ω–Ω—ã—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');

    // üî• –ù–û–í–û–ï: –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
    cleanupSyncedDeletedMarkerMaps(userId);

    return unsyncedMaps;
  }

  /// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–º–µ—á–∞–µ—Ç –º–∞—Ä–∫–µ—Ä–Ω—É—é –∫–∞—Ä—Ç—É –∫–∞–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ–º
  Future<void> markMarkerMapAsSynced(int id, String firebaseId) async {
    bool shouldDelete = false;

    await isar.writeTxn(() async {
      final map = await isar.markerMapEntitys.get(id);
      if (map != null) {
        map.markAsSynced();
        map.firebaseId = firebaseId;
        await isar.markerMapEntitys.put(map);
        debugPrint('‚úÖ IsarService: MarkerMap ID=$id –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å firebaseId=$firebaseId');

        // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ —É–¥–∞–ª–∏—Ç—å, –Ω–æ –ù–ï —É–¥–∞–ª—è–µ–º –≤–Ω—É—Ç—Ä–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        if (map.markedForDeletion == true) {
          shouldDelete = true;
        }
      }
    });

    // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –§–∏–∑–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ü–û–°–õ–ï –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    if (shouldDelete) {
      await deleteMarkerMap(id);
      debugPrint('üßπ IsarService: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–º–µ—á–µ–Ω–Ω–∞—è MarkerMap ID=$id');
    }
  }

  /// –ü–æ–º–µ—á–∞–µ—Ç –º–∞—Ä–∫–µ—Ä–Ω—É—é –∫–∞—Ä—Ç—É –∫–∞–∫ –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é (–¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π)
  Future<void> markMarkerMapAsUnsynced(int id) async {
    await isar.writeTxn(() async {
      final map = await isar.markerMapEntitys.get(id);
      if (map != null) {
        map.markAsModified();
        await isar.markerMapEntitys.put(map);
      }
    });
  }

  /// ‚úÖ –ù–û–í–û–ï: –ü–æ–º–µ—Ç–∏—Ç—å –º–∞—Ä–∫–µ—Ä–Ω—É—é –∫–∞—Ä—Ç—É –¥–ª—è –æ—Ñ–ª–∞–π–Ω —É–¥–∞–ª–µ–Ω–∏—è
  Future<void> markMarkerMapForDeletion(String firebaseId) async {
    final map = await getMarkerMapByFirebaseId(firebaseId);
    if (map == null) {
      debugPrint('‚ùå IsarService: MarkerMap —Å firebaseId=$firebaseId –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è');
      throw Exception('–ú–∞—Ä–∫–µ—Ä–Ω–∞—è –∫–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ');
    }

    map.markedForDeletion = true;
    map.isSynced = false; // –¢—Ä–µ–±—É–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è
    map.updatedAt = DateTime.now();

    await updateMarkerMap(map);
    debugPrint('‚úÖ IsarService: MarkerMap $firebaseId –ø–æ–º–µ—á–µ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
  }

  /// ‚úÖ –ù–û–í–û–ï: –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç –ø–æ–º–µ—á–µ–Ω–Ω—ã—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏)
  Future<List<MarkerMapEntity>> getMarkedForDeletionMarkerMaps(String userId) async {
    final maps = await isar.markerMapEntitys
        .filter()
        .userIdEqualTo(userId)
        .and()
        .markedForDeletionEqualTo(true)
        .findAll();

    debugPrint('üóëÔ∏è IsarService: –ù–∞–π–¥–µ–Ω–æ ${maps.length} MarkerMaps –ø–æ–º–µ—á–µ–Ω–Ω—ã—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
    return maps;
  }

  /// ‚úÖ –ù–û–í–û–ï: –û—á–∏—Å—Ç–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç
  Future<void> cleanupSyncedDeletedMarkerMaps(String userId) async {
    // –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø–∏—Å–∏ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–µ—á–µ–Ω—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ò —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
    final syncedDeletedMaps = await isar.markerMapEntitys
        .filter()
        .userIdEqualTo(userId)
        .and()
        .markedForDeletionEqualTo(true)
        .and()
        .isSyncedEqualTo(true)
        .findAll();

    if (syncedDeletedMaps.isNotEmpty) {
      debugPrint('üßπ IsarService: –ù–∞–π–¥–µ–Ω–æ ${syncedDeletedMaps.length} —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–¥–∞–ª–µ–Ω–Ω—ã—Ö MarkerMaps –¥–ª—è –æ—á–∏—Å—Ç–∫–∏');

      // –§–∏–∑–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ–º –∫–∞–∂–¥—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞–ø–∏—Å—å
      for (final map in syncedDeletedMaps) {
        await deleteMarkerMap(map.id);
        debugPrint('üóëÔ∏è IsarService: –§–∏–∑–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è MarkerMap ID=${map.id}, firebaseId=${map.firebaseId}');
      }

      debugPrint('‚úÖ IsarService: –û—á–∏—Å—Ç–∫–∞ MarkerMaps –∑–∞–≤–µ—Ä—à–µ–Ω–∞ - —É–¥–∞–ª–µ–Ω–æ ${syncedDeletedMaps.length} –∑–∞–ø–∏—Å–µ–π');
    } else {
      debugPrint('üìù IsarService: –ù–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–¥–∞–ª–µ–Ω–Ω—ã—Ö MarkerMaps –¥–ª—è –æ—á–∏—Å—Ç–∫–∏');
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<int> getMarkerMapsCount(String userId) async {
    return await isar.markerMapEntitys
        .filter()
        .userIdEqualTo(userId)
        .and()
        .markedForDeletionEqualTo(false)
        .count();
  }

  /// üÜï –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–ª–∏–∞—Å –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –º–µ—Ç–æ–¥–∞)
  Future<int> getMarkerMapsCountByUser(String userId) async {
    return await getMarkerMapsCount(userId);
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç
  Future<int> getUnsyncedMarkerMapsCount(String userId) async {
    return await isar.markerMapEntitys
        .filter()
        .userIdEqualTo(userId)
        .and()
        .isSyncedEqualTo(false)
        .and()
        .markedForDeletionEqualTo(false)
        .count();
  }

  /// –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –º–∞—Ä–∫–µ—Ä–Ω—ã–µ –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞)
  Future<int> deleteAllMarkerMaps(String userId) async {
    return await isar.writeTxn(() async {
      return await isar.markerMapEntitys
          .filter()
          .userIdEqualTo(userId)
          .deleteAll();
    });
  }

  // ========================================
  // –ú–ï–¢–û–î–´ –î–õ–Ø POLICY ACCEPTANCE
  // ========================================

  /// ‚úÖ –°–£–©–ï–°–¢–í–£–Æ–©–ï–ï: –í—Å—Ç–∞–≤–∫–∞ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ —Å–æ–≥–ª–∞—Å–∏–π –ø–æ–ª–∏—Ç–∏–∫–∏
  Future<int> insertPolicyAcceptance(PolicyAcceptanceEntity policy) async {
    final result = await isar.writeTxn(() async {
      return await isar.policyAcceptanceEntitys.put(policy);
    });

    return result;
  }

  /// ‚úÖ –°–£–©–ï–°–¢–í–£–Æ–©–ï–ï: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–≥–ª–∞—Å–∏–π –ø–æ–ª–∏—Ç–∏–∫–∏
  Future<List<PolicyAcceptanceEntity>> getAllPolicyAcceptances() async {
    final policies = await isar.policyAcceptanceEntitys.where().findAll();

    return policies;
  }

  /// ‚úÖ –°–£–©–ï–°–¢–í–£–Æ–©–ï–ï: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–∏–π –ø–æ–ª–∏—Ç–∏–∫–∏ –ø–æ ID
  Future<PolicyAcceptanceEntity?> getPolicyAcceptanceById(int id) async {
    return await isar.policyAcceptanceEntitys.get(id);
  }

  /// ‚úÖ –°–£–©–ï–°–¢–í–£–Æ–©–ï–ï: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–∏–π –ø–æ–ª–∏—Ç–∏–∫–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  Future<PolicyAcceptanceEntity?> getPolicyAcceptanceByUserId(String userId) async {
    return await isar.policyAcceptanceEntitys
        .filter()
        .userIdEqualTo(userId)
        .findFirst();
  }

  /// ‚úÖ –°–£–©–ï–°–¢–í–£–Æ–©–ï–ï: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–æ–≥–ª–∞—Å–∏–π –ø–æ–ª–∏—Ç–∏–∫–∏
  Future<int> updatePolicyAcceptance(PolicyAcceptanceEntity policy) async {
    policy.updatedAt = DateTime.now();
    return await isar.writeTxn(() async {
      return await isar.policyAcceptanceEntitys.put(policy);
    });
  }

  /// ‚úÖ –°–£–©–ï–°–¢–í–£–Æ–©–ï–ï: –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–∏–π –ø–æ–ª–∏—Ç–∏–∫–∏ –ø–æ ID
  Future<bool> deletePolicyAcceptance(int id) async {
    return await isar.writeTxn(() async {
      return await isar.policyAcceptanceEntitys.delete(id);
    });
  }

  /// ‚úÖ –°–£–©–ï–°–¢–í–£–Æ–©–ï–ï: –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–∏–π –ø–æ–ª–∏—Ç–∏–∫–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  Future<bool> deletePolicyAcceptanceByUserId(String userId) async {
    final policy = await getPolicyAcceptanceByUserId(userId);
    if (policy != null) {
      return await deletePolicyAcceptance(policy.id);
    }
    return false;
  }

  /// ‚úÖ –°–£–©–ï–°–¢–í–£–Æ–©–ï–ï: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–≥–ª–∞—Å–∏–π –ø–æ–ª–∏—Ç–∏–∫–∏
  Future<List<PolicyAcceptanceEntity>> getUnsyncedPolicyAcceptances() async {
    final unsyncedPolicies = await isar.policyAcceptanceEntitys
        .filter()
        .isSyncedEqualTo(false)
        .and()
        .markedForDeletionEqualTo(false)
        .findAll();

    return unsyncedPolicies;
  }

  /// ‚úÖ –°–£–©–ï–°–¢–í–£–Æ–©–ï–ï: –ü–æ–º–µ—á–∞–µ—Ç —Å–æ–≥–ª–∞—Å–∏—è –ø–æ–ª–∏—Ç–∏–∫–∏ –∫–∞–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
  Future<void> markPolicyAcceptanceAsSynced(int id, String firebaseId) async {
    await isar.writeTxn(() async {
      final policy = await isar.policyAcceptanceEntitys.get(id);
      if (policy != null) {
        policy.markAsSynced();
        policy.firebaseId = firebaseId;
        await isar.policyAcceptanceEntitys.put(policy);
      }
    });
  }

  /// ‚úÖ –°–£–©–ï–°–¢–í–£–Æ–©–ï–ï: –ü–æ–º–µ—á–∞–µ—Ç —Å–æ–≥–ª–∞—Å–∏—è –ø–æ–ª–∏—Ç–∏–∫–∏ –∫–∞–∫ –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ (–¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π)
  Future<void> markPolicyAcceptanceAsUnsynced(int id) async {
    await isar.writeTxn(() async {
      final policy = await isar.policyAcceptanceEntitys.get(id);
      if (policy != null) {
        policy.markAsModified();
        await isar.policyAcceptanceEntitys.put(policy);
      }
    });
  }

  /// ‚úÖ –°–£–©–ï–°–¢–í–£–Æ–©–ï–ï: –ü–æ–º–µ—Ç–∏—Ç—å —Å–æ–≥–ª–∞—Å–∏—è –ø–æ–ª–∏—Ç–∏–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
  Future<void> markPolicyAcceptanceForDeletion(int id) async {
    await isar.writeTxn(() async {
      final policy = await isar.policyAcceptanceEntitys.get(id);
      if (policy != null) {
        policy.markForDeletion();
        await isar.policyAcceptanceEntitys.put(policy);
      }
    });
  }

  /// ‚úÖ –°–£–©–ï–°–¢–í–£–Æ–©–ï–ï: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–≥–ª–∞—Å–∏–π –ø–æ–ª–∏—Ç–∏–∫–∏
  Future<int> getPolicyAcceptancesCount() async {
    return await isar.policyAcceptanceEntitys
        .filter()
        .markedForDeletionEqualTo(false)
        .count();
  }

  /// ‚úÖ –°–£–©–ï–°–¢–í–£–Æ–©–ï–ï: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–≥–ª–∞—Å–∏–π –ø–æ–ª–∏—Ç–∏–∫–∏
  Future<int> getUnsyncedPolicyAcceptancesCount() async {
    return await isar.policyAcceptanceEntitys
        .filter()
        .isSyncedEqualTo(false)
        .and()
        .markedForDeletionEqualTo(false)
        .count();
  }

  /// ‚úÖ –°–£–©–ï–°–¢–í–£–Æ–©–ï–ï: –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–æ–≥–ª–∞—Å–∏—è –ø–æ–ª–∏—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞)
  Future<int> deleteAllPolicyAcceptances(String userId) async {
    return await isar.writeTxn(() async {
      return await isar.policyAcceptanceEntitys
          .filter()
          .userIdEqualTo(userId)
          .deleteAll();
    });
  }

  // ========================================
  // üÜï –ú–ï–¢–û–î–´ –î–õ–Ø USER USAGE LIMITS
  // ========================================

  /// üÜï –ù–û–í–û–ï: –í—Å—Ç–∞–≤–∫–∞ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –ª–∏–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<int> insertUserUsageLimits(UserUsageLimitsEntity limits) async {
    final result = await isar.writeTxn(() async {
      return await isar.userUsageLimitsEntitys.put(limits);
    });

    return result;
  }

  /// üÜï –ù–û–í–û–ï: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ª–∏–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  Future<List<UserUsageLimitsEntity>> getAllUserUsageLimits() async {
    final limits = await isar.userUsageLimitsEntitys.where().findAll();

    return limits;
  }

  /// üÜï –ù–û–í–û–ï: –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ –ø–æ ID
  Future<UserUsageLimitsEntity?> getUserUsageLimitsById(int id) async {
    return await isar.userUsageLimitsEntitys.get(id);
  }

  /// üÜï –ù–û–í–û–ï: –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  Future<UserUsageLimitsEntity?> getUserUsageLimitsByUserId(String userId) async {
    return await isar.userUsageLimitsEntitys
        .filter()
        .userIdEqualTo(userId)
        .and()
        .markedForDeletionEqualTo(false)
        .findFirst();
  }

  /// üÜï –ù–û–í–û–ï: –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ –ø–æ Firebase ID
  Future<UserUsageLimitsEntity?> getUserUsageLimitsByFirebaseId(String firebaseId) async {
    return await isar.userUsageLimitsEntitys
        .filter()
        .firebaseIdEqualTo(firebaseId)
        .findFirst();
  }

  /// üÜï –ù–û–í–û–ï: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ª–∏–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<int> updateUserUsageLimits(UserUsageLimitsEntity limits) async {
    limits.updatedAt = DateTime.now();
    return await isar.writeTxn(() async {
      return await isar.userUsageLimitsEntitys.put(limits);
    });
  }

  /// üÜï –ù–û–í–û–ï: –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ –ø–æ ID
  Future<bool> deleteUserUsageLimits(int id) async {
    return await isar.writeTxn(() async {
      return await isar.userUsageLimitsEntitys.delete(id);
    });
  }

  /// üÜï –ù–û–í–û–ï: –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  Future<bool> deleteUserUsageLimitsByUserId(String userId) async {
    final limits = await getUserUsageLimitsByUserId(userId);
    if (limits != null) {
      return await deleteUserUsageLimits(limits.id);
    }
    return false;
  }

  /// üÜï –ù–û–í–û–ï: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  Future<List<UserUsageLimitsEntity>> getUnsyncedUserUsageLimits() async {
    final unsyncedLimits = await isar.userUsageLimitsEntitys
        .filter()
        .isSyncedEqualTo(false)
        .and()
        .markedForDeletionEqualTo(false)
        .findAll();

    return unsyncedLimits;
  }

  /// üÜï –ù–û–í–û–ï: –ü–æ–º–µ—á–∞–µ—Ç –ª–∏–º–∏—Ç—ã –∫–∞–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
  Future<void> markUserUsageLimitsAsSynced(int id, String firebaseId) async {
    await isar.writeTxn(() async {
      final limits = await isar.userUsageLimitsEntitys.get(id);
      if (limits != null) {
        limits.markAsSynced();
        limits.firebaseId = firebaseId;
        await isar.userUsageLimitsEntitys.put(limits);
      }
    });
  }

  /// üÜï –ù–û–í–û–ï: –ü–æ–º–µ—á–∞–µ—Ç –ª–∏–º–∏—Ç—ã –∫–∞–∫ –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ (–¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π)
  Future<void> markUserUsageLimitsAsUnsynced(int id) async {
    await isar.writeTxn(() async {
      final limits = await isar.userUsageLimitsEntitys.get(id);
      if (limits != null) {
        limits.markAsModified();
        await isar.userUsageLimitsEntitys.put(limits);
      }
    });
  }

  /// üÜï –ù–û–í–û–ï: –ü–æ–º–µ—Ç–∏—Ç—å –ª–∏–º–∏—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
  Future<void> markUserUsageLimitsForDeletion(int id) async {
    await isar.writeTxn(() async {
      final limits = await isar.userUsageLimitsEntitys.get(id);
      if (limits != null) {
        limits.markForDeletion();
        await isar.userUsageLimitsEntitys.put(limits);
      }
    });
  }

  /// üÜï –ù–û–í–û–ï: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π –ª–∏–º–∏—Ç–æ–≤
  Future<int> getUserUsageLimitsCount() async {
    return await isar.userUsageLimitsEntitys
        .filter()
        .markedForDeletionEqualTo(false)
        .count();
  }

  /// üÜï –ù–û–í–û–ï: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤
  Future<int> getUnsyncedUserUsageLimitsCount() async {
    return await isar.userUsageLimitsEntitys
        .filter()
        .isSyncedEqualTo(false)
        .and()
        .markedForDeletionEqualTo(false)
        .count();
  }

  /// üÜï –ù–û–í–û–ï: –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞)
  Future<int> deleteAllUserUsageLimits(String userId) async {
    return await isar.writeTxn(() async {
      return await isar.userUsageLimitsEntitys
          .filter()
          .userIdEqualTo(userId)
          .deleteAll();
    });
  }

  /// üÜï –ù–û–í–û–ï: –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<UserUsageLimitsEntity> createOrUpdateUserUsageLimits(String userId, {
    int? budgetNotesCount,
    int? expensesCount,
    int? markerMapsCount,
    int? notesCount,
    int? tripsCount,
    String? recalculationType,
  }) async {
    // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ª–∏–º–∏—Ç—ã
    var limits = await getUserUsageLimitsByUserId(userId);

    if (limits == null) {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –ª–∏–º–∏—Ç—ã
      limits = UserUsageLimitsEntity()
        ..userId = userId
        ..budgetNotesCount = budgetNotesCount ?? 0
        ..expensesCount = expensesCount ?? 0
        ..markerMapsCount = markerMapsCount ?? 0
        ..notesCount = notesCount ?? 0
        ..tripsCount = tripsCount ?? 0
        ..recalculationType = recalculationType
        ..recalculatedAt = DateTime.now().toIso8601String()
        ..createdAt = DateTime.now()
        ..updatedAt = DateTime.now()
        ..isSynced = false;

      await insertUserUsageLimits(limits);
    } else {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ª–∏–º–∏—Ç—ã
      if (budgetNotesCount != null) limits.budgetNotesCount = budgetNotesCount;
      if (expensesCount != null) limits.expensesCount = expensesCount;
      if (markerMapsCount != null) limits.markerMapsCount = markerMapsCount;
      if (notesCount != null) limits.notesCount = notesCount;
      if (tripsCount != null) limits.tripsCount = tripsCount;
      if (recalculationType != null) limits.recalculationType = recalculationType;

      limits.recalculatedAt = DateTime.now().toIso8601String();
      limits.markAsModified();

      await updateUserUsageLimits(limits);
    }

    return limits;
  }

  // ========================================
// üÜï –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø BAIT PROGRAMS
// ========================================

  /// –í—Å—Ç–∞–≤–∫–∞ –Ω–æ–≤–æ–π –ø—Ä–∏–∫–æ—Ä–º–æ—á–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
  Future<int> insertBaitProgram(BaitProgramEntity program) async {
    final result = await isar.writeTxn(() async {
      return await isar.baitProgramEntitys.put(program);
    });

    debugPrint('üìù IsarService: –í—Å—Ç–∞–≤–ª–µ–Ω–∞ BaitProgram —Å ID=$result, firebaseId=${program.firebaseId}, markedForDeletion=${program.markedForDeletion}');
    return result;
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ê–ö–¢–ò–í–ù–´–• –ø—Ä–∏–∫–æ—Ä–º–æ—á–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º (–∏—Å–∫–ª—é—á–∞—è –ø–æ–º–µ—á–µ–Ω–Ω—ã–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è)
  Future<List<BaitProgramEntity>> getAllBaitPrograms() async {
    final userId = getCurrentUserId();
    if (userId == null) {
      debugPrint('‚ö†Ô∏è IsarService: getCurrentUserId() –≤–µ—Ä–Ω—É–ª null –¥–ª—è BaitPrograms');
      return [];
    }

    final programs = await isar.baitProgramEntitys
        .filter()
        .userIdEqualTo(userId)
        .and()
        .not() // –ù–ï —Ä–∞–≤–Ω–æ true
        .markedForDeletionEqualTo(true)
        .sortByCreatedAtDesc()
        .findAll();

    debugPrint('üìã IsarService: –ù–∞–π–¥–µ–Ω–æ ${programs.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö BaitPrograms –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $userId');
    return programs;
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ ID
  Future<BaitProgramEntity?> getBaitProgramById(int id) async {
    final program = await isar.baitProgramEntitys.get(id);
    debugPrint('üîç IsarService: getBaitProgramById($id) = ${program != null ? "–Ω–∞–π–¥–µ–Ω–∞" : "–Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}');
    return program;
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ Firebase ID
  Future<BaitProgramEntity?> getBaitProgramByFirebaseId(String firebaseId) async {
    final program = await isar.baitProgramEntitys
        .filter()
        .firebaseIdEqualTo(firebaseId)
        .findFirst();

    debugPrint('üîç IsarService: getBaitProgramByFirebaseId($firebaseId) = ${program != null ? "–Ω–∞–π–¥–µ–Ω–∞" : "–Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}');
    if (program != null) {
      debugPrint('üìù IsarService: –ü—Ä–æ–≥—Ä–∞–º–º–∞ markedForDeletion=${program.markedForDeletion}, isSynced=${program.isSynced}');
    }
    return program;
  }

  /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
  Future<int> updateBaitProgram(BaitProgramEntity program) async {
    program.updatedAt = DateTime.now();
    final result = await isar.writeTxn(() async {
      return await isar.baitProgramEntitys.put(program);
    });

    debugPrint('üîÑ IsarService: –û–±–Ω–æ–≤–ª–µ–Ω–∞ BaitProgram ID=${program.id}, firebaseId=${program.firebaseId}, markedForDeletion=${program.markedForDeletion}, isSynced=${program.isSynced}');
    return result;
  }

  /// –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ ID (—Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ)
  Future<bool> deleteBaitProgram(int id) async {
    final result = await isar.writeTxn(() async {
      return await isar.baitProgramEntitys.delete(id);
    });

    debugPrint('üóëÔ∏è IsarService: –§–∏–∑–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω–∞ BaitProgram ID=$id, —Ä–µ–∑—É–ª—å—Ç–∞—Ç=$result');
    return result;
  }

  /// –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ Firebase ID (—Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ)
  Future<bool> deleteBaitProgramByFirebaseId(String firebaseId) async {
    final program = await getBaitProgramByFirebaseId(firebaseId);
    if (program != null) {
      final result = await deleteBaitProgram(program.id);
      debugPrint('üóëÔ∏è IsarService: –§–∏–∑–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω–∞ BaitProgram firebaseId=$firebaseId, —Ä–µ–∑—É–ª—å—Ç–∞—Ç=$result');
      return result;
    }
    debugPrint('‚ö†Ô∏è IsarService: –ü—Ä–æ–≥—Ä–∞–º–º–∞ firebaseId=$firebaseId –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è');
    return false;
  }

  /// –ü–æ–∏—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –æ–ø–∏—Å–∞–Ω–∏—é
  Future<List<BaitProgramEntity>> searchBaitPrograms(String query) async {
    final userId = getCurrentUserId();
    if (userId == null) {
      return [];
    }

    final programs = await isar.baitProgramEntitys
        .filter()
        .userIdEqualTo(userId)
        .and()
        .not()
        .markedForDeletionEqualTo(true)
        .and()
        .group((q) => q
        .titleContains(query, caseSensitive: false)
        .or()
        .descriptionContains(query, caseSensitive: false))
        .sortByCreatedAtDesc()
        .findAll();

    debugPrint('üîç IsarService: –ü–æ–∏—Å–∫ "$query" –Ω–∞—à–µ–ª ${programs.length} –ø—Ä–æ–≥—Ä–∞–º–º');
    return programs;
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º
  Future<List<BaitProgramEntity>> getUnsyncedBaitPrograms() async {
    final userId = getCurrentUserId();
    if (userId == null) {
      return [];
    }

    final unsyncedPrograms = await isar.baitProgramEntitys
        .filter()
        .userIdEqualTo(userId)
        .and()
        .isSyncedEqualTo(false)
        .findAll();

    debugPrint('üîç IsarService: getUnsyncedBaitPrograms –Ω–∞–π–¥–µ–Ω–æ ${unsyncedPrograms.length} –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º');
    return unsyncedPrograms;
  }

  /// –ü–æ–º–µ—á–∞–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º—É –∫–∞–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é
  Future<void> markBaitProgramAsSynced(int id, String firebaseId) async {
    bool shouldDelete = false;

    await isar.writeTxn(() async {
      final program = await isar.baitProgramEntitys.get(id);
      if (program != null) {
        program.isSynced = true;
        program.firebaseId = firebaseId;
        program.updatedAt = DateTime.now();
        await isar.baitProgramEntitys.put(program);
        debugPrint('‚úÖ IsarService: –ü—Ä–æ–≥—Ä–∞–º–º–∞ ID=$id –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å firebaseId=$firebaseId');

        if (program.markedForDeletion == true) {
          shouldDelete = true;
        }
      }
    });

    if (shouldDelete) {
      await deleteBaitProgram(id);
      debugPrint('üßπ IsarService: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–º–µ—á–µ–Ω–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ ID=$id');
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–∏–∫–æ—Ä–º–æ—á–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<int> getBaitProgramsCountByUser(String userId) async {
    final count = await isar.baitProgramEntitys
        .filter()
        .userIdEqualTo(userId)
        .and()
        .not()
        .markedForDeletionEqualTo(true)
        .count();

    debugPrint('üìä IsarService: –ê–∫—Ç–∏–≤–Ω—ã—Ö BaitPrograms –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $userId: $count');
    return count;
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º
  Future<int> getUnsyncedBaitProgramsCount([String? userId]) async {
    if (userId != null) {
      return await isar.baitProgramEntitys
          .filter()
          .userIdEqualTo(userId)
          .and()
          .isSyncedEqualTo(false)
          .count();
    }

    return await isar.baitProgramEntitys
        .filter()
        .isSyncedEqualTo(false)
        .count();
  }

  /// –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º
  Future<void> clearAllBaitPrograms() async {
    await isar.writeTxn(() async {
      await isar.baitProgramEntitys.clear();
    });
    debugPrint('üßπ IsarService: –û—á–∏—â–µ–Ω—ã –≤—Å–µ BaitPrograms');
  }

/// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–∫–æ—Ä–º–æ—á–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º –ø–æ–º–µ—á–µ–Ω–Ω—ã—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
  Future<List<BaitProgramEntity>> getMarkedForDeletionBaitPrograms() async {
    final userId = getCurrentUserId();
    if (userId == null) {
      return [];
    }

    final markedPrograms = await isar.baitProgramEntitys
        .filter()
        .userIdEqualTo(userId)
        .and()
        .markedForDeletionEqualTo(true)
        .findAll();

    debugPrint('üóëÔ∏è IsarService: –ù–∞–π–¥–µ–Ω–æ ${markedPrograms.length} BaitPrograms –ø–æ–º–µ—á–µ–Ω–Ω—ã—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
    return markedPrograms;
  }

  // ========================================
  // üÜï –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø FISHING DIARY
  // ========================================

  /// –í—Å—Ç–∞–≤–∫–∞ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –¥–Ω–µ–≤–Ω–∏–∫–∞ —Ä—ã–±–∞–ª–∫–∏
  Future<int> insertFishingDiaryEntry(FishingDiaryEntity entry) async {
    final result = await isar.writeTxn(() async {
      return await isar.fishingDiaryEntitys.put(entry);
    });

    debugPrint('üìù IsarService: –í—Å—Ç–∞–≤–ª–µ–Ω–∞ FishingDiaryEntry —Å ID=$result, firebaseId=${entry.firebaseId}, markedForDeletion=${entry.markedForDeletion}');
    return result;
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ê–ö–¢–ò–í–ù–´–• –∑–∞–ø–∏—Å–µ–π –¥–Ω–µ–≤–Ω–∏–∫–∞ (–∏—Å–∫–ª—é—á–∞—è –ø–æ–º–µ—á–µ–Ω–Ω—ã–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è)
  Future<List<FishingDiaryEntity>> getAllFishingDiaryEntries() async {
    final userId = getCurrentUserId();
    if (userId == null) {
      debugPrint('‚ö†Ô∏è IsarService: getCurrentUserId() –≤–µ—Ä–Ω—É–ª null –¥–ª—è FishingDiaryEntries');
      return [];
    }

    final entries = await isar.fishingDiaryEntitys
        .filter()
        .userIdEqualTo(userId)
        .and()
        .not() // –ù–ï —Ä–∞–≤–Ω–æ true
        .markedForDeletionEqualTo(true)
        .sortByCreatedAtDesc()
        .findAll();

    debugPrint('üìã IsarService: –ù–∞–π–¥–µ–Ω–æ ${entries.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö FishingDiaryEntries –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $userId');
    return entries;
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ø–æ ID
  Future<FishingDiaryEntity?> getFishingDiaryEntryById(int id) async {
    final entry = await isar.fishingDiaryEntitys.get(id);
    debugPrint('üîç IsarService: getFishingDiaryEntryById($id) = ${entry != null ? "–Ω–∞–π–¥–µ–Ω–∞" : "–Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}');
    return entry;
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ø–æ Firebase ID
  Future<FishingDiaryEntity?> getFishingDiaryEntryByFirebaseId(String firebaseId) async {
    final entry = await isar.fishingDiaryEntitys
        .filter()
        .firebaseIdEqualTo(firebaseId)
        .findFirst();

    debugPrint('üîç IsarService: getFishingDiaryEntryByFirebaseId($firebaseId) = ${entry != null ? "–Ω–∞–π–¥–µ–Ω–∞" : "–Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}');
    if (entry != null) {
      debugPrint('üìù IsarService: –ó–∞–ø–∏—Å—å markedForDeletion=${entry.markedForDeletion}, isSynced=${entry.isSynced}');
    }
    return entry;
  }

  /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏
  Future<int> updateFishingDiaryEntry(FishingDiaryEntity entry) async {
    entry.updatedAt = DateTime.now();
    final result = await isar.writeTxn(() async {
      return await isar.fishingDiaryEntitys.put(entry);
    });

    debugPrint('üîÑ IsarService: –û–±–Ω–æ–≤–ª–µ–Ω–∞ FishingDiaryEntry ID=${entry.id}, firebaseId=${entry.firebaseId}, markedForDeletion=${entry.markedForDeletion}, isSynced=${entry.isSynced}');
    return result;
  }

  /// –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ø–æ ID (—Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ)
  Future<bool> deleteFishingDiaryEntry(int id) async {
    final result = await isar.writeTxn(() async {
      return await isar.fishingDiaryEntitys.delete(id);
    });

    debugPrint('üóëÔ∏è IsarService: –§–∏–∑–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω–∞ FishingDiaryEntry ID=$id, —Ä–µ–∑—É–ª—å—Ç–∞—Ç=$result');
    return result;
  }

  /// –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ø–æ Firebase ID (—Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ)
  Future<bool> deleteFishingDiaryEntryByFirebaseId(String firebaseId) async {
    final entry = await getFishingDiaryEntryByFirebaseId(firebaseId);
    if (entry != null) {
      final result = await deleteFishingDiaryEntry(entry.id);
      debugPrint('üóëÔ∏è IsarService: –§–∏–∑–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω–∞ FishingDiaryEntry firebaseId=$firebaseId, —Ä–µ–∑—É–ª—å—Ç–∞—Ç=$result');
      return result;
    }
    debugPrint('‚ö†Ô∏è IsarService: –ó–∞–ø–∏—Å—å firebaseId=$firebaseId –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è');
    return false;
  }

  /// –ü–æ–∏—Å–∫ –∑–∞–ø–∏—Å–µ–π –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –æ–ø–∏—Å–∞–Ω–∏—é
  Future<List<FishingDiaryEntity>> searchFishingDiaryEntries(String query) async {
    final userId = getCurrentUserId();
    if (userId == null) {
      return [];
    }

    final entries = await isar.fishingDiaryEntitys
        .filter()
        .userIdEqualTo(userId)
        .and()
        .not()
        .markedForDeletionEqualTo(true)
        .and()
        .group((q) => q
        .titleContains(query, caseSensitive: false)
        .or()
        .descriptionContains(query, caseSensitive: false))
        .sortByCreatedAtDesc()
        .findAll();

    debugPrint('üîç IsarService: –ü–æ–∏—Å–∫ "$query" –Ω–∞—à–µ–ª ${entries.length} –∑–∞–ø–∏—Å–µ–π –¥–Ω–µ–≤–Ω–∏–∫–∞');
    return entries;
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
  Future<List<FishingDiaryEntity>> getUnsyncedFishingDiaryEntries() async {
    final userId = getCurrentUserId();
    if (userId == null) {
      return [];
    }

    final unsyncedEntries = await isar.fishingDiaryEntitys
        .filter()
        .userIdEqualTo(userId)
        .and()
        .isSyncedEqualTo(false)
        .findAll();

    debugPrint('üîç IsarService: getUnsyncedFishingDiaryEntries –Ω–∞–π–¥–µ–Ω–æ ${unsyncedEntries.length} –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π');
    return unsyncedEntries;
  }

  /// –ü–æ–º–µ—á–∞–µ—Ç –∑–∞–ø–∏—Å—å –∫–∞–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é
  Future<void> markFishingDiaryEntryAsSynced(int id, String firebaseId) async {
    bool shouldDelete = false;

    await isar.writeTxn(() async {
      final entry = await isar.fishingDiaryEntitys.get(id);
      if (entry != null) {
        entry.isSynced = true;
        entry.firebaseId = firebaseId;
        entry.updatedAt = DateTime.now();
        await isar.fishingDiaryEntitys.put(entry);
        debugPrint('‚úÖ IsarService: –ó–∞–ø–∏—Å—å –¥–Ω–µ–≤–Ω–∏–∫–∞ ID=$id –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å firebaseId=$firebaseId');

        if (entry.markedForDeletion == true) {
          shouldDelete = true;
        }
      }
    });

    if (shouldDelete) {
      await deleteFishingDiaryEntry(id);
      debugPrint('üßπ IsarService: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–º–µ—á–µ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å –¥–Ω–µ–≤–Ω–∏–∫–∞ ID=$id');
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π –¥–Ω–µ–≤–Ω–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<int> getFishingDiaryEntriesCountByUser(String userId) async {
    final count = await isar.fishingDiaryEntitys
        .filter()
        .userIdEqualTo(userId)
        .and()
        .not()
        .markedForDeletionEqualTo(true)
        .count();

    debugPrint('üìä IsarService: –ê–∫—Ç–∏–≤–Ω—ã—Ö FishingDiaryEntries –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $userId: $count');
    return count;
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
  Future<int> getUnsyncedFishingDiaryEntriesCount([String? userId]) async {
    if (userId != null) {
      return await isar.fishingDiaryEntitys
          .filter()
          .userIdEqualTo(userId)
          .and()
          .isSyncedEqualTo(false)
          .count();
    }

    return await isar.fishingDiaryEntitys
        .filter()
        .isSyncedEqualTo(false)
        .count();
  }

  /// –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–Ω–µ–≤–Ω–∏–∫–∞
  Future<void> clearAllFishingDiaryEntries() async {
    await isar.writeTxn(() async {
      await isar.fishingDiaryEntitys.clear();
    });
    debugPrint('üßπ IsarService: –û—á–∏—â–µ–Ω—ã –≤—Å–µ FishingDiaryEntries');
  }

/// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π FishingDiary –ø–æ–º–µ—á–µ–Ω–Ω—ã—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
  Future<List<FishingDiaryEntity>> getMarkedForDeletionFishingDiaryEntries() async {
    final userId = getCurrentUserId();
    if (userId == null) {
      return [];
    }

    final markedEntries = await isar.fishingDiaryEntitys
        .filter()
        .userIdEqualTo(userId)
        .and()
        .markedForDeletionEqualTo(true)
        .findAll();

    debugPrint('üóëÔ∏è IsarService: –ù–∞–π–¥–µ–Ω–æ ${markedEntries.length} FishingDiary –∑–∞–ø–∏—Å–µ–π –ø–æ–º–µ—á–µ–Ω–Ω—ã—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
    return markedEntries;
  }

  // ========================================
  // –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –û–ë–©–ò–ï –ú–ï–¢–û–î–´
  // ========================================

  /// ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –≤–∫–ª—é—á–∞—è UserUsageLimits (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
  Future<void> clearAllData() async {
    await isar.writeTxn(() async {
      await isar.fishingNoteEntitys.clear();
      await isar.budgetNoteEntitys.clear();
      await isar.markerMapEntitys.clear();
      await isar.policyAcceptanceEntitys.clear();
      await isar.userUsageLimitsEntitys.clear();
      await isar.baitProgramEntitys.clear();
      await isar.fishingDiaryEntitys.clear();
      await isar.fishingDiaryFolderEntitys.clear();
    });
  }

  /// ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–∫–ª—é—á–∞—è UserUsageLimits —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  Future<Map<String, dynamic>> getGeneralStats() async {
    final userId = getCurrentUserId();
    if (userId == null) return {};

    return {
      'fishingNotes': {
        'total': await getFishingNotesCountByUser(userId),
        'unsynced': await getUnsyncedNotesCount(userId),
      },
      'budgetNotes': {
        'total': await getBudgetNotesCount(userId),
        'unsynced': await getUnsyncedBudgetNotesCount(userId),
      },
      'markerMaps': {
        'total': await getMarkerMapsCount(userId),
        'unsynced': await getUnsyncedMarkerMapsCount(userId),
      },
      'baitPrograms': {
        'total': await getBaitProgramsCountByUser(userId),
        'unsynced': await getUnsyncedBaitProgramsCount(userId),
      },
      'fishingDiary': {
        'total': await getFishingDiaryEntriesCountByUser(userId),
        'unsynced': await getUnsyncedFishingDiaryEntriesCount(userId),
      },
      'fishingDiaryFolders': {
        'total': await getFishingDiaryFoldersCountByUser(userId),
        'unsynced': await getUnsyncedFishingDiaryFoldersCount(userId),
      },
      'policyAcceptance': {
        'total': await getPolicyAcceptancesCount(),
        'unsynced': await getUnsyncedPolicyAcceptancesCount(),
      },
      'userUsageLimits': {
        'total': await getUserUsageLimitsCount(),
        'unsynced': await getUnsyncedUserUsageLimitsCount(),
      },
    };
  }

  /// ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–∫–ª—é—á–∞—è UserUsageLimits (–¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞)
  Future<void> deleteAllUserData(String userId) async {
    await isar.writeTxn(() async {
      // –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≤—Å–µ—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π
      await isar.budgetNoteEntitys
          .filter()
          .userIdEqualTo(userId)
          .deleteAll();

      await isar.markerMapEntitys
          .filter()
          .userIdEqualTo(userId)
          .deleteAll();

      await isar.policyAcceptanceEntitys
          .filter()
          .userIdEqualTo(userId)
          .deleteAll();

      await isar.userUsageLimitsEntitys
          .filter()
          .userIdEqualTo(userId)
          .deleteAll();

      await isar.baitProgramEntitys
          .filter()
          .userIdEqualTo(userId)
          .deleteAll();

      await isar.fishingDiaryEntitys
          .filter()
          .userIdEqualTo(userId)
          .deleteAll();

      await isar.fishingDiaryFolderEntitys
          .filter()
          .userIdEqualTo(userId)
          .deleteAll();

      // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: FishingNotes —Ç–µ–ø–µ—Ä—å —Ç–∞–∫–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ userId
      await isar.fishingNoteEntitys
          .filter()
          .userIdEqualTo(userId)
          .deleteAll();
    });
  }

  // ========================================
  // –ú–ï–¢–û–î–´ –î–õ–Ø –ü–ê–ü–û–ö –î–ù–ï–í–ù–ò–ö–ê –†–´–ë–ê–õ–ö–ò
  // ========================================

  /// –í—Å—Ç–∞–≤–∫–∞ –Ω–æ–≤–æ–π –ø–∞–ø–∫–∏
  Future<int> insertFishingDiaryFolder(FishingDiaryFolderEntity folder) async {
    final result = await isar.writeTxn(() async {
      return await isar.fishingDiaryFolderEntitys.put(folder);
    });
    debugPrint('üìù IsarService: –í—Å—Ç–∞–≤–ª–µ–Ω–∞ –ø–∞–ø–∫–∞ —Å ID=$result, name=${folder.name}');
    return result;
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–∞–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<List<FishingDiaryFolderEntity>> getAllFishingDiaryFolders() async {
    final userId = getCurrentUserId();
    if (userId == null) return [];

    final folders = await isar.fishingDiaryFolderEntitys
        .filter()
        .userIdEqualTo(userId)
        .and()
        .not()
        .markedForDeletionEqualTo(true)
        .sortBySortOrder()
        .findAll();

    debugPrint('üìã IsarService: –ù–∞–π–¥–µ–Ω–æ ${folders.length} –ø–∞–ø–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $userId');
    return folders;
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞–ø–∫–∏ –ø–æ Firebase ID
  Future<FishingDiaryFolderEntity?> getFishingDiaryFolderByFirebaseId(String firebaseId) async {
    return await isar.fishingDiaryFolderEntitys
        .filter()
        .firebaseIdEqualTo(firebaseId)
        .findFirst();
  }

  /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–ø–∫–∏
  Future<int> updateFishingDiaryFolder(FishingDiaryFolderEntity folder) async {
    folder.updatedAt = DateTime.now();
    return await isar.writeTxn(() async {
      return await isar.fishingDiaryFolderEntitys.put(folder);
    });
  }

  /// –£–¥–∞–ª–µ–Ω–∏–µ –ø–∞–ø–∫–∏
  Future<bool> deleteFishingDiaryFolder(int id) async {
    return await isar.writeTxn(() async {
      return await isar.fishingDiaryFolderEntitys.delete(id);
    });
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –ø–æ –ø–∞–ø–∫–µ
  Future<List<FishingDiaryEntity>> getFishingDiaryEntriesByFolderId(String folderId) async {
    final userId = getCurrentUserId();
    if (userId == null) return [];

    return await isar.fishingDiaryEntitys
        .filter()
        .userIdEqualTo(userId)
        .and()
        .folderIdEqualTo(folderId)
        .and()
        .not()
        .markedForDeletionEqualTo(true)
        .sortByCreatedAtDesc()
        .findAll();
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –±–µ–∑ –ø–∞–ø–∫–∏
  Future<List<FishingDiaryEntity>> getFishingDiaryEntriesWithoutFolder() async {
    final userId = getCurrentUserId();
    if (userId == null) return [];

    return await isar.fishingDiaryEntitys
        .filter()
        .userIdEqualTo(userId)
        .and()
        .folderIdIsNull()
        .and()
        .not()
        .markedForDeletionEqualTo(true)
        .sortByCreatedAtDesc()
        .findAll();
  }

  /// –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –ø–∞–ø–∫—É
  Future<void> moveFishingDiaryEntryToFolder(String entryFirebaseId, String? folderId) async {
    final entry = await getFishingDiaryEntryByFirebaseId(entryFirebaseId);
    if (entry == null) throw Exception('–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');

    entry.folderId = folderId;
    entry.markAsModified();
    await updateFishingDiaryEntry(entry);
  }

  /// –ù–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞–ø–∫–∏
  Future<List<FishingDiaryFolderEntity>> getUnsyncedFishingDiaryFolders() async {
    final userId = getCurrentUserId();
    if (userId == null) return [];

    return await isar.fishingDiaryFolderEntitys
        .filter()
        .userIdEqualTo(userId)
        .and()
        .isSyncedEqualTo(false)
        .findAll();
  }

  /// –ü–æ–º–µ—Ç–∏—Ç—å –ø–∞–ø–∫—É –∫–∞–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é
  Future<void> markFishingDiaryFolderAsSynced(int id, String firebaseId) async {
    bool shouldDelete = false;

    await isar.writeTxn(() async {
      final folder = await isar.fishingDiaryFolderEntitys.get(id);
      if (folder != null) {
        folder.isSynced = true;
        folder.firebaseId = firebaseId;
        await isar.fishingDiaryFolderEntitys.put(folder);

        if (folder.markedForDeletion == true) {
          shouldDelete = true;
        }
      }
    });

    if (shouldDelete) {
      await deleteFishingDiaryFolder(id);
    }
  }

  /// –ü–æ–∏—Å–∫ –ø–∞–ø–æ–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
  Future<List<FishingDiaryFolderEntity>> searchFishingDiaryFolders(String query) async {
    final userId = getCurrentUserId();
    if (userId == null) return [];

    return await isar.fishingDiaryFolderEntitys
        .filter()
        .userIdEqualTo(userId)
        .and()
        .not()
        .markedForDeletionEqualTo(true)
        .and()
        .nameContains(query, caseSensitive: false)
        .sortBySortOrder()
        .findAll();
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞–ø–∫–∏ –ø–æ ID (–ª–æ–∫–∞–ª—å–Ω—ã–π ID)
  Future<FishingDiaryFolderEntity?> getFishingDiaryFolderById(int id) async {
    return await isar.fishingDiaryFolderEntitys.get(id);
  }

  /// –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –ø–∞–ø–æ–∫ –¥–Ω–µ–≤–Ω–∏–∫–∞
  Future<void> clearAllFishingDiaryFolders() async {
    await isar.writeTxn(() async {
      await isar.fishingDiaryFolderEntitys.clear();
    });
    debugPrint('üßπ IsarService: –û—á–∏—â–µ–Ω—ã –≤—Å–µ –ø–∞–ø–∫–∏ –¥–Ω–µ–≤–Ω–∏–∫–∞');
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞–ø–æ–∫ –¥–Ω–µ–≤–Ω–∏–∫–∞ –ø–æ–º–µ—á–µ–Ω–Ω—ã—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
  Future<List<FishingDiaryFolderEntity>> getMarkedForDeletionFishingDiaryFolders() async {
    final userId = getCurrentUserId();
    if (userId == null) return [];

    final markedFolders = await isar.fishingDiaryFolderEntitys
        .filter()
        .userIdEqualTo(userId)
        .and()
        .markedForDeletionEqualTo(true)
        .findAll();

    debugPrint('üóëÔ∏è IsarService: –ù–∞–π–¥–µ–Ω–æ ${markedFolders.length} –ø–∞–ø–æ–∫ –¥–Ω–µ–≤–Ω–∏–∫–∞ –ø–æ–º–µ—á–µ–Ω–Ω—ã—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
    return markedFolders;
  }

  /// –ü–æ–º–µ—Ç–∏—Ç—å –ø–∞–ø–∫—É –¥–Ω–µ–≤–Ω–∏–∫–∞ –¥–ª—è –æ—Ñ–ª–∞–π–Ω —É–¥–∞–ª–µ–Ω–∏—è
  Future<void> markFishingDiaryFolderForDeletion(String firebaseId) async {
    final folder = await getFishingDiaryFolderByFirebaseId(firebaseId);
    if (folder == null) {
      debugPrint('‚ùå IsarService: –ü–∞–ø–∫–∞ —Å firebaseId=$firebaseId –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è');
      throw Exception('–ü–∞–ø–∫–∞ –¥–Ω–µ–≤–Ω–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ');
    }

    folder.markedForDeletion = true;
    folder.isSynced = false; // –¢—Ä–µ–±—É–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è
    folder.updatedAt = DateTime.now();

    await updateFishingDiaryFolder(folder);
    debugPrint('‚úÖ IsarService: –ü–∞–ø–∫–∞ –¥–Ω–µ–≤–Ω–∏–∫–∞ $firebaseId –ø–æ–º–µ—á–µ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∞–ø–æ–∫ –¥–Ω–µ–≤–Ω–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<int> getFishingDiaryFoldersCountByUser(String userId) async {
    final count = await isar.fishingDiaryFolderEntitys
        .filter()
        .userIdEqualTo(userId)
        .and()
        .not()
        .markedForDeletionEqualTo(true)
        .count();

    debugPrint('üìä IsarService: –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞–ø–æ–∫ –¥–Ω–µ–≤–Ω–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $userId: $count');
    return count;
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫
  Future<int> getUnsyncedFishingDiaryFoldersCount([String? userId]) async {
    if (userId != null) {
      return await isar.fishingDiaryFolderEntitys
          .filter()
          .userIdEqualTo(userId)
          .and()
          .isSyncedEqualTo(false)
          .count();
    }

    return await isar.fishingDiaryFolderEntitys
        .filter()
        .isSyncedEqualTo(false)
        .count();
  }

  /// –ó–∞–∫—Ä—ã—Ç–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  Future<void> close() async {
    await _isar?.close();
    _isar = null;
    _instance = null;
  }
}