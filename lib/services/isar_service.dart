// –ü—É—Ç—å: lib/services/isar_service.dart

import 'package:flutter/foundation.dart';
import 'package:isar/isar.dart';
import 'package:path_provider/path_provider.dart';
import 'package:firebase_auth/firebase_auth.dart';
import '../models/isar/fishing_note_entity.dart';
import '../models/isar/budget_note_entity.dart';
import '../models/isar/marker_map_entity.dart';
import '../models/isar/policy_acceptance_entity.dart';
import '../models/isar/user_usage_limits_entity.dart'; // üÜï –î–û–ë–ê–í–õ–ï–ù–û


class IsarService {
  static IsarService? _instance;
  static Isar? _isar;

  IsarService._();

  static IsarService get instance {
    _instance ??= IsarService._();
    return _instance!;
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  bool get isInitialized => _isar != null;

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Isar
  Future<void> init() async {
    if (_isar != null) return;

    final dir = await getApplicationDocumentsDirectory();

    _isar = await Isar.open(
      [
        FishingNoteEntitySchema,
        BudgetNoteEntitySchema,
        MarkerMapEntitySchema,
        PolicyAcceptanceEntitySchema,
        UserUsageLimitsEntitySchema, // üÜï –î–û–ë–ê–í–õ–ï–ù–û
      ],
      directory: dir.path,
    );

    if (kDebugMode) {
      debugPrint('‚úÖ IsarService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤: ${dir.path}');
      debugPrint('‚úÖ IsarService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π PolicyAcceptance –∏ UserUsageLimits'); // üÜï –û–ë–ù–û–í–õ–ï–ù–û
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Isar
  Isar get isar {
    if (_isar == null) {
      throw Exception('IsarService –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –í—ã–∑–æ–≤–∏—Ç–µ init() —Å–Ω–∞—á–∞–ª–∞.');
    }
    return _isar!;
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (alias –¥–ª—è isar)
  Future<Isar> get database async {
    if (_isar == null) {
      await init();
    }
    return _isar!;
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  String? getCurrentUserId() {
    final user = FirebaseAuth.instance.currentUser;
    return user?.uid;
  }

  // ========================================
  // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø FISHING NOTES –° –ü–û–î–î–ï–†–ñ–ö–û–ô userId
  // ========================================

  /// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –í—Å—Ç–∞–≤–∫–∞ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ —Ä—ã–±–æ–ª–æ–≤–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  Future<int> insertFishingNote(FishingNoteEntity note) async {
    // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –Ω–∞—á–∞–ª–µ
    if (kDebugMode) {
      debugPrint('üíæ insertFishingNote: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–º–µ—Ç–∫—É id=${note.id}, firebaseId=${note.firebaseId}, userId=${note.userId}, isSynced=${note.isSynced}');
      debugPrint('üíæ insertFishingNote: title="${note.title}", location="${note.location}"');
    }

    final result = await isar.writeTxn(() async {
      return await isar.fishingNoteEntitys.put(note);
    });

    // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    if (kDebugMode) {
      debugPrint('‚úÖ insertFishingNote: –∑–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Isar —Å ID: $result');
    }

    return result;
  }

  /// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä—ã–±–æ–ª–æ–≤–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<List<FishingNoteEntity>> getAllFishingNotes() async {
    final userId = getCurrentUserId();
    if (userId == null) {
      if (kDebugMode) {
        debugPrint('‚ö†Ô∏è getAllFishingNotes: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      }
      return [];
    }

    final notes = await isar.fishingNoteEntitys
        .filter()
        .userIdEqualTo(userId)
        .sortByDateDesc()
        .findAll();

    if (kDebugMode) {
      debugPrint('üìã getAllFishingNotes: –Ω–∞–π–¥–µ–Ω–æ ${notes.length} –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $userId');
      for (var note in notes.take(3)) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        debugPrint('üìù –ó–∞–º–µ—Ç–∫–∞: id=${note.id}, firebaseId=${note.firebaseId}, isSynced=${note.isSynced}, title="${note.title}"');
      }
    }

    return notes;
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –ø–æ ID
  Future<FishingNoteEntity?> getFishingNoteById(int id) async {
    return await isar.fishingNoteEntitys.get(id);
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –ø–æ Firebase ID
  Future<FishingNoteEntity?> getFishingNoteByFirebaseId(String firebaseId) async {
    return await isar.fishingNoteEntitys
        .filter()
        .firebaseIdEqualTo(firebaseId)
        .findFirst();
  }

  /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–º–µ—Ç–∫–∏
  Future<int> updateFishingNote(FishingNoteEntity note) async {
    note.updatedAt = DateTime.now();
    return await isar.writeTxn(() async {
      return await isar.fishingNoteEntitys.put(note);
    });
  }

  /// –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –ø–æ ID
  Future<bool> deleteFishingNote(int id) async {
    return await isar.writeTxn(() async {
      return await isar.fishingNoteEntitys.delete(id);
    });
  }

  /// –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –ø–æ Firebase ID
  Future<bool> deleteFishingNoteByFirebaseId(String firebaseId) async {
    final note = await getFishingNoteByFirebaseId(firebaseId);
    if (note != null) {
      return await deleteFishingNote(note.id);
    }
    return false;
  }

  /// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<List<FishingNoteEntity>> getUnsyncedNotes() async {
    final userId = getCurrentUserId();
    if (userId == null) {
      if (kDebugMode) {
        debugPrint('‚ö†Ô∏è getUnsyncedNotes: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      }
      return [];
    }

    // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–º–µ—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    final allUserNotes = await isar.fishingNoteEntitys
        .filter()
        .userIdEqualTo(userId)
        .findAll();
    if (kDebugMode) {
      debugPrint('üîç getUnsyncedNotes: –≤—Å–µ–≥–æ –∑–∞–º–µ—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $userId –≤ Isar: ${allUserNotes.length}');
    }

    final unsyncedNotes = await isar.fishingNoteEntitys
        .filter()
        .userIdEqualTo(userId)
        .and()
        .isSyncedEqualTo(false)
        .findAll();

    // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –ü–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏ –∫–∞–∂–¥–æ–π –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏
    if (kDebugMode) {
      debugPrint('üîç getUnsyncedNotes: –Ω–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $userId: ${unsyncedNotes.length}');
      for (var note in unsyncedNotes) {
        debugPrint('üìù –ù–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–º–µ—Ç–∫–∞: id=${note.id}, firebaseId=${note.firebaseId}, title="${note.title}"');
      }
    }

    return unsyncedNotes;
  }

  /// –ü–æ–º–µ—á–∞–µ—Ç –∑–∞–º–µ—Ç–∫—É –∫–∞–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é
  Future<void> markAsSynced(int id, String firebaseId) async {
    await isar.writeTxn(() async {
      final note = await isar.fishingNoteEntitys.get(id);
      if (note != null) {
        note.isSynced = true;
        note.firebaseId = firebaseId;
        note.updatedAt = DateTime.now();
        await isar.fishingNoteEntitys.put(note);

        if (kDebugMode) {
          debugPrint('‚úÖ markAsSynced: –∑–∞–º–µ—Ç–∫–∞ $id –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å Firebase ID: $firebaseId');
        }
      }
    });
  }

  /// –ü–æ–º–µ—á–∞–µ—Ç –∑–∞–º–µ—Ç–∫—É –∫–∞–∫ –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é (–¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π)
  Future<void> markAsUnsynced(int id) async {
    await isar.writeTxn(() async {
      final note = await isar.fishingNoteEntitys.get(id);
      if (note != null) {
        note.isSynced = false;
        note.updatedAt = DateTime.now();
        await isar.fishingNoteEntitys.put(note);

        if (kDebugMode) {
          debugPrint('‚ö†Ô∏è markAsUnsynced: –∑–∞–º–µ—Ç–∫–∞ $id –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è');
        }
      }
    });
  }

  /// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—Å–µ—Ö –∑–∞–º–µ—Ç–æ–∫ (—Ç–µ–ø–µ—Ä—å —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é)
  Future<int> getNotesCount([String? userId]) async {
    if (userId != null) {
      return await getFishingNotesCountByUser(userId);
    }

    // –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏
    return await isar.fishingNoteEntitys.count();
  }

  /// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<int> getUnsyncedNotesCount([String? userId]) async {
    if (userId != null) {
      return await isar.fishingNoteEntitys
          .filter()
          .userIdEqualTo(userId)
          .and()
          .isSyncedEqualTo(false)
          .count();
    }

    // –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏
    return await isar.fishingNoteEntitys
        .filter()
        .isSyncedEqualTo(false)
        .count();
  }

  /// üî• –ö–†–ò–¢–ò–ß–ù–û –î–û–ë–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä—ã–±–æ–ª–æ–≤–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<int> getFishingNotesCountByUser(String userId) async {
    final count = await isar.fishingNoteEntitys
        .filter()
        .userIdEqualTo(userId)
        .count();

    if (kDebugMode) {
      debugPrint('üìä getFishingNotesCountByUser($userId): –Ω–∞–π–¥–µ–Ω–æ $count –∑–∞–º–µ—Ç–æ–∫');
    }

    return count;
  }

  // ========================================
  // –ú–ï–¢–û–î–´ –î–õ–Ø BUDGET NOTES
  // ========================================

  /// –í—Å—Ç–∞–≤–∫–∞ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –∑–∞–º–µ—Ç–∫–∏ –±—é–¥–∂–µ—Ç–∞
  Future<int> insertBudgetNote(BudgetNoteEntity note) async {
    return await isar.writeTxn(() async {
      return await isar.budgetNoteEntitys.put(note);
    });
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<List<BudgetNoteEntity>> getAllBudgetNotes(String userId) async {
    return await isar.budgetNoteEntitys
        .filter()
        .userIdEqualTo(userId)
        .and()
        .markedForDeletionEqualTo(false)
        .sortByDateDesc()
        .findAll();
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –±—é–¥–∂–µ—Ç–∞ –ø–æ ID
  Future<BudgetNoteEntity?> getBudgetNoteById(int id) async {
    return await isar.budgetNoteEntitys.get(id);
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –±—é–¥–∂–µ—Ç–∞ –ø–æ Firebase ID
  Future<BudgetNoteEntity?> getBudgetNoteByFirebaseId(String firebaseId) async {
    return await isar.budgetNoteEntitys
        .filter()
        .firebaseIdEqualTo(firebaseId)
        .findFirst();
  }

  /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–º–µ—Ç–∫–∏ –±—é–¥–∂–µ—Ç–∞
  Future<int> updateBudgetNote(BudgetNoteEntity note) async {
    note.updatedAt = DateTime.now();
    return await isar.writeTxn(() async {
      return await isar.budgetNoteEntitys.put(note);
    });
  }

  /// –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –±—é–¥–∂–µ—Ç–∞ –ø–æ ID
  Future<bool> deleteBudgetNote(int id) async {
    return await isar.writeTxn(() async {
      return await isar.budgetNoteEntitys.delete(id);
    });
  }

  /// –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –±—é–¥–∂–µ—Ç–∞ –ø–æ Firebase ID
  Future<bool> deleteBudgetNoteByFirebaseId(String firebaseId) async {
    final note = await getBudgetNoteByFirebaseId(firebaseId);
    if (note != null) {
      return await deleteBudgetNote(note.id);
    }
    return false;
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞
  Future<List<BudgetNoteEntity>> getUnsyncedBudgetNotes(String userId) async {
    return await isar.budgetNoteEntitys
        .filter()
        .userIdEqualTo(userId)
        .and()
        .isSyncedEqualTo(false)
        .and()
        .markedForDeletionEqualTo(false)
        .findAll();
  }

  /// –ü–æ–º–µ—á–∞–µ—Ç –∑–∞–º–µ—Ç–∫—É –±—é–¥–∂–µ—Ç–∞ –∫–∞–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é
  Future<void> markBudgetNoteAsSynced(int id, String firebaseId) async {
    await isar.writeTxn(() async {
      final note = await isar.budgetNoteEntitys.get(id);
      if (note != null) {
        note.markAsSynced();
        note.firebaseId = firebaseId;
        await isar.budgetNoteEntitys.put(note);
      }
    });
  }

  /// –ü–æ–º–µ—á–∞–µ—Ç –∑–∞–º–µ—Ç–∫—É –±—é–¥–∂–µ—Ç–∞ –∫–∞–∫ –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é (–¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π)
  Future<void> markBudgetNoteAsUnsynced(int id) async {
    await isar.writeTxn(() async {
      final note = await isar.budgetNoteEntitys.get(id);
      if (note != null) {
        note.markAsModified();
        await isar.budgetNoteEntitys.put(note);
      }
    });
  }

  /// –ü–æ–º–µ—Ç–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –±—é–¥–∂–µ—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
  Future<void> markBudgetNoteForDeletion(String firebaseId) async {
    await isar.writeTxn(() async {
      final note = await getBudgetNoteByFirebaseId(firebaseId);
      if (note != null) {
        note.markForDeletion();
        await isar.budgetNoteEntitys.put(note);
      }
    });
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<int> getBudgetNotesCount(String userId) async {
    return await isar.budgetNoteEntitys
        .filter()
        .userIdEqualTo(userId)
        .and()
        .markedForDeletionEqualTo(false)
        .count();
  }

  /// üÜï –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–ª–∏–∞—Å –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –º–µ—Ç–æ–¥–∞)
  Future<int> getBudgetNotesCountByUser(String userId) async {
    return await getBudgetNotesCount(userId);
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞
  Future<int> getUnsyncedBudgetNotesCount(String userId) async {
    return await isar.budgetNoteEntitys
        .filter()
        .userIdEqualTo(userId)
        .and()
        .isSyncedEqualTo(false)
        .and()
        .markedForDeletionEqualTo(false)
        .count();
  }

  /// –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏ –±—é–¥–∂–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞)
  Future<int> deleteAllBudgetNotes(String userId) async {
    return await isar.writeTxn(() async {
      return await isar.budgetNoteEntitys
          .filter()
          .userIdEqualTo(userId)
          .deleteAll();
    });
  }

  // ========================================
  // –ú–ï–¢–û–î–´ –î–õ–Ø MARKER MAPS
  // ========================================

  /// –í—Å—Ç–∞–≤–∫–∞ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –º–∞—Ä–∫–µ—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã
  Future<int> insertMarkerMap(MarkerMapEntity map) async {
    return await isar.writeTxn(() async {
      return await isar.markerMapEntitys.put(map);
    });
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<List<MarkerMapEntity>> getAllMarkerMaps(String userId) async {
    return await isar.markerMapEntitys
        .filter()
        .userIdEqualTo(userId)
        .and()
        .markedForDeletionEqualTo(false)
        .sortByDateDesc()
        .findAll();
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã –ø–æ ID
  Future<MarkerMapEntity?> getMarkerMapById(int id) async {
    return await isar.markerMapEntitys.get(id);
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã –ø–æ Firebase ID
  Future<MarkerMapEntity?> getMarkerMapByFirebaseId(String firebaseId) async {
    return await isar.markerMapEntitys
        .filter()
        .firebaseIdEqualTo(firebaseId)
        .findFirst();
  }

  /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –º–∞—Ä–∫–µ—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã
  Future<int> updateMarkerMap(MarkerMapEntity map) async {
    map.updatedAt = DateTime.now();
    return await isar.writeTxn(() async {
      return await isar.markerMapEntitys.put(map);
    });
  }

  /// –£–¥–∞–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã –ø–æ ID
  Future<bool> deleteMarkerMap(int id) async {
    return await isar.writeTxn(() async {
      return await isar.markerMapEntitys.delete(id);
    });
  }

  /// –£–¥–∞–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã –ø–æ Firebase ID
  Future<bool> deleteMarkerMapByFirebaseId(String firebaseId) async {
    final map = await getMarkerMapByFirebaseId(firebaseId);
    if (map != null) {
      return await deleteMarkerMap(map.id);
    }
    return false;
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç
  Future<List<MarkerMapEntity>> getUnsyncedMarkerMaps(String userId) async {
    return await isar.markerMapEntitys
        .filter()
        .userIdEqualTo(userId)
        .and()
        .isSyncedEqualTo(false)
        .and()
        .markedForDeletionEqualTo(false)
        .findAll();
  }

  /// –ü–æ–º–µ—á–∞–µ—Ç –º–∞—Ä–∫–µ—Ä–Ω—É—é –∫–∞—Ä—Ç—É –∫–∞–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é
  Future<void> markMarkerMapAsSynced(int id, String firebaseId) async {
    await isar.writeTxn(() async {
      final map = await isar.markerMapEntitys.get(id);
      if (map != null) {
        map.markAsSynced();
        map.firebaseId = firebaseId;
        await isar.markerMapEntitys.put(map);
      }
    });
  }

  /// –ü–æ–º–µ—á–∞–µ—Ç –º–∞—Ä–∫–µ—Ä–Ω—É—é –∫–∞—Ä—Ç—É –∫–∞–∫ –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é (–¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π)
  Future<void> markMarkerMapAsUnsynced(int id) async {
    await isar.writeTxn(() async {
      final map = await isar.markerMapEntitys.get(id);
      if (map != null) {
        map.markAsModified();
        await isar.markerMapEntitys.put(map);
      }
    });
  }

  /// –ü–æ–º–µ—Ç–∏—Ç—å –º–∞—Ä–∫–µ—Ä–Ω—É—é –∫–∞—Ä—Ç—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
  Future<void> markMarkerMapForDeletion(String firebaseId) async {
    await isar.writeTxn(() async {
      final map = await getMarkerMapByFirebaseId(firebaseId);
      if (map != null) {
        map.markForDeletion();
        await isar.markerMapEntitys.put(map);
      }
    });
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<int> getMarkerMapsCount(String userId) async {
    return await isar.markerMapEntitys
        .filter()
        .userIdEqualTo(userId)
        .and()
        .markedForDeletionEqualTo(false)
        .count();
  }

  /// üÜï –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–ª–∏–∞—Å –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –º–µ—Ç–æ–¥–∞)
  Future<int> getMarkerMapsCountByUser(String userId) async {
    return await getMarkerMapsCount(userId);
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç
  Future<int> getUnsyncedMarkerMapsCount(String userId) async {
    return await isar.markerMapEntitys
        .filter()
        .userIdEqualTo(userId)
        .and()
        .isSyncedEqualTo(false)
        .and()
        .markedForDeletionEqualTo(false)
        .count();
  }

  /// –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –º–∞—Ä–∫–µ—Ä–Ω—ã–µ –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞)
  Future<int> deleteAllMarkerMaps(String userId) async {
    return await isar.writeTxn(() async {
      return await isar.markerMapEntitys
          .filter()
          .userIdEqualTo(userId)
          .deleteAll();
    });
  }

  // ========================================
  // –ú–ï–¢–û–î–´ –î–õ–Ø POLICY ACCEPTANCE
  // ========================================

  /// ‚úÖ –°–£–©–ï–°–¢–í–£–Æ–©–ï–ï: –í—Å—Ç–∞–≤–∫–∞ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ —Å–æ–≥–ª–∞—Å–∏–π –ø–æ–ª–∏—Ç–∏–∫–∏
  Future<int> insertPolicyAcceptance(PolicyAcceptanceEntity policy) async {
    if (kDebugMode) {
      debugPrint('üíæ insertPolicyAcceptance: —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–≥–ª–∞—Å–∏—è id=${policy.id}, userId=${policy.userId}, isSynced=${policy.isSynced}');
      debugPrint('üíæ insertPolicyAcceptance: privacy=${policy.privacyPolicyAccepted}, terms=${policy.termsOfServiceAccepted}');
    }

    final result = await isar.writeTxn(() async {
      return await isar.policyAcceptanceEntitys.put(policy);
    });

    if (kDebugMode) {
      debugPrint('‚úÖ insertPolicyAcceptance: —Å–æ–≥–ª–∞—Å–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Isar —Å ID: $result');
    }

    return result;
  }

  /// ‚úÖ –°–£–©–ï–°–¢–í–£–Æ–©–ï–ï: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–≥–ª–∞—Å–∏–π –ø–æ–ª–∏—Ç–∏–∫–∏
  Future<List<PolicyAcceptanceEntity>> getAllPolicyAcceptances() async {
    final policies = await isar.policyAcceptanceEntitys.where().findAll();

    if (kDebugMode) {
      debugPrint('üìã getAllPolicyAcceptances: –Ω–∞–π–¥–µ–Ω–æ ${policies.length} —Å–æ–≥–ª–∞—Å–∏–π –≤ Isar');
      for (var policy in policies) {
        debugPrint('üìù –°–æ–≥–ª–∞—Å–∏—è: id=${policy.id}, userId=${policy.userId}, isSynced=${policy.isSynced}');
      }
    }

    return policies;
  }

  /// ‚úÖ –°–£–©–ï–°–¢–í–£–Æ–©–ï–ï: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–∏–π –ø–æ–ª–∏—Ç–∏–∫–∏ –ø–æ ID
  Future<PolicyAcceptanceEntity?> getPolicyAcceptanceById(int id) async {
    return await isar.policyAcceptanceEntitys.get(id);
  }

  /// ‚úÖ –°–£–©–ï–°–¢–í–£–Æ–©–ï–ï: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–∏–π –ø–æ–ª–∏—Ç–∏–∫–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  Future<PolicyAcceptanceEntity?> getPolicyAcceptanceByUserId(String userId) async {
    return await isar.policyAcceptanceEntitys
        .filter()
        .userIdEqualTo(userId)
        .findFirst();
  }

  /// ‚úÖ –°–£–©–ï–°–¢–í–£–Æ–©–ï–ï: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–æ–≥–ª–∞—Å–∏–π –ø–æ–ª–∏—Ç–∏–∫–∏
  Future<int> updatePolicyAcceptance(PolicyAcceptanceEntity policy) async {
    policy.updatedAt = DateTime.now();
    return await isar.writeTxn(() async {
      return await isar.policyAcceptanceEntitys.put(policy);
    });
  }

  /// ‚úÖ –°–£–©–ï–°–¢–í–£–Æ–©–ï–ï: –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–∏–π –ø–æ–ª–∏—Ç–∏–∫–∏ –ø–æ ID
  Future<bool> deletePolicyAcceptance(int id) async {
    return await isar.writeTxn(() async {
      return await isar.policyAcceptanceEntitys.delete(id);
    });
  }

  /// ‚úÖ –°–£–©–ï–°–¢–í–£–Æ–©–ï–ï: –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–∏–π –ø–æ–ª–∏—Ç–∏–∫–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  Future<bool> deletePolicyAcceptanceByUserId(String userId) async {
    final policy = await getPolicyAcceptanceByUserId(userId);
    if (policy != null) {
      return await deletePolicyAcceptance(policy.id);
    }
    return false;
  }

  /// ‚úÖ –°–£–©–ï–°–¢–í–£–Æ–©–ï–ï: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–≥–ª–∞—Å–∏–π –ø–æ–ª–∏—Ç–∏–∫–∏
  Future<List<PolicyAcceptanceEntity>> getUnsyncedPolicyAcceptances() async {
    final unsyncedPolicies = await isar.policyAcceptanceEntitys
        .filter()
        .isSyncedEqualTo(false)
        .and()
        .markedForDeletionEqualTo(false)
        .findAll();

    if (kDebugMode) {
      debugPrint('üîç getUnsyncedPolicyAcceptances: –Ω–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: ${unsyncedPolicies.length}');
      for (var policy in unsyncedPolicies) {
        debugPrint('üìù –ù–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–≥–ª–∞—Å–∏—è: id=${policy.id}, userId=${policy.userId}');
      }
    }

    return unsyncedPolicies;
  }

  /// ‚úÖ –°–£–©–ï–°–¢–í–£–Æ–©–ï–ï: –ü–æ–º–µ—á–∞–µ—Ç —Å–æ–≥–ª–∞—Å–∏—è –ø–æ–ª–∏—Ç–∏–∫–∏ –∫–∞–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
  Future<void> markPolicyAcceptanceAsSynced(int id, String firebaseId) async {
    await isar.writeTxn(() async {
      final policy = await isar.policyAcceptanceEntitys.get(id);
      if (policy != null) {
        policy.markAsSynced();
        policy.firebaseId = firebaseId;
        await isar.policyAcceptanceEntitys.put(policy);

        if (kDebugMode) {
          debugPrint('‚úÖ markPolicyAcceptanceAsSynced: —Å–æ–≥–ª–∞—Å–∏—è $id –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å Firebase ID: $firebaseId');
        }
      }
    });
  }

  /// ‚úÖ –°–£–©–ï–°–¢–í–£–Æ–©–ï–ï: –ü–æ–º–µ—á–∞–µ—Ç —Å–æ–≥–ª–∞—Å–∏—è –ø–æ–ª–∏—Ç–∏–∫–∏ –∫–∞–∫ –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ (–¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π)
  Future<void> markPolicyAcceptanceAsUnsynced(int id) async {
    await isar.writeTxn(() async {
      final policy = await isar.policyAcceptanceEntitys.get(id);
      if (policy != null) {
        policy.markAsModified();
        await isar.policyAcceptanceEntitys.put(policy);

        if (kDebugMode) {
          debugPrint('‚ö†Ô∏è markPolicyAcceptanceAsUnsynced: —Å–æ–≥–ª–∞—Å–∏—è $id –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ');
        }
      }
    });
  }

  /// ‚úÖ –°–£–©–ï–°–¢–í–£–Æ–©–ï–ï: –ü–æ–º–µ—Ç–∏—Ç—å —Å–æ–≥–ª–∞—Å–∏—è –ø–æ–ª–∏—Ç–∏–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
  Future<void> markPolicyAcceptanceForDeletion(int id) async {
    await isar.writeTxn(() async {
      final policy = await isar.policyAcceptanceEntitys.get(id);
      if (policy != null) {
        policy.markForDeletion();
        await isar.policyAcceptanceEntitys.put(policy);

        if (kDebugMode) {
          debugPrint('üóëÔ∏è markPolicyAcceptanceForDeletion: —Å–æ–≥–ª–∞—Å–∏—è $id –ø–æ–º–µ—á–µ–Ω—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
        }
      }
    });
  }

  /// ‚úÖ –°–£–©–ï–°–¢–í–£–Æ–©–ï–ï: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–≥–ª–∞—Å–∏–π –ø–æ–ª–∏—Ç–∏–∫–∏
  Future<int> getPolicyAcceptancesCount() async {
    return await isar.policyAcceptanceEntitys
        .filter()
        .markedForDeletionEqualTo(false)
        .count();
  }

  /// ‚úÖ –°–£–©–ï–°–¢–í–£–Æ–©–ï–ï: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–≥–ª–∞—Å–∏–π –ø–æ–ª–∏—Ç–∏–∫–∏
  Future<int> getUnsyncedPolicyAcceptancesCount() async {
    return await isar.policyAcceptanceEntitys
        .filter()
        .isSyncedEqualTo(false)
        .and()
        .markedForDeletionEqualTo(false)
        .count();
  }

  /// ‚úÖ –°–£–©–ï–°–¢–í–£–Æ–©–ï–ï: –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–æ–≥–ª–∞—Å–∏—è –ø–æ–ª–∏—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞)
  Future<int> deleteAllPolicyAcceptances(String userId) async {
    return await isar.writeTxn(() async {
      return await isar.policyAcceptanceEntitys
          .filter()
          .userIdEqualTo(userId)
          .deleteAll();
    });
  }

  // ========================================
  // üÜï –ú–ï–¢–û–î–´ –î–õ–Ø USER USAGE LIMITS
  // ========================================

  /// üÜï –ù–û–í–û–ï: –í—Å—Ç–∞–≤–∫–∞ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –ª–∏–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<int> insertUserUsageLimits(UserUsageLimitsEntity limits) async {
    if (kDebugMode) {
      debugPrint('üíæ insertUserUsageLimits: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–∏–º–∏—Ç—ã id=${limits.id}, userId=${limits.userId}, isSynced=${limits.isSynced}');
      debugPrint('üíæ insertUserUsageLimits: notes=${limits.notesCount}, budget=${limits.budgetNotesCount}, maps=${limits.markerMapsCount}');
    }

    final result = await isar.writeTxn(() async {
      return await isar.userUsageLimitsEntitys.put(limits);
    });

    if (kDebugMode) {
      debugPrint('‚úÖ insertUserUsageLimits: –ª–∏–º–∏—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Isar —Å ID: $result');
    }

    return result;
  }

  /// üÜï –ù–û–í–û–ï: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ª–∏–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  Future<List<UserUsageLimitsEntity>> getAllUserUsageLimits() async {
    final limits = await isar.userUsageLimitsEntitys.where().findAll();

    if (kDebugMode) {
      debugPrint('üìã getAllUserUsageLimits: –Ω–∞–π–¥–µ–Ω–æ ${limits.length} –∑–∞–ø–∏—Å–µ–π –ª–∏–º–∏—Ç–æ–≤ –≤ Isar');
      for (var limit in limits) {
        debugPrint('üìù –õ–∏–º–∏—Ç—ã: id=${limit.id}, userId=${limit.userId}, isSynced=${limit.isSynced}');
      }
    }

    return limits;
  }

  /// üÜï –ù–û–í–û–ï: –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ –ø–æ ID
  Future<UserUsageLimitsEntity?> getUserUsageLimitsById(int id) async {
    return await isar.userUsageLimitsEntitys.get(id);
  }

  /// üÜï –ù–û–í–û–ï: –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  Future<UserUsageLimitsEntity?> getUserUsageLimitsByUserId(String userId) async {
    return await isar.userUsageLimitsEntitys
        .filter()
        .userIdEqualTo(userId)
        .and()
        .markedForDeletionEqualTo(false)
        .findFirst();
  }

  /// üÜï –ù–û–í–û–ï: –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ –ø–æ Firebase ID
  Future<UserUsageLimitsEntity?> getUserUsageLimitsByFirebaseId(String firebaseId) async {
    return await isar.userUsageLimitsEntitys
        .filter()
        .firebaseIdEqualTo(firebaseId)
        .findFirst();
  }

  /// üÜï –ù–û–í–û–ï: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ª–∏–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<int> updateUserUsageLimits(UserUsageLimitsEntity limits) async {
    limits.updatedAt = DateTime.now();
    return await isar.writeTxn(() async {
      return await isar.userUsageLimitsEntitys.put(limits);
    });
  }

  /// üÜï –ù–û–í–û–ï: –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ –ø–æ ID
  Future<bool> deleteUserUsageLimits(int id) async {
    return await isar.writeTxn(() async {
      return await isar.userUsageLimitsEntitys.delete(id);
    });
  }

  /// üÜï –ù–û–í–û–ï: –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  Future<bool> deleteUserUsageLimitsByUserId(String userId) async {
    final limits = await getUserUsageLimitsByUserId(userId);
    if (limits != null) {
      return await deleteUserUsageLimits(limits.id);
    }
    return false;
  }

  /// üÜï –ù–û–í–û–ï: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  Future<List<UserUsageLimitsEntity>> getUnsyncedUserUsageLimits() async {
    final unsyncedLimits = await isar.userUsageLimitsEntitys
        .filter()
        .isSyncedEqualTo(false)
        .and()
        .markedForDeletionEqualTo(false)
        .findAll();

    if (kDebugMode) {
      debugPrint('üîç getUnsyncedUserUsageLimits: –Ω–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: ${unsyncedLimits.length}');
      for (var limits in unsyncedLimits) {
        debugPrint('üìù –ù–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–º–∏—Ç—ã: id=${limits.id}, userId=${limits.userId}');
      }
    }

    return unsyncedLimits;
  }

  /// üÜï –ù–û–í–û–ï: –ü–æ–º–µ—á–∞–µ—Ç –ª–∏–º–∏—Ç—ã –∫–∞–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
  Future<void> markUserUsageLimitsAsSynced(int id, String firebaseId) async {
    await isar.writeTxn(() async {
      final limits = await isar.userUsageLimitsEntitys.get(id);
      if (limits != null) {
        limits.markAsSynced();
        limits.firebaseId = firebaseId;
        await isar.userUsageLimitsEntitys.put(limits);

        if (kDebugMode) {
          debugPrint('‚úÖ markUserUsageLimitsAsSynced: –ª–∏–º–∏—Ç—ã $id –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å Firebase ID: $firebaseId');
        }
      }
    });
  }

  /// üÜï –ù–û–í–û–ï: –ü–æ–º–µ—á–∞–µ—Ç –ª–∏–º–∏—Ç—ã –∫–∞–∫ –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ (–¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π)
  Future<void> markUserUsageLimitsAsUnsynced(int id) async {
    await isar.writeTxn(() async {
      final limits = await isar.userUsageLimitsEntitys.get(id);
      if (limits != null) {
        limits.markAsModified();
        await isar.userUsageLimitsEntitys.put(limits);

        if (kDebugMode) {
          debugPrint('‚ö†Ô∏è markUserUsageLimitsAsUnsynced: –ª–∏–º–∏—Ç—ã $id –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ');
        }
      }
    });
  }

  /// üÜï –ù–û–í–û–ï: –ü–æ–º–µ—Ç–∏—Ç—å –ª–∏–º–∏—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
  Future<void> markUserUsageLimitsForDeletion(int id) async {
    await isar.writeTxn(() async {
      final limits = await isar.userUsageLimitsEntitys.get(id);
      if (limits != null) {
        limits.markForDeletion();
        await isar.userUsageLimitsEntitys.put(limits);

        if (kDebugMode) {
          debugPrint('üóëÔ∏è markUserUsageLimitsForDeletion: –ª–∏–º–∏—Ç—ã $id –ø–æ–º–µ—á–µ–Ω—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
        }
      }
    });
  }

  /// üÜï –ù–û–í–û–ï: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π –ª–∏–º–∏—Ç–æ–≤
  Future<int> getUserUsageLimitsCount() async {
    return await isar.userUsageLimitsEntitys
        .filter()
        .markedForDeletionEqualTo(false)
        .count();
  }

  /// üÜï –ù–û–í–û–ï: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤
  Future<int> getUnsyncedUserUsageLimitsCount() async {
    return await isar.userUsageLimitsEntitys
        .filter()
        .isSyncedEqualTo(false)
        .and()
        .markedForDeletionEqualTo(false)
        .count();
  }

  /// üÜï –ù–û–í–û–ï: –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞)
  Future<int> deleteAllUserUsageLimits(String userId) async {
    return await isar.writeTxn(() async {
      return await isar.userUsageLimitsEntitys
          .filter()
          .userIdEqualTo(userId)
          .deleteAll();
    });
  }

  /// üÜï –ù–û–í–û–ï: –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<UserUsageLimitsEntity> createOrUpdateUserUsageLimits(String userId, {
    int? budgetNotesCount,
    int? expensesCount,
    int? markerMapsCount,
    int? notesCount,
    int? tripsCount,
    String? recalculationType,
  }) async {
    // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ª–∏–º–∏—Ç—ã
    var limits = await getUserUsageLimitsByUserId(userId);

    if (limits == null) {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –ª–∏–º–∏—Ç—ã
      limits = UserUsageLimitsEntity()
        ..userId = userId
        ..budgetNotesCount = budgetNotesCount ?? 0
        ..expensesCount = expensesCount ?? 0
        ..markerMapsCount = markerMapsCount ?? 0
        ..notesCount = notesCount ?? 0
        ..tripsCount = tripsCount ?? 0
        ..recalculationType = recalculationType
        ..recalculatedAt = DateTime.now().toIso8601String()
        ..createdAt = DateTime.now()
        ..updatedAt = DateTime.now()
        ..isSynced = false;

      await insertUserUsageLimits(limits);

      if (kDebugMode) {
        debugPrint('üÜï –°–æ–∑–¥–∞–Ω—ã –Ω–æ–≤—ã–µ –ª–∏–º–∏—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $userId');
      }
    } else {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ª–∏–º–∏—Ç—ã
      if (budgetNotesCount != null) limits.budgetNotesCount = budgetNotesCount;
      if (expensesCount != null) limits.expensesCount = expensesCount;
      if (markerMapsCount != null) limits.markerMapsCount = markerMapsCount;
      if (notesCount != null) limits.notesCount = notesCount;
      if (tripsCount != null) limits.tripsCount = tripsCount;
      if (recalculationType != null) limits.recalculationType = recalculationType;

      limits.recalculatedAt = DateTime.now().toIso8601String();
      limits.markAsModified();

      await updateUserUsageLimits(limits);

      if (kDebugMode) {
        debugPrint('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω—ã –ª–∏–º–∏—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $userId');
      }
    }

    return limits;
  }

  // ========================================
  // –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –û–ë–©–ò–ï –ú–ï–¢–û–î–´
  // ========================================

  /// ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –≤–∫–ª—é—á–∞—è UserUsageLimits (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
  Future<void> clearAllData() async {
    await isar.writeTxn(() async {
      await isar.fishingNoteEntitys.clear();
      await isar.budgetNoteEntitys.clear();
      await isar.markerMapEntitys.clear();
      await isar.policyAcceptanceEntitys.clear();
      await isar.userUsageLimitsEntitys.clear(); // üÜï –î–û–ë–ê–í–õ–ï–ù–û
    });

    if (kDebugMode) {
      debugPrint('üóëÔ∏è –í—Å–µ –¥–∞–Ω–Ω—ã–µ Isar –æ—á–∏—â–µ–Ω—ã (–≤–∫–ª—é—á–∞—è UserUsageLimits)');
    }
  }

  /// ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–∫–ª—é—á–∞—è UserUsageLimits —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  Future<Map<String, dynamic>> getGeneralStats() async {
    final userId = getCurrentUserId();
    if (userId == null) return {};

    return {
      'fishingNotes': {
        'total': await getFishingNotesCountByUser(userId), // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: —Ç–µ–ø–µ—Ä—å —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        'unsynced': await getUnsyncedNotesCount(userId),   // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: —Ç–µ–ø–µ—Ä—å —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      },
      'budgetNotes': {
        'total': await getBudgetNotesCount(userId),
        'unsynced': await getUnsyncedBudgetNotesCount(userId),
      },
      'markerMaps': {
        'total': await getMarkerMapsCount(userId),
        'unsynced': await getUnsyncedMarkerMapsCount(userId),
      },
      'policyAcceptance': {
        'total': await getPolicyAcceptancesCount(),
        'unsynced': await getUnsyncedPolicyAcceptancesCount(),
      },
      'userUsageLimits': { // üÜï –î–û–ë–ê–í–õ–ï–ù–û
        'total': await getUserUsageLimitsCount(),
        'unsynced': await getUnsyncedUserUsageLimitsCount(),
      },
    };
  }

  /// ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–∫–ª—é—á–∞—è UserUsageLimits (–¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞)
  Future<void> deleteAllUserData(String userId) async {
    await isar.writeTxn(() async {
      // –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≤—Å–µ—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π
      await isar.budgetNoteEntitys
          .filter()
          .userIdEqualTo(userId)
          .deleteAll();

      await isar.markerMapEntitys
          .filter()
          .userIdEqualTo(userId)
          .deleteAll();

      await isar.policyAcceptanceEntitys
          .filter()
          .userIdEqualTo(userId)
          .deleteAll();

      await isar.userUsageLimitsEntitys // üÜï –î–û–ë–ê–í–õ–ï–ù–û
          .filter()
          .userIdEqualTo(userId)
          .deleteAll();

      // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: FishingNotes —Ç–µ–ø–µ—Ä—å —Ç–∞–∫–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ userId
      await isar.fishingNoteEntitys
          .filter()
          .userIdEqualTo(userId)
          .deleteAll();
    });

    if (kDebugMode) {
      debugPrint('üóëÔ∏è –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $userId —É–¥–∞–ª–µ–Ω—ã (–≤–∫–ª—é—á–∞—è UserUsageLimits –∏ FishingNotes)');
    }
  }

  /// –ó–∞–∫—Ä—ã—Ç–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  Future<void> close() async {
    await _isar?.close();
    _isar = null;
    _instance = null;

    if (kDebugMode) {
      debugPrint('üîí IsarService –∑–∞–∫—Ä—ã—Ç');
    }
  }
}