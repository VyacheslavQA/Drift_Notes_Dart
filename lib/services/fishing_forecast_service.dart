// –ü—É—Ç—å: lib/services/fishing_forecast_service.dart

import 'dart:math' as math;
import 'package:flutter/material.dart';
import '../models/weather_api_model.dart';
import '../models/bite_forecast_model.dart';
import '../services/bite_forecast_service.dart';
import '../localization/app_localizations.dart';

class FishingForecastService {
  // Singleton pattern
  static final FishingForecastService _instance =
      FishingForecastService._internal();
  factory FishingForecastService() => _instance;
  FishingForecastService._internal();

  final BiteForecastService _biteForecastService = BiteForecastService();

  /// –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ —Ä—ã–±–∞–ª–∫–∏
  Future<Map<String, dynamic>> getFishingForecast({
    required WeatherApiResponse weather,
    required double latitude,
    required double longitude,
    BuildContext? context,
  }) async {
    debugPrint('üé£ –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ —Ä—ã–±–∞–ª–∫–∏...');

    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –∫–ª–µ–≤–∞
      final biteForecast = await _biteForecastService.calculateBiteForecast(
        weather: weather,
        latitude: latitude,
        longitude: longitude,
        context: context,
      );

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—á–∞—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
      final hourlyForecast = _generateHourlyForecast(weather, biteForecast);

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª—É—á—à–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫–Ω–∞
      final bestTimeWindows = _enhanceBestTimeWindows(
        weather,
        biteForecast,
        context,
      );

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
      final practicalTips = _generatePracticalTips(
        weather,
        biteForecast,
        context,
      );

      // –°–æ–∑–¥–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑
      final forecast = {
        'overallActivity': biteForecast.overallActivity,
        'scorePoints': biteForecast.scorePoints,
        'level': biteForecast.level.displayName,
        'recommendation': biteForecast.recommendation,
        'tips': biteForecast.tips,
        'factors': _formatFactors(biteForecast.factors, context),
        'bestTimeWindows': bestTimeWindows,
        'hourlyForecast': hourlyForecast,
        'practicalTips': practicalTips,
        'pressureTrend': _analyzePressureTrend(weather),
        'windAnalysis': _analyzeWindForFishing(weather, context),
        'moonAnalysis': _analyzeMoonForFishing(weather, context),
        'optimalDepth': _recommendOptimalDepth(weather, biteForecast),
        'recommendedBaits': _recommendBaits(weather, biteForecast, context),
        'fishingTechnique': _recommendTechnique(weather, biteForecast, context),
        'calculatedAt': DateTime.now().toIso8601String(),
      };

      debugPrint(
        '‚úÖ –ü–æ–ª–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ —Ä—ã–±–∞–ª–∫–∏ –≥–æ—Ç–æ–≤: ${biteForecast.scorePoints} –±–∞–ª–ª–æ–≤',
      );
      return forecast;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ —Ä—ã–±–∞–ª–∫–∏: $e');

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑
      return {
        'overallActivity': 0.5,
        'scorePoints': 50,
        'level': 'moderate_activity',
        'recommendation':
            context != null
                ? AppLocalizations.of(
                  context,
                ).translate('moderate_conditions_recommendation')
                : '–£–º–µ—Ä–µ–Ω–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ä—ã–±–∞–ª–∫–∏',
        'tips': <String>[],
        'factors': <String, dynamic>{},
        'bestTimeWindows': <Map<String, dynamic>>[],
        'hourlyForecast': <Map<String, dynamic>>[],
        'practicalTips': <String>[],
        'calculatedAt': DateTime.now().toIso8601String(),
      };
    }
  }

  /// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—á–∞—Å–æ–≤–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –∫–ª–µ–≤–∞
  List<Map<String, dynamic>> _generateHourlyForecast(
    WeatherApiResponse weather,
    BiteForecastModel biteForecast,
  ) {
    final hourlyForecast = <Map<String, dynamic>>[];

    try {
      if (weather.forecast.isNotEmpty &&
          weather.forecast.first.hour.isNotEmpty) {
        final hours = weather.forecast.first.hour;
        final now = DateTime.now();

        // –ë–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â–∏–µ 12 —á–∞—Å–æ–≤
        for (int i = 0; i < math.min(12, hours.length); i++) {
          final hour = hours[i];
          final hourTime = DateTime.parse(hour.time);

          if (hourTime.isAfter(now)) {
            final hourlyActivity = _calculateHourlyActivity(hour, biteForecast);

            hourlyForecast.add({
              'time': hourTime.toIso8601String(),
              'hour': hourTime.hour,
              'temperature': hour.tempC,
              'windKph': hour.windKph,
              'windDir': hour.windDir,
              'humidity': hour.humidity,
              'chanceOfRain': hour.chanceOfRain,
              'condition': hour.condition.text,
              'conditionCode': hour.condition.code,
              'biteActivity': hourlyActivity,
              'biteLevel': _getBiteLevel(hourlyActivity),
              'recommendation': _getHourlyRecommendation(hourlyActivity),
            });
          }
        }
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—á–∞—Å–æ–≤–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞: $e');
    }

    return hourlyForecast;
  }

  /// –†–∞—Å—á–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–ª–µ–≤–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Å–∞
  double _calculateHourlyActivity(Hour hour, BiteForecastModel baseForecast) {
    double activity = baseForecast.overallActivity;

    try {
      final hourTime = DateTime.parse(hour.time);
      final hourOfDay = hourTime.hour;

      // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
      if ((hourOfDay >= 5 && hourOfDay <= 8) ||
          (hourOfDay >= 18 && hourOfDay <= 21)) {
        activity *= 1.2; // –ó–æ–ª–æ—Ç—ã–µ —á–∞—Å—ã
      } else if (hourOfDay >= 22 || hourOfDay <= 4) {
        activity *= 0.7; // –ù–æ—á–Ω–æ–µ –≤—Ä–µ–º—è
      }

      // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ
      if (hour.tempC >= 15 && hour.tempC <= 25) {
        activity *= 1.1;
      } else if (hour.tempC < 5 || hour.tempC > 30) {
        activity *= 0.8;
      }

      // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤–µ—Ç—Ä—É
      if (hour.windKph >= 3 && hour.windKph <= 15) {
        activity *= 1.1;
      } else if (hour.windKph > 25) {
        activity *= 0.6;
      }

      // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –æ—Å–∞–¥–∫–∞–º
      if (hour.chanceOfRain > 50) {
        activity *= 0.8;
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è —á–∞—Å–∞: $e');
    }

    return math.max(0.0, math.min(1.0, activity));
  }

  /// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∫–ª–µ–≤–∞ –¥–ª—è —á–∞—Å–∞
  String _getBiteLevel(double activity) {
    if (activity >= 0.8) return 'excellent_activity';
    if (activity >= 0.6) return 'good_activity';
    if (activity >= 0.4) return 'moderate_activity';
    if (activity >= 0.2) return 'poor_activity';
    return 'very_poor_activity';
  }

  /// –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Å–∞
  String _getHourlyRecommendation(double activity) {
    if (activity >= 0.8) return 'excellent_conditions_recommendation';
    if (activity >= 0.6) return 'good_conditions_recommendation';
    if (activity >= 0.4) return 'moderate_conditions_recommendation';
    if (activity >= 0.2) return 'poor_conditions_recommendation';
    return 'very_poor_conditions_recommendation';
  }

  /// –£–ª—É—á—à–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫–æ–Ω —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
  List<Map<String, dynamic>> _enhanceBestTimeWindows(
    WeatherApiResponse weather,
    BiteForecastModel biteForecast,
    BuildContext? context,
  ) {
    final enhancedWindows = <Map<String, dynamic>>[];

    try {
      for (final window in biteForecast.bestTimeWindows) {
        enhancedWindows.add({
          'startTime': window.startTime.toIso8601String(),
          'endTime': window.endTime.toIso8601String(),
          'timeRange': window.timeRange,
          'activity': window.activity,
          'activityLevel': _getBiteLevel(window.activity),
          'reason': window.reason,
          'recommendations': window.recommendations,
          'optimalFor': _getOptimalFor(window.activity),
        });
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ª—É—á—à–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫–æ–Ω: $e');
    }

    return enhancedWindows;
  }

  /// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞
  List<String> _getOptimalFor(double activity) {
    final optimal = <String>[];

    if (activity >= 0.8) {
      optimal.addAll(['spinning', 'feeder', 'float_fishing', 'carp_fishing']);
    } else if (activity >= 0.6) {
      optimal.addAll(['spinning', 'feeder']);
    } else if (activity >= 0.4) {
      optimal.add('feeder');
    }

    return optimal;
  }

  /// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –¥–ª—è UI
  Map<String, dynamic> _formatFactors(
    Map<String, BiteFactor> factors,
    BuildContext? context,
  ) {
    final formatted = <String, dynamic>{};

    try {
      for (final entry in factors.entries) {
        final factor = entry.value;
        formatted[entry.key] = {
          'name': factor.name,
          'value': factor.value,
          'weight': factor.weight,
          'impact': factor.impact.toString().split('.').last,
          'description': factor.description,
          'score': (factor.value * 100).round(),
          'level': _getFactorLevel(factor.value),
          'recommendation': _getFactorRecommendation(
            entry.key,
            factor.value,
            context,
          ),
        };
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∞–∫—Ç–æ—Ä–æ–≤: $e');
    }

    return formatted;
  }

  /// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Ñ–∞–∫—Ç–æ—Ä–∞
  String _getFactorLevel(double value) {
    if (value >= 0.8) return 'excellent';
    if (value >= 0.6) return 'good';
    if (value >= 0.4) return 'moderate';
    if (value >= 0.2) return 'poor';
    return 'very_poor';
  }

  /// –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–∫—Ç–æ—Ä–∞
  String _getFactorRecommendation(
    String factorName,
    double value,
    BuildContext? context,
  ) {
    switch (factorName) {
      case 'pressure':
        if (value >= 0.7)
          return context?.let(
                (c) => AppLocalizations.of(c).translate('pressure_stable_good'),
              ) ??
              '–°—Ç–∞–±–∏–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ';
        if (value < 0.4)
          return context?.let(
                (c) => AppLocalizations.of(c).translate('pressure_low_bad'),
              ) ??
              '–ù–∏–∑–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ - —Ä—ã–±–∞ –ø–∞—Å—Å–∏–≤–Ω–∞';
        return context?.let(
              (c) => AppLocalizations.of(c).translate('pressure_high_bad'),
            ) ??
            '–í—ã—Å–æ–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ - –∫–ª–µ–≤ —Å–ª–∞–±—ã–π';

      case 'wind':
        if (value >= 0.7)
          return context?.let(
                (c) => AppLocalizations.of(c).translate('wind_optimal'),
              ) ??
              '–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä';
        if (value < 0.4)
          return context?.let(
                (c) => AppLocalizations.of(c).translate('wind_calm'),
              ) ??
              '–®—Ç–∏–ª—å - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª–µ–≥–∫–∏–µ –ø—Ä–∏–º–∞–Ω–∫–∏';
        return context?.let(
              (c) => AppLocalizations.of(c).translate('wind_strong'),
            ) ??
            '–°–∏–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä –∑–∞—Ç—Ä—É–¥–Ω—è–µ—Ç —Ä—ã–±–∞–ª–∫—É';

      case 'moon':
        if (value >= 0.7)
          return context?.let(
                (c) => AppLocalizations.of(c).translate('moon_active_phase'),
              ) ??
              '–ê–∫—Ç–∏–≤–Ω–∞—è —Ñ–∞–∑–∞ –ª—É–Ω—ã';
        return context?.let(
              (c) => AppLocalizations.of(c).translate('moon_passive_phase'),
            ) ??
            '–ü–∞—Å—Å–∏–≤–Ω–∞—è —Ñ–∞–∑–∞ –ª—É–Ω—ã';

      case 'temperature':
        if (value >= 0.7)
          return context?.let(
                (c) => AppLocalizations.of(c).translate('temperature_optimal'),
              ) ??
              '–ö–æ–º—Ñ–æ—Ä—Ç–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞';
        if (value < 0.4)
          return context?.let(
                (c) => AppLocalizations.of(c).translate('temperature_cold'),
              ) ??
              '–•–æ–ª–æ–¥–Ω–∞—è –ø–æ–≥–æ–¥–∞';
        return context?.let(
              (c) => AppLocalizations.of(c).translate('temperature_hot'),
            ) ??
            '–ñ–∞—Ä–∫–∞—è –ø–æ–≥–æ–¥–∞';

      default:
        return '–ù–æ—Ä–º–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è';
    }
  }

  /// –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞ –¥–∞–≤–ª–µ–Ω–∏—è
  Map<String, dynamic> _analyzePressureTrend(WeatherApiResponse weather) {
    // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ - –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω—ã –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
    final currentPressure = weather.current.pressureMb;

    return {
      'current': currentPressure,
      'trend':
          'stable', // stable, rising, falling, rapidly_rising, rapidly_falling
      'change24h': 0.0, // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24 —á–∞—Å–∞
      'recommendation':
          currentPressure >= 1010 && currentPressure <= 1025
              ? 'pressure_stable_good'
              : 'pressure_unstable',
    };
  }

  /// –ê–Ω–∞–ª–∏–∑ –≤–µ—Ç—Ä–∞ –¥–ª—è —Ä—ã–±–∞–ª–∫–∏
  Map<String, dynamic> _analyzeWindForFishing(
    WeatherApiResponse weather,
    BuildContext? context,
  ) {
    final wind = weather.current;
    final windKph = wind.windKph;
    final windDir = wind.windDir;

    String impact;
    if (windKph >= 3 && windKph <= 15) {
      impact = 'wind_impact_excellent';
    } else if (windKph <= 20) {
      impact = 'wind_impact_good';
    } else if (windKph <= 30) {
      impact = 'wind_impact_moderate';
    } else {
      impact = 'wind_impact_poor';
    }

    return {
      'speed': windKph,
      'direction': windDir,
      'impact': impact,
      'fishingAdvice': _getWindFishingAdvice(windKph, windDir),
      'optimalSide': _getOptimalFishingSide(windDir),
    };
  }

  /// –°–æ–≤–µ—Ç—ã –ø–æ –≤–µ—Ç—Ä—É –¥–ª—è —Ä—ã–±–∞–ª–∫–∏
  String _getWindFishingAdvice(double windKph, String windDir) {
    if (windKph < 3) return 'wind_calm';
    if (windKph <= 15) return 'wind_optimal';
    return 'wind_strong';
  }

  /// –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ –¥–ª—è —Ä—ã–±–∞–ª–∫–∏ –ø–æ –≤–µ—Ç—Ä—É
  String _getOptimalFishingSide(String windDir) {
    // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ - –æ–±—ã—á–Ω–æ –ª—É—á—à–µ –ª–æ–≤–∏—Ç—å —Å –Ω–∞–≤–µ—Ç—Ä–µ–Ω–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã
    switch (windDir.toUpperCase()) {
      case 'N':
        return 'south_side';
      case 'S':
        return 'north_side';
      case 'E':
        return 'west_side';
      case 'W':
        return 'east_side';
      default:
        return 'windward_side';
    }
  }

  /// –ê–Ω–∞–ª–∏–∑ –ª—É–Ω—ã –¥–ª—è —Ä—ã–±–∞–ª–∫–∏
  Map<String, dynamic> _analyzeMoonForFishing(
    WeatherApiResponse weather,
    BuildContext? context,
  ) {
    if (weather.forecast.isEmpty) {
      return {
        'phase': 'unknown',
        'impact': 'moon_impact_moderate',
        'recommendation': '–î–∞–Ω–Ω—ã–µ –æ –ª—É–Ω–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã',
      };
    }

    final moonPhase = weather.forecast.first.astro.moonPhase;
    final phaseLower = moonPhase.toLowerCase();

    String impact;
    if (phaseLower.contains('new') || phaseLower.contains('full')) {
      impact = 'moon_impact_excellent';
    } else if (phaseLower.contains('waxing') || phaseLower.contains('waning')) {
      impact = 'moon_impact_good';
    } else {
      impact = 'moon_impact_moderate';
    }

    return {
      'phase': moonPhase,
      'impact': impact,
      'recommendation':
          impact == 'moon_impact_excellent'
              ? 'moon_active_phase'
              : 'moon_passive_phase',
    };
  }

  /// –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –≥–ª—É–±–∏–Ω—ã
  Map<String, dynamic> _recommendOptimalDepth(
    WeatherApiResponse weather,
    BiteForecastModel forecast,
  ) {
    final pressure = weather.current.pressureMb;
    final temp = weather.current.tempC;

    String depth;
    String reason;

    if (pressure < 1005) {
      depth = 'deep';
      reason = '–ù–∏–∑–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ - —Ä—ã–±–∞ —É—Ö–æ–¥–∏—Ç –Ω–∞ –≥–ª—É–±–∏–Ω—É';
    } else if (temp > 25) {
      depth = 'deep';
      reason = '–ñ–∞—Ä–∫–∞—è –ø–æ–≥–æ–¥–∞ - —Ä—ã–±–∞ –∏—â–µ—Ç –ø—Ä–æ—Ö–ª–∞–¥—É –Ω–∞ –≥–ª—É–±–∏–Ω–µ';
    } else if (temp < 10) {
      depth = 'shallow';
      reason = '–•–æ–ª–æ–¥–Ω–∞—è –ø–æ–≥–æ–¥–∞ - —Ä—ã–±–∞ –±–ª–∏–∂–µ –∫ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏';
    } else {
      depth = 'medium';
      reason = '–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è - —Å—Ä–µ–¥–Ω—è—è –≥–ª—É–±–∏–Ω–∞';
    }

    return {
      'recommended': depth, // shallow, medium, deep
      'reason': reason,
      'metersRange': _getDepthRange(depth),
    };
  }

  /// –î–∏–∞–ø–∞–∑–æ–Ω –≥–ª—É–±–∏–Ω –≤ –º–µ—Ç—Ä–∞—Ö
  String _getDepthRange(String depth) {
    switch (depth) {
      case 'shallow':
        return '0.5-2–º';
      case 'medium':
        return '2-5–º';
      case 'deep':
        return '5-15–º';
      default:
        return '2-5–º';
    }
  }

  /// –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø—Ä–∏–º–∞–Ω–æ–∫
  List<Map<String, dynamic>> _recommendBaits(
    WeatherApiResponse weather,
    BiteForecastModel forecast,
    BuildContext? context,
  ) {
    final baits = <Map<String, dynamic>>[];

    final temp = weather.current.tempC;
    final windKph = weather.current.windKph;
    final isDay = weather.current.isDay == 1;
    final activity = forecast.overallActivity;

    try {
      // –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–º–∞–Ω–∫–∏ –¥–ª—è –≤—ã—Å–æ–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä—ã–±—ã
      if (activity >= 0.7) {
        baits.add({
          'type': 'active',
          'name': '–í–æ–±–ª–µ—Ä—ã, –±–ª–µ—Å–Ω—ã',
          'reason': '–í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä—ã–±—ã',
          'colors': isDay ? ['bright', 'natural'] : ['dark', 'contrast'],
        });
      }

      // –í —Ö–æ–ª–æ–¥–Ω—É—é –ø–æ–≥–æ–¥—É
      if (temp < 15) {
        baits.add({
          'type': 'slow',
          'name': '–î–∂–∏–≥, –º—è–≥–∫–∏–µ –ø—Ä–∏–º–∞–Ω–∫–∏',
          'reason': '–•–æ–ª–æ–¥–Ω–∞—è –≤–æ–¥–∞ - –º–µ–¥–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–æ–¥–∫–∞',
          'colors': ['natural', 'dark'],
        });
      }

      // –ü—Ä–∏ —Å–∏–ª—å–Ω–æ–º –≤–µ—Ç—Ä–µ
      if (windKph > 20) {
        baits.add({
          'type': 'heavy',
          'name': '–¢—è–∂–µ–ª—ã–µ –ø—Ä–∏–º–∞–Ω–∫–∏',
          'reason': '–°–∏–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä - –Ω—É–∂–µ–Ω –≤–µ—Å',
          'colors': ['bright', 'contrast'],
        });
      }

      // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –ø—Ä–∏–º–∞–Ω–∫–∏
      if (baits.isEmpty) {
        baits.add({
          'type': 'universal',
          'name': '–°–∏–ª–∏–∫–æ–Ω–æ–≤—ã–µ –ø—Ä–∏–º–∞–Ω–∫–∏',
          'reason': '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä',
          'colors': ['natural'],
        });
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø—Ä–∏–º–∞–Ω–æ–∫: $e');
    }

    return baits;
  }

  /// –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —Ç–µ—Ö–Ω–∏–∫–∏ –ª–æ–≤–ª–∏
  Map<String, dynamic> _recommendTechnique(
    WeatherApiResponse weather,
    BiteForecastModel forecast,
    BuildContext? context,
  ) {
    final temp = weather.current.tempC;
    final activity = forecast.overallActivity;

    String technique;
    String description;
    List<String> tips = [];

    if (activity >= 0.7) {
      technique = 'aggressive';
      description = '–ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –ø—Ä–æ–≤–æ–¥–∫–∞';
      tips = ['–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–æ–¥–∫–∞', '–ê–∫—Ç–∏–≤–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è', '–ß–∞—Å—Ç—ã–µ —Ä—ã–≤–∫–∏'];
    } else if (temp < 15 || activity < 0.4) {
      technique = 'slow';
      description = '–ú–µ–¥–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–æ–¥–∫–∞';
      tips = ['–ú–µ–¥–ª–µ–Ω–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è', '–î–ª–∏–Ω–Ω—ã–µ –ø–∞—É–∑—ã', '–ü–ª–∞–≤–Ω–∞—è –ø—Ä–æ–≤–æ–¥–∫–∞'];
    } else {
      technique = 'medium';
      description = '–£–º–µ—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–æ–¥–∫–∞';
      tips = ['–°—Ä–µ–¥–Ω–∏–π —Ç–µ–º–ø', '–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –ø–∞—É–∑—ã', '–°–º–µ–Ω–∞ —Ä–∏—Ç–º–∞'];
    }

    return {'type': technique, 'description': description, 'tips': tips};
  }

  /// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–≤–µ—Ç–æ–≤
  List<String> _generatePracticalTips(
    WeatherApiResponse weather,
    BiteForecastModel forecast,
    BuildContext? context,
  ) {
    final tips = <String>[];

    try {
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–≤–µ—Ç—ã –∏–∑ –±–∞–∑–æ–≤–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞
      tips.addAll(forecast.tips);

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ –ø–æ–≥–æ–¥–µ
      final pressure = weather.current.pressureMb;
      final windKph = weather.current.windKph;
      final temp = weather.current.tempC;
      final cloudCover = weather.current.cloud;

      if (pressure < 1005) {
        tips.add('low_pressure_tip');
      }

      if (windKph >= 3 && windKph <= 15) {
        tips.add('good_wind_tip');
      } else if (windKph < 3) {
        tips.add('calm_weather_tip');
      }

      if (temp < 15) {
        tips.add('cold_weather_tip');
      }

      if (cloudCover >= 20 && cloudCover <= 70) {
        tips.add('–õ–µ–≥–∫–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–∞ –¥–ª—è —Ä—ã–±–∞–ª–∫–∏');
      }

      // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
      return tips.toSet().toList();
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–≤–µ—Ç–æ–≤: $e');
      return forecast.tips;
    }
  }
}

// –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
extension ContextExtension on BuildContext? {
  T? let<T>(T Function(BuildContext) action) {
    if (this != null) {
      return action(this!);
    }
    return null;
  }
}
