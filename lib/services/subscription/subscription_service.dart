// –ü—É—Ç—å: lib/services/subscription/subscription_service.dart

import 'dart:async';
import 'dart:io';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:in_app_purchase/in_app_purchase.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import '../../constants/subscription_constants.dart';
import '../../models/subscription_model.dart';
import '../../models/usage_limits_model.dart';
import '../../services/firebase/firebase_service.dart';
import '../../services/subscription/usage_limits_service.dart';
import '../../utils/network_utils.dart';

/// –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –∏ –ø–æ–∫—É–ø–∫–∞–º–∏
class SubscriptionService {
  static final SubscriptionService _instance = SubscriptionService._internal();
  factory SubscriptionService() => _instance;
  SubscriptionService._internal();

  final InAppPurchase _inAppPurchase = InAppPurchase.instance;
  final FirebaseService _firebaseService = FirebaseService();
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final UsageLimitsService _usageLimitsService = UsageLimitsService();

  // –¢–µ—Å—Ç–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è Google Play Review
  static const List<String> _testAccounts = [
    'googleplay.reviewer@gmail.com',
    'googleplayreviewer@gmail.com',
    'test.reviewer@gmail.com',
    'reviewer@googleplay.com',
    'driftnotes.test@gmail.com'
  ];

  // –ö—ç—à —Ç–µ–∫—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
  SubscriptionModel? _cachedSubscription;

  // –°—Ç—Ä–∏–º –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ–¥–ø–∏—Å–∫–∏
  StreamSubscription<List<PurchaseDetails>>? _purchaseSubscription;
  final StreamController<SubscriptionModel> _subscriptionController = StreamController<SubscriptionModel>.broadcast();

  // –°—Ç—Ä–∏–º –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
  final StreamController<SubscriptionStatus> _subscriptionStatusController = StreamController<SubscriptionStatus>.broadcast();

  // –°—Ç—Ä–∏–º –¥–ª—è UI
  Stream<SubscriptionModel> get subscriptionStream => _subscriptionController.stream;

  // –°—Ç—Ä–∏–º —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –≤–∏–¥–∂–µ—Ç–∞–º–∏
  Stream<SubscriptionStatus> get subscriptionStatusStream => _subscriptionStatusController.stream;

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
  bool _isTestAccount() {
    try {
      final currentUser = _firebaseService.currentUser;
      if (currentUser?.email == null) return false;

      final email = currentUser!.email!.toLowerCase().trim();
      final isTest = _testAccounts.contains(email);

      if (kDebugMode && isTest) {
        debugPrint('üß™ –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç: $email');
      }

      return isTest;
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞: $e');
      }
      return false;
    }
  }

  // –ü—É–±–ª–∏—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  Future<bool> isTestReviewerAccount() async {
    return _isTestAccount();
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ email —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  String? getCurrentUserEmail() {
    try {
      return _firebaseService.currentUser?.email?.toLowerCase().trim();
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è email: $e');
      }
      return null;
    }
  }

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
  Future<void> initialize() async {
    try {
      if (kDebugMode) {
        debugPrint('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SubscriptionService...');
      }

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º UsageLimitsService
      await _usageLimitsService.initialize();

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤—è–∑—å –º–µ–∂–¥—É —Å–µ—Ä–≤–∏—Å–∞–º–∏
      _usageLimitsService.setSubscriptionService(this);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ–∫—É–ø–æ–∫
      final isAvailable = await _inAppPurchase.isAvailable();
      if (!isAvailable) {
        if (kDebugMode) {
          debugPrint('‚ùå In-App Purchase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ —ç—Ç–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ');
        }
        return;
      }

      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∫—É–ø–æ–∫
      _purchaseSubscription = _inAppPurchase.purchaseStream.listen(
        _handlePurchaseUpdates,
        onDone: () {
          if (kDebugMode) {
            debugPrint('üîÑ Purchase stream –∑–∞–∫—Ä—ã—Ç');
          }
        },
        onError: (error) {
          if (kDebugMode) {
            debugPrint('‚ùå –û—à–∏–±–∫–∞ –≤ purchase stream: $error');
          }
        },
      );

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
      await loadCurrentSubscription();

      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∫—É–ø–∫–∏ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
      await restorePurchases();

      if (kDebugMode) {
        debugPrint('‚úÖ SubscriptionService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      }
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SubscriptionService: $e');
      }
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  Future<bool> canCreateContent(ContentType contentType) async {
    try {
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –ø—Ä–µ–º–∏—É–º - —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å—ë
      if (hasPremiumAccess()) {
        return true;
      }

      // –î–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –≥–ª—É–±–∏–Ω - —Ç–æ–ª—å–∫–æ –ø—Ä–µ–º–∏—É–º
      if (contentType == ContentType.depthChart) {
        return false;
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º UsageLimitsService –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤
      return await _usageLimitsService.canCreateContent(contentType);
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞: $e');
      }
      return false;
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø–∞ —Å —É—á–µ—Ç–æ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
  bool hasPremiumAccess() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç –ü–ï–†–í–´–ú
    if (_isTestAccount()) {
      if (kDebugMode) {
        debugPrint('üß™ –¢–µ—Å—Ç–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç –∏–º–µ–µ—Ç –ø–æ–ª–Ω—ã–π –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø');
      }
      return true;
    }

    // –û–±—ã—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å–∞
    return _cachedSubscription?.isPremium ?? false;
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ —Ç–∏–ø—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
  Future<int> getCurrentUsage(ContentType contentType) async {
    try {
      final limits = await _usageLimitsService.getCurrentUsage();
      return limits.getCountForType(contentType);
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: $e');
      }
      return 0;
    }
  }

  /// –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
  int getCurrentUsageSync(ContentType contentType) {
    try {
      final limits = _usageLimitsService.currentLimits;
      if (limits == null) return 0;

      return limits.getCountForType(contentType);
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (sync): $e');
      }
      return 0;
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –ø–æ —Ç–∏–ø—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å —É—á–µ—Ç–æ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
  int getLimit(ContentType contentType) {
    try {
      // –ï—Å–ª–∏ –ø—Ä–µ–º–∏—É–º (–≤–∫–ª—é—á–∞—è —Ç–µ—Å—Ç–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã) - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø
      if (hasPremiumAccess()) {
        return SubscriptionConstants.unlimitedValue;
      }

      // –î–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ª–∏–º–∏—Ç—ã –∏–∑ –∫–æ–Ω—Å—Ç–∞–Ω—Ç
      return SubscriptionConstants.getContentLimit(contentType);
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞: $e');
      }
      return SubscriptionConstants.getContentLimit(contentType);
    }
  }

  /// –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
  Future<bool> incrementUsage(ContentType contentType) async {
    try {
      // –ï—Å–ª–∏ –ø—Ä–µ–º–∏—É–º (–≤–∫–ª—é—á–∞—è —Ç–µ—Å—Ç–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã) - –Ω–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
      if (hasPremiumAccess()) {
        return true;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–µ—Ä–µ–¥ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ–º
      if (!await canCreateContent(contentType)) {
        return false;
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º UsageLimitsService –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞
      return await _usageLimitsService.incrementUsage(contentType);
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: $e');
      }
      return false;
    }
  }

  /// –£–º–µ–Ω—å—à–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ (–ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞)
  Future<bool> decrementUsage(ContentType contentType) async {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º UsageLimitsService –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞
      return await _usageLimitsService.decrementUsage(contentType);
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ —É–º–µ–Ω—å—à–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: $e');
      }
      return false;
    }
  }

  /// –°–±—Ä–æ—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ —Ç–∏–ø—É (–¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ü–µ–ª–µ–π)
  Future<void> resetUsage(ContentType contentType) async {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –∏–∑ UsageLimitsService
      await _usageLimitsService.resetUsageForType(contentType);
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: $e');
      }
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –¥–ª—è UI (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
  Future<Map<ContentType, Map<String, int>>> getUsageInfo() async {
    try {
      final result = <ContentType, Map<String, int>>{};

      for (final contentType in ContentType.values) {
        result[contentType] = {
          'current': await getCurrentUsage(contentType),
          'limit': getLimit(contentType),
        };
      }

      return result;
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏: $e');
      }
      return {};
    }
  }

  /// –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è getUsageInfo –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  Map<ContentType, Map<String, int>> getUsageInfoSync() {
    try {
      final result = <ContentType, Map<String, int>>{};

      for (final contentType in ContentType.values) {
        result[contentType] = {
          'current': getCurrentUsageSync(contentType),
          'limit': getLimit(contentType),
        };
      }

      return result;
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ (sync): $e');
      }
      return {};
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
  Future<Map<String, dynamic>> getUsageStatistics() async {
    try {
      return await _usageLimitsService.getUsageStatistics();
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: $e');
      }
      return {};
    }
  }

  /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤
  Future<void> refreshUsageLimits() async {
    try {
      await _usageLimitsService.forceRefresh();
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤: $e');
      }
    }
  }

  /// –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<SubscriptionModel> loadCurrentSubscription() async {
    try {
      final userId = _firebaseService.currentUserId;
      if (userId == null) {
        _cachedSubscription = SubscriptionModel.defaultSubscription('');
        _subscriptionStatusController.add(_cachedSubscription!.status);
        return _cachedSubscription!;
      }

      // –ï—Å–ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç - —Å–æ–∑–¥–∞–µ–º –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É
      if (_isTestAccount()) {
        if (kDebugMode) {
          debugPrint('üß™ –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞');
        }
        _cachedSubscription = SubscriptionModel(
          userId: userId,
          status: SubscriptionStatus.active,
          type: SubscriptionType.yearly,
          expirationDate: DateTime.now().add(const Duration(days: 365)),
          purchaseToken: 'test_account_token',
          platform: Platform.isAndroid ? 'android' : 'ios',
          createdAt: DateTime.now(),
          updatedAt: DateTime.now(),
          isActive: true,
        );

        _subscriptionController.add(_cachedSubscription!);
        _subscriptionStatusController.add(_cachedSubscription!.status);
        return _cachedSubscription!;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
      if (_cachedSubscription != null && _cachedSubscription!.userId == userId) {
        return _cachedSubscription!;
      }

      // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ Firebase
      if (await NetworkUtils.isNetworkAvailable()) {
        final doc = await _firestore
            .collection(SubscriptionConstants.subscriptionCollection)
            .doc(userId)
            .get();

        if (doc.exists && doc.data() != null) {
          _cachedSubscription = SubscriptionModel.fromMap(doc.data()!, userId);
        } else {
          _cachedSubscription = SubscriptionModel.defaultSubscription(userId);
        }
      } else {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞
        _cachedSubscription = await _loadFromCache(userId);
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Å—Ç—Ä–∏–º—ã
      _subscriptionController.add(_cachedSubscription!);
      _subscriptionStatusController.add(_cachedSubscription!.status);

      return _cachedSubscription!;
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: $e');
      }
      final userId = _firebaseService.currentUserId ?? '';
      _cachedSubscription = SubscriptionModel.defaultSubscription(userId);
      _subscriptionStatusController.add(_cachedSubscription!.status);
      return _cachedSubscription!;
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏
  Future<List<ProductDetails>> getAvailableProducts() async {
    try {
      if (kDebugMode) {
        debugPrint('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤...');
      }

      final ProductDetailsResponse response = await _inAppPurchase.queryProductDetails(
        SubscriptionConstants.subscriptionProductIds.toSet(),
      );

      if (response.error != null) {
        if (kDebugMode) {
          debugPrint('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: ${response.error}');
        }
        return [];
      }

      if (kDebugMode) {
        debugPrint('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: ${response.productDetails.length}');
        for (final product in response.productDetails) {
          debugPrint('üì¶ –ü—Ä–æ–¥—É–∫—Ç: ${product.id} - ${product.price} ${product.currencyCode}');
        }
      }

      return response.productDetails;
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤: $e');
      }
      return [];
    }
  }

  /// –ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
  Future<bool> purchaseSubscription(String productId) async {
    try {
      if (kDebugMode) {
        debugPrint('üõí –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∫—É–ø–∫—É: $productId');
      }

      // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ–¥—É–∫—Ç–∞
      final products = await getAvailableProducts();
      final product = products.where((p) => p.id == productId).firstOrNull;

      if (product == null) {
        if (kDebugMode) {
          debugPrint('‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: $productId');
        }
        return false;
      }

      // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∫—É–ø–∫–∏
      final PurchaseParam purchaseParam = PurchaseParam(
        productDetails: product,
      );

      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∫—É–ø–∫—É
      final bool success = await _inAppPurchase.buyNonConsumable(
        purchaseParam: purchaseParam,
      );

      if (kDebugMode) {
        debugPrint('üõí –ü–æ–∫—É–ø–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞: $success');
      }
      return success;
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏: $e');
      }
      return false;
    }
  }

  /// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–æ–∫
  Future<void> restorePurchases() async {
    try {
      if (kDebugMode) {
        debugPrint('üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–æ–∫...');
      }
      await _inAppPurchase.restorePurchases();
      if (kDebugMode) {
        debugPrint('‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–æ–∫ –∑–∞–ø—É—â–µ–Ω–æ');
      }
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–æ–∫: $e');
      }
    }
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø–æ–∫—É–ø–æ–∫
  Future<void> _handlePurchaseUpdates(List<PurchaseDetails> purchaseDetailsList) async {
    if (kDebugMode) {
      debugPrint('üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø–æ–∫—É–ø–æ–∫: ${purchaseDetailsList.length}');
    }

    for (final PurchaseDetails purchaseDetails in purchaseDetailsList) {
      if (kDebugMode) {
        debugPrint('üí≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏: ${purchaseDetails.productID} - ${purchaseDetails.status}');
      }

      switch (purchaseDetails.status) {
        case PurchaseStatus.pending:
          await _handlePendingPurchase(purchaseDetails);
          break;
        case PurchaseStatus.purchased:
          await _handleSuccessfulPurchase(purchaseDetails);
          break;
        case PurchaseStatus.restored:
          await _handleRestoredPurchase(purchaseDetails);
          break;
        case PurchaseStatus.error:
          await _handleFailedPurchase(purchaseDetails);
          break;
        case PurchaseStatus.canceled:
          await _handleCanceledPurchase(purchaseDetails);
          break;
      }

      // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–æ–∫—É–ø–∫—É –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
      if (purchaseDetails.pendingCompletePurchase) {
        await _inAppPurchase.completePurchase(purchaseDetails);
        if (kDebugMode) {
          debugPrint('‚úÖ –ü–æ–∫—É–ø–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${purchaseDetails.productID}');
        }
      }
    }
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–∂–∏–¥–∞—é—â–µ–π –ø–æ–∫—É–ø–∫–∏
  Future<void> _handlePendingPurchase(PurchaseDetails purchaseDetails) async {
    if (kDebugMode) {
      debugPrint('‚è≥ –ü–æ–∫—É–ø–∫–∞ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏: ${purchaseDetails.productID}');
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ Firebase
    await _updateSubscriptionStatus(
      purchaseDetails,
      SubscriptionStatus.pending,
    );
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –ø–æ–∫—É–ø–∫–∏
  Future<void> _handleSuccessfulPurchase(PurchaseDetails purchaseDetails) async {
    if (kDebugMode) {
      debugPrint('‚úÖ –£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞: ${purchaseDetails.productID}');
    }

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
      if (await _validatePurchase(purchaseDetails)) {
        await _updateSubscriptionStatus(
          purchaseDetails,
          SubscriptionStatus.active,
        );

        if (kDebugMode) {
          debugPrint('üéâ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞: ${purchaseDetails.productID}');
        }
      } else {
        if (kDebugMode) {
          debugPrint('‚ùå –ü–æ–∫—É–ø–∫–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é: ${purchaseDetails.productID}');
        }
      }
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–π –ø–æ–∫—É–ø–∫–∏: $e');
      }
    }
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –ø–æ–∫—É–ø–∫–∏
  Future<void> _handleRestoredPurchase(PurchaseDetails purchaseDetails) async {
    if (kDebugMode) {
      debugPrint('üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∞: ${purchaseDetails.productID}');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞
    if (await _isSubscriptionStillValid(purchaseDetails)) {
      await _updateSubscriptionStatus(
        purchaseDetails,
        SubscriptionStatus.active,
      );
    } else {
      await _updateSubscriptionStatus(
        purchaseDetails,
        SubscriptionStatus.expired,
      );
    }
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—É–¥–∞—á–Ω–æ–π –ø–æ–∫—É–ø–∫–∏
  Future<void> _handleFailedPurchase(PurchaseDetails purchaseDetails) async {
    if (kDebugMode) {
      debugPrint('‚ùå –ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–∫—É–ø–∫–∞: ${purchaseDetails.productID}');
      debugPrint('‚ùå –û—à–∏–±–∫–∞: ${purchaseDetails.error}');
    }

    // –ú–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–π –ø–æ–∫—É–ø–∫–∏
  Future<void> _handleCanceledPurchase(PurchaseDetails purchaseDetails) async {
    if (kDebugMode) {
      debugPrint('üö´ –ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞: ${purchaseDetails.productID}');
    }

    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –ø–æ–∫—É–ø–∫—É - –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
  }

  /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ Firebase
  Future<void> _updateSubscriptionStatus(
      PurchaseDetails purchaseDetails,
      SubscriptionStatus status,
      ) async {
    try {
      final userId = _firebaseService.currentUserId;
      if (userId == null) return;

      final subscriptionType = SubscriptionConstants.getSubscriptionType(purchaseDetails.productID);
      if (subscriptionType == null) return;

      // –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è
      DateTime? expirationDate;
      if (status == SubscriptionStatus.active) {
        expirationDate = _calculateExpirationDate(subscriptionType);
      }

      // –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å –ø–æ–¥–ø–∏—Å–∫–∏
      final subscription = SubscriptionModel(
        userId: userId,
        status: status,
        type: subscriptionType,
        expirationDate: expirationDate,
        purchaseToken: purchaseDetails.purchaseID ?? '',
        platform: Platform.isAndroid
            ? SubscriptionConstants.androidPlatform
            : SubscriptionConstants.iosPlatform,
        createdAt: _cachedSubscription?.createdAt ?? DateTime.now(),
        updatedAt: DateTime.now(),
        isActive: status == SubscriptionStatus.active &&
            expirationDate != null &&
            DateTime.now().isBefore(expirationDate),
      );

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Firebase
      if (await NetworkUtils.isNetworkAvailable()) {
        await _firestore
            .collection(SubscriptionConstants.subscriptionCollection)
            .doc(userId)
            .set(subscription.toMap(), SetOptions(merge: true));
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
      await _saveToCache(subscription);
      _cachedSubscription = subscription;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Å—Ç—Ä–∏–º—ã
      _subscriptionController.add(subscription);
      _subscriptionStatusController.add(subscription.status);

      if (kDebugMode) {
        debugPrint('‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω: $status');
      }
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏: $e');
      }
    }
  }

  /// –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–∫—É–ø–∫–∏ (–±–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
  Future<bool> _validatePurchase(PurchaseDetails purchaseDetails) async {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø–æ–∫—É–ø–∫–∏
    // –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å ID –ø—Ä–æ–¥—É–∫—Ç–∞
    return purchaseDetails.productID.isNotEmpty;
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏
  Future<bool> _isSubscriptionStillValid(PurchaseDetails purchaseDetails) async {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Å —Å–µ—Ä–≤–µ—Ä–æ–º –º–∞–≥–∞–∑–∏–Ω–∞
    // –ü–æ–∫–∞ —á—Ç–æ —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –ø–æ–¥–ø–∏—Å–∫–∞ –≤–∞–ª–∏–¥–Ω–∞
    return true;
  }

  /// –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –¥–∞—Ç—ã –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
  DateTime _calculateExpirationDate(SubscriptionType type) {
    final now = DateTime.now();

    switch (type) {
      case SubscriptionType.monthly:
        return DateTime(now.year, now.month + 1, now.day);
      case SubscriptionType.yearly:
        return DateTime(now.year + 1, now.month, now.day);
    }
  }

  /// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à
  Future<void> _saveToCache(SubscriptionModel subscription) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setString(
        SubscriptionConstants.cachedSubscriptionStatusKey,
        subscription.status.name,
      );
      await prefs.setString(
        SubscriptionConstants.cachedPlanTypeKey,
        subscription.type?.name ?? '',
      );
      if (subscription.expirationDate != null) {
        await prefs.setString(
          SubscriptionConstants.cachedExpirationDateKey,
          subscription.expirationDate!.toIso8601String(),
        );
      }
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∫—ç—à: $e');
      }
    }
  }

  /// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞
  Future<SubscriptionModel> _loadFromCache(String userId) async {
    try {
      final prefs = await SharedPreferences.getInstance();

      final statusString = prefs.getString(SubscriptionConstants.cachedSubscriptionStatusKey);
      final typeString = prefs.getString(SubscriptionConstants.cachedPlanTypeKey);
      final expirationString = prefs.getString(SubscriptionConstants.cachedExpirationDateKey);

      if (statusString == null) {
        return SubscriptionModel.defaultSubscription(userId);
      }

      final status = SubscriptionStatus.values
          .where((s) => s.name == statusString)
          .firstOrNull ?? SubscriptionStatus.none;

      final type = typeString != null && typeString.isNotEmpty
          ? SubscriptionType.values
          .where((t) => t.name == typeString)
          .firstOrNull
          : null;

      final expirationDate = expirationString != null
          ? DateTime.tryParse(expirationString)
          : null;

      final now = DateTime.now();
      final isActive = status == SubscriptionStatus.active &&
          expirationDate != null &&
          now.isBefore(expirationDate);

      return SubscriptionModel(
        userId: userId,
        status: isActive ? status : SubscriptionStatus.expired,
        type: type,
        expirationDate: expirationDate,
        purchaseToken: '',
        platform: Platform.isAndroid
            ? SubscriptionConstants.androidPlatform
            : SubscriptionConstants.iosPlatform,
        createdAt: now,
        updatedAt: now,
        isActive: isActive,
      );
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –∫—ç—à–∞: $e');
      }
      return SubscriptionModel.defaultSubscription(userId);
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∏–∑ –∫—ç—à–∞)
  SubscriptionModel? get currentSubscription => _cachedSubscription;

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å–∞ —Å —É—á–µ—Ç–æ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
  bool get isPremium {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç –ü–ï–†–í–´–ú
    if (_isTestAccount()) {
      return true;
    }

    // –û–±—ã—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å–∞
    return _cachedSubscription?.isPremium ?? false;
  }

  /// –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
  void dispose() {
    _purchaseSubscription?.cancel();
    _subscriptionController.close();
    _subscriptionStatusController.close();
  }
}