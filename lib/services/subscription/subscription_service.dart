// –ü—É—Ç—å: lib/services/subscription/subscription_service.dart

import 'dart:async';
import 'dart:io';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:in_app_purchase/in_app_purchase.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import '../../constants/subscription_constants.dart';
import '../../models/subscription_model.dart';
import '../../models/usage_limits_model.dart';
import '../../models/usage_limits_models.dart'; // üÜï –î–û–ë–ê–í–õ–ï–ù–û
import '../../models/offline_usage_result.dart';
import '../../services/firebase/firebase_service.dart';
import '../../services/offline/offline_storage_service.dart';
import '../../services/isar_service.dart';
import '../../repositories/user_usage_limits_repository.dart'; // üÜï –î–û–ë–ê–í–õ–ï–ù–û
import '../../utils/network_utils.dart';

/// –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –∏ –ø–æ–∫—É–ø–∫–∞–º–∏
class SubscriptionService {
  static final SubscriptionService _instance = SubscriptionService._internal();
  factory SubscriptionService() => _instance;
  SubscriptionService._internal();

  final InAppPurchase _inAppPurchase = InAppPurchase.instance;

  // FirebaseService –∏–Ω–∂–µ–∫—Ç–∏—Ä—É–µ—Ç—Å—è –∏–∑–≤–Ω–µ
  FirebaseService? _firebaseService;

  // IsarService –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
  final IsarService _isarService = IsarService.instance;

  // üÜï –î–û–ë–ê–í–õ–ï–ù–û: Repository –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–∏–º–∏—Ç–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  final UserUsageLimitsRepository _usageLimitsRepository = UserUsageLimitsRepository.instance;

  // –û—Ñ–ª–∞–π–Ω —Å—Ç–æ—Ä–∞–¥–∂ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫, –Ω–µ –¥–ª—è –∑–∞–º–µ—Ç–æ–∫)
  final OfflineStorageService _offlineStorage = OfflineStorageService();

  // –ö—ç—à —Ç–µ–∫—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
  SubscriptionModel? _cachedSubscription;

  // –°—Ç—Ä–∏–º –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ–¥–ø–∏—Å–∫–∏
  StreamSubscription<List<PurchaseDetails>>? _purchaseSubscription;
  final StreamController<SubscriptionModel> _subscriptionController = StreamController<SubscriptionModel>.broadcast();
  final StreamController<SubscriptionStatus> _subscriptionStatusController = StreamController<SubscriptionStatus>.broadcast();

  // –°—Ç—Ä–∏–º—ã –¥–ª—è UI
  Stream<SubscriptionModel> get subscriptionStream => _subscriptionController.stream;
  Stream<SubscriptionStatus> get subscriptionStatusStream => _subscriptionStatusController.stream;

  /// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ FirebaseService (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è ServiceManager'–æ–º)
  void setFirebaseService(FirebaseService firebaseService) {
    _firebaseService = firebaseService;
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ FirebaseService (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏)
  FirebaseService get firebaseService {
    if (_firebaseService == null) {
      throw Exception('SubscriptionService –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω! FirebaseService –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.');
    }
    return _firebaseService!;
  }

  // ========================================
  // –£–ü–†–û–©–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –¢–ï–°–¢–û–í–´–• –ê–ö–ö–ê–£–ù–¢–û–í
  // ========================================

  // –¢–µ—Å—Ç–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è Google Play Review
  static const List<String> _testAccounts = [
    'googleplay.reviewer@gmail.com',
    'googleplayreviewer@gmail.com',
    'test.reviewer@gmail.com',
    'reviewer@googleplay.com',
    'driftnotes.test@gmail.com'
  ];

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
  bool _isTestAccount() {
    try {
      final currentUser = firebaseService.currentUser;
      if (currentUser?.email == null) return false;

      final email = currentUser!.email!.toLowerCase().trim();
      return _testAccounts.contains(email);
    } catch (e) {
      return false;
    }
  }

  /// –ü—É–±–ª–∏—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  Future<bool> isTestReviewerAccount() async {
    return _isTestAccount();
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ email —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  String? getCurrentUserEmail() {
    try {
      return firebaseService.currentUser?.email?.toLowerCase().trim();
    } catch (e) {
      return null;
    }
  }

  // ========================================
  // –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
  // ========================================

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
  Future<void> initialize() async {
    try {
      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –æ–± –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ FirebaseService —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
      if (_firebaseService == null) {
        // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º –æ –Ω–µ—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–º FirebaseService
        return;
      }

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ñ–ª–∞–π–Ω —Å—Ç–æ—Ä–∞–¥–∂
      await _offlineStorage.initialize();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ–∫—É–ø–æ–∫
      final isAvailable = await _inAppPurchase.isAvailable();
      if (!isAvailable) {
        // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ In-App Purchase
        return;
      }

      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∫—É–ø–æ–∫
      _purchaseSubscription = _inAppPurchase.purchaseStream.listen(
        _handlePurchaseUpdates,
        onDone: () {
          // ‚úÖ –£–ë–†–ê–ù–û: debugPrint –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ purchase stream
        },
        onError: (error) {
          // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –¥–µ—Ç–∞–ª—è–º–∏ –æ—à–∏–±–∫–∏ –≤ purchase stream
        },
      );

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
      await loadCurrentSubscription();

      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∫—É–ø–∫–∏ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
      await restorePurchases();

      // üÜï –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –ª–∏–º–∏—Ç–æ–≤ —á–µ—Ä–µ–∑ Repository
      await _initializeUsageLimitsRepository();


      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    } catch (e) {
      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –¥–µ—Ç–∞–ª—è–º–∏ –æ—à–∏–±–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    }
  }

  /// üÜï –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ª–∏–º–∏—Ç–æ–≤ —á–µ—Ä–µ–∑ Repository
  Future<void> _initializeUsageLimitsRepository() async {
    try {
      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –æ–± –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –ª–∏–º–∏—Ç–æ–≤

      final userId = firebaseService.currentUserId;
      if (userId == null) {
        // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º –æ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        return;
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ª–∏–º–∏—Ç—ã —á–µ—Ä–µ–∑ Repository
      final limits = await _usageLimitsRepository.getUserLimits(userId);

      if (limits != null) {
        // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –ª–∏–º–∏—Ç–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      } else {
        // ‚úÖ –£–ë–†–ê–ù–û: debugPrint –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        // –°–æ–∑–¥–∞–µ–º –ª–∏–º–∏—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–µ–∑ Repository
        final defaultLimits = UsageLimitsModel.defaultLimits(userId);
        await _usageLimitsRepository.saveUserLimits(defaultLimits);
      }

      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –ª–∏–º–∏—Ç–æ–≤
    } catch (e) {
      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –¥–µ—Ç–∞–ª—è–º–∏ –æ—à–∏–±–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –ª–∏–º–∏—Ç–æ–≤
    }
  }

  // ========================================
  // üÜï –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –ú–ï–¢–û–î–´ –ü–†–û–í–ï–†–ö–ò –õ–ò–ú–ò–¢–û–í (–¢–ï–ü–ï–†–¨ –ò–°–ü–û–õ–¨–ó–£–Æ–¢ REPOSITORY)
  // ========================================

  /// üÜï –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ Repository
  Future<bool> canCreateContent(ContentType contentType) async {
    try {
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –ø—Ä–µ–º–∏—É–º - —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å—ë
      if (hasPremiumAccess()) {
        return true;
      }

      // –î–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –≥–ª—É–±–∏–Ω - —Ç–æ–ª—å–∫–æ –ø—Ä–µ–º–∏—É–º
      if (contentType == ContentType.depthChart) {
        return false;
      }

      final userId = firebaseService.currentUserId;
      if (userId == null) {
        // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º –æ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        return false;
      }

      // üÜï –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º Repository –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤
      final result = await _usageLimitsRepository.canCreateContent(userId, contentType);

      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –¥–µ—Ç–∞–ª—è–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ (contentType, canCreate, currentCount, limit)

      return result.canCreate;
    } catch (e) {
      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –¥–µ—Ç–∞–ª—è–º–∏ –æ—à–∏–±–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
      return false;
    }
  }

  /// üÜï –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—Ñ–ª–∞–π–Ω –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ Repository
  Future<bool> canCreateContentOffline(ContentType contentType) async {
    try {
      // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ - –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø
      if (_isTestAccount()) {
        // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–µ—Å—Ç–æ–≤–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ
        return true;
      }

      // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å–∞
      final cachedSubscription = await _offlineStorage.getCachedSubscriptionStatus();
      if (cachedSubscription?.isPremium == true) {
        if (await _offlineStorage.isSubscriptionCacheValid()) {
          // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å–µ
          return true;
        }
      }

      final userId = firebaseService.currentUserId;
      if (userId == null) {
        // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º –æ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –æ—Ñ–ª–∞–π–Ω –ø—Ä–æ–≤–µ—Ä–∫–∏
        return false;
      }

      // 3. üÜï –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º Repository –¥–ª—è –æ—Ñ–ª–∞–π–Ω –ø—Ä–æ–≤–µ—Ä–∫–∏
      final result = await _usageLimitsRepository.canCreateContent(userId, contentType);

      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –¥–µ—Ç–∞–ª—è–º–∏ –æ—Ñ–ª–∞–π–Ω –ø—Ä–æ–≤–µ—Ä–∫–∏ (contentType, canCreate, currentCount, limit)

      return result.canCreate;
    } catch (e) {
      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –¥–µ—Ç–∞–ª—è–º–∏ –æ—à–∏–±–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ñ–ª–∞–π–Ω —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
      // –ü—Ä–∏ –æ—à–∏–±–∫–µ —Ä–∞–∑—Ä–µ—à–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ (–ø—Ä–∏–Ω—Ü–∏–ø "fail open")
      return true;
    }
  }

  /// üÜï –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–∞—Ç—É—Å–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ Repository
  Future<OfflineUsageResult> checkOfflineUsage(ContentType contentType) async {
    try {
      final userId = firebaseService.currentUserId;
      if (userId == null) {
        return _getErrorUsageResult(contentType);
      }

      // üÜï –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ Repository
      final result = await _usageLimitsRepository.canCreateContent(userId, contentType);

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
      OfflineLimitWarningType warningType;
      String message;

      if (!result.canCreate) {
        if (result.reason == ContentCreationBlockReason.premiumRequired) {
          warningType = OfflineLimitWarningType.blocked;
          message = '–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è ${_getContentTypeName(contentType)}';
        } else {
          warningType = OfflineLimitWarningType.blocked;
          message = '–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç ${_getContentTypeName(contentType)} (${result.limit})';
        }
      } else if (result.remaining <= 2) {
        warningType = OfflineLimitWarningType.warning;
        message = '–û—Å—Ç–∞–ª–æ—Å—å ${result.remaining} ${_getContentTypeName(contentType)}';
      } else {
        warningType = OfflineLimitWarningType.normal;
        message = '–î–æ—Å—Ç—É–ø–Ω–æ ${result.remaining} ${_getContentTypeName(contentType)}';
      }

      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –¥–µ—Ç–∞–ª—è–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ñ–ª–∞–π–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

      return OfflineUsageResult(
        canCreate: result.canCreate,
        warningType: warningType,
        message: message,
        currentUsage: result.currentCount,
        limit: result.limit,
        remaining: result.remaining,
        contentType: contentType,
      );
    } catch (e) {
      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –¥–µ—Ç–∞–ª—è–º–∏ –æ—à–∏–±–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ñ–ª–∞–π–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      return _getErrorUsageResult(contentType);
    }
  }

  /// üÜï –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ô: –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
  OfflineUsageResult _getErrorUsageResult(ContentType contentType) {
    return OfflineUsageResult(
      canCreate: true,
      warningType: OfflineLimitWarningType.normal,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤',
      currentUsage: 0,
      limit: getLimit(contentType),
      remaining: getLimit(contentType),
      contentType: contentType,
    );
  }

  // ========================================
  // üÜï –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –ú–ï–¢–û–î–´ –†–ê–ë–û–¢–´ –°–û –°–ß–ï–¢–ß–ò–ö–ê–ú–ò (–ß–ï–†–ï–ó REPOSITORY)
  // ========================================

  /// üÜï –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ Repository
  Future<bool> incrementUsage(ContentType contentType) async {
    try {
      // –¢–µ—Å—Ç–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã Google Play - –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –ë–ï–ó —Å—á–µ—Ç—á–∏–∫–æ–≤
      if (_isTestAccount()) {
        // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–ø—É—Å–∫–µ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        return true;
      }

      final userId = firebaseService.currentUserId;
      if (userId == null) {
        // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º –æ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞
        return false;
      }

      // üÜï –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —á–µ—Ä–µ–∑ Repository
      await _usageLimitsRepository.incrementCounter(userId, contentType);

      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ —á–µ—Ä–µ–∑ Repository
      return true;
    } catch (e) {
      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –¥–µ—Ç–∞–ª—è–º–∏ –æ—à–∏–±–∫–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      return false;
    }
  }

  /// üÜï –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–º–µ–Ω—å—à–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ Repository
  Future<bool> decrementUsage(ContentType contentType) async {
    try {
      final userId = firebaseService.currentUserId;
      if (userId == null) {
        // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º –æ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞
        return false;
      }

      // üÜï –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —á–µ—Ä–µ–∑ Repository
      await _usageLimitsRepository.decrementCounter(userId, contentType);

      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º —É–º–µ–Ω—å—à–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ —á–µ—Ä–µ–∑ Repository
      return true;
    } catch (e) {
      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –¥–µ—Ç–∞–ª—è–º–∏ –æ—à–∏–±–∫–∏ —É–º–µ–Ω—å—à–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      return false;
    }
  }

  /// üÜï –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–±—Ä–æ—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ —Ç–∏–ø—É —á–µ—Ä–µ–∑ Repository
  Future<void> resetUsage(ContentType contentType) async {
    try {
      final userId = firebaseService.currentUserId;
      if (userId == null) {
        // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º –æ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å—á–µ—Ç—á–∏–∫–∞
        return;
      }

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Å—á–µ—Ç—á–∏–∫–∏ —á–µ—Ä–µ–∑ Repository
      await _usageLimitsRepository.resetAllCounters(userId);

      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º —Å–±—Ä–æ—Å–∞ –≤—Å–µ—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤ —á–µ—Ä–µ–∑ Repository
    } catch (e) {
      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –¥–µ—Ç–∞–ª—è–º–∏ –æ—à–∏–±–∫–∏ —Å–±—Ä–æ—Å–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    }
  }

  /// üÜï –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —á–µ—Ä–µ–∑ Repository
  Future<Map<ContentType, Map<String, int>>> getUsageInfo() async {
    try {
      final userId = firebaseService.currentUserId;
      if (userId == null) return {};

      final result = <ContentType, Map<String, int>>{};

      for (final contentType in ContentType.values) {
        final stats = await _usageLimitsRepository.getStatsForType(userId, contentType);
        result[contentType] = {
          'current': stats['current'] ?? 0,
          'limit': stats['limit'] ?? 0,
        };
      }

      return result;
    } catch (e) {
      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –¥–µ—Ç–∞–ª—è–º–∏ –æ—à–∏–±–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
      return {};
    }
  }

  /// üÜï –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ Repository
  Future<Map<String, dynamic>> getUsageStatistics() async {
    try {
      final userId = firebaseService.currentUserId;
      if (userId == null) return {'exists': false, 'error': 'User not authenticated'};

      // üÜï –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ Repository
      final stats = await _usageLimitsRepository.getUsageStats(userId);

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å–æ —Å—Ç–∞—Ä–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
      return {
        SubscriptionConstants.notesCountField: stats['notes']?['current'] ?? 0,
        SubscriptionConstants.markerMapsCountField: stats['maps']?['current'] ?? 0,
        SubscriptionConstants.budgetNotesCountField: stats['budgetNotes']?['current'] ?? 0,
        SubscriptionConstants.lastResetDateField: DateTime.now().toIso8601String(),
        'updatedAt': DateTime.now().toIso8601String(),
        'exists': true,
      };
    } catch (e) {
      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –¥–µ—Ç–∞–ª—è–º–∏ –æ—à–∏–±–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      return {'exists': false, 'error': e.toString()};
    }
  }

  /// üÜï –ù–û–í–û–ï: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ Repository
  Future<int> getCurrentUsage(ContentType contentType) async {
    try {
      final userId = firebaseService.currentUserId;
      if (userId == null) return 0;

      final stats = await _usageLimitsRepository.getStatsForType(userId, contentType);
      return stats['current'] ?? 0;
    } catch (e) {
      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –¥–µ—Ç–∞–ª—è–º–∏ –æ—à–∏–±–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      return 0;
    }
  }

  /// üÜï –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ—Å—á–µ—Ç –ª–∏–º–∏—Ç–æ–≤ —á–µ—Ä–µ–∑ Repository —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  Future<void> recalculateUsageLimits() async {
    try {
      final userId = firebaseService.currentUserId;
      if (userId == null) {
        // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º –æ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –ª–∏–º–∏—Ç–æ–≤
        return;
      }

      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–µ—Ä–µ—Å—á–µ—Ç–µ –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

      // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–º–µ—Ç–æ–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      final fishingNotesCount = await _isarService.getFishingNotesCountByUser(userId);
      final markerMapsCount = await _isarService.getMarkerMapsCountByUser(userId);
      final budgetNotesCount = await _isarService.getBudgetNotesCountByUser(userId);

      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ø–æ–¥—Å—á–µ—Ç–∞–º–∏ –ø–æ —Ç–∏–ø–∞–º

      // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ Repository
      await _usageLimitsRepository.recalculateCounters(
        userId,
        notesCount: fishingNotesCount,
        markerMapsCount: markerMapsCount,
        budgetNotesCount: budgetNotesCount,
        recalculationType: 'subscription_service_recalculate',
      );

      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –ª–∏–º–∏—Ç–æ–≤
    } catch (e) {
      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –¥–µ—Ç–∞–ª—è–º–∏ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –ª–∏–º–∏—Ç–æ–≤
    }
  }


  // ========================================
  // –£–¢–ò–õ–ò–¢–´ –ò –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
  // ========================================

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —á–∏—Ç–∞–µ–º–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  String _getContentTypeName(ContentType contentType) {
    switch (contentType) {
      case ContentType.fishingNotes:
        return '–∑–∞–º–µ—Ç–æ–∫';
      case ContentType.markerMaps:
        return '–∫–∞—Ä—Ç';
      case ContentType.budgetNotes:
        return '–∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞';
      case ContentType.depthChart:
        return '–≥—Ä–∞—Ñ–∏–∫–æ–≤ –≥–ª—É–±–∏–Ω';
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø–∞ —Å —É—á–µ—Ç–æ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
  bool hasPremiumAccess() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç –ü–ï–†–í–´–ú
    if (_isTestAccount()) {
      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª–Ω–æ–º –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
      return true;
    }

    // –û–±—ã—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å–∞
    return _cachedSubscription?.isPremium ?? false;
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –ø–æ —Ç–∏–ø—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å —É—á–µ—Ç–æ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
  int getLimit(ContentType contentType) {
    try {
      // –ï—Å–ª–∏ –ø—Ä–µ–º–∏—É–º (–≤–∫–ª—é—á–∞—è —Ç–µ—Å—Ç–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã) - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø
      if (hasPremiumAccess()) {
        return SubscriptionConstants.unlimitedValue;
      }

      // –î–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ª–∏–º–∏—Ç—ã –∏–∑ –∫–æ–Ω—Å—Ç–∞–Ω—Ç
      return SubscriptionConstants.getContentLimit(contentType);
    } catch (e) {
      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –¥–µ—Ç–∞–ª—è–º–∏ –æ—à–∏–±–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞
      return SubscriptionConstants.getContentLimit(contentType);
    }
  }

  /// üÜï –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–∫–∞–∑–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –ª–∏–º–∏—Ç–µ —á–µ—Ä–µ–∑ Repository
  Future<bool> shouldShowLimitWarning(ContentType contentType) async {
    try {
      final userId = firebaseService.currentUserId;
      if (userId == null) return false;

      final warnings = await _usageLimitsRepository.getContentWarnings(userId);
      return warnings.any((warning) => warning.contentType == contentType);
    } catch (e) {
      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –¥–µ—Ç–∞–ª—è–º–∏ –æ—à–∏–±–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
      return false;
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–∫–∞–∑–∞ –¥–∏–∞–ª–æ–≥–∞ –ø—Ä–µ–º–∏—É–º
  Future<bool> shouldShowPremiumDialog(ContentType contentType) async {
    try {
      final result = await checkOfflineUsage(contentType);
      return result.shouldShowPremiumDialog;
    } catch (e) {
      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –¥–µ—Ç–∞–ª—è–º–∏ –æ—à–∏–±–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–∏–∞–ª–æ–≥–∞ –ø—Ä–µ–º–∏—É–º
      return false;
    }
  }

  // ========================================
  // üÜï –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –ö–≠–®–ò–†–û–í–ê–ù–ò–ï –ò –û–§–õ–ê–ô–ù –ú–ï–¢–û–î–´ (–ß–ï–†–ï–ó REPOSITORY)
  // ========================================

  /// üÜï –ò–°–ü–†–ê–í–õ–ï–ù–û: –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ Repository
  Future<void> cacheSubscriptionDataOnline() async {
    try {
      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–∫–∏

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ç–∏
      if (!await NetworkUtils.isNetworkAvailable()) {
        // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Å–µ—Ç–∏
        return;
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
      final subscription = await loadCurrentSubscription();

      // –ö—ç—à–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
      await _offlineStorage.cacheSubscriptionStatus(subscription);
      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏

      // üÜï –ò–°–ü–†–ê–í–õ–ï–ù–û: –ö—ç—à–∏—Ä—É–µ–º –ª–∏–º–∏—Ç—ã —á–µ—Ä–µ–∑ Repository
      try {
        final userId = firebaseService.currentUserId;
        if (userId != null) {
          final limits = await _usageLimitsRepository.getUserLimits(userId);
          if (limits != null) {
            await _offlineStorage.cacheUsageLimits(limits);
            // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Repository
          }
        }
      } catch (e) {
        // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –¥–µ—Ç–∞–ª—è–º–∏ –æ—à–∏–±–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ —á–µ—Ä–µ–∑ Repository
      }

      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º —É—Å–ø–µ—à–Ω–æ–≥–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–∫–∏
    } catch (e) {
      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –¥–µ—Ç–∞–ª—è–º–∏ –æ—à–∏–±–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–∫–∏
    }
  }

  /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –ø–æ–¥–ø–∏—Å–∫–∏
  Future<void> refreshSubscriptionCache() async {
    try {
      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—ç—à–∞ –ø–æ–¥–ø–∏—Å–∫–∏

      await cacheSubscriptionDataOnline();

      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    } catch (e) {
      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –¥–µ—Ç–∞–ª—è–º–∏ –æ—à–∏–±–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—ç—à–µ –ø–æ–¥–ø–∏—Å–∫–∏
  Future<Map<String, dynamic>> getSubscriptionCacheInfo() async {
    try {
      final cachedSubscription = await _offlineStorage.getCachedSubscriptionStatus();
      final isValid = await _offlineStorage.isSubscriptionCacheValid();

      return {
        'hasCachedSubscription': cachedSubscription != null,
        'isPremium': cachedSubscription?.isPremium ?? false,
        'isCacheValid': isValid,
        'status': cachedSubscription?.status.name,
        'expirationDate': cachedSubscription?.expirationDate?.toIso8601String(),
      };
    } catch (e) {
      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –¥–µ—Ç–∞–ª—è–º–∏ –æ—à–∏–±–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—ç—à–µ –ø–æ–¥–ø–∏—Å–∫–∏
      return {
        'hasCachedSubscription': false,
        'isPremium': false,
        'isCacheValid': false,
      };
    }
  }

  /// üÜï –ù–û–í–û–ï: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏–º–∏—Ç–∞—Ö —á–µ—Ä–µ–∑ Repository
  Future<Map<String, dynamic>> getUsageLimitsDebugInfo() async {
    try {
      final userId = firebaseService.currentUserId;
      if (userId == null) return {'error': 'User not authenticated'};

      return await _usageLimitsRepository.getDebugInfo(userId);
    } catch (e) {
      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –¥–µ—Ç–∞–ª—è–º–∏ –æ—à–∏–±–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏–º–∏—Ç–∞—Ö
      return {'error': e.toString()};
    }
  }

  /// –û—á–∏—Å—Ç–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤ (—Ç–µ–ø–µ—Ä—å —á–µ—Ä–µ–∑ Repository)
  Future<void> clearLocalCounters() async {
    try {
      final userId = firebaseService.currentUserId;
      if (userId == null) return;

      // üÜï –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—á–∏—â–∞–µ–º —á–µ—Ä–µ–∑ Repository
      await _usageLimitsRepository.resetAllCounters(userId);

      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –æ—á–∏—Å—Ç–∫–∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤ —á–µ—Ä–µ–∑ Repository
    } catch (e) {
      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –¥–µ—Ç–∞–ª—è–º–∏ –æ—à–∏–±–∫–∏ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤
    }
  }

  /// üÜï –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤ —á–µ—Ä–µ–∑ Repository
  Future<Map<ContentType, int>> getAllLocalCounters() async {
    try {
      final userId = firebaseService.currentUserId;
      if (userId == null) return {};

      final result = <ContentType, int>{};

      for (final contentType in ContentType.values) {
        final stats = await _usageLimitsRepository.getStatsForType(userId, contentType);
        result[contentType] = stats['current'] ?? 0;
      }

      return result;
    } catch (e) {
      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –¥–µ—Ç–∞–ª—è–º–∏ –æ—à–∏–±–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤
      return {};
    }
  }

  // ========================================
  // –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–î–ü–ò–°–ö–ê–ú–ò (–û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
  // ========================================

  /// –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<SubscriptionModel> loadCurrentSubscription() async {
    try {
      final userId = firebaseService.currentUserId;
      if (userId == null) {
        _cachedSubscription = SubscriptionModel.defaultSubscription('');
        _subscriptionStatusController.add(_cachedSubscription!.status);
        return _cachedSubscription!;
      }

      // –ï—Å–ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç - —Å–æ–∑–¥–∞–µ–º –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É
      if (_isTestAccount()) {
        // ‚úÖ –£–ë–†–ê–ù–û: debugPrint –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        _cachedSubscription = SubscriptionModel(
          userId: userId,
          status: SubscriptionStatus.active,
          type: SubscriptionType.yearly,
          expirationDate: DateTime.now().add(const Duration(days: 365)),
          purchaseToken: 'test_account_token',
          platform: Platform.isAndroid ? 'android' : 'ios',
          createdAt: DateTime.now(),
          updatedAt: DateTime.now(),
          isActive: true,
        );

        _subscriptionController.add(_cachedSubscription!);
        _subscriptionStatusController.add(_cachedSubscription!.status);
        return _cachedSubscription!;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
      if (_cachedSubscription != null && _cachedSubscription!.userId == userId) {
        return _cachedSubscription!;
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ Firebase
      if (await NetworkUtils.isNetworkAvailable()) {
        final doc = await firebaseService.getUserSubscription();

        if (doc.exists && doc.data() != null) {
          _cachedSubscription = SubscriptionModel.fromMap(doc.data()! as Map<String, dynamic>, userId);
        } else {
          _cachedSubscription = SubscriptionModel.defaultSubscription(userId);
        }
      } else {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞
        _cachedSubscription = await _loadFromCache(userId);
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Å—Ç—Ä–∏–º—ã
      _subscriptionController.add(_cachedSubscription!);
      _subscriptionStatusController.add(_cachedSubscription!.status);

      return _cachedSubscription!;
    } catch (e) {
      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –¥–µ—Ç–∞–ª—è–º–∏ –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
      final userId = firebaseService.currentUserId ?? '';
      _cachedSubscription = SubscriptionModel.defaultSubscription(userId);
      _subscriptionStatusController.add(_cachedSubscription!.status);
      return _cachedSubscription!;
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏
  Future<List<ProductDetails>> getAvailableProducts() async {
    try {
      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –æ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤

      final ProductDetailsResponse response = await _inAppPurchase.queryProductDetails(
        SubscriptionConstants.subscriptionProductIds.toSet(),
      );

      if (response.error != null) {
        // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –¥–µ—Ç–∞–ª—è–º–∏ –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        return [];
      }

      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤

      return response.productDetails;
    } catch (e) {
      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –¥–µ—Ç–∞–ª—è–º–∏ –æ—à–∏–±–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
      return [];
    }
  }

  /// –ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
  Future<bool> purchaseSubscription(String productId) async {
    try {
      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–∞—á–∞–ª–µ –ø–æ–∫—É–ø–∫–∏

      // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ–¥—É–∫—Ç–∞
      final products = await getAvailableProducts();
      final product = products.where((p) => p.id == productId).firstOrNull;

      if (product == null) {
        // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ –Ω–µ–Ω–∞–π–¥–µ–Ω–Ω–æ–º –ø—Ä–æ–¥—É–∫—Ç–µ
        return false;
      }

      // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∫—É–ø–∫–∏
      final PurchaseParam purchaseParam = PurchaseParam(
        productDetails: product,
      );

      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∫—É–ø–∫—É
      final bool success = await _inAppPurchase.buyNonConsumable(
        purchaseParam: purchaseParam,
      );

      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∑–∞–ø—É—Å–∫–∞ –ø–æ–∫—É–ø–∫–∏
      return success;
    } catch (e) {
      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –¥–µ—Ç–∞–ª—è–º–∏ –æ—à–∏–±–∫–∏ –ø–æ–∫—É–ø–∫–∏
      return false;
    }
  }

  /// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–æ–∫
  Future<void> restorePurchases() async {
    try {
      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–∫—É–ø–æ–∫
      await _inAppPurchase.restorePurchases();
      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∑–∞–ø—É—Å–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–æ–∫
    } catch (e) {
      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –¥–µ—Ç–∞–ª—è–º–∏ –æ—à–∏–±–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–æ–∫
    }
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø–æ–∫—É–ø–æ–∫
  Future<void> _handlePurchaseUpdates(List<PurchaseDetails> purchaseDetailsList) async {
    // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø–æ–∫—É–ø–æ–∫

    for (final PurchaseDetails purchaseDetails in purchaseDetailsList) {
      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –¥–µ—Ç–∞–ª—è–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∫—É–ø–∫–∏ (productID, status)

      switch (purchaseDetails.status) {
        case PurchaseStatus.pending:
          await _handlePendingPurchase(purchaseDetails);
          break;
        case PurchaseStatus.purchased:
          await _handleSuccessfulPurchase(purchaseDetails);
          break;
        case PurchaseStatus.restored:
          await _handleRestoredPurchase(purchaseDetails);
          break;
        case PurchaseStatus.error:
          await _handleFailedPurchase(purchaseDetails);
          break;
        case PurchaseStatus.canceled:
          await _handleCanceledPurchase(purchaseDetails);
          break;
      }

      // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–æ–∫—É–ø–∫—É –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
      if (purchaseDetails.pendingCompletePurchase) {
        await _inAppPurchase.completePurchase(purchaseDetails);
        // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏
      }
    }
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–∂–∏–¥–∞—é—â–µ–π –ø–æ–∫—É–ø–∫–∏
  Future<void> _handlePendingPurchase(PurchaseDetails purchaseDetails) async {
    // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–∫—É–ø–∫–µ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏

    await _updateSubscriptionStatus(
      purchaseDetails,
      SubscriptionStatus.pending,
    );
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –ø–æ–∫—É–ø–∫–∏
  Future<void> _handleSuccessfulPurchase(PurchaseDetails purchaseDetails) async {
    // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —É—Å–ø–µ—à–Ω–æ–π –ø–æ–∫—É–ø–∫–µ

    try {
      if (await _validatePurchase(purchaseDetails)) {
        await _updateSubscriptionStatus(
          purchaseDetails,
          SubscriptionStatus.active,
        );

        // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
      } else {
        // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ –Ω–µ–ø—Ä–æ—à–µ–¥—à–µ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–∫—É–ø–∫–∏
      }
    } catch (e) {
      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –¥–µ—Ç–∞–ª—è–º–∏ –æ—à–∏–±–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–π –ø–æ–∫—É–ø–∫–∏
    }
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –ø–æ–∫—É–ø–∫–∏
  Future<void> _handleRestoredPurchase(PurchaseDetails purchaseDetails) async {
    // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –ø–æ–∫—É–ø–∫–µ

    if (await _isSubscriptionStillValid(purchaseDetails)) {
      await _updateSubscriptionStatus(
        purchaseDetails,
        SubscriptionStatus.active,
      );
    } else {
      await _updateSubscriptionStatus(
        purchaseDetails,
        SubscriptionStatus.expired,
      );
    }
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—É–¥–∞—á–Ω–æ–π –ø–æ–∫—É–ø–∫–∏
  Future<void> _handleFailedPurchase(PurchaseDetails purchaseDetails) async {
    // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–µ—É–¥–∞—á–Ω–æ–π –ø–æ–∫—É–ø–∫–µ –∏ –¥–µ—Ç–∞–ª—è–º–∏ –æ—à–∏–±–∫–∏
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–π –ø–æ–∫—É–ø–∫–∏
  Future<void> _handleCanceledPurchase(PurchaseDetails purchaseDetails) async {
    // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–π –ø–æ–∫—É–ø–∫–µ
  }

  /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ Firebase
  Future<void> _updateSubscriptionStatus(
      PurchaseDetails purchaseDetails,
      SubscriptionStatus status,
      ) async {
    try {
      final userId = firebaseService.currentUserId;
      if (userId == null) return;

      final subscriptionType = SubscriptionConstants.getSubscriptionType(purchaseDetails.productID);
      if (subscriptionType == null) return;

      // –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è
      DateTime? expirationDate;
      if (status == SubscriptionStatus.active) {
        expirationDate = _calculateExpirationDate(subscriptionType);
      }

      // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
      final subscriptionData = {
        'userId': userId,
        'status': status.name,
        'type': subscriptionType.name,
        'expirationDate': expirationDate != null ? Timestamp.fromDate(expirationDate) : null,
        'purchaseToken': purchaseDetails.purchaseID ?? '',
        'platform': Platform.isAndroid
            ? SubscriptionConstants.androidPlatform
            : SubscriptionConstants.iosPlatform,
        'createdAt': _cachedSubscription?.createdAt != null
            ? Timestamp.fromDate(_cachedSubscription!.createdAt)
            : FieldValue.serverTimestamp(),
        'isActive': status == SubscriptionStatus.active &&
            expirationDate != null &&
            DateTime.now().isBefore(expirationDate),
      };

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–µ–∑ FirebaseService
      if (await NetworkUtils.isNetworkAvailable()) {
        await firebaseService.updateUserSubscription(subscriptionData);
      }

      // –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å –ø–æ–¥–ø–∏—Å–∫–∏
      final subscription = SubscriptionModel(
        userId: userId,
        status: status,
        type: subscriptionType,
        expirationDate: expirationDate,
        purchaseToken: purchaseDetails.purchaseID ?? '',
        platform: Platform.isAndroid
            ? SubscriptionConstants.androidPlatform
            : SubscriptionConstants.iosPlatform,
        createdAt: _cachedSubscription?.createdAt ?? DateTime.now(),
        updatedAt: DateTime.now(),
        isActive: status == SubscriptionStatus.active &&
            expirationDate != null &&
            DateTime.now().isBefore(expirationDate),
      );

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
      await _saveToCache(subscription);
      _cachedSubscription = subscription;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Å—Ç—Ä–∏–º—ã
      _subscriptionController.add(subscription);
      _subscriptionStatusController.add(subscription.status);

      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    } catch (e) {
      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –¥–µ—Ç–∞–ª—è–º–∏ –æ—à–∏–±–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    }
  }

  /// –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–∫—É–ø–∫–∏
  Future<bool> _validatePurchase(PurchaseDetails purchaseDetails) async {
    return purchaseDetails.productID.isNotEmpty;
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏
  Future<bool> _isSubscriptionStillValid(PurchaseDetails purchaseDetails) async {
    return true;
  }

  /// –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –¥–∞—Ç—ã –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
  DateTime _calculateExpirationDate(SubscriptionType type) {
    final now = DateTime.now();

    switch (type) {
      case SubscriptionType.monthly:
        return DateTime(now.year, now.month + 1, now.day);
      case SubscriptionType.yearly:
        return DateTime(now.year + 1, now.month, now.day);
    }
  }

  /// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –∫—ç—à —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ OfflineStorageService
  Future<void> _saveToCache(SubscriptionModel subscription) async {
    try {
      await _offlineStorage.cacheSubscriptionStatus(subscription);
    } catch (e) {
      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –¥–µ—Ç–∞–ª—è–º–∏ –æ—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∫—ç—à
    }
  }

  /// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ –∫—ç—à–∞ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ OfflineStorageService
  Future<SubscriptionModel> _loadFromCache(String userId) async {
    try {
      final cachedSubscription = await _offlineStorage.getCachedSubscriptionStatus();
      return cachedSubscription ?? SubscriptionModel.defaultSubscription(userId);
    } catch (e) {
      // ‚úÖ –£–ë–†–ê–ù–û: debugPrint —Å –¥–µ—Ç–∞–ª—è–º–∏ –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –∫—ç—à–∞
      return SubscriptionModel.defaultSubscription(userId);
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∏–∑ –∫—ç—à–∞)
  SubscriptionModel? get currentSubscription => _cachedSubscription;

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å–∞ —Å —É—á–µ—Ç–æ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
  bool get isPremium {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç –ü–ï–†–í–´–ú
    if (_isTestAccount()) {
      return true;
    }

    // –û–±—ã—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å–∞
    return _cachedSubscription?.isPremium ?? false;
  }

  /// –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
  void dispose() {
    _purchaseSubscription?.cancel();
    _subscriptionController.close();
    _subscriptionStatusController.close();
  }
}