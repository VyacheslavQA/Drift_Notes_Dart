// –ü—É—Ç—å: lib/services/subscription/usage_limits_service.dart

import 'dart:async';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import '../../constants/subscription_constants.dart';
import '../../models/usage_limits_model.dart';
import '../../services/firebase/firebase_service.dart';
import '../../services/subscription/subscription_service.dart';
import '../../services/offline/offline_storage_service.dart';
import '../../utils/network_utils.dart';

/// üî• –ü–û–õ–ù–û–°–¢–¨–Æ –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
/// –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É Firebase usage_limits subcollections
class UsageLimitsService {
  static final UsageLimitsService _instance = UsageLimitsService._internal();
  factory UsageLimitsService() => _instance;
  UsageLimitsService._internal();

  final FirebaseService _firebaseService = FirebaseService();

  // üî• –ù–û–í–û–ï: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ—Ñ–ª–∞–π–Ω —Å—Ç–æ—Ä–∞–∂–µ–º
  final OfflineStorageService _offlineStorage = OfflineStorageService();

  // –°—Å—ã–ª–∫–∞ –Ω–∞ SubscriptionService –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å–∞
  SubscriptionService? _subscriptionService;

  // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫—ç—à UsageLimitsModel, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É Firebase
  DateTime? _lastLimitsUpdate;

  // –§–ª–∞–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  bool _isInitialized = false;

  // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –°—Ç—Ä–∏–º —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å Map –≤–º–µ—Å—Ç–æ UsageLimitsModel
  final StreamController<Map<String, dynamic>> _limitsController = StreamController<Map<String, dynamic>>.broadcast();

  // –°—Ç—Ä–∏–º –¥–ª—è UI
  Stream<Map<String, dynamic>> get limitsStream => _limitsController.stream;

  /// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ SubscriptionService
  void setSubscriptionService(SubscriptionService subscriptionService) {
    _subscriptionService = subscriptionService;
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å–∞
  bool _hasPremiumAccess() {
    try {
      return _subscriptionService?.hasPremiumAccess() ?? false;
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å–∞: $e');
      }
      return false;
    }
  }

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
  Future<void> initialize() async {
    if (_isInitialized) {
      if (kDebugMode) {
        debugPrint('üîÑ UsageLimitsService —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      }
      return;
    }

    try {
      if (kDebugMode) {
        debugPrint('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UsageLimitsService —Å –Ω–æ–≤–æ–π Firebase —Å–∏—Å—Ç–µ–º–æ–π...');
      }

      // üî• –ù–û–í–û–ï: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ñ–ª–∞–π–Ω —Å—Ç–æ—Ä–∞–¥–∂
      await _offlineStorage.initialize();

      // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É Firebase –ª–∏–º–∏—Ç–æ–≤
      await _initializeNewFirebaseSystem();

      _isInitialized = true;
      if (kDebugMode) {
        debugPrint('‚úÖ UsageLimitsService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –Ω–æ–≤–æ–π Firebase —Å–∏—Å—Ç–µ–º–æ–π');
      }
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ UsageLimitsService: $e');
      }
    }
  }

  /// üî• –ù–û–í–´–ô –ú–ï–¢–û–î: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã Firebase
  Future<void> _initializeNewFirebaseSystem() async {
    try {
      debugPrint('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–π Firebase —Å–∏—Å—Ç–µ–º—ã –ª–∏–º–∏—Ç–æ–≤...');

      // –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º getUserUsageLimits —á—Ç–æ–±—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
      final limitsDoc = await _firebaseService.getUserUsageLimits();

      if (limitsDoc.exists) {
        final data = limitsDoc.data() as Map<String, dynamic>;
        debugPrint('üìä –¢–µ–∫—É—â–∏–µ –ª–∏–º–∏—Ç—ã –∏–∑ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã: $data');

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Å—Ç—Ä–∏–º
        _limitsController.add(data);
      } else {
        debugPrint('üìä –õ–∏–º–∏—Ç—ã —Å–æ–∑–¥–∞–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
      }

      _lastLimitsUpdate = DateTime.now();
      debugPrint('‚úÖ –ù–æ–≤–∞—è Firebase —Å–∏—Å—Ç–µ–º–∞ –ª–∏–º–∏—Ç–æ–≤ –≥–æ—Ç–æ–≤–∞');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–æ–≤–æ–π Firebase —Å–∏—Å—Ç–µ–º—ã: $e');
    }
  }

  /// üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–∏—Ö –ª–∏–º–∏—Ç–æ–≤ —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é Firebase —Å–∏—Å—Ç–µ–º—É
  Future<Map<String, dynamic>> loadCurrentLimits() async {
    try {
      final userId = _firebaseService.currentUserId;
      if (userId == null) {
        return _getDefaultLimitsMap();
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∫—ç—à–∞
      if (_lastLimitsUpdate != null && _isDataRecent(_lastLimitsUpdate!)) {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        return await _getCurrentLimitsFromNewSystem();
      }

      // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–≥—Ä—É–∂–∞–µ–º —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é Firebase —Å–∏—Å—Ç–µ–º—É
      final limitsDoc = await _firebaseService.getUserUsageLimits();

      if (limitsDoc.exists) {
        final data = limitsDoc.data() as Map<String, dynamic>;
        _limitsController.add(data);
        _lastLimitsUpdate = DateTime.now();
        return data;
      } else {
        // –õ–∏–º–∏—Ç—ã —Å–æ–∑–¥–∞–¥—É—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        return _getDefaultLimitsMap();
      }

    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏–º–∏—Ç–æ–≤: $e');
      }
      return _getDefaultLimitsMap();
    }
  }

  /// üî• –ù–û–í–´–ô –ú–ï–¢–û–î: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –ª–∏–º–∏—Ç–æ–≤ –∏–∑ –Ω–æ–≤–æ–π Firebase —Å–∏—Å—Ç–µ–º—ã
  Future<Map<String, dynamic>> _getCurrentLimitsFromNewSystem() async {
    try {
      final stats = await _firebaseService.getUsageStatistics();
      return stats;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ –∏–∑ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã: $e');
      return _getDefaultLimitsMap();
    }
  }

  /// üî• –ù–û–í–´–ô –ú–ï–¢–û–î: –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  Map<String, dynamic> _getDefaultLimitsMap() {
    return {
      'notesCount': 0,
      'markerMapsCount': 0,
      'expensesCount': 0,
      'tripsCount': 0,
      'budgetNotesCount': 0,
      'exists': false,
    };
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö (–¥–∞–Ω–Ω—ã–µ —Å—á–∏—Ç–∞—é—Ç—Å—è –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç)
  bool _isDataRecent(DateTime lastUpdate) {
    final now = DateTime.now();
    final difference = now.difference(lastUpdate);
    return difference.inMinutes < 5;
  }

  /// üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é Firebase —Å–∏—Å—Ç–µ–º—É
  Future<Map<String, dynamic>> getCurrentUsage() async {
    try {
      // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–∞–≤–Ω–∏–µ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ö
      if (_lastLimitsUpdate != null && _isDataRecent(_lastLimitsUpdate!)) {
        return await _getCurrentLimitsFromNewSystem();
      }

      // –ò–Ω–∞—á–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–Ω–æ–≤–æ
      return await loadCurrentLimits();
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: $e');
      }
      return _getDefaultLimitsMap();
    }
  }

  /// üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é Firebase —Å–∏—Å—Ç–µ–º—É
  Future<bool> canCreateContent(ContentType contentType) async {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å –ü–ï–†–í–´–ú
      if (_hasPremiumAccess()) {
        if (kDebugMode) {
          debugPrint('üß™ –ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–æ—Å—Ç—É–ø –∫ $contentType');
        }
        return true;
      }

      // –î–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –≥–ª—É–±–∏–Ω –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å
      if (contentType == ContentType.depthChart) {
        if (kDebugMode) {
          debugPrint('‚ö†Ô∏è –ì—Ä–∞—Ñ–∏–∫ –≥–ª—É–±–∏–Ω —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É');
        }
        return false;
      }

      // üî• –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é Firebase —Å–∏—Å—Ç–µ–º—É
      final itemType = _getFirebaseItemType(contentType);
      final canCreateResult = await _firebaseService.canCreateItem(itemType);

      final canCreate = canCreateResult['canProceed'] ?? false;

      if (kDebugMode) {
        debugPrint('üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é Firebase —Å–∏—Å—Ç–µ–º—É: $contentType -> $canCreate');
        debugPrint('üîí –î–µ—Ç–∞–ª–∏: ${canCreateResult['currentCount']}/${canCreateResult['maxLimit']}');
      }

      return canCreate;
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞: $e');
      }
      return false;
    }
  }

  /// üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é Firebase —Å–∏—Å—Ç–µ–º—É
  Future<ContentCreationResult> checkContentCreation(ContentType contentType) async {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å –ü–ï–†–í–´–ú
      if (_hasPremiumAccess()) {
        if (kDebugMode) {
          debugPrint('üß™ –ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ $contentType');
        }
        return ContentCreationResult(
          canCreate: true,
          reason: null,
          currentCount: 0,
          limit: SubscriptionConstants.unlimitedValue,
          remaining: SubscriptionConstants.unlimitedValue,
        );
      }

      // –î–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –≥–ª—É–±–∏–Ω
      if (contentType == ContentType.depthChart) {
        return ContentCreationResult(
          canCreate: false,
          reason: ContentCreationBlockReason.premiumRequired,
          currentCount: 0,
          limit: 0,
          remaining: 0,
        );
      }

      // üî• –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é Firebase —Å–∏—Å—Ç–µ–º—É
      final itemType = _getFirebaseItemType(contentType);
      final result = await _firebaseService.canCreateItem(itemType);

      final canCreate = result['canProceed'] ?? false;
      final currentCount = result['currentCount'] ?? 0;
      final maxLimit = result['maxLimit'] ?? 0;
      final remaining = result['remaining'] ?? 0;

      ContentCreationBlockReason? reason;
      if (!canCreate) {
        reason = ContentCreationBlockReason.limitReached;
      }

      if (kDebugMode) {
        debugPrint('üîí –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ $contentType: $currentCount/$maxLimit, –º–æ–∂–Ω–æ: $canCreate, –æ—Å—Ç–∞–ª–æ—Å—å: $remaining');
      }

      return ContentCreationResult(
        canCreate: canCreate,
        reason: reason,
        currentCount: currentCount,
        limit: maxLimit,
        remaining: remaining > 0 ? remaining : 0,
      );
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞: $e');
      }
      return ContentCreationResult(
        canCreate: false,
        reason: ContentCreationBlockReason.error,
        currentCount: 0,
        limit: 0,
        remaining: 0,
      );
    }
  }

  /// üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é Firebase —Å–∏—Å—Ç–µ–º—É
  Future<bool> incrementUsage(ContentType contentType) async {
    try {
      // –ï—Å–ª–∏ –ø—Ä–µ–º–∏—É–º - –Ω–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
      if (_hasPremiumAccess()) {
        if (kDebugMode) {
          debugPrint('üß™ –ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Å—á–µ—Ç—á–∏–∫ –Ω–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –¥–ª—è $contentType');
        }
        return true;
      }

      // üî• –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é Firebase —Å–∏—Å—Ç–µ–º—É
      final itemType = _getFirebaseItemType(contentType);

      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞—Ç—å
      final canCreateResult = await _firebaseService.canCreateItem(itemType);
      if (!(canCreateResult['canProceed'] ?? false)) {
        if (kDebugMode) {
          debugPrint('‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –¥–ª—è —Ç–∏–ø–∞: $contentType');
        }
        return false;
      }

      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
      final success = await _firebaseService.incrementUsageCount(itemType);

      if (kDebugMode) {
        if (success) {
          debugPrint('‚úÖ –°—á–µ—Ç—á–∏–∫ —É–≤–µ–ª–∏—á–µ–Ω –¥–ª—è $contentType —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é Firebase —Å–∏—Å—Ç–µ–º—É');
        } else {
          debugPrint('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –¥–ª—è $contentType');
        }
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      _lastLimitsUpdate = DateTime.now();

      return success;
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞: $e');
      }
      return false;
    }
  }

  /// üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–º–µ–Ω—å—à–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é Firebase —Å–∏—Å—Ç–µ–º—É
  Future<bool> decrementUsage(ContentType contentType) async {
    try {
      // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é Firebase —Å–∏—Å—Ç–µ–º—É
      final itemType = _getFirebaseItemType(contentType);

      // –ü–æ–∫–∞ —á—Ç–æ –≤ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –º–µ—Ç–æ–¥–∞ —É–º–µ–Ω—å—à–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ñ–ª–∞–π–Ω
      await _offlineStorage.decrementLocalUsage(contentType);

      if (kDebugMode) {
        debugPrint('‚úÖ –°—á–µ—Ç—á–∏–∫ —É–º–µ–Ω—å—à–µ–Ω –¥–ª—è $contentType (–æ—Ñ–ª–∞–π–Ω)');
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      _lastLimitsUpdate = DateTime.now();

      return true;
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ —É–º–µ–Ω—å—à–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞: $e');
      }
      return false;
    }
  }

  /// üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ—Å—á–µ—Ç –ª–∏–º–∏—Ç–æ–≤ —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é Firebase —Å–∏—Å—Ç–µ–º—É
  Future<void> recalculateLimitsWithOffline() async {
    try {
      if (kDebugMode) {
        debugPrint('üîÑ –ü–µ—Ä–µ—Å—á–µ—Ç –ª–∏–º–∏—Ç–æ–≤ —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é Firebase —Å–∏—Å—Ç–µ–º—É...');
      }

      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
      final stats = await _firebaseService.getUsageStatistics();

      if (kDebugMode) {
        debugPrint('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ –Ω–æ–≤–æ–π Firebase —Å–∏—Å—Ç–µ–º—ã:');
        debugPrint('   notesCount: ${stats['notesCount']}');
        debugPrint('   markerMapsCount: ${stats['markerMapsCount']}');
        debugPrint('   expensesCount: ${stats['expensesCount']}');
        debugPrint('   tripsCount: ${stats['tripsCount']}');
        debugPrint('   budgetNotesCount: ${stats['budgetNotesCount']}');
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Å—Ç—Ä–∏–º
      _limitsController.add(stats);
      _lastLimitsUpdate = DateTime.now();

    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –ª–∏–º–∏—Ç–æ–≤: $e');
      }
    }
  }

  /// –û–ë–ù–û–í–õ–ï–ù: –ü–µ—Ä–µ—Å—á–µ—Ç –ª–∏–º–∏—Ç–æ–≤ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
  Future<void> recalculateLimits() async {
    await recalculateLimitsWithOffline();
  }

  /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ UI)
  Future<void> forceRefresh() async {
    try {
      if (kDebugMode) {
        debugPrint('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É...');
      }
      _lastLimitsUpdate = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à
      await loadCurrentLimits();
      await recalculateLimitsWithOffline();
      if (kDebugMode) {
        debugPrint('‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
      }
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: $e');
      }
    }
  }

  /// üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–±—Ä–æ—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ —Ç–∏–ø—É —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é Firebase —Å–∏—Å—Ç–µ–º—É
  Future<void> resetUsageForType(ContentType contentType) async {
    try {
      // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é Firebase —Å–∏—Å—Ç–µ–º—É –¥–ª—è —Å–±—Ä–æ—Å–∞
      final resetReason = 'reset_${contentType.name}_${DateTime.now().millisecondsSinceEpoch}';
      await _firebaseService.resetUserUsageLimits(resetReason: resetReason);

      if (kDebugMode) {
        debugPrint('‚úÖ –°–±—Ä–æ—à–µ–Ω —Å—á–µ—Ç—á–∏–∫ –¥–ª—è —Ç–∏–ø–∞: $contentType —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é Firebase —Å–∏—Å—Ç–µ–º—É');
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      _lastLimitsUpdate = DateTime.now();
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Å—á–µ—Ç—á–∏–∫–∞ –¥–ª—è —Ç–∏–ø–∞ $contentType: $e');
      }
    }
  }

  /// üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é Firebase —Å–∏—Å—Ç–µ–º—É
  Future<Map<String, dynamic>> getUsageStatistics() async {
    try {
      return await _firebaseService.getUsageStatistics();
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: $e');
      }
      return {};
    }
  }

  /// üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ª–∏–º–∏—Ç–∞—Ö —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é Firebase —Å–∏—Å—Ç–µ–º—É
  Future<List<ContentTypeWarning>> checkForWarnings() async {
    try {
      final warnings = <ContentTypeWarning>[];

      for (final contentType in [
        ContentType.fishingNotes,
        ContentType.markerMaps,
        ContentType.expenses,
      ]) {
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–∞—Ö —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
        final itemType = _getFirebaseItemType(contentType);
        final result = await _firebaseService.canCreateItem(itemType);

        final currentCount = result['currentCount'] ?? 0;
        final maxLimit = result['maxLimit'] ?? 0;
        final remaining = result['remaining'] ?? 0;

        if (maxLimit > 0) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
          final warningThreshold = (maxLimit * 0.8).round(); // 80% –æ—Ç –ª–∏–º–∏—Ç–∞

          if (currentCount >= warningThreshold) {
            final percentage = currentCount / maxLimit;

            warnings.add(ContentTypeWarning(
              contentType: contentType,
              currentCount: currentCount,
              limit: maxLimit,
              remaining: remaining > 0 ? remaining : 0,
              percentage: percentage,
            ));
          }
        }
      }

      return warnings;
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: $e');
      }
      return [];
    }
  }

  /// üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–±—Ä–æ—Å –≤—Å–µ—Ö –ª–∏–º–∏—Ç–æ–≤ —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é Firebase —Å–∏—Å—Ç–µ–º—É
  Future<void> resetAllLimits() async {
    try {
      // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é Firebase —Å–∏—Å—Ç–µ–º—É
      await _firebaseService.resetUserUsageLimits(resetReason: 'admin_reset_all');

      // –¢–∞–∫–∂–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—Ñ–ª–∞–π–Ω —Å—á–µ—Ç—á–∏–∫–∏
      await _offlineStorage.resetLocalUsageCounters();

      if (kDebugMode) {
        debugPrint('‚úÖ –í—Å–µ –ª–∏–º–∏—Ç—ã —Å–±—Ä–æ—à–µ–Ω—ã —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é Firebase —Å–∏—Å—Ç–µ–º—É');
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      _lastLimitsUpdate = DateTime.now();
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–æ–≤: $e');
      }
    }
  }

  /// üî• –ù–û–í–´–ô –ú–ï–¢–û–î: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é Firebase —Å–∏—Å—Ç–µ–º—É
  Future<Map<String, dynamic>> getComprehensiveUsageStats() async {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –Ω–æ–≤–æ–π Firebase —Å–∏—Å—Ç–µ–º—ã
      final stats = await _firebaseService.getUsageStatistics();

      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–∞—Ö
      final Map<String, dynamic> comprehensiveStats = {};

      for (final contentType in ContentType.values) {
        if (contentType != ContentType.depthChart) {
          final itemType = _getFirebaseItemType(contentType);
          final result = await _firebaseService.canCreateItem(itemType);

          final currentCount = result['currentCount'] ?? 0;
          final maxLimit = result['maxLimit'] ?? 0;
          final remaining = result['remaining'] ?? 0;

          comprehensiveStats[contentType.name] = {
            'current': currentCount,
            'limit': maxLimit,
            'remaining': remaining,
            'percentage': maxLimit > 0 ? currentCount / maxLimit : 0.0,
            'canCreate': result['canProceed'] ?? false,
          };
        }
      }

      return {
        'rawStats': stats,
        'contentTypes': comprehensiveStats,
        'lastUpdated': DateTime.now().toIso8601String(),
      };
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: $e');
      }
      return {};
    }
  }

  /// üî• –ù–û–í–´–ô –ú–ï–¢–û–î: –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ ContentType –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –Ω–æ–≤–æ–π Firebase —Å–∏—Å—Ç–µ–º—ã
  String _getFirebaseItemType(ContentType contentType) {
    switch (contentType) {
      case ContentType.fishingNotes:
        return 'notesCount';
      case ContentType.markerMaps:
        return 'markerMapsCount';
      case ContentType.expenses:
        return 'expensesCount';
      case ContentType.depthChart:
        return 'depthChartCount';
    }
  }

  /// üî• –£–°–¢–ê–†–ï–í–®–ò–ï –ú–ï–¢–û–î–´ (–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –Ω–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É)

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –ª–∏–º–∏—Ç–æ–≤ –≤ —Å—Ç–∞—Ä–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
  UsageLimitsModel? get currentLimits {
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null, —Ç–∞–∫ –∫–∞–∫ —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º Map –≤–º–µ—Å—Ç–æ UsageLimitsModel
    return null;
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  bool get isInitialized => _isInitialized;

  /// –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
  void dispose() {
    _limitsController.close();
    _isInitialized = false;
  }
}

/// –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
class ContentCreationResult {
  final bool canCreate;
  final ContentCreationBlockReason? reason;
  final int currentCount;
  final int limit;
  final int remaining;

  const ContentCreationResult({
    required this.canCreate,
    this.reason,
    required this.currentCount,
    required this.limit,
    required this.remaining,
  });

  @override
  String toString() {
    return 'ContentCreationResult(canCreate: $canCreate, current: $currentCount/$limit, remaining: $remaining)';
  }
}

/// –ü—Ä–∏—á–∏–Ω—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
enum ContentCreationBlockReason {
  limitReached,      // –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç
  premiumRequired,   // –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞
  error,            // –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ
}

/// –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
class ContentTypeWarning {
  final ContentType contentType;
  final int currentCount;
  final int limit;
  final int remaining;
  final double percentage;

  const ContentTypeWarning({
    required this.contentType,
    required this.currentCount,
    required this.limit,
    required this.remaining,
    required this.percentage,
  });

  @override
  String toString() {
    return 'ContentTypeWarning($contentType: ${(percentage * 100).toInt()}% used, $remaining remaining)';
  }
}