// –ü—É—Ç—å: lib/services/subscription/usage_limits_service.dart

import 'dart:async';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import '../../constants/subscription_constants.dart';
import '../../models/usage_limits_model.dart';
import '../../services/firebase/firebase_service.dart';
import '../../services/subscription/subscription_service.dart';
import '../../services/offline/offline_storage_service.dart';
import '../../utils/network_utils.dart';

/// –°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
class UsageLimitsService {
  static final UsageLimitsService _instance = UsageLimitsService._internal();
  factory UsageLimitsService() => _instance;
  UsageLimitsService._internal();

  final FirebaseService _firebaseService = FirebaseService();
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  // üî• –ù–û–í–û–ï: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ—Ñ–ª–∞–π–Ω —Å—Ç–æ—Ä–∞–∂–µ–º
  final OfflineStorageService _offlineStorage = OfflineStorageService();

  // –°—Å—ã–ª–∫–∞ –Ω–∞ SubscriptionService –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å–∞
  SubscriptionService? _subscriptionService;

  // –ö—ç—à —Ç–µ–∫—É—â–∏—Ö –ª–∏–º–∏—Ç–æ–≤
  UsageLimitsModel? _cachedLimits;

  // –§–ª–∞–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  bool _isInitialized = false;

  // –°—Ç—Ä–∏–º –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –ª–∏–º–∏—Ç–æ–≤
  final StreamController<UsageLimitsModel> _limitsController = StreamController<UsageLimitsModel>.broadcast();

  // –°—Ç—Ä–∏–º –¥–ª—è UI
  Stream<UsageLimitsModel> get limitsStream => _limitsController.stream;

  /// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ SubscriptionService
  void setSubscriptionService(SubscriptionService subscriptionService) {
    _subscriptionService = subscriptionService;
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å–∞
  bool _hasPremiumAccess() {
    try {
      return _subscriptionService?.hasPremiumAccess() ?? false;
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å–∞: $e');
      }
      return false;
    }
  }

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
  Future<void> initialize() async {
    if (_isInitialized) {
      if (kDebugMode) {
        debugPrint('üîÑ UsageLimitsService —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      }
      return;
    }

    try {
      if (kDebugMode) {
        debugPrint('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UsageLimitsService...');
      }

      // üî• –ù–û–í–û–ï: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ñ–ª–∞–π–Ω —Å—Ç–æ—Ä–∞–¥–∂
      await _offlineStorage.initialize();

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ª–∏–º–∏—Ç—ã
      await loadCurrentLimits();

      // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ª–∏–º–∏—Ç—ã –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö Firebase + –æ—Ñ–ª–∞–π–Ω
      await recalculateLimitsWithOffline();

      _isInitialized = true;
      if (kDebugMode) {
        debugPrint('‚úÖ UsageLimitsService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ + –æ—Ñ–ª–∞–π–Ω');
      }
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ UsageLimitsService: $e');
      }
    }
  }

  /// –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–∏—Ö –ª–∏–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<UsageLimitsModel> loadCurrentLimits() async {
    try {
      final userId = _firebaseService.currentUserId;
      if (userId == null) {
        _cachedLimits = UsageLimitsModel.defaultLimits('');
        return _cachedLimits!;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ
      if (_cachedLimits != null &&
          _cachedLimits!.userId == userId &&
          _isDataRecent(_cachedLimits!.updatedAt)) {
        return _cachedLimits!;
      }

      // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ Firebase
      if (await NetworkUtils.isNetworkAvailable()) {
        final doc = await _firestore
            .collection(SubscriptionConstants.usageLimitsCollection)
            .doc(userId)
            .get();

        if (doc.exists && doc.data() != null) {
          _cachedLimits = UsageLimitsModel.fromMap(doc.data()!, userId);
        } else {
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –ª–∏–º–∏—Ç–æ–≤
          _cachedLimits = UsageLimitsModel.defaultLimits(userId);
          await _saveLimitsToFirebase(_cachedLimits!);
        }
      } else {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞
        _cachedLimits = await _loadFromCache(userId);
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Å—Ç—Ä–∏–º
      _limitsController.add(_cachedLimits!);

      return _cachedLimits!;
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏–º–∏—Ç–æ–≤: $e');
      }
      final userId = _firebaseService.currentUserId ?? '';
      _cachedLimits = UsageLimitsModel.defaultLimits(userId);
      return _cachedLimits!;
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö (–¥–∞–Ω–Ω—ã–µ —Å—á–∏—Ç–∞—é—Ç—Å—è –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç)
  bool _isDataRecent(DateTime lastUpdate) {
    final now = DateTime.now();
    final difference = now.difference(lastUpdate);
    return difference.inMinutes < 5;
  }

  /// üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å —É—á–µ—Ç–æ–º –æ—Ñ–ª–∞–π–Ω –¥–∞–Ω–Ω—ã—Ö
  Future<UsageLimitsModel> getCurrentUsage() async {
    try {
      // –ï—Å–ª–∏ –∫—ç—à –ø—É—Å—Ç–æ–π –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏–π - –∑–∞–≥—Ä—É–∂–∞–µ–º –∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º
      if (_cachedLimits == null || !_isDataRecent(_cachedLimits!.updatedAt)) {
        await loadCurrentLimits();
        await recalculateLimitsWithOffline();
      }

      return _cachedLimits ?? UsageLimitsModel.defaultLimits(_firebaseService.currentUserId ?? '');
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: $e');
      }
      return UsageLimitsModel.defaultLimits(_firebaseService.currentUserId ?? '');
    }
  }

  /// üî• –ù–û–í–´–ô –ú–ï–¢–û–î: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (—Å–µ—Ä–≤–µ—Ä–Ω–æ–µ + –æ—Ñ–ª–∞–π–Ω)
  Future<int> _getTotalUsageForType(ContentType contentType) async {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–µ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
      final limits = _cachedLimits ?? UsageLimitsModel.defaultLimits(_firebaseService.currentUserId ?? '');
      final serverUsage = limits.getCountForType(contentType);

      // –ü–æ–ª—É—á–∞–µ–º –æ—Ñ–ª–∞–π–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
      final offlineUsage = await _offlineStorage.getLocalUsageCount(contentType);

      final totalUsage = serverUsage + offlineUsage;

      if (kDebugMode) {
        debugPrint('üìä –û–±—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ $contentType: —Å–µ—Ä–≤–µ—Ä=$serverUsage, –æ—Ñ–ª–∞–π–Ω=$offlineUsage, –≤—Å–µ–≥–æ=$totalUsage');
      }

      return totalUsage;
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–ª—è $contentType: $e');
      }
      return 0;
    }
  }

  /// üî• –ö–†–ò–¢–ò–ß–ï–°–ö–ò –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å —É—á–µ—Ç–æ–º –æ—Ñ–ª–∞–π–Ω –ª–∏–º–∏—Ç–æ–≤
  Future<bool> canCreateContent(ContentType contentType) async {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å –ü–ï–†–í–´–ú
      if (_hasPremiumAccess()) {
        if (kDebugMode) {
          debugPrint('üß™ –ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–æ—Å—Ç—É–ø –∫ $contentType');
        }
        return true;
      }

      // –î–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –≥–ª—É–±–∏–Ω –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å
      if (contentType == ContentType.depthChart) {
        if (kDebugMode) {
          debugPrint('‚ö†Ô∏è –ì—Ä–∞—Ñ–∏–∫ –≥–ª—É–±–∏–Ω —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É');
        }
        return false;
      }

      // üî• –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º SubscriptionService –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ñ–ª–∞–π–Ω –ª–∏–º–∏—Ç–æ–≤
      if (_subscriptionService != null) {
        final canCreate = await _subscriptionService!.canCreateContentOffline(contentType);
        if (kDebugMode) {
          debugPrint('üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ñ–ª–∞–π–Ω –ª–∏–º–∏—Ç–æ–≤ —á–µ—Ä–µ–∑ SubscriptionService: $canCreate');
        }
        return canCreate;
      }

      // Fallback: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–ª—å–∫–æ —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤ (–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
      final limits = await getCurrentUsage();
      final canCreateServer = limits.canCreateNew(contentType);

      if (kDebugMode) {
        debugPrint('‚ö†Ô∏è Fallback: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–ª—å–∫–æ —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤: $canCreateServer');
      }

      return canCreateServer;
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞: $e');
      }
      return false;
    }
  }

  /// üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π –∏ —É—á–µ—Ç–æ–º –æ—Ñ–ª–∞–π–Ω –¥–∞–Ω–Ω—ã—Ö
  Future<ContentCreationResult> checkContentCreation(ContentType contentType) async {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å –ü–ï–†–í–´–ú
      if (_hasPremiumAccess()) {
        if (kDebugMode) {
          debugPrint('üß™ –ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ $contentType');
        }
        return ContentCreationResult(
          canCreate: true,
          reason: null,
          currentCount: 0,
          limit: SubscriptionConstants.unlimitedValue,
          remaining: SubscriptionConstants.unlimitedValue,
        );
      }

      // –î–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –≥–ª—É–±–∏–Ω
      if (contentType == ContentType.depthChart) {
        return ContentCreationResult(
          canCreate: false,
          reason: ContentCreationBlockReason.premiumRequired,
          currentCount: 0,
          limit: 0,
          remaining: 0,
        );
      }

      // üî• –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ (—Å–µ—Ä–≤–µ—Ä–Ω–æ–µ + –æ—Ñ–ª–∞–π–Ω)
      final totalUsage = await _getTotalUsageForType(contentType);
      final limit = SubscriptionConstants.getContentLimit(contentType);
      final maxAllowed = limit + SubscriptionConstants.offlineGraceLimit;

      final canCreate = totalUsage < maxAllowed;
      final remaining = maxAllowed - totalUsage;

      ContentCreationBlockReason? reason;
      if (!canCreate) {
        reason = ContentCreationBlockReason.limitReached;
      }

      if (kDebugMode) {
        debugPrint('üîí –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ $contentType: $totalUsage < $maxAllowed = $canCreate (remaining: $remaining)');
      }

      return ContentCreationResult(
        canCreate: canCreate,
        reason: reason,
        currentCount: totalUsage,
        limit: maxAllowed,
        remaining: remaining > 0 ? remaining : 0,
      );
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞: $e');
      }
      return ContentCreationResult(
        canCreate: false,
        reason: ContentCreationBlockReason.error,
        currentCount: 0,
        limit: 0,
        remaining: 0,
      );
    }
  }

  /// üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –æ—Ñ–ª–∞–π–Ω –ª–∏–º–∏—Ç–æ–≤
  Future<bool> incrementUsage(ContentType contentType) async {
    try {
      // –ï—Å–ª–∏ –ø—Ä–µ–º–∏—É–º - –Ω–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
      if (_hasPremiumAccess()) {
        if (kDebugMode) {
          debugPrint('üß™ –ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Å—á–µ—Ç—á–∏–∫ –Ω–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –¥–ª—è $contentType');
        }
        return true;
      }

      // üî• –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ñ–ª–∞–π–Ω –ª–∏–º–∏—Ç—ã —á–µ—Ä–µ–∑ SubscriptionService
      if (_subscriptionService != null) {
        final canCreate = await _subscriptionService!.canCreateContentOffline(contentType);
        if (!canCreate) {
          if (kDebugMode) {
            debugPrint('‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –æ—Ñ–ª–∞–π–Ω –ª–∏–º–∏—Ç –¥–ª—è —Ç–∏–ø–∞: $contentType');
          }
          return false;
        }
      } else {
        // Fallback: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–ª—å–∫–æ —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤
        final limits = await getCurrentUsage();
        if (!limits.canCreateNew(contentType)) {
          if (kDebugMode) {
            debugPrint('‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç —Å–µ—Ä–≤–µ—Ä–Ω—ã–π –ª–∏–º–∏—Ç –¥–ª—è —Ç–∏–ø–∞: $contentType');
          }
          return false;
        }
      }

      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—ã–π —Å—á–µ—Ç—á–∏–∫
      final limits = await getCurrentUsage();
      final updatedLimits = limits.incrementCounter(contentType);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ª–∏–º–∏—Ç—ã
      await _saveLimits(updatedLimits);

      if (kDebugMode) {
        debugPrint('‚úÖ –°–µ—Ä–≤–µ—Ä–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ —É–≤–µ–ª–∏—á–µ–Ω –¥–ª—è $contentType: ${updatedLimits.getCountForType(contentType)}');
      }
      return true;
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞: $e');
      }
      return false;
    }
  }

  /// –û–ë–ù–û–í–õ–ï–ù: –£–º–µ–Ω—å—à–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞)
  Future<bool> decrementUsage(ContentType contentType) async {
    try {
      final limits = await getCurrentUsage();

      // –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫
      final updatedLimits = limits.decrementCounter(contentType);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ª–∏–º–∏—Ç—ã
      await _saveLimits(updatedLimits);

      if (kDebugMode) {
        debugPrint('‚úÖ –°—á–µ—Ç—á–∏–∫ —É–º–µ–Ω—å—à–µ–Ω –¥–ª—è $contentType: ${updatedLimits.getCountForType(contentType)}');
      }
      return true;
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ —É–º–µ–Ω—å—à–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞: $e');
      }
      return false;
    }
  }

  /// üî• –ù–û–í–´–ô –ú–ï–¢–û–î: –ü–µ—Ä–µ—Å—á–µ—Ç –ª–∏–º–∏—Ç–æ–≤ —Å —É—á–µ—Ç–æ–º –æ—Ñ–ª–∞–π–Ω –¥–∞–Ω–Ω—ã—Ö
  Future<void> recalculateLimitsWithOffline() async {
    try {
      if (kDebugMode) {
        debugPrint('üîÑ –ü–µ—Ä–µ—Å—á–µ—Ç –ª–∏–º–∏—Ç–æ–≤ —Å —É—á–µ—Ç–æ–º –æ—Ñ–ª–∞–π–Ω –¥–∞–Ω–Ω—ã—Ö...');
      }

      // –°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      await recalculateLimits();

      // –ó–∞—Ç–µ–º –ª–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ñ–ª–∞–π–Ω —Å—á–µ—Ç—á–∏–∫–∞—Ö
      final userId = _firebaseService.currentUserId;
      if (userId != null) {
        final offlineCounters = await _offlineStorage.getAllLocalUsageCounters();

        if (kDebugMode) {
          debugPrint('üìä –û—Ñ–ª–∞–π–Ω —Å—á–µ—Ç—á–∏–∫–∏:');
          for (final entry in offlineCounters.entries) {
            debugPrint('   ${entry.key.name}: ${entry.value}');
          }

          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
          debugPrint('üìä –û–±—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ (—Å–µ—Ä–≤–µ—Ä–Ω–æ–µ + –æ—Ñ–ª–∞–π–Ω):');
          for (final contentType in ContentType.values) {
            if (contentType != ContentType.depthChart) {
              final totalUsage = await _getTotalUsageForType(contentType);
              final limit = SubscriptionConstants.getContentLimit(contentType);
              final graceLimit = limit + SubscriptionConstants.offlineGraceLimit;
              debugPrint('   ${contentType.name}: $totalUsage/$graceLimit (–ª–∏–º–∏—Ç: $limit + grace: ${SubscriptionConstants.offlineGraceLimit})');
            }
          }
        }
      }
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –ª–∏–º–∏—Ç–æ–≤ —Å –æ—Ñ–ª–∞–π–Ω –¥–∞–Ω–Ω—ã–º–∏: $e');
      }
    }
  }

  /// –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ—Å—á–µ—Ç –ª–∏–º–∏—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ù–û–í–û–ô —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
  Future<void> recalculateLimits() async {
    try {
      if (kDebugMode) {
        debugPrint('üîÑ –ü–µ—Ä–µ—Å—á–µ—Ç —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤ –∏–∑ –ù–û–í–û–ô —Å—Ç—Ä—É–∫—Ç—É—Ä—ã...');
      }

      final userId = _firebaseService.currentUserId;
      if (userId == null) {
        if (kDebugMode) {
          debugPrint('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ—Å—á–µ—Ç');
        }
        return;
      }

      if (kDebugMode) {
        debugPrint('üë§ –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ª–∏–º–∏—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $userId');
      }

      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ –ù–û–í–û–ô —Å—Ç—Ä—É–∫—Ç—É—Ä—ã subcollections
      int actualNotesCount = 0;
      int actualMapsCount = 0;
      int actualExpensesCount = 0;

      if (await NetworkUtils.isNetworkAvailable()) {
        try {
          // –ò–°–ü–†–ê–í–õ–ï–ù–û: –°—á–∏—Ç–∞–µ–º –∑–∞–º–µ—Ç–∫–∏ –∏–∑ –ù–û–í–û–ô —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
          if (kDebugMode) {
            debugPrint('üìù –ü–æ–¥—Å—á–µ—Ç –∑–∞–º–µ—Ç–æ–∫ –∏–∑ –ù–û–í–û–ô —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: users/$userId/fishing_notes');
          }

          final notesSnapshot = await _firestore
              .collection('users')
              .doc(userId)
              .collection('fishing_notes')    // ‚Üê –ù–û–í–ê–Ø –°–¢–†–£–ö–¢–£–†–ê
              .get();

          actualNotesCount = notesSnapshot.docs.length;
          if (kDebugMode) {
            debugPrint('üìù –ù–∞–π–¥–µ–Ω–æ –∑–∞–º–µ—Ç–æ–∫ –≤ –ù–û–í–û–ô —Å—Ç—Ä—É–∫—Ç—É—Ä–µ: $actualNotesCount');
          }

          // –ò–°–ü–†–ê–í–õ–ï–ù–û: –°—á–∏—Ç–∞–µ–º –º–∞—Ä–∫–µ—Ä–Ω—ã–µ –∫–∞—Ä—Ç—ã –∏–∑ –ù–û–í–û–ô —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
          if (kDebugMode) {
            debugPrint('üó∫Ô∏è –ü–æ–¥—Å—á–µ—Ç –∫–∞—Ä—Ç –∏–∑ –ù–û–í–û–ô —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: users/$userId/marker_maps');
          }

          final mapsSnapshot = await _firestore
              .collection('users')
              .doc(userId)
              .collection('marker_maps')      // ‚Üê –ù–û–í–ê–Ø –°–¢–†–£–ö–¢–£–†–ê
              .get();

          actualMapsCount = mapsSnapshot.docs.length;
          if (kDebugMode) {
            debugPrint('üó∫Ô∏è –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ä—Ç –≤ –ù–û–í–û–ô —Å—Ç—Ä—É–∫—Ç—É—Ä–µ: $actualMapsCount');
          }

          // –ò–°–ü–†–ê–í–õ–ï–ù–û: –°—á–∏—Ç–∞–µ–º –ø–æ–µ–∑–¥–∫–∏ –∏–∑ –ù–û–í–û–ô —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
          if (kDebugMode) {
            debugPrint('üí∞ –ü–æ–¥—Å—á–µ—Ç –ø–æ–µ–∑–¥–æ–∫ –∏–∑ –ù–û–í–û–ô —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: users/$userId/fishing_trips');
          }

          final tripsSnapshot = await _firestore
              .collection('users')
              .doc(userId)
              .collection('fishing_trips')    // ‚Üê –ù–û–í–ê–Ø –°–¢–†–£–ö–¢–£–†–ê
              .get();

          // –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–µ–∑–¥–æ–∫ (–∫–∞–∂–¥–∞—è –ø–æ–µ–∑–¥–∫–∞ = –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤)
          actualExpensesCount = tripsSnapshot.docs.length;
          if (kDebugMode) {
            debugPrint('üí∞ –ù–∞–π–¥–µ–Ω–æ –ø–æ–µ–∑–¥–æ–∫ –≤ –ù–û–í–û–ô —Å—Ç—Ä—É–∫—Ç—É—Ä–µ: $actualExpensesCount');
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º ID –≤—Å–µ—Ö –ø–æ–µ–∑–¥–æ–∫ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            final tripIds = tripsSnapshot.docs.map((doc) => doc.id).toList();
            debugPrint('üí∞ ID –ø–æ–µ–∑–¥–æ–∫: $tripIds');
          }

          // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
          if (kDebugMode) {
            debugPrint('üîç === –°–†–ê–í–ù–ï–ù–ò–ï –°–û –°–¢–ê–†–û–ô –°–¢–†–£–ö–¢–£–†–û–ô ===');

            try {
              // –°—Ç–∞—Ä–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–º–µ—Ç–æ–∫
              final oldNotesSnapshot = await _firestore
                  .collection('fishing_notes')
                  .where('userId', isEqualTo: userId)
                  .get();
              debugPrint('üìù –°—Ç–∞—Ä–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–º–µ—Ç–æ–∫: ${oldNotesSnapshot.docs.length}');

              // –°—Ç–∞—Ä–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–∞—Ä—Ç
              final oldMapsSnapshot = await _firestore
                  .collection('marker_maps')
                  .where('userId', isEqualTo: userId)
                  .get();
              debugPrint('üó∫Ô∏è –°—Ç–∞—Ä–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–∞—Ä—Ç: ${oldMapsSnapshot.docs.length}');

              // –°—Ç–∞—Ä–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ–µ–∑–¥–æ–∫
              final oldTripsSnapshot = await _firestore
                  .collection('fishing_trips')
                  .where('userId', isEqualTo: userId)
                  .get();
              debugPrint('üí∞ –°—Ç–∞—Ä–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ–µ–∑–¥–æ–∫: ${oldTripsSnapshot.docs.length}');
            } catch (e) {
              debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ä–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: $e');
            }
          }

        } catch (e) {
          if (kDebugMode) {
            debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ù–û–í–û–ô —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Firebase: $e');
          }
          // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞
          final currentLimits = _cachedLimits ?? UsageLimitsModel.defaultLimits(userId);
          actualNotesCount = currentLimits.notesCount;
          actualMapsCount = currentLimits.markerMapsCount;
          actualExpensesCount = currentLimits.expensesCount;
          if (kDebugMode) {
            debugPrint('üíæ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: $actualNotesCount/$actualMapsCount/$actualExpensesCount');
          }
        }
      } else {
        if (kDebugMode) {
          debugPrint('üîå –ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
        }
        final currentLimits = _cachedLimits ?? UsageLimitsModel.defaultLimits(userId);
        actualNotesCount = currentLimits.notesCount;
        actualMapsCount = currentLimits.markerMapsCount;
        actualExpensesCount = currentLimits.expensesCount;
      }

      // –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å –ª–∏–º–∏—Ç–æ–≤
      final currentLimits = _cachedLimits ?? UsageLimitsModel.defaultLimits(userId);
      final updatedLimits = currentLimits.copyWith(
        notesCount: actualNotesCount,
        markerMapsCount: actualMapsCount,
        expensesCount: actualExpensesCount,
        updatedAt: DateTime.now(),
      );

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ª–∏–º–∏—Ç—ã
      await _saveLimits(updatedLimits);

      if (kDebugMode) {
        debugPrint('‚úÖ –°–µ—Ä–≤–µ—Ä–Ω—ã–µ –ª–∏–º–∏—Ç—ã –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã –∏–∑ –ù–û–í–û–ô —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:');
        debugPrint('   üìù –ó–∞–º–µ—Ç–∫–∏: $actualNotesCount/${SubscriptionConstants.freeNotesLimit}');
        debugPrint('   üó∫Ô∏è –ö–∞—Ä—Ç—ã: $actualMapsCount/${SubscriptionConstants.freeMarkerMapsLimit}');
        debugPrint('   üí∞ –ü–æ–µ–∑–¥–∫–∏: $actualExpensesCount/${SubscriptionConstants.freeExpensesLimit}');
      }
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –ª–∏–º–∏—Ç–æ–≤: $e');
      }
    }
  }

  /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ UI)
  Future<void> forceRefresh() async {
    try {
      if (kDebugMode) {
        debugPrint('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤...');
      }
      _cachedLimits = null; // –û—á–∏—â–∞–µ–º –∫—ç—à
      await loadCurrentLimits();
      await recalculateLimitsWithOffline();
      if (kDebugMode) {
        debugPrint('‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
      }
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: $e');
      }
    }
  }

  /// –ú–µ—Ç–æ–¥—ã –¥–ª—è —Å–±—Ä–æ—Å–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  Future<void> resetUsageForType(ContentType contentType) async {
    try {
      final limits = await getCurrentUsage();
      UsageLimitsModel updatedLimits;

      switch (contentType) {
        case ContentType.fishingNotes:
          updatedLimits = limits.copyWith(notesCount: 0, updatedAt: DateTime.now());
          break;
        case ContentType.markerMaps:
          updatedLimits = limits.copyWith(markerMapsCount: 0, updatedAt: DateTime.now());
          break;
        case ContentType.expenses:
          updatedLimits = limits.copyWith(expensesCount: 0, updatedAt: DateTime.now());
          break;
        case ContentType.depthChart:
        // –ì—Ä–∞—Ñ–∏–∫ –≥–ª—É–±–∏–Ω –Ω–µ –∏–º–µ–µ—Ç —Å—á–µ—Ç—á–∏–∫–∞
          return;
      }

      await _saveLimits(updatedLimits);
      if (kDebugMode) {
        debugPrint('‚úÖ –°–±—Ä–æ—à–µ–Ω —Å—á–µ—Ç—á–∏–∫ –¥–ª—è —Ç–∏–ø–∞: $contentType');
      }
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Å—á–µ—Ç—á–∏–∫–∞ –¥–ª—è —Ç–∏–ø–∞ $contentType: $e');
      }
    }
  }

  /// üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å —É—á–µ—Ç–æ–º –æ—Ñ–ª–∞–π–Ω –¥–∞–Ω–Ω—ã—Ö
  Future<Map<String, dynamic>> getUsageStatistics() async {
    try {
      final limits = await getCurrentUsage();
      final baseStats = limits.getUsageStats();

      // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ñ–ª–∞–π–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      final offlineCounters = await _offlineStorage.getAllLocalUsageCounters();

      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      final totalStats = <String, dynamic>{};
      for (final contentType in ContentType.values) {
        if (contentType != ContentType.depthChart) {
          final totalUsage = await _getTotalUsageForType(contentType);
          totalStats['total_${contentType.name}'] = totalUsage;
        }
      }

      return {
        ...baseStats,
        'offline_counters': {
          for (final entry in offlineCounters.entries)
            entry.key.name: entry.value
        },
        ...totalStats,
      };
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: $e');
      }
      return {};
    }
  }

  /// üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ª–∏–º–∏—Ç–∞—Ö —Å —É—á–µ—Ç–æ–º –æ—Ñ–ª–∞–π–Ω –¥–∞–Ω–Ω—ã—Ö
  Future<List<ContentTypeWarning>> checkForWarnings() async {
    try {
      final warnings = <ContentTypeWarning>[];

      for (final contentType in [
        ContentType.fishingNotes,
        ContentType.markerMaps,
        ContentType.expenses,
      ]) {
        // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ (—Å–µ—Ä–≤–µ—Ä–Ω–æ–µ + –æ—Ñ–ª–∞–π–Ω)
        final totalUsage = await _getTotalUsageForType(contentType);
        final limit = SubscriptionConstants.getContentLimit(contentType);
        final maxAllowed = limit + SubscriptionConstants.offlineGraceLimit;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        final warningThreshold = (limit * 0.8).round(); // 80% –æ—Ç –ª–∏–º–∏—Ç–∞

        if (totalUsage >= warningThreshold) {
          final remaining = maxAllowed - totalUsage;
          final percentage = totalUsage / maxAllowed;

          warnings.add(ContentTypeWarning(
            contentType: contentType,
            currentCount: totalUsage,
            limit: maxAllowed,
            remaining: remaining > 0 ? remaining : 0,
            percentage: percentage,
          ));
        }
      }

      return warnings;
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: $e');
      }
      return [];
    }
  }

  /// –°–±—Ä–æ—Å –≤—Å–µ—Ö –ª–∏–º–∏—Ç–æ–≤ (–¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ü–µ–ª–µ–π)
  Future<void> resetAllLimits() async {
    try {
      final limits = await getCurrentUsage();
      final resetLimits = limits.resetAllCounters();
      await _saveLimits(resetLimits);

      // üî• –ù–û–í–û–ï: –¢–∞–∫–∂–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—Ñ–ª–∞–π–Ω —Å—á–µ—Ç—á–∏–∫–∏
      await _offlineStorage.resetLocalUsageCounters();

      if (kDebugMode) {
        debugPrint('‚úÖ –í—Å–µ –ª–∏–º–∏—Ç—ã —Å–±—Ä–æ—à–µ–Ω—ã (—Å–µ—Ä–≤–µ—Ä–Ω—ã–µ + –æ—Ñ–ª–∞–π–Ω)');
      }
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–æ–≤: $e');
      }
    }
  }

  /// üî• –ù–û–í–´–ô –ú–ï–¢–û–î: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
  Future<Map<String, dynamic>> getComprehensiveUsageStats() async {
    try {
      final Map<String, dynamic> stats = {};

      for (final contentType in ContentType.values) {
        if (contentType != ContentType.depthChart) {
          final limits = _cachedLimits ?? UsageLimitsModel.defaultLimits(_firebaseService.currentUserId ?? '');
          final serverUsage = limits.getCountForType(contentType);
          final offlineUsage = await _offlineStorage.getLocalUsageCount(contentType);
          final totalUsage = serverUsage + offlineUsage;
          final limit = SubscriptionConstants.getContentLimit(contentType);
          final maxAllowed = limit + SubscriptionConstants.offlineGraceLimit;

          stats[contentType.name] = {
            'server': serverUsage,
            'offline': offlineUsage,
            'total': totalUsage,
            'limit': limit,
            'maxAllowed': maxAllowed,
            'remaining': maxAllowed - totalUsage,
            'percentage': totalUsage / maxAllowed,
          };
        }
      }

      return stats;
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: $e');
      }
      return {};
    }
  }

  /// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤
  Future<void> _saveLimits(UsageLimitsModel limits) async {
    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Firebase
      await _saveLimitsToFirebase(limits);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à
      await _saveToCache(limits);

      // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –≤ –ø–∞–º—è—Ç–∏
      _cachedLimits = limits;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Å—Ç—Ä–∏–º
      _limitsController.add(limits);
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤: $e');
      }
      rethrow;
    }
  }

  /// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ –≤ Firebase
  Future<void> _saveLimitsToFirebase(UsageLimitsModel limits) async {
    try {
      if (await NetworkUtils.isNetworkAvailable()) {
        await _firestore
            .collection(SubscriptionConstants.usageLimitsCollection)
            .doc(limits.userId)
            .set(limits.toMap(), SetOptions(merge: true));
        if (kDebugMode) {
          debugPrint('üíæ –õ–∏–º–∏—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Firebase');
        }
      } else {
        if (kDebugMode) {
          debugPrint('üîå –ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Firebase –ø—Ä–æ–ø—É—â–µ–Ω–æ');
        }
      }
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Firebase: $e');
      }
    }
  }

  /// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à
  Future<void> _saveToCache(UsageLimitsModel limits) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setInt('cached_notes_count', limits.notesCount);
      await prefs.setInt('cached_maps_count', limits.markerMapsCount);
      await prefs.setInt('cached_expenses_count', limits.expensesCount);
      await prefs.setString('cached_limits_updated', limits.updatedAt.toIso8601String());
      await prefs.setString('cached_user_id', limits.userId);
      if (kDebugMode) {
        debugPrint('üíæ –õ–∏–º–∏—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à');
      }
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ –≤ –∫—ç—à: $e');
      }
    }
  }

  /// –ó–∞–≥—Ä—É–∑–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞
  Future<UsageLimitsModel> _loadFromCache(String userId) async {
    try {
      final prefs = await SharedPreferences.getInstance();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      final cachedUserId = prefs.getString('cached_user_id');
      if (cachedUserId != userId) {
        if (kDebugMode) {
          debugPrint('üë§ –°–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –ª–∏–º–∏—Ç—ã');
        }
        return UsageLimitsModel.defaultLimits(userId);
      }

      final notesCount = prefs.getInt('cached_notes_count') ?? 0;
      final mapsCount = prefs.getInt('cached_maps_count') ?? 0;
      final expensesCount = prefs.getInt('cached_expenses_count') ?? 0;
      final updatedString = prefs.getString('cached_limits_updated');

      final updatedAt = updatedString != null
          ? DateTime.tryParse(updatedString) ?? DateTime.now()
          : DateTime.now();

      if (kDebugMode) {
        debugPrint('üíæ –õ–∏–º–∏—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –∫—ç—à–∞: $notesCount/$mapsCount/$expensesCount');
      }

      return UsageLimitsModel(
        userId: userId,
        notesCount: notesCount,
        markerMapsCount: mapsCount,
        expensesCount: expensesCount,
        lastResetDate: updatedAt,
        updatedAt: updatedAt,
      );
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏–º–∏—Ç–æ–≤ –∏–∑ –∫—ç—à–∞: $e');
      }
      return UsageLimitsModel.defaultLimits(userId);
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –ª–∏–º–∏—Ç–æ–≤ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∏–∑ –∫—ç—à–∞)
  UsageLimitsModel? get currentLimits => _cachedLimits;

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  bool get isInitialized => _isInitialized;

  /// –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
  void dispose() {
    _limitsController.close();
    _isInitialized = false;
  }
}

/// –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
class ContentCreationResult {
  final bool canCreate;
  final ContentCreationBlockReason? reason;
  final int currentCount;
  final int limit;
  final int remaining;

  const ContentCreationResult({
    required this.canCreate,
    this.reason,
    required this.currentCount,
    required this.limit,
    required this.remaining,
  });

  @override
  String toString() {
    return 'ContentCreationResult(canCreate: $canCreate, current: $currentCount/$limit, remaining: $remaining)';
  }
}

/// –ü—Ä–∏—á–∏–Ω—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
enum ContentCreationBlockReason {
  limitReached,      // –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç
  premiumRequired,   // –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞
  error,            // –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ
}

/// –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
class ContentTypeWarning {
  final ContentType contentType;
  final int currentCount;
  final int limit;
  final int remaining;
  final double percentage;

  const ContentTypeWarning({
    required this.contentType,
    required this.currentCount,
    required this.limit,
    required this.remaining,
    required this.percentage,
  });

  @override
  String toString() {
    return 'ContentTypeWarning($contentType: ${(percentage * 100).toInt()}% used, $remaining remaining)';
  }
}