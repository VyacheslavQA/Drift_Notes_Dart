// lib/services/firebase/simplified_migration_tool.dart
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/foundation.dart';

class SimplifiedMigrationTool {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final FirebaseAuth _auth = FirebaseAuth.instance;

  String? get currentUserId => _auth.currentUser?.uid;

  // –ö–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ (–±–µ–∑ usage_limits)
  static const List<String> collectionsToMigrate = [
    'fishing_notes',
    'fishing_trips',
    'marker_maps',
    'user_consents'
  ];

  // === –ü–û–õ–ù–ê–Ø –ú–ò–ì–†–ê–¶–ò–Ø –í SUBCOLLECTIONS ===
  Future<Map<String, dynamic>> runCompleteMigration() async {
    try {
      if (kDebugMode) {
        debugPrint('üöÄ === –ó–ê–ü–£–°–ö –£–ü–†–û–©–ï–ù–ù–û–ô –ú–ò–ì–†–ê–¶–ò–ò ===');
      }

      final userId = currentUserId;
      if (userId == null) {
        throw Exception('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      }

      // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
      await _ensureUserProfile(userId);

      // –£–¥–∞–ª—è–µ–º usage_limits —Å—Ä–∞–∑—É (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)
      await _deleteUsageLimits();

      // –ú–∏–≥—Ä–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
      for (String collection in collectionsToMigrate) {
        await _migrateCollection(collection);
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      final verification = await verifyMigration();

      if (kDebugMode) {
        debugPrint('üéâ === –£–ü–†–û–©–ï–ù–ù–ê–Ø –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê ===');
      }

      return verification;

    } catch (e) {
      if (kDebugMode) {
        debugPrint('üí• === –û–®–ò–ë–ö–ê –ú–ò–ì–†–ê–¶–ò–ò ===');
        debugPrint('‚ùå $e');
      }
      rethrow;
    }
  }

  // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<void> _ensureUserProfile(String userId) async {
    try {
      final userDoc = await _firestore.collection('users').doc(userId).get();

      if (!userDoc.exists) {
        if (kDebugMode) {
          debugPrint('üë§ –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $userId');
        }
        await createTestProfile();
      } else {
        if (kDebugMode) {
          debugPrint('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: $userId');
        }
      }
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ—Ñ–∏–ª—è: $e');
      }
      // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
      await createTestProfile();
    }
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ usage_limits (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)
  Future<void> _deleteUsageLimits() async {
    try {
      if (kDebugMode) {
        debugPrint('üóëÔ∏è –£–¥–∞–ª—è–µ–º usage_limits (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)...');
      }

      await _deleteCollectionInBatches('usage_limits');

      if (kDebugMode) {
        debugPrint('‚úÖ usage_limits —É–¥–∞–ª–µ–Ω—ã');
      }
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è usage_limits (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ): $e');
      }
      // –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –∏–∑-–∑–∞ —ç—Ç–æ–≥–æ
    }
  }

  // –ú–∏–≥—Ä–∞—Ü–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏
  Future<void> _migrateCollection(String collectionName) async {
    try {
      if (kDebugMode) {
        debugPrint('  üîÑ –ú–∏–≥—Ä–∏—Ä—É–µ–º $collectionName...');
      }

      final snapshot = await _firestore.collection(collectionName).get();

      if (snapshot.docs.isEmpty) {
        if (kDebugMode) {
          debugPrint('  ‚ö™ $collectionName –ø—É—Å—Ç–∞');
        }
        return;
      }

      int migrated = 0;
      int errors = 0;
      int skipped = 0;

      for (var doc in snapshot.docs) {
        try {
          final data = doc.data();
          final userId = data['userId'];

          if (userId == null) {
            skipped++;
            if (kDebugMode) {
              debugPrint('  ‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω ${doc.id} - –Ω–µ—Ç userId');
            }
            continue;
          }

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –¥–æ–∫—É–º–µ–Ω—Ç –≤ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
          final existingDoc = await _firestore
              .collection('users')
              .doc(userId)
              .collection(collectionName)
              .doc(doc.id)
              .get();

          if (existingDoc.exists) {
            skipped++;
            if (kDebugMode) {
              debugPrint('  ‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω ${doc.id} - —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ');
            }
            continue;
          }

          // –£–±–∏—Ä–∞–µ–º userId –∏–∑ –¥–∞–Ω–Ω—ã—Ö (–æ–Ω —Ç–µ–ø–µ—Ä—å –≤ –ø—É—Ç–∏)
          final cleanData = Map<String, dynamic>.from(data);
          cleanData.remove('userId');

          // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
          if (!cleanData.containsKey('createdAt')) {
            cleanData['createdAt'] = FieldValue.serverTimestamp();
          }
          if (!cleanData.containsKey('updatedAt')) {
            cleanData['updatedAt'] = FieldValue.serverTimestamp();
          }

          // –ö–æ–ø–∏—Ä—É–µ–º –≤ –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
          await _firestore
              .collection('users')
              .doc(userId)
              .collection(collectionName)
              .doc(doc.id)
              .set(cleanData);

          migrated++;

        } catch (e) {
          errors++;
          if (kDebugMode) {
            debugPrint('  ‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ ${doc.id}: $e');
          }
        }
      }

      if (kDebugMode) {
        debugPrint('  ‚úÖ $collectionName: $migrated –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ, $skipped –ø—Ä–æ–ø—É—â–µ–Ω–æ, $errors –æ—à–∏–±–æ–∫');
      }

    } catch (e) {
      if (kDebugMode) {
        debugPrint('  ‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ $collectionName: $e');
      }
    }
  }

  // === –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–ê ===
  Future<Map<String, dynamic>> verifyMigration() async {
    try {
      if (kDebugMode) {
        debugPrint('=== –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–ê ===');
      }

      final result = <String, dynamic>{};

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      final usersSnapshot = await _firestore.collection('users').get();
      final users = usersSnapshot.docs;

      result['totalUsers'] = users.length;
      result['userDetails'] = <Map<String, dynamic>>[];

      int totalNewNotes = 0;
      int totalNewTrips = 0;
      int totalNewMaps = 0;
      int totalNewConsents = 0;

      for (var userDoc in users) {
        // –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º userId - —ç—Ç–æ ID –¥–æ–∫—É–º–µ–Ω—Ç–∞
        final userId = userDoc.id;
        final userData = userDoc.data();

        final notesCount = await _getSubcollectionCount(userId, 'fishing_notes');
        final tripsCount = await _getSubcollectionCount(userId, 'fishing_trips');
        final mapsCount = await _getSubcollectionCount(userId, 'marker_maps');
        final consentsCount = await _getSubcollectionCount(userId, 'user_consents');

        result['userDetails'].add({
          'userId': userId,
          'email': userData['email'] ?? '–ù–µ—Ç email',
          'displayName': userData['displayName'] ?? '–ù–µ—Ç –∏–º–µ–Ω–∏',
          'notesCount': notesCount,
          'tripsCount': tripsCount,
          'mapsCount': mapsCount,
          'consentsCount': consentsCount,
        });

        totalNewNotes += notesCount;
        totalNewTrips += tripsCount;
        totalNewMaps += mapsCount;
        totalNewConsents += consentsCount;
      }

      result['newStructure'] = {
        'notes': totalNewNotes,
        'trips': totalNewTrips,
        'maps': totalNewMaps,
        'consents': totalNewConsents,
      };

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
      result['oldStructure'] = {
        'notes': await _getCollectionCount('fishing_notes'),
        'trips': await _getCollectionCount('fishing_trips'),
        'maps': await _getCollectionCount('marker_maps'),
        'consents': await _getCollectionCount('user_consents'),
      };

      if (kDebugMode) {
        debugPrint('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
        debugPrint('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${result['totalUsers']}');
        debugPrint('–ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: ${result['newStructure']}');
        debugPrint('–°—Ç–∞—Ä–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: ${result['oldStructure']}');
      }

      return result;

    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: $e');
      }
      rethrow;
    }
  }

  // === –£–î–ê–õ–ï–ù–ò–ï –°–¢–ê–†–´–• –î–ê–ù–ù–´–• ===
  Future<void> cleanupOldData() async {
    try {
      if (kDebugMode) {
        debugPrint('=== –£–î–ê–õ–ï–ù–ò–ï –°–¢–ê–†–´–• –î–ê–ù–ù–´–• ===');
      }

      for (String collection in collectionsToMigrate) {
        await _deleteCollectionInBatches(collection);
      }

      if (kDebugMode) {
        debugPrint('‚úÖ –°—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã');
      }

    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: $e');
      }
      rethrow;
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  Future<int> _getSubcollectionCount(String userId, String subcollection) async {
    try {
      final snapshot = await _firestore
          .collection('users')
          .doc(userId)
          .collection(subcollection)
          .count()
          .get();
      return snapshot.count ?? 0;
    } catch (e) {
      // –ï—Å–ª–∏ count() –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –¥–µ–ª–∞–µ–º –æ–±—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å
      try {
        final snapshot = await _firestore
            .collection('users')
            .doc(userId)
            .collection(subcollection)
            .get();
        return snapshot.docs.length;
      } catch (e) {
        return 0;
      }
    }
  }

  Future<int> _getCollectionCount(String collection) async {
    try {
      final snapshot = await _firestore.collection(collection).count().get();
      return snapshot.count ?? 0;
    } catch (e) {
      // –ï—Å–ª–∏ count() –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –¥–µ–ª–∞–µ–º –æ–±—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å
      try {
        final snapshot = await _firestore.collection(collection).get();
        return snapshot.docs.length;
      } catch (e) {
        return 0;
      }
    }
  }

  Future<void> _deleteCollectionInBatches(String collectionName) async {
    const batchSize = 100;

    if (kDebugMode) {
      debugPrint('  üóëÔ∏è –£–¥–∞–ª—è–µ–º $collectionName...');
    }

    int totalDeleted = 0;

    while (true) {
      final snapshot = await _firestore
          .collection(collectionName)
          .limit(batchSize)
          .get();

      if (snapshot.docs.isEmpty) {
        break;
      }

      final batch = _firestore.batch();
      for (var doc in snapshot.docs) {
        batch.delete(doc.reference);
      }

      await batch.commit();
      totalDeleted += snapshot.docs.length;

      if (kDebugMode) {
        debugPrint('  üìä –£–¥–∞–ª–µ–Ω–æ $totalDeleted –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ $collectionName');
      }
    }

    if (kDebugMode) {
      debugPrint('  ‚úÖ $collectionName: —É–¥–∞–ª–µ–Ω–æ $totalDeleted –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤');
    }
  }

  // === –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–û–ì–û –ü–†–û–§–ò–õ–Ø ===
  Future<void> createTestProfile() async {
    final userId = currentUserId;
    if (userId == null) {
      throw Exception('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
    }

    try {
      final user = _auth.currentUser!;

      await _firestore.collection('users').doc(userId).set({
        'uid': userId,
        'email': user.email ?? '',
        'displayName': user.displayName ?? '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        'city': '–í–∞—à –≥–æ—Ä–æ–¥',
        'country': '–í–∞—à–∞ —Å—Ç—Ä–∞–Ω–∞',
        'experience': 'beginner',
        'fishingTypes': ['–û–±—ã—á–Ω–∞—è —Ä—ã–±–∞–ª–∫–∞'],
        'photoUrl': user.photoURL,
        'createdAt': FieldValue.serverTimestamp(),
        'updatedAt': FieldValue.serverTimestamp(),
      }, SetOptions(merge: true));

      if (kDebugMode) {
        debugPrint('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è: $userId');
      }

    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: $e');
      }
      rethrow;
    }
  }

  // === –ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–û–°–¢–û–Ø–ù–ò–Ø ===
  Future<String> getQuickStatus() async {
    try {
      if (kDebugMode) {
        debugPrint('üîç –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è...');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      final userId = currentUserId;
      if (userId == null) {
        return '‚ùå –û–®–ò–ë–ö–ê: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω';
      }

      if (kDebugMode) {
        debugPrint('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: $userId');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      final userDoc = await _firestore.collection('users').doc(userId).get();
      if (!userDoc.exists) {
        return 'üë§ –ù–£–ñ–ï–ù –ü–†–û–§–ò–õ–¨: —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: $userId';
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      final newNotesCount = await _getSubcollectionCount(userId, 'fishing_notes');
      final newTripsCount = await _getSubcollectionCount(userId, 'fishing_trips');
      final newMapsCount = await _getSubcollectionCount(userId, 'marker_maps');
      final newConsentsCount = await _getSubcollectionCount(userId, 'user_consents');

      if (kDebugMode) {
        debugPrint('üìä –î–∞–Ω–Ω—ã–µ –≤ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ - –ó–∞–ø–∏—Å–∏: $newNotesCount, –ü–æ–µ–∑–¥–∫–∏: $newTripsCount, –ö–∞—Ä—Ç—ã: $newMapsCount, –°–æ–≥–ª–∞—Å–∏—è: $newConsentsCount');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
      final oldNotesCount = await _getCollectionCount('fishing_notes');
      final oldTripsCount = await _getCollectionCount('fishing_trips');
      final oldMapsCount = await _getCollectionCount('marker_maps');
      final oldConsentsCount = await _getCollectionCount('user_consents');

      if (kDebugMode) {
        debugPrint('üìä –°—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ - –ó–∞–ø–∏—Å–∏: $oldNotesCount, –ü–æ–µ–∑–¥–∫–∏: $oldTripsCount, –ö–∞—Ä—Ç—ã: $oldMapsCount, –°–æ–≥–ª–∞—Å–∏—è: $oldConsentsCount');
      }

      final totalNewData = newNotesCount + newTripsCount + newMapsCount + newConsentsCount;
      final totalOldData = oldNotesCount + oldTripsCount + oldMapsCount + oldConsentsCount;

      if (totalNewData > 0) {
        if (totalOldData > 0) {
          return '‚ö†Ô∏è –ú–ò–ì–†–ê–¶–ò–Ø –í–´–ü–û–õ–ù–ï–ù–ê: –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ\n\n–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ:\nüìù $newNotesCount –∑–∞–ø–∏—Å–µ–π\nüé£ $newTripsCount –ø–æ–µ–∑–¥–æ–∫\nüó∫Ô∏è $newMapsCount –∫–∞—Ä—Ç\n‚úÖ $newConsentsCount —Å–æ–≥–ª–∞—Å–∏–π\n\n–°—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ: $totalOldData –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤';
        } else {
          return '‚úÖ –í–°–ï –ì–û–¢–û–í–û: –¥–∞–Ω–Ω—ã–µ –≤ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ, —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã\n\n–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\nüìù $newNotesCount –∑–∞–ø–∏—Å–µ–π\nüé£ $newTripsCount –ø–æ–µ–∑–¥–æ–∫\nüó∫Ô∏è $newMapsCount –∫–∞—Ä—Ç\n‚úÖ $newConsentsCount —Å–æ–≥–ª–∞—Å–∏–π';
        }
      }

      if (totalOldData > 0) {
        return 'üîÑ –ì–û–¢–û–í–û –ö –ú–ò–ì–†–ê–¶–ò–ò: –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞\n\n–í —Å—Ç–∞—Ä–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –Ω–∞–π–¥–µ–Ω–æ:\nüìù $oldNotesCount –∑–∞–ø–∏—Å–µ–π\nüé£ $oldTripsCount –ø–æ–µ–∑–¥–æ–∫\nüó∫Ô∏è $oldMapsCount –∫–∞—Ä—Ç\n‚úÖ $oldConsentsCount —Å–æ–≥–ª–∞—Å–∏–π';
      }

      return 'üì≠ –ù–ï–¢ –î–ê–ù–ù–´–•: —Å–æ–∑–¥–∞–π—Ç–µ –∑–∞–ø–∏—Å–∏ –∏–ª–∏ –æ–Ω–∏ —É–∂–µ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userDoc.data()?['email'] ?? userId}';

    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: $e');
      }
      return '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: $e\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Firebase';
    }
  }
}