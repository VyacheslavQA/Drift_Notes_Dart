// –ü—É—Ç—å: lib/services/firebase/firebase_analytics_service.dart

import 'package:firebase_analytics/firebase_analytics.dart';
import 'package:flutter/foundation.dart';
import '../../constants/subscription_constants.dart';

/// üéØ –°–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è Drift Notes
/// –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –±–∏–∑–Ω–µ—Å-—Ä–µ—à–µ–Ω–∏–π
class FirebaseAnalyticsService {
  static final FirebaseAnalyticsService _instance = FirebaseAnalyticsService._internal();
  factory FirebaseAnalyticsService() => _instance;
  FirebaseAnalyticsService._internal();

  final FirebaseAnalytics _analytics = FirebaseAnalytics.instance;

  // ========================================
  // üîê –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò
  // ========================================

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
  Future<void> initialize() async {
    try {
      await _analytics.setAnalyticsCollectionEnabled(true);
      debugPrint('üéØ Firebase Analytics –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Analytics: $e');
    }
  }

  /// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  Future<void> setUser(String userId, {
    String? email,
    String? authMethod,
    bool? isPremium,
  }) async {
    try {
      await _analytics.setUserId(id: userId);

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞
      await _analytics.setUserProperty(
          name: 'auth_method',
          value: authMethod ?? 'unknown'
      );

      if (isPremium != null) {
        await _analytics.setUserProperty(
            name: 'subscription_status',
            value: isPremium ? 'premium' : 'free'
        );
      }

      debugPrint('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $userId, –º–µ—Ç–æ–¥: $authMethod');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $e');
    }
  }

  // ========================================
  // üîë –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø
  // ========================================

  /// –í—Ö–æ–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
  Future<void> trackLogin(String method, {bool? success}) async {
    try {
      await _analytics.logLogin(loginMethod: method);

      await _analytics.logEvent(
        name: 'user_login_attempt',
        parameters: {
          'method': method,
          'success': success ?? true,
          'timestamp': DateTime.now().millisecondsSinceEpoch,
        },
      );

      debugPrint('üîë –õ–æ–≥–∏–Ω –æ—Ç—Å–ª–µ–∂–µ–Ω: $method, —É—Å–ø–µ—Ö: $success');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ª–æ–≥–∏–Ω–∞: $e');
    }
  }

  /// –ü–µ—Ä–µ—Ö–æ–¥ –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º
  Future<void> trackOfflineMode(bool enabled) async {
    try {
      await _analytics.logEvent(
        name: 'offline_mode_toggle',
        parameters: {
          'enabled': enabled,
          'timestamp': DateTime.now().millisecondsSinceEpoch,
        },
      );

      debugPrint('üì± –û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º: $enabled');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞: $e');
    }
  }

  // ========================================
  // üìù –°–û–ó–î–ê–ù–ò–ï –ö–û–ù–¢–ï–ù–¢–ê
  // ========================================

  /// –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ —Ä—ã–±–∞–ª–∫–∏
  Future<void> trackFishingNoteCreated({
    required String fishingType,
    required bool isMultiDay,
    required int photosCount,
    required int biteRecordsCount,
    bool? hasWeather,
    bool? hasAIPrediction,
    bool? hasLocation,
    int? tripDays,
  }) async {
    try {
      debugPrint('üéØ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ: fishing_note_created');

      await _analytics.logEvent(
        name: 'fishing_note_created',
        parameters: {
          'fishing_type': fishingType,
          'is_multi_day': isMultiDay ? 'true' : 'false', // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: boolean ‚Üí string
          'photos_count': photosCount,
          'bite_records_count': biteRecordsCount,
          'has_weather': (hasWeather ?? false) ? 'true' : 'false', // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û
          'has_ai_prediction': (hasAIPrediction ?? false) ? 'true' : 'false', // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û
          'has_location': (hasLocation ?? false) ? 'true' : 'false', // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û
          'trip_days': tripDays ?? 1,
          'timestamp': DateTime.now().millisecondsSinceEpoch,
        },
      );

      debugPrint('üìù –ó–∞–º–µ—Ç–∫–∞ —Ä—ã–±–∞–ª–∫–∏ —Å–æ–∑–¥–∞–Ω–∞: $fishingType, —Ñ–æ—Ç–æ: $photosCount, –ø–æ–∫–ª–µ–≤–∫–∏: $biteRecordsCount');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏: $e');
    }
  }

  /// –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã
  Future<void> trackMarkerMapCreated({
    required int markersCount,
    required String mapTitle,
  }) async {
    try {
      await _analytics.logEvent(
        name: 'marker_map_created',
        parameters: {
          'markers_count': markersCount,
          'map_title': mapTitle,
          'timestamp': DateTime.now().millisecondsSinceEpoch,
        },
      );

      debugPrint('üó∫Ô∏è –ú–∞—Ä–∫–µ—Ä–Ω–∞—è –∫–∞—Ä—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞: $markersCount –º–∞—Ä–∫–µ—Ä–æ–≤');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã: $e');
    }
  }

  /// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–∞ –Ω–∞ –∫–∞—Ä—Ç—É
  Future<void> trackMarkerAdded({
    required String bottomType,
    required double depth,
    required double distance,
    required int rayIndex,
  }) async {
    try {
      await _analytics.logEvent(
        name: 'marker_added',
        parameters: {
          'bottom_type': bottomType,
          'depth': depth,
          'distance': distance,
          'ray_index': rayIndex,
          'timestamp': DateTime.now().millisecondsSinceEpoch,
        },
      );

      debugPrint('üìç –ú–∞—Ä–∫–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω: $bottomType, –≥–ª—É–±–∏–Ω–∞: $depth');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–∞: $e');
    }
  }

  /// –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ —Ä—ã–±–∞–ª–∫—É
  Future<void> trackBudgetNoteCreated({
    required int categoriesCount,
    required double totalAmount,
    required String currency,
    required bool isMultiDay,
  }) async {
    try {
      await _analytics.logEvent(
        name: 'budget_note_created',
        parameters: {
          'categories_count': categoriesCount,
          'total_amount': totalAmount,
          'currency': currency,
          'is_multi_day': isMultiDay,
          'timestamp': DateTime.now().millisecondsSinceEpoch,
        },
      );

      debugPrint('üí∞ –†–∞—Å—Ö–æ–¥—ã —Å–æ–∑–¥–∞–Ω—ã: $categoriesCount –∫–∞—Ç–µ–≥–æ—Ä–∏–π, $totalAmount $currency');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤: $e');
    }
  }

  // ========================================
  // ü§ñ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï –§–£–ù–ö–¶–ò–ô
  // ========================================

  /// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ò–ò –∞–Ω–∞–ª–∏–∑–∞
  Future<void> trackAIAnalysisUsed({
    required String fishingType,
    required int overallScore,
    required String activityLevel,
    required int confidencePercent,
    bool? success,
  }) async {
    try {
      await _analytics.logEvent(
        name: 'ai_analysis_used',
        parameters: {
          'fishing_type': fishingType,
          'overall_score': overallScore,
          'activity_level': activityLevel,
          'confidence_percent': confidencePercent,
          'success': success ?? true,
          'timestamp': DateTime.now().millisecondsSinceEpoch,
        },
      );

      debugPrint('ü§ñ –ò–ò –∞–Ω–∞–ª–∏–∑: $fishingType, —Å–∫–æ—Ä: $overallScore, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: $confidencePercent%');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ò–ò –∞–Ω–∞–ª–∏–∑–∞: $e');
    }
  }

  /// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–≥–æ–¥—ã
  Future<void> trackWeatherLoaded({
    required double latitude,
    required double longitude,
    required double temperature,
    required String weatherDescription,
    bool? success,
  }) async {
    try {
      await _analytics.logEvent(
        name: 'weather_loaded',
        parameters: {
          'latitude': latitude,
          'longitude': longitude,
          'temperature': temperature,
          'weather_description': weatherDescription,
          'success': success ?? true,
          'timestamp': DateTime.now().millisecondsSinceEpoch,
        },
      );

      debugPrint('üå§Ô∏è –ü–æ–≥–æ–¥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: $temperature¬∞C, $weatherDescription');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–≥–æ–¥—ã: $e');
    }
  }

  /// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ
  Future<void> trackPhotoAdded({
    required String source, // 'camera' –∏–ª–∏ 'gallery'
    required double originalSizeMB,
    required double compressedSizeMB,
  }) async {
    try {
      await _analytics.logEvent(
        name: 'photo_added',
        parameters: {
          'source': source,
          'original_size_mb': originalSizeMB,
          'compressed_size_mb': compressedSizeMB,
          'compression_ratio': originalSizeMB > 0 ? compressedSizeMB / originalSizeMB : 1.0,
          'timestamp': DateTime.now().millisecondsSinceEpoch,
        },
      );

      debugPrint('üì∏ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: $source, $originalSizeMB MB ‚Üí $compressedSizeMB MB');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ: $e');
    }
  }

  /// –ó–∞–ø–∏—Å—å –ø–æ–∫–ª–µ–≤–∫–∏
  Future<void> trackBiteRecorded({
    required String fishType,
    required double weight,
    required double length,
    required int dayIndex,
    bool? hasCatch,
  }) async {
    try {
      await _analytics.logEvent(
        name: 'bite_recorded',
        parameters: {
          'fish_type': fishType,
          'weight': weight,
          'length': length,
          'day_index': dayIndex,
          'has_catch': hasCatch ?? (weight > 0),
          'timestamp': DateTime.now().millisecondsSinceEpoch,
        },
      );

      debugPrint('üé£ –ü–æ–∫–ª–µ–≤–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞: $fishType, –≤–µ—Å: $weight –∫–≥');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–∫–ª–µ–≤–∫–∏: $e');
    }
  }

  // ========================================
  // üíé –ü–†–ï–ú–ò–£–ú –§–£–ù–ö–¶–ò–ò
  // ========================================

  /// –î–æ—Å—Ç—É–ø –∫ –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–∏
  Future<void> trackPremiumFeatureAccessed({
    required String featureName,
    required bool hasAccess,
    String? blockedReason,
  }) async {
    try {
      await _analytics.logEvent(
        name: 'premium_feature_accessed',
        parameters: {
          'feature_name': featureName,
          'has_access': hasAccess,
          'blocked_reason': blockedReason ?? (hasAccess ? null : 'no_subscription'),
          'timestamp': DateTime.now().millisecondsSinceEpoch,
        },
      );

      debugPrint('üíé –ü—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏—è: $featureName, –¥–æ—Å—Ç—É–ø: $hasAccess');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–∏: $e');
    }
  }

  /// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –≥–ª—É–±–∏–Ω—ã
  Future<void> trackDepthChartsUsed({
    required int markersCount,
    required bool hasAccess,
  }) async {
    try {
      await _analytics.logEvent(
        name: 'depth_charts_used',
        parameters: {
          'markers_count': markersCount,
          'has_access': hasAccess,
          'timestamp': DateTime.now().millisecondsSinceEpoch,
        },
      );

      debugPrint('üìä –ì—Ä–∞—Ñ–∏–∫–∏ –≥–ª—É–±–∏–Ω—ã: $markersCount –º–∞—Ä–∫–µ—Ä–æ–≤, –¥–æ—Å—Ç—É–ø: $hasAccess');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –≥–ª—É–±–∏–Ω—ã: $e');
    }
  }

  // ========================================
  // üí∞ –ú–û–ù–ï–¢–ò–ó–ê–¶–ò–Ø
  // ========================================

  /// –ü–æ–∫–∞–∑ Paywall —ç–∫—Ä–∞–Ω–∞
  Future<void> trackPaywallShown({
    required String reason,
    required String contentType,
    required String blockedFeature,
    int? currentUsage,
    int? maxLimit,
  }) async {
    try {
      await _analytics.logEvent(
        name: 'paywall_shown',
        parameters: {
          'reason': reason,
          'content_type': contentType,
          'blocked_feature': blockedFeature,
          'current_usage': currentUsage,
          'max_limit': maxLimit,
          'timestamp': DateTime.now().millisecondsSinceEpoch,
        },
      );

      debugPrint('üö´ Paywall –ø–æ–∫–∞–∑–∞–Ω: $reason, –∫–æ–Ω—Ç–µ–Ω—Ç: $contentType');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è paywall: $e');
    }
  }

  /// –ù–∞—á–∞–ª–æ –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
  Future<void> trackSubscriptionPurchaseStarted({
    required String productId,
    required String planType, // 'monthly' –∏–ª–∏ 'yearly'
    required String price,
    String? currency,
  }) async {
    try {
      await _analytics.logEvent(
        name: 'subscription_purchase_started',
        parameters: {
          'product_id': productId,
          'plan_type': planType,
          'price': price,
          'currency': currency ?? 'USD',
          'timestamp': DateTime.now().millisecondsSinceEpoch,
        },
      );

      debugPrint('üí≥ –ü–æ–∫—É–ø–∫–∞ –Ω–∞—á–∞—Ç–∞: $planType, —Ü–µ–Ω–∞: $price');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–∞—á–∞–ª–∞ –ø–æ–∫—É–ø–∫–∏: $e');
    }
  }

  /// –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
  Future<void> trackSubscriptionPurchaseCompleted({
    required String productId,
    required String planType,
    required bool success,
    String? errorReason,
    String? price,
    double? yearlyDiscount,
  }) async {
    try {
      if (success) {
        // Firebase –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–π –ø–æ–∫—É–ø–∫–∏
        await _analytics.logPurchase(
          currency: 'USD', // –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –≤–∞–ª—é—Ç—É
          value: _extractPriceValue(price ?? '0'),
          items: [
            AnalyticsEventItem(
              itemId: productId,
              itemName: 'Premium Subscription',
              itemCategory: planType,
              price: _extractPriceValue(price ?? '0'),
              quantity: 1,
            ),
          ],
        );
      }

      await _analytics.logEvent(
        name: 'subscription_purchase_completed',
        parameters: {
          'product_id': productId,
          'plan_type': planType,
          'success': success,
          'error_reason': errorReason,
          'price': price,
          'yearly_discount': yearlyDiscount,
          'timestamp': DateTime.now().millisecondsSinceEpoch,
        },
      );

      debugPrint('‚úÖ –ü–æ–∫—É–ø–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: $planType, —É—Å–ø–µ—Ö: $success');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏: $e');
    }
  }

  /// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–æ–∫
  Future<void> trackPurchasesRestored({
    required bool success,
    int? restoredCount,
    String? errorReason,
  }) async {
    try {
      await _analytics.logEvent(
        name: 'purchases_restored',
        parameters: {
          'success': success,
          'restored_count': restoredCount ?? 0,
          'error_reason': errorReason,
          'timestamp': DateTime.now().millisecondsSinceEpoch,
        },
      );

      debugPrint('üîÑ –ü–æ–∫—É–ø–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: —É—Å–ø–µ—Ö: $success, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: $restoredCount');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–æ–∫: $e');
    }
  }

  // ========================================
  // üìä –õ–ò–ú–ò–¢–´ –ò –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï
  // ========================================

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞
  Future<void> trackLimitCheck({
    required String contentType,
    required int currentUsage,
    required int maxLimit,
    required bool canProceed,
    required bool isPremium,
  }) async {
    try {
      await _analytics.logEvent(
        name: 'limit_check',
        parameters: {
          'content_type': contentType,
          'current_usage': currentUsage,
          'max_limit': maxLimit,
          'can_proceed': canProceed,
          'is_premium': isPremium,
          'usage_percentage': maxLimit > 0 ? (currentUsage / maxLimit * 100).round() : 0,
          'timestamp': DateTime.now().millisecondsSinceEpoch,
        },
      );

      debugPrint('üìè –õ–∏–º–∏—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω: $contentType, $currentUsage/$maxLimit, —Ä–∞–∑—Ä–µ—à–µ–Ω–æ: $canProceed');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–∞: $e');
    }
  }

  /// –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞
  Future<void> trackLimitReached({
    required String contentType,
    required int maxLimit,
    required bool isPremium,
  }) async {
    try {
      await _analytics.logEvent(
        name: 'limit_reached',
        parameters: {
          'content_type': contentType,
          'max_limit': maxLimit,
          'is_premium': isPremium,
          'timestamp': DateTime.now().millisecondsSinceEpoch,
        },
      );

      debugPrint('üö´ –õ–∏–º–∏—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç: $contentType, –º–∞–∫—Å–∏–º—É–º: $maxLimit');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞: $e');
    }
  }

  // ========================================
  // üéØ –ë–ò–ó–ù–ï–°-–ú–ï–¢–†–ò–ö–ò
  // ========================================

  /// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç)
  Future<void> trackUsageStats({
    required int totalNotes,
    required int totalMaps,
    required int totalBudgetNotes,
    required bool isPremium,
    required int daysActive,
    String? mostUsedFishingType,
    String? mostUsedCurrency,
  }) async {
    try {
      await _analytics.logEvent(
        name: 'weekly_usage_stats',
        parameters: {
          'total_notes': totalNotes,
          'total_maps': totalMaps,
          'total_budget_notes': totalBudgetNotes,
          'is_premium': isPremium,
          'days_active': daysActive,
          'most_used_fishing_type': mostUsedFishingType,
          'most_used_currency': mostUsedCurrency,
          'timestamp': DateTime.now().millisecondsSinceEpoch,
        },
      );

      debugPrint('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –∑–∞–º–µ—Ç–∫–∏: $totalNotes, –∫–∞—Ä—Ç—ã: $totalMaps, —Ä–∞—Å—Ö–æ–¥—ã: $totalBudgetNotes');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: $e');
    }
  }

  /// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞–ª –ø—Ä–µ–º–∏—É–º
  Future<void> trackUserBecamePremium({
    required String planType,
    required String price,
    required int daysFromInstall,
    required int totalNotesCreated,
    required int totalMapsCreated,
  }) async {
    try {
      await _analytics.logEvent(
        name: 'user_became_premium',
        parameters: {
          'plan_type': planType,
          'price': price,
          'days_from_install': daysFromInstall,
          'total_notes_created': totalNotesCreated,
          'total_maps_created': totalMapsCreated,
          'timestamp': DateTime.now().millisecondsSinceEpoch,
        },
      );

      debugPrint('üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞–ª –ø—Ä–µ–º–∏—É–º: $planType, –¥–Ω–µ–π —Å —É—Å—Ç–∞–Ω–æ–≤–∫–∏: $daysFromInstall');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–µ–º–∏—É–º: $e');
    }
  }

  // ========================================
  // üõ†Ô∏è –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
  // ========================================

  /// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–∏—Å–ª–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ü–µ–Ω—ã
  double _extractPriceValue(String priceString) {
    try {
      final numericString = priceString.replaceAll(RegExp(r'[^\d.,]'), '');
      final cleanString = numericString.replaceAll(',', '.');
      return double.parse(cleanString);
    } catch (e) {
      debugPrint('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ü–µ–Ω—É –∏–∑: $priceString');
      return 0.0;
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è ContentType
  String _getContentTypeString(ContentType contentType) {
    switch (contentType) {
      case ContentType.fishingNotes:
        return 'fishing_notes';
      case ContentType.markerMaps:
        return 'marker_maps';
      case ContentType.budgetNotes:
        return 'budget_notes';
      case ContentType.depthChart:
        return 'depth_chart';
    }
  }

  // ========================================
  // üéØ –£–î–û–ë–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–ò
  // ========================================

  /// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ª–∏–º–∏—Ç–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Ç–∏–ø–∞
  Future<void> trackLimitCheckForContentType({
    required ContentType contentType,
    required int currentUsage,
    required int maxLimit,
    required bool canProceed,
    required bool isPremium,
  }) async {
    await trackLimitCheck(
      contentType: _getContentTypeString(contentType),
      currentUsage: currentUsage,
      maxLimit: maxLimit,
      canProceed: canProceed,
      isPremium: isPremium,
    );

    // –ï—Å–ª–∏ –ª–∏–º–∏—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º
    if (!canProceed && !isPremium) {
      await trackLimitReached(
        contentType: _getContentTypeString(contentType),
        maxLimit: maxLimit,
        isPremium: isPremium,
      );
    }
  }

  /// –ë—ã—Å—Ç—Ä–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ paywall —Å –ª–∏–º–∏—Ç–∞–º–∏
  Future<void> trackPaywallForLimits({
    required ContentType contentType,
    required String blockedFeature,
    required int currentUsage,
    required int maxLimit,
  }) async {
    await trackPaywallShown(
      reason: 'limit_exceeded',
      contentType: _getContentTypeString(contentType),
      blockedFeature: blockedFeature,
      currentUsage: currentUsage,
      maxLimit: maxLimit,
    );
  }
}