// –ü—É—Ç—å: lib/services/weather_notification_service.dart

import 'dart:async';
import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:uuid/uuid.dart';
import 'package:geolocator/geolocator.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:timezone/timezone.dart' as tz;
import 'package:timezone/data/latest.dart' as tz;
import '../models/weather_alert_model.dart';
import '../models/weather_api_model.dart';
import '../models/notification_model.dart';
import 'weather/weather_api_service.dart';
import '../services/fishing_forecast_service.dart';
import '../services/notification_service.dart';
import '../localization/app_localizations.dart';

class WeatherNotificationService {
  static final WeatherNotificationService _instance = WeatherNotificationService._internal();
  factory WeatherNotificationService() => _instance;
  WeatherNotificationService._internal();

  final WeatherApiService _weatherService = WeatherApiService();
  final FishingForecastService _forecastService = FishingForecastService();
  final NotificationService _notificationService = NotificationService();
  final Uuid _uuid = const Uuid();

  // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  final FlutterLocalNotificationsPlugin _localNotifications = FlutterLocalNotificationsPlugin();

  // –¢–∞–π–º–µ—Ä—ã –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
  Timer? _periodicCheckTimer;
  Timer? _dailyForecastTimer;

  // –ö—ç—à –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
  WeatherApiResponse? _lastWeatherData;
  WeatherNotificationSettings _settings = const WeatherNotificationSettings();

  // –ö–ª—é—á–∏ –¥–ª—è SharedPreferences
  static const String _settingsKey = 'weather_notification_settings';
  static const String _lastWeatherKey = 'last_weather_data';
  static const String _lastNotificationTimeKey = 'last_notification_time_';

  // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–ª—é—á –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä–∞ (–±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ main.dart)
  static GlobalKey<NavigatorState>? _navigatorKey;

  /// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–ª—é—á–∞ –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä–∞ –∏–∑ main.dart
  static void setNavigatorKey(GlobalKey<NavigatorState> navigatorKey) {
    _navigatorKey = navigatorKey;
  }

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
  Future<void> initialize() async {
    debugPrint('üå§Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–≥–æ–¥–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–æ–Ω—ã
    tz.initializeTimeZones();

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    await _initializeLocalNotifications();

    await _loadSettings();
    await _loadLastWeatherData();

    if (_settings.enabled) {
      _startPeriodicChecks();
      await _scheduleDailyForecastWithLocalNotification();
    }

    debugPrint('‚úÖ –°–µ—Ä–≤–∏—Å –ø–æ–≥–æ–¥–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  Future<void> _initializeLocalNotifications() async {
    const AndroidInitializationSettings initializationSettingsAndroid =
    AndroidInitializationSettings('@mipmap/launcher_icon');

    const InitializationSettings initializationSettings = InitializationSettings(
      android: initializationSettingsAndroid,
    );

    await _localNotifications.initialize(
      initializationSettings,
      onDidReceiveNotificationResponse: _onNotificationTapped,
    );

    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è Android 13+
    await _requestNotificationPermissions();
  }

  /// –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  Future<void> _requestNotificationPermissions() async {
    final AndroidFlutterLocalNotificationsPlugin? androidImplementation =
    _localNotifications.resolvePlatformSpecificImplementation<AndroidFlutterLocalNotificationsPlugin>();

    if (androidImplementation != null) {
      await androidImplementation.requestNotificationsPermission();
      await androidImplementation.requestExactAlarmsPermission();
    }
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  void _onNotificationTapped(NotificationResponse notificationResponse) {
    debugPrint('üîî –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: ${notificationResponse.payload}');

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä
    final context = _navigatorKey?.currentContext;
    if (context == null) {
      debugPrint('‚ùå –ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      return;
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—É–¥–∞ –ø–µ—Ä–µ–π—Ç–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    switch (notificationResponse.payload) {
      case 'daily_forecast':
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω (–≥–¥–µ –µ—Å—Ç—å –ø–æ–≥–æ–¥–∞)
        Navigator.of(context).pushNamedAndRemoveUntil('/home', (route) => false);
        break;
      case 'pressure_change':
      case 'storm_warning':
      case 'favorable_conditions':
      case 'weather_alert':
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
        Navigator.of(context).pushNamedAndRemoveUntil('/home', (route) => false);
        break;
      default:
      // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
        Navigator.of(context).pushNamedAndRemoveUntil('/home', (route) => false);
    }
  }

  /// –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ SharedPreferences
  Future<void> _loadSettings() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final settingsJson = prefs.getString(_settingsKey);

      if (settingsJson != null) {
        final settingsMap = json.decode(settingsJson);
        _settings = WeatherNotificationSettings.fromJson(settingsMap);
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–≥–æ–¥–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: $e');
    }
  }

  /// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  Future<void> _saveSettings() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final settingsJson = json.encode(_settings.toJson());
      await prefs.setString(_settingsKey, settingsJson);
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–≥–æ–¥–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: $e');
    }
  }

  /// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ
  Future<void> _loadLastWeatherData() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final lastWeatherJson = prefs.getString(_lastWeatherKey);

      if (lastWeatherJson != null) {
        final lastWeatherMap = json.decode(lastWeatherJson);
        _lastWeatherData = WeatherApiResponse.fromJson(lastWeatherMap);
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ: $e');
    }
  }

  /// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ
  Future<void> _saveLastWeatherData(WeatherApiResponse weatherData) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final weatherJson = json.encode(weatherData.toJson());
      await prefs.setString(_lastWeatherKey, weatherJson);
      _lastWeatherData = weatherData;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ: $e');
    }
  }

  /// –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø–æ–≥–æ–¥—ã
  void _startPeriodicChecks() {
    _periodicCheckTimer?.cancel();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
    _periodicCheckTimer = Timer.periodic(const Duration(minutes: 30), (timer) {
      _checkWeatherChanges();
    });

    // –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
    Timer(const Duration(minutes: 1), () {
      _checkWeatherChanges();
    });
  }

  /// –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ —á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  Future<void> _scheduleDailyForecastWithLocalNotification() async {
    try {
      // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      await _localNotifications.cancel(999); // ID –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞

      if (!_settings.dailyForecastEnabled) return;

      final now = DateTime.now();
      DateTime scheduledTime = DateTime(
        now.year,
        now.month,
        now.day,
        _settings.dailyForecastHour,
        _settings.dailyForecastMinute,
      );

      // –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ —Å–µ–≥–æ–¥–Ω—è, –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
      if (scheduledTime.isBefore(now)) {
        scheduledTime = scheduledTime.add(const Duration(days: 1));
      }

      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ TZDateTime
      final tz.TZDateTime tzScheduledTime = tz.TZDateTime.from(scheduledTime, tz.local);

      debugPrint('üìÖ –ü–ª–∞–Ω–∏—Ä—É–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ —á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞: $tzScheduledTime');

      // –°–æ–∑–¥–∞–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      await _localNotifications.zonedSchedule(
        999, // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞
        '–ü—Ä–æ–≥–Ω–æ–∑ —Ä—ã–±–∞–ª–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è',
        '–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞',
        tzScheduledTime,
        const NotificationDetails(
          android: AndroidNotificationDetails(
            'daily_forecast_channel',
            '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ —Ä—ã–±–∞–ª–∫–∏',
            channelDescription: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–º –ø—Ä–æ–≥–Ω–æ–∑–æ–º —É—Å–ª–æ–≤–∏–π –¥–ª—è —Ä—ã–±–∞–ª–∫–∏',
            importance: Importance.high,
            priority: Priority.high,
            icon: '@mipmap/launcher_icon',
          ),
        ),
        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,
        uiLocalNotificationDateInterpretation: UILocalNotificationDateInterpretation.absoluteTime,
        matchDateTimeComponents: DateTimeComponents.time, // –ü–æ–≤—Ç–æ—Ä—è—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ —ç—Ç–æ –≤—Ä–µ–º—è
        payload: 'daily_forecast',
      );

      debugPrint('‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ ${scheduledTime.hour}:${scheduledTime.minute.toString().padLeft(2, '0')}');

    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞: $e');
      // Fallback –Ω–∞ –æ–±—ã—á–Ω—ã–π —Ç–∞–π–º–µ—Ä
      _scheduleDailyForecast();
    }
  }

  /// –°—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ fallback)
  void _scheduleDailyForecast() {
    _dailyForecastTimer?.cancel();

    final now = DateTime.now();
    final scheduledTime = DateTime(
      now.year,
      now.month,
      now.day,
      _settings.dailyForecastHour,
      _settings.dailyForecastMinute,
    );

    // –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ, –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    final nextScheduledTime = scheduledTime.isBefore(now)
        ? scheduledTime.add(const Duration(days: 1))
        : scheduledTime;

    final delay = nextScheduledTime.difference(now);

    debugPrint('üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞: ${nextScheduledTime.toString()}');

    _dailyForecastTimer = Timer(delay, () {
      _sendDailyForecast();
      _scheduleDailyForecast(); // –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
    });
  }

  /// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ–≥–æ–¥—ã
  Future<void> _checkWeatherChanges() async {
    if (!_settings.enabled) return;

    try {
      debugPrint('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ–≥–æ–¥—ã...');

      final position = await _getCurrentPosition();
      if (position == null) return;

      final currentWeather = await _weatherService.getForecast(
        latitude: position.latitude,
        longitude: position.longitude,
        days: 1,
      );

      if (_lastWeatherData != null) {
        await _analyzeWeatherChanges(_lastWeatherData!, currentWeather);
      }

      await _checkFavorableConditions(currentWeather, position);
      await _checkStormWarning(currentWeather);

      await _saveLastWeatherData(currentWeather);

    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ–≥–æ–¥—ã: $e');
    }
  }

  /// –ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ–≥–æ–¥—ã
  Future<void> _analyzeWeatherChanges(
      WeatherApiResponse oldWeather,
      WeatherApiResponse newWeather,
      ) async {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–≤–ª–µ–Ω–∏—è
    if (_settings.pressureChangeEnabled) {
      await _checkPressureChange(oldWeather.current, newWeather.current);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
    if (_settings.temperatureChangeEnabled) {
      await _checkTemperatureChange(oldWeather.current, newWeather.current);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–µ—Ç—Ä–∞
    if (_settings.windChangeEnabled) {
      await _checkWindChange(oldWeather.current, newWeather.current);
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–≤–ª–µ–Ω–∏—è
  Future<void> _checkPressureChange(Current oldCurrent, Current newCurrent) async {
    final oldPressureMmHg = oldCurrent.pressureMb / 1.333;
    final newPressureMmHg = newCurrent.pressureMb / 1.333;
    final pressureChange = (newPressureMmHg - oldPressureMmHg).abs();

    if (pressureChange >= _settings.pressureThreshold) {
      final isRising = newPressureMmHg > oldPressureMmHg;
      final trend = isRising ? '—Ä–∞—Å—Ç–µ—Ç' : '–ø–∞–¥–∞–µ—Ç';
      final impact = isRising ? '—É–ª—É—á—à–µ–Ω–∏–µ –∫–ª–µ–≤–∞' : '—É—Ö—É–¥—à–µ–Ω–∏–µ –∫–ª–µ–≤–∞';

      final alert = WeatherAlertModel(
        id: _uuid.v4(),
        type: WeatherAlertType.pressureChange,
        title: '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–≥–æ –¥–∞–≤–ª–µ–Ω–∏—è',
        message: '–î–∞–≤–ª–µ–Ω–∏–µ $trend –Ω–∞ ${pressureChange.toStringAsFixed(1)} –º–º —Ä—Ç.—Å—Ç. –û–∂–∏–¥–∞–µ—Ç—Å—è $impact.',
        priority: pressureChange > 10 ? WeatherAlertPriority.high : WeatherAlertPriority.medium,
        createdAt: DateTime.now(),
        data: {
          'oldPressure': oldPressureMmHg,
          'newPressure': newPressureMmHg,
          'change': pressureChange,
          'isRising': isRising,
        },
      );

      await _sendWeatherAlert(alert);
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
  Future<void> _checkTemperatureChange(Current oldCurrent, Current newCurrent) async {
    final tempChange = (newCurrent.tempC - oldCurrent.tempC).abs();

    if (tempChange >= _settings.temperatureThreshold) {
      final isRising = newCurrent.tempC > oldCurrent.tempC;
      final trend = isRising ? '–ø–æ–≤—ã—à–∞–µ—Ç—Å—è' : '–ø–æ–Ω–∏–∂–∞–µ—Ç—Å—è';

      final alert = WeatherAlertModel(
        id: _uuid.v4(),
        type: WeatherAlertType.temperatureChange,
        title: '–†–µ–∑–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã',
        message: '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ $trend –Ω–∞ ${tempChange.toStringAsFixed(1)}¬∞C. –†—ã–±–∞ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–≤–µ–¥–µ–Ω–∏–µ.',
        priority: WeatherAlertPriority.medium,
        createdAt: DateTime.now(),
        data: {
          'oldTemp': oldCurrent.tempC,
          'newTemp': newCurrent.tempC,
          'change': tempChange,
          'isRising': isRising,
        },
      );

      await _sendWeatherAlert(alert);
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–µ—Ç—Ä–∞
  Future<void> _checkWindChange(Current oldCurrent, Current newCurrent) async {
    final windSpeedChange = (newCurrent.windKph - oldCurrent.windKph).abs();

    if (windSpeedChange >= _settings.windSpeedThreshold) {
      final isIncreasing = newCurrent.windKph > oldCurrent.windKph;
      final trend = isIncreasing ? '—É—Å–∏–ª–∏–≤–∞–µ—Ç—Å—è' : '–æ—Å–ª–∞–±–µ–≤–∞–µ—Ç';

      final alert = WeatherAlertModel(
        id: _uuid.v4(),
        type: WeatherAlertType.windChange,
        title: '–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–∏–ª—ã –≤–µ—Ç—Ä–∞',
        message: '–í–µ—Ç–µ—Ä $trend. –°–∫–æ—Ä–æ—Å—Ç—å –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –Ω–∞ ${(windSpeedChange / 3.6).toStringAsFixed(1)} –º/—Å.',
        priority: WeatherAlertPriority.low,
        createdAt: DateTime.now(),
        data: {
          'oldWindKph': oldCurrent.windKph,
          'newWindKph': newCurrent.windKph,
          'change': windSpeedChange,
          'isIncreasing': isIncreasing,
        },
      );

      await _sendWeatherAlert(alert);
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –¥–ª—è —Ä—ã–±–∞–ª–∫–∏
  Future<void> _checkFavorableConditions(WeatherApiResponse weather, Position position) async {
    if (!_settings.favorableConditionsEnabled) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ –º—ã —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ö–æ—Ä–æ—à–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö —Å–µ–≥–æ–¥–Ω—è
    if (await _wasNotificationSentToday(WeatherAlertType.favorableConditions)) {
      return;
    }

    try {
      final forecast = await _forecastService.getFishingForecast(
        weather: weather,
        latitude: position.latitude,
        longitude: position.longitude,
      );

      final activity = forecast['overallActivity'] as double;
      final scorePoints = forecast['scorePoints'] as int;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—Ç–ª–∏—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö (80+ –±–∞–ª–ª–æ–≤)
      if (activity >= 0.8) {
        final bestWindows = forecast['bestTimeWindows'] as List<dynamic>;
        final nextWindow = bestWindows.isNotEmpty ? bestWindows.first : null;

        String timeInfo = '';
        if (nextWindow != null) {
          final startTime = DateTime.parse(nextWindow['startTime']);
          final endTime = DateTime.parse(nextWindow['endTime']);
          timeInfo = ' –õ—É—á—à–µ–µ –≤—Ä–µ–º—è: ${_formatTime(startTime)} - ${_formatTime(endTime)}';
        }

        final alert = WeatherAlertModel(
          id: _uuid.v4(),
          type: WeatherAlertType.favorableConditions,
          title: '–û—Ç–ª–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ä—ã–±–∞–ª–∫–∏!',
          message: '–ü—Ä–æ–≥–Ω–æ–∑ –∫–ª–µ–≤–∞: $scorePoints –±–∞–ª–ª–æ–≤ –∏–∑ 100.$timeInfo',
          priority: WeatherAlertPriority.medium,
          createdAt: DateTime.now(),
          data: {
            'activity': activity,
            'scorePoints': scorePoints,
            'bestWindows': bestWindows,
          },
        );

        await _sendWeatherAlert(alert);
        await _markNotificationSentToday(WeatherAlertType.favorableConditions);
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π: $e');
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –æ —à—Ç–æ—Ä–º–µ
  Future<void> _checkStormWarning(WeatherApiResponse weather) async {
    if (!_settings.stormWarningEnabled) return;

    final current = weather.current;
    final condition = current.condition.text.toLowerCase();

    bool hasStormConditions = false;
    String warningMessage = '';
    WeatherAlertPriority priority = WeatherAlertPriority.medium;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –æ–ø–∞—Å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
    if (condition.contains('thunderstorm') || condition.contains('thunder')) {
      hasStormConditions = true;
      warningMessage = '–û–∂–∏–¥–∞–µ—Ç—Å—è –≥—Ä–æ–∑–∞! –†—ã–±–∞–ª–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–ø–∞—Å–Ω–æ–π.';
      priority = WeatherAlertPriority.high;
    } else if (current.windKph > 50) {
      hasStormConditions = true;
      warningMessage = '–°–∏–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä ${(current.windKph / 3.6).toStringAsFixed(1)} –º/—Å. –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã –Ω–∞ –≤–æ–¥–µ!';
      priority = WeatherAlertPriority.high;
    } else if (condition.contains('heavy rain') || condition.contains('torrential')) {
      hasStormConditions = true;
      warningMessage = '–û–∂–∏–¥–∞–µ—Ç—Å—è —Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—Ç–ª–æ–∂–∏—Ç—å —Ä—ã–±–∞–ª–∫—É.';
      priority = WeatherAlertPriority.medium;
    }

    if (hasStormConditions) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —á–∞—Å–∞
      if (await _wasNotificationSentRecently(WeatherAlertType.stormWarning, 3)) {
        return;
      }

      final alert = WeatherAlertModel(
        id: _uuid.v4(),
        type: WeatherAlertType.stormWarning,
        title: '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ø–æ–≥–æ–¥–µ',
        message: warningMessage,
        priority: priority,
        createdAt: DateTime.now(),
        data: {
          'windKph': current.windKph,
          'condition': current.condition.text,
          'conditionCode': current.condition.code,
        },
      );

      await _sendWeatherAlert(alert);
      await _markNotificationSentRecently(WeatherAlertType.stormWarning);
    }
  }

  /// –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞
  Future<void> _sendDailyForecast() async {
    if (!_settings.dailyForecastEnabled) return;

    try {
      debugPrint('üìÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞...');

      final position = await _getCurrentPosition();
      if (position == null) return;

      final weather = await _weatherService.getForecast(
        latitude: position.latitude,
        longitude: position.longitude,
        days: 3,
      );

      final forecast = await _forecastService.getFishingForecast(
        weather: weather,
        latitude: position.latitude,
        longitude: position.longitude,
      );

      final activity = forecast['overallActivity'] as double;
      final scorePoints = forecast['scorePoints'] as int;
      final recommendation = forecast['recommendation'] as String;

      String activityText = '';
      if (activity >= 0.8) {
        activityText = '–û—Ç–ª–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è';
      } else if (activity >= 0.6) {
        activityText = '–•–æ—Ä–æ—à–∏–µ —É—Å–ª–æ–≤–∏—è';
      } else if (activity >= 0.4) {
        activityText = '–°—Ä–µ–¥–Ω–∏–µ —É—Å–ª–æ–≤–∏—è';
      } else {
        activityText = '–°–ª–∞–±—ã–µ —É—Å–ª–æ–≤–∏—è';
      }

      final temperature = weather.current.tempC.round();
      final windSpeed = (weather.current.windKph / 3.6).round();
      final pressure = (weather.current.pressureMb / 1.333).round();

      final alert = WeatherAlertModel(
        id: _uuid.v4(),
        type: WeatherAlertType.dailyForecast,
        title: '–ü—Ä–æ–≥–Ω–æ–∑ —Ä—ã–±–∞–ª–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è',
        message: '$activityText ($scorePoints/100)\nT: $temperature¬∞C, –í–µ—Ç–µ—Ä: $windSpeed –º/—Å, –î–∞–≤–ª–µ–Ω–∏–µ: $pressure –º–º',
        priority: WeatherAlertPriority.low,
        createdAt: DateTime.now(),
        data: {
          'activity': activity,
          'scorePoints': scorePoints,
          'recommendation': recommendation,
          'temperature': temperature,
          'windSpeed': windSpeed,
          'pressure': pressure,
        },
      );

      await _sendWeatherAlert(alert);

      // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      await _sendLocalNotification(
        '–ü—Ä–æ–≥–Ω–æ–∑ —Ä—ã–±–∞–ª–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è',
        '$activityText ($scorePoints/100)\nT: $temperature¬∞C, –í–µ—Ç–µ—Ä: $windSpeed –º/—Å',
        1000, // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
        'daily_forecast',
      );

    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞: $e');
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ payload –¥–ª—è —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  String _getPayloadForAlertType(WeatherAlertType type) {
    switch (type) {
      case WeatherAlertType.dailyForecast:
        return 'daily_forecast';
      case WeatherAlertType.pressureChange:
        return 'pressure_change';
      case WeatherAlertType.stormWarning:
        return 'storm_warning';
      case WeatherAlertType.favorableConditions:
        return 'favorable_conditions';
      default:
        return 'weather_alert';
    }
  }

  /// –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  Future<void> _sendLocalNotification(String title, String body, int id, [String? payload]) async {
    try {
      await _localNotifications.show(
        id,
        title,
        body,
        const NotificationDetails(
          android: AndroidNotificationDetails(
            'weather_alerts_channel',
            '–ü–æ–≥–æ–¥–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
            channelDescription: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –ø–æ–≥–æ–¥—ã –∏ —É—Å–ª–æ–≤–∏–π —Ä—ã–±–∞–ª–∫–∏',
            importance: Importance.high,
            priority: Priority.high,
            icon: '@mipmap/launcher_icon',
          ),
        ),
        payload: payload,
      );
      debugPrint('‚úÖ –õ–æ–∫–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: $title');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: $e');
    }
  }

  /// –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–≥–æ–¥–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  Future<void> _sendWeatherAlert(WeatherAlertModel weatherAlert) async {
    try {
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–≥–æ–¥–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –æ–±—â—É—é –º–æ–¥–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      final notification = NotificationModel(
        id: weatherAlert.id,
        title: weatherAlert.title,
        message: weatherAlert.message,
        type: _mapWeatherAlertTypeToNotificationType(weatherAlert.type),
        isRead: false,
        timestamp: weatherAlert.createdAt,
        data: weatherAlert.data,
      );

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      await _notificationService.addNotification(notification);

      // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      await _sendLocalNotification(
        weatherAlert.title,
        weatherAlert.message,
        weatherAlert.hashCode, // –ò—Å–ø–æ–ª—å–∑—É–µ–º hashCode –∫–∞–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
        _getPayloadForAlertType(weatherAlert.type),
      );

      debugPrint('‚úÖ –ü–æ–≥–æ–¥–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${weatherAlert.title}');

    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–≥–æ–¥–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: $e');
    }
  }

  /// –ú–∞–ø–∏–Ω–≥ —Ç–∏–ø–æ–≤ –ø–æ–≥–æ–¥–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –æ–±—â–∏–µ —Ç–∏–ø—ã
  NotificationType _mapWeatherAlertTypeToNotificationType(WeatherAlertType weatherType) {
    switch (weatherType) {
      case WeatherAlertType.pressureChange:
      case WeatherAlertType.windChange:
      case WeatherAlertType.temperatureChange:
        return NotificationType.weatherUpdate;
      case WeatherAlertType.favorableConditions:
      case WeatherAlertType.biteActivity:
        return NotificationType.biteForecast;
      case WeatherAlertType.stormWarning:
        return NotificationType.weatherUpdate;
      case WeatherAlertType.dailyForecast:
        return NotificationType.biteForecast;
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
  Future<Position?> _getCurrentPosition() async {
    try {
      bool serviceEnabled = await Geolocator.isLocationServiceEnabled();
      if (!serviceEnabled) return null;

      LocationPermission permission = await Geolocator.checkPermission();
      if (permission == LocationPermission.denied) {
        permission = await Geolocator.requestPermission();
        if (permission == LocationPermission.denied) return null;
      }

      if (permission == LocationPermission.deniedForever) return null;

      return await Geolocator.getCurrentPosition(desiredAccuracy: LocationAccuracy.high);
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏: $e');
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ü–∞–≤–ª–æ–¥–∞—Ä –∫–∞–∫ fallback
      return Position(
        longitude: 76.9574,
        latitude: 52.2962,
        timestamp: DateTime.now(),
        accuracy: 0,
        altitude: 0,
        altitudeAccuracy: 0,
        heading: 0,
        headingAccuracy: 0,
        speed: 0,
        speedAccuracy: 0,
      );
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è
  Future<bool> _wasNotificationSentToday(WeatherAlertType type) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final key = '${_lastNotificationTimeKey}${type.toString()}';
      final lastSentTimestamp = prefs.getInt(key);

      if (lastSentTimestamp == null) return false;

      final lastSentDate = DateTime.fromMillisecondsSinceEpoch(lastSentTimestamp);
      final today = DateTime.now();

      return lastSentDate.day == today.day &&
          lastSentDate.month == today.month &&
          lastSentDate.year == today.year;
    } catch (e) {
      return false;
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–æ (–≤ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —á–∞—Å—ã)
  Future<bool> _wasNotificationSentRecently(WeatherAlertType type, int hours) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final key = '${_lastNotificationTimeKey}${type.toString()}_recent';
      final lastSentTimestamp = prefs.getInt(key);

      if (lastSentTimestamp == null) return false;

      final lastSentTime = DateTime.fromMillisecondsSinceEpoch(lastSentTimestamp);
      final now = DateTime.now();

      return now.difference(lastSentTime).inHours < hours;
    } catch (e) {
      return false;
    }
  }

  /// –û—Ç–º–µ—Ç–∫–∞ –æ–± –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è
  Future<void> _markNotificationSentToday(WeatherAlertType type) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final key = '${_lastNotificationTimeKey}${type.toString()}';
      await prefs.setInt(key, DateTime.now().millisecondsSinceEpoch);
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: $e');
    }
  }

  /// –û—Ç–º–µ—Ç–∫–∞ –æ–± –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–µ–¥–∞–≤–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  Future<void> _markNotificationSentRecently(WeatherAlertType type) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final key = '${_lastNotificationTimeKey}${type.toString()}_recent';
      await prefs.setInt(key, DateTime.now().millisecondsSinceEpoch);
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –Ω–µ–¥–∞–≤–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: $e');
    }
  }

  /// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
  String _formatTime(DateTime dateTime) {
    return '${dateTime.hour.toString().padLeft(2, '0')}:${dateTime.minute.toString().padLeft(2, '0')}';
  }

  // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
  WeatherNotificationSettings get settings => _settings;

  /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  Future<void> updateSettings(WeatherNotificationSettings newSettings) async {
    _settings = newSettings;
    await _saveSettings();

    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–±—ã —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    if (_settings.enabled) {
      _startPeriodicChecks();
      await _scheduleDailyForecastWithLocalNotification();
    } else {
      _stopServices();
    }
  }

  /// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–ª—É–∂–±
  void _stopServices() {
    _periodicCheckTimer?.cancel();
    _dailyForecastTimer?.cancel();
    // –û—Ç–º–µ–Ω—è–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    _localNotifications.cancel(999);
  }

  /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≥–æ–¥—ã –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å
  Future<void> forceWeatherCheck() async {
    debugPrint('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≥–æ–¥—ã...');
    await _checkWeatherChanges();
  }

  /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞
  Future<void> forceDailyForecast() async {
    debugPrint('üìÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞...');
    await _sendDailyForecast();
  }

  /// –û—á–∏—Å—Ç–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  void dispose() {
    _stopServices();
  }
}