// –ü—É—Ç—å: lib/services/weather_notification_service.dart

import 'dart:async';
import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:uuid/uuid.dart';
import 'package:geolocator/geolocator.dart';
import '../models/weather_alert_model.dart';
import '../models/weather_api_model.dart';
import '../models/notification_model.dart';
import 'weather/weather_api_service.dart';
import '../services/fishing_forecast_service.dart';
import '../services/notification_service.dart';

class WeatherNotificationService {
  static final WeatherNotificationService _instance =
  WeatherNotificationService._internal();
  factory WeatherNotificationService() => _instance;
  WeatherNotificationService._internal();

  final WeatherApiService _weatherService = WeatherApiService();
  final FishingForecastService _forecastService = FishingForecastService();
  final NotificationService _notificationService = NotificationService();
  final Uuid _uuid = const Uuid();

  // –¢–∞–π–º–µ—Ä—ã –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
  Timer? _periodicCheckTimer;
  Timer? _dailyForecastTimer;

  // –ö—ç—à –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
  WeatherApiResponse? _lastWeatherData;
  WeatherNotificationSettings _settings = const WeatherNotificationSettings();

  // –ö–ª—é—á–∏ –¥–ª—è SharedPreferences
  static const String _settingsKey = 'weather_notification_settings';
  static const String _lastWeatherKey = 'last_weather_data';
  static const String _lastNotificationTimeKey = 'last_notification_time_';
  static const String _languageKey = 'app_language';

  // –¢–µ–∫—É—â–∏–π —è–∑—ã–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  String _currentLanguage = 'ru';

  // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–ª—é—á –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä–∞ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
  static GlobalKey<NavigatorState>? _navigatorKey;

  // –°—Ç–∞—Ç–∏—á–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  static const Map<String, Map<String, String>> _translations = {
    'ru': {
      // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–≤–ª–µ–Ω–∏—è
      'weather_pressure_change_title': '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–≥–æ –¥–∞–≤–ª–µ–Ω–∏—è',
      'weather_pressure_rising': '—Ä–∞—Å—Ç–µ—Ç',
      'weather_pressure_falling': '–ø–∞–¥–∞–µ—Ç',
      'weather_pressure_bite_improve': '—É–ª—É—á—à–µ–Ω–∏–µ –∫–ª–µ–≤–∞',
      'weather_pressure_bite_worsen': '—É—Ö—É–¥—à–µ–Ω–∏–µ –∫–ª–µ–≤–∞',

      // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
      'weather_temp_change_title': '–†–µ–∑–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã',
      'weather_temp_rising': '–ø–æ–≤—ã—à–∞–µ—Ç—Å—è',
      'weather_temp_falling': '–ø–æ–Ω–∏–∂–∞–µ—Ç—Å—è',

      // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞
      'weather_wind_change_title': '–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–∏–ª—ã –≤–µ—Ç—Ä–∞',
      'weather_wind_increasing': '—É—Å–∏–ª–∏–≤–∞–µ—Ç—Å—è',
      'weather_wind_decreasing': '–æ—Å–ª–∞–±–µ–≤–∞–µ—Ç',

      // –ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
      'weather_favorable_title': '–û—Ç–ª–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ä—ã–±–∞–ª–∫–∏!',

      // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ —à—Ç–æ—Ä–º–µ
      'weather_storm_title': '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ø–æ–≥–æ–¥–µ',
      'weather_storm_thunder': '–û–∂–∏–¥–∞–µ—Ç—Å—è –≥—Ä–æ–∑–∞! –†—ã–±–∞–ª–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–ø–∞—Å–Ω–æ–π.',
      'weather_storm_rain': '–û–∂–∏–¥–∞–µ—Ç—Å—è —Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—Ç–ª–æ–∂–∏—Ç—å —Ä—ã–±–∞–ª–∫—É.',

      // –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑
      'weather_daily_title': '–ü—Ä–æ–≥–Ω–æ–∑ —Ä—ã–±–∞–ª–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è',
      'weather_conditions_excellent': '–û—Ç–ª–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è',
      'weather_conditions_good': '–•–æ—Ä–æ—à–∏–µ —É—Å–ª–æ–≤–∏—è',
      'weather_conditions_fair': '–°—Ä–µ–¥–Ω–∏–µ —É—Å–ª–æ–≤–∏—è',
      'weather_conditions_poor': '–°–ª–∞–±—ã–µ —É—Å–ª–æ–≤–∏—è',

      // –û–±—â–∏–µ
      'weather_best_time': '–õ—É—á—à–µ–µ –≤—Ä–µ–º—è',
      'weather_forecast_score': '–ü—Ä–æ–≥–Ω–æ–∑ –∫–ª–µ–≤–∞',
      'weather_points_of': '–±–∞–ª–ª–æ–≤ –∏–∑',
      'weather_temp_label': 'T',
      'weather_wind_label': '–í–µ—Ç–µ—Ä',
      'weather_pressure_label': '–î–∞–≤–ª–µ–Ω–∏–µ',
      'weather_pressure_unit': '–º–º —Ä—Ç.—Å—Ç.',
      'weather_wind_unit': '–º/—Å',
      'weather_fish_behavior_change': '–†—ã–±–∞ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–≤–µ–¥–µ–Ω–∏–µ.',
      'weather_speed_changed_by': '–°–∫–æ—Ä–æ—Å—Ç—å –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –Ω–∞',
      'weather_be_careful_on_water': '–ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã –Ω–∞ –≤–æ–¥–µ!',
      'weather_strong_wind': '–°–∏–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä',
    },
    'en': {
      // Pressure change
      'weather_pressure_change_title': 'Atmospheric Pressure Change',
      'weather_pressure_rising': 'rising',
      'weather_pressure_falling': 'falling',
      'weather_pressure_bite_improve': 'bite improvement',
      'weather_pressure_bite_worsen': 'bite worsening',

      // Temperature change
      'weather_temp_change_title': 'Sharp Temperature Change',
      'weather_temp_rising': 'rising',
      'weather_temp_falling': 'falling',

      // Wind change
      'weather_wind_change_title': 'Wind Speed Change',
      'weather_wind_increasing': 'increasing',
      'weather_wind_decreasing': 'decreasing',

      // Favorable conditions
      'weather_favorable_title': 'Great Fishing Conditions!',

      // Storm warnings
      'weather_storm_title': 'Weather Warning',
      'weather_storm_thunder': 'Thunderstorm expected! Fishing may be dangerous.',
      'weather_storm_rain': 'Heavy rain expected. Recommended to postpone fishing.',

      // Daily forecast
      'weather_daily_title': 'Today\'s Fishing Forecast',
      'weather_conditions_excellent': 'Excellent conditions',
      'weather_conditions_good': 'Good conditions',
      'weather_conditions_fair': 'Fair conditions',
      'weather_conditions_poor': 'Poor conditions',

      // Common
      'weather_best_time': 'Best time',
      'weather_forecast_score': 'Bite forecast',
      'weather_points_of': 'points out of',
      'weather_temp_label': 'T',
      'weather_wind_label': 'Wind',
      'weather_pressure_label': 'Pressure',
      'weather_pressure_unit': 'mmHg',
      'weather_wind_unit': 'm/s',
      'weather_fish_behavior_change': 'Fish behavior may change.',
      'weather_speed_changed_by': 'Speed changed by',
      'weather_be_careful_on_water': 'Be careful on water!',
      'weather_strong_wind': 'Strong wind',
    },
  };

  /// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–ª—é—á–∞ –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä–∞ –∏–∑ main.dart (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
  static void setNavigatorKey(GlobalKey<NavigatorState> navigatorKey) {
    _navigatorKey = navigatorKey;
    debugPrint('üîë NavigatorKey —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è WeatherNotificationService');
  }

  /// –°—Ç–∞—Ç–∏—á–Ω–∞—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  String _t(String key) {
    return _translations[_currentLanguage]?[key] ??
        _translations['ru']?[key] ??
        key;
  }

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
  Future<void> initialize() async {
    debugPrint('üå§Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–≥–æ–¥–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');

    await _loadLanguage();
    await _loadSettings();
    await _loadLastWeatherData();

    if (_settings.enabled) {
      _startPeriodicChecks();
      _scheduleDailyForecast();
    }

    debugPrint('‚úÖ –°–µ—Ä–≤–∏—Å –ø–æ–≥–æ–¥–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (—è–∑—ã–∫: $_currentLanguage)');
  }

  /// –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —è–∑—ã–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  Future<void> _loadLanguage() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      _currentLanguage = prefs.getString(_languageKey) ?? 'ru';
      debugPrint('üåç –ó–∞–≥—Ä—É–∂–µ–Ω —è–∑—ã–∫ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: $_currentLanguage');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —è–∑—ã–∫–∞: $e');
      _currentLanguage = 'ru'; // Fallback
    }
  }

  /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Å–º–µ–Ω–µ —è–∑—ã–∫–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏)
  Future<void> updateLanguage(String languageCode) async {
    _currentLanguage = languageCode;
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString(_languageKey, languageCode);
    debugPrint('üåç –Ø–∑—ã–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω: $languageCode');
  }

  /// –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ SharedPreferences
  Future<void> _loadSettings() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final settingsJson = prefs.getString(_settingsKey);

      if (settingsJson != null) {
        final settingsMap = json.decode(settingsJson);
        _settings = WeatherNotificationSettings.fromJson(settingsMap);
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–≥–æ–¥–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: $e');
    }
  }

  /// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  Future<void> _saveSettings() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final settingsJson = json.encode(_settings.toJson());
      await prefs.setString(_settingsKey, settingsJson);
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–≥–æ–¥–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: $e');
    }
  }

  /// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ
  Future<void> _loadLastWeatherData() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final lastWeatherJson = prefs.getString(_lastWeatherKey);

      if (lastWeatherJson != null) {
        final lastWeatherMap = json.decode(lastWeatherJson);
        _lastWeatherData = WeatherApiResponse.fromJson(lastWeatherMap);
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ: $e');
    }
  }

  /// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ
  Future<void> _saveLastWeatherData(WeatherApiResponse weatherData) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final weatherJson = json.encode(weatherData.toJson());
      await prefs.setString(_lastWeatherKey, weatherJson);
      _lastWeatherData = weatherData;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ: $e');
    }
  }

  /// –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø–æ–≥–æ–¥—ã
  void _startPeriodicChecks() {
    _periodicCheckTimer?.cancel();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
    _periodicCheckTimer = Timer.periodic(const Duration(minutes: 30), (timer) {
      _checkWeatherChanges();
    });

    // –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
    Timer(const Duration(minutes: 1), () {
      _checkWeatherChanges();
    });
  }

  /// –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—ã–π —Ç–∞–π–º–µ—Ä
  void _scheduleDailyForecast() {
    _dailyForecastTimer?.cancel();

    if (!_settings.dailyForecastEnabled) return;

    final now = DateTime.now();
    final scheduledTime = DateTime(
      now.year,
      now.month,
      now.day,
      _settings.dailyForecastHour,
      _settings.dailyForecastMinute,
    );

    // –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ, –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    final nextScheduledTime =
    scheduledTime.isBefore(now)
        ? scheduledTime.add(const Duration(days: 1))
        : scheduledTime;

    final delay = nextScheduledTime.difference(now);

    debugPrint(
      'üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞: ${nextScheduledTime.toString()}',
    );

    _dailyForecastTimer = Timer(delay, () {
      _sendDailyForecast();
      _scheduleDailyForecast(); // –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
    });
  }

  /// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ–≥–æ–¥—ã
  Future<void> _checkWeatherChanges() async {
    if (!_settings.enabled) return;

    try {
      debugPrint('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ–≥–æ–¥—ã...');

      final position = await _getCurrentPosition();
      if (position == null) return;

      final currentWeather = await _weatherService.getForecast(
        latitude: position.latitude,
        longitude: position.longitude,
        days: 1,
      );

      if (_lastWeatherData != null) {
        await _analyzeWeatherChanges(_lastWeatherData!, currentWeather);
      }

      await _checkFavorableConditions(currentWeather, position);
      await _checkStormWarning(currentWeather);

      await _saveLastWeatherData(currentWeather);
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ–≥–æ–¥—ã: $e');
    }
  }

  /// –ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ–≥–æ–¥—ã
  Future<void> _analyzeWeatherChanges(
      WeatherApiResponse oldWeather,
      WeatherApiResponse newWeather,
      ) async {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–≤–ª–µ–Ω–∏—è
    if (_settings.pressureChangeEnabled) {
      await _checkPressureChange(oldWeather.current, newWeather.current);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
    if (_settings.temperatureChangeEnabled) {
      await _checkTemperatureChange(oldWeather.current, newWeather.current);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–µ—Ç—Ä–∞
    if (_settings.windChangeEnabled) {
      await _checkWindChange(oldWeather.current, newWeather.current);
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–≤–ª–µ–Ω–∏—è
  Future<void> _checkPressureChange(
      Current oldCurrent,
      Current newCurrent,
      ) async {
    final oldPressureMmHg = oldCurrent.pressureMb / 1.333;
    final newPressureMmHg = newCurrent.pressureMb / 1.333;
    final pressureChange = (newPressureMmHg - oldPressureMmHg).abs();

    if (pressureChange >= _settings.pressureThreshold) {
      final isRising = newPressureMmHg > oldPressureMmHg;
      final trend = isRising ? _t('weather_pressure_rising') : _t('weather_pressure_falling');
      final impact = isRising ? _t('weather_pressure_bite_improve') : _t('weather_pressure_bite_worsen');
      final pressureUnit = _t('weather_pressure_unit');

      final title = _t('weather_pressure_change_title');
      final message = '${_t('weather_pressure_label')} $trend ${_t('weather_pressure_label').toLowerCase()} ${pressureChange.toStringAsFixed(1)} $pressureUnit. ${_t('weather_forecast_score')}: $impact.';

      final alert = WeatherAlertModel(
        id: _uuid.v4(),
        type: WeatherAlertType.pressureChange,
        title: title,
        message: message,
        priority: pressureChange > 10
            ? WeatherAlertPriority.high
            : WeatherAlertPriority.medium,
        createdAt: DateTime.now(),
        data: {
          '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–≤–ª–µ–Ω–∏—è': '${pressureChange.toStringAsFixed(1)} $pressureUnit',
          '–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ': isRising ? '–ü–æ–≤—ã—à–µ–Ω–∏–µ' : '–ü–æ–Ω–∏–∂–µ–Ω–∏–µ',
          '–í–ª–∏—è–Ω–∏–µ –Ω–∞ –∫–ª–µ–≤': isRising ? '–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ' : '–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ',
        },
      );

      await _sendWeatherAlert(alert);
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
  Future<void> _checkTemperatureChange(
      Current oldCurrent,
      Current newCurrent,
      ) async {
    final tempChange = (newCurrent.tempC - oldCurrent.tempC).abs();

    if (tempChange >= _settings.temperatureThreshold) {
      final isRising = newCurrent.tempC > oldCurrent.tempC;
      final trend = isRising ? _t('weather_temp_rising') : _t('weather_temp_falling');

      final title = _t('weather_temp_change_title');
      final message = '${_t('weather_temp_label')}—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ $trend –Ω–∞ ${tempChange.toStringAsFixed(1)}¬∞C. ${_t('weather_fish_behavior_change')}';

      final alert = WeatherAlertModel(
        id: _uuid.v4(),
        type: WeatherAlertType.temperatureChange,
        title: title,
        message: message,
        priority: WeatherAlertPriority.medium,
        createdAt: DateTime.now(),
        data: {
          '–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã': '${tempChange.toStringAsFixed(1)}¬∞C',
          '–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ': isRising ? '–ü–æ–≤—ã—à–µ–Ω–∏–µ' : '–ü–æ–Ω–∏–∂–µ–Ω–∏–µ',
          '–ù–æ–≤–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞': '${newCurrent.tempC.round()}¬∞C',
        },
      );

      await _sendWeatherAlert(alert);
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–µ—Ç—Ä–∞
  Future<void> _checkWindChange(Current oldCurrent, Current newCurrent) async {
    final windSpeedChange = (newCurrent.windKph - oldCurrent.windKph).abs();

    if (windSpeedChange >= _settings.windSpeedThreshold) {
      final isIncreasing = newCurrent.windKph > oldCurrent.windKph;
      final trend = isIncreasing ? _t('weather_wind_increasing') : _t('weather_wind_decreasing');
      final windUnit = _t('weather_wind_unit');

      final title = _t('weather_wind_change_title');
      final message = '${_t('weather_wind_label')} $trend. ${_t('weather_speed_changed_by')} ${(windSpeedChange / 3.6).toStringAsFixed(1)} $windUnit.';

      final alert = WeatherAlertModel(
        id: _uuid.v4(),
        type: WeatherAlertType.windChange,
        title: title,
        message: message,
        priority: WeatherAlertPriority.low,
        createdAt: DateTime.now(),
        data: {
          '–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤–µ—Ç—Ä–∞': '${(windSpeedChange / 3.6).toStringAsFixed(1)} $windUnit',
          '–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è': isIncreasing ? '–£—Å–∏–ª–µ–Ω–∏–µ' : '–û—Å–ª–∞–±–ª–µ–Ω–∏–µ',
          '–¢–µ–∫—É—â–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å': '${(newCurrent.windKph / 3.6).toStringAsFixed(1)} $windUnit',
        },
      );

      await _sendWeatherAlert(alert);
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –¥–ª—è —Ä—ã–±–∞–ª–∫–∏
  Future<void> _checkFavorableConditions(
      WeatherApiResponse weather,
      Position position,
      ) async {
    if (!_settings.favorableConditionsEnabled) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ –º—ã —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ö–æ—Ä–æ—à–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö —Å–µ–≥–æ–¥–Ω—è
    if (await _wasNotificationSentToday(WeatherAlertType.favorableConditions)) {
      return;
    }

    try {
      final forecast = await _forecastService.getFishingForecast(
        weather: weather,
        latitude: position.latitude,
        longitude: position.longitude,
      );

      final activity = forecast['overallActivity'] as double;
      final scorePoints = forecast['scorePoints'] as int;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—Ç–ª–∏—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö (80+ –±–∞–ª–ª–æ–≤)
      if (activity >= 0.8) {
        final bestWindows = forecast['bestTimeWindows'] as List<dynamic>;
        final nextWindow = bestWindows.isNotEmpty ? bestWindows.first : null;

        String timeInfo = '';
        if (nextWindow != null) {
          final startTime = DateTime.parse(nextWindow['startTime']);
          final endTime = DateTime.parse(nextWindow['endTime']);
          timeInfo = ' ${_t('weather_best_time')}: ${_formatTime(startTime)} - ${_formatTime(endTime)}';
        }

        final title = _t('weather_favorable_title');
        final message = '${_t('weather_forecast_score')}: $scorePoints ${_t('weather_points_of')} 100.$timeInfo';

        final alert = WeatherAlertModel(
          id: _uuid.v4(),
          type: WeatherAlertType.favorableConditions,
          title: title,
          message: message,
          priority: WeatherAlertPriority.medium,
          createdAt: DateTime.now(),
          data: {
            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±–∏—Ä–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ–∑–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            '–†–µ–π—Ç–∏–Ω–≥ —Ä—ã–±–∞–ª–∫–∏': '$scorePoints –±–∞–ª–ª–æ–≤ –∏–∑ 100',
            '–ö–∞—á–µ—Å—Ç–≤–æ —É—Å–ª–æ–≤–∏–π': activity >= 0.9 ? '–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω—ã–µ' : '–û—Ç–ª–∏—á–Ω—ã–µ',
            '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å': '–ê–∫—Ç–∏–≤–Ω–∞—è —Ä—ã–±–∞–ª–∫–∞',
            // –£–±–∏—Ä–∞–µ–º: activity, bestWindows (—Å–ª–æ–∂–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞)
          },
        );

        await _sendWeatherAlert(alert);
        await _markNotificationSentToday(WeatherAlertType.favorableConditions);
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π: $e');
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –æ —à—Ç–æ—Ä–º–µ
  Future<void> _checkStormWarning(WeatherApiResponse weather) async {
    if (!_settings.stormWarningEnabled) return;

    final current = weather.current;
    final condition = current.condition.text.toLowerCase();

    bool hasStormConditions = false;
    String warningMessage = '';
    WeatherAlertPriority priority = WeatherAlertPriority.medium;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –æ–ø–∞—Å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
    if (condition.contains('thunderstorm') || condition.contains('thunder')) {
      hasStormConditions = true;
      warningMessage = _t('weather_storm_thunder');
      priority = WeatherAlertPriority.high;
    } else if (current.windKph > 50) {
      hasStormConditions = true;
      final windSpeed = (current.windKph / 3.6).toStringAsFixed(1);
      final windUnit = _t('weather_wind_unit');
      warningMessage = '${_t('weather_strong_wind')} $windSpeed $windUnit. ${_t('weather_be_careful_on_water')}';
      priority = WeatherAlertPriority.high;
    } else if (condition.contains('heavy rain') ||
        condition.contains('torrential')) {
      hasStormConditions = true;
      warningMessage = _t('weather_storm_rain');
      priority = WeatherAlertPriority.medium;
    }

    if (hasStormConditions) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —á–∞—Å–∞
      if (await _wasNotificationSentRecently(
        WeatherAlertType.stormWarning,
        3,
      )) {
        return;
      }

      final title = _t('weather_storm_title');

      final alert = WeatherAlertModel(
        id: _uuid.v4(),
        type: WeatherAlertType.stormWarning,
        title: title,
        message: warningMessage,
        priority: priority,
        createdAt: DateTime.now(),
        data: {
          '–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞': '${(current.windKph / 3.6).toStringAsFixed(1)} –º/—Å',
          '–¢–∏–ø –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π': current.condition.text,
          '–£—Ä–æ–≤–µ–Ω—å –æ–ø–∞—Å–Ω–æ—Å—Ç–∏': priority == WeatherAlertPriority.high ? '–í—ã—Å–æ–∫–∏–π' : '–°—Ä–µ–¥–Ω–∏–π',
        },
      );

      await _sendWeatherAlert(alert);
      await _markNotificationSentRecently(WeatherAlertType.stormWarning);
    }
  }

  /// –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞
  Future<void> _sendDailyForecast() async {
    if (!_settings.dailyForecastEnabled) return;

    try {
      debugPrint('üìÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞...');

      final position = await _getCurrentPosition();
      if (position == null) return;

      final weather = await _weatherService.getForecast(
        latitude: position.latitude,
        longitude: position.longitude,
        days: 3,
      );

      final forecast = await _forecastService.getFishingForecast(
        weather: weather,
        latitude: position.latitude,
        longitude: position.longitude,
      );

      final activity = forecast['overallActivity'] as double;
      final scorePoints = forecast['scorePoints'] as int;

      String activityText = '';
      if (activity >= 0.8) {
        activityText = _t('weather_conditions_excellent');
      } else if (activity >= 0.6) {
        activityText = _t('weather_conditions_good');
      } else if (activity >= 0.4) {
        activityText = _t('weather_conditions_fair');
      } else {
        activityText = _t('weather_conditions_poor');
      }

      final temperature = weather.current.tempC.round();
      final windSpeed = (weather.current.windKph / 3.6).round();
      final pressure = (weather.current.pressureMb / 1.333).round();

      final tempLabel = _t('weather_temp_label');
      final windLabel = _t('weather_wind_label');
      final pressureLabel = _t('weather_pressure_label');
      final windUnit = _t('weather_wind_unit');
      final pressureUnit = _t('weather_pressure_unit');

      final title = _t('weather_daily_title');
      final message = '$activityText ($scorePoints/100)\n$tempLabel: $temperature¬∞C, $windLabel: $windSpeed $windUnit, $pressureLabel: $pressure $pressureUnit';

      final alert = WeatherAlertModel(
        id: _uuid.v4(),
        type: WeatherAlertType.dailyForecast,
        title: title,
        message: message,
        priority: WeatherAlertPriority.low,
        createdAt: DateTime.now(),
        data: {
          // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–º–µ–Ω—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è –Ω–∞ –ø–æ–Ω—è—Ç–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
          '–ë–∞–ª–ª—ã —Ä—ã–±–∞–ª–∫–∏': '$scorePoints –±–∞–ª–ª–æ–≤',
          '–ö–∞—á–µ—Å—Ç–≤–æ —É—Å–ª–æ–≤–∏–π': activityText,
          '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞': '$temperature¬∞C',
          '–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞': '$windSpeed $windUnit',
          '–ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ': '$pressure $pressureUnit',
          // –£–±–∏—Ä–∞–µ–º: activity, temperature, windSpeed, pressure (—Å—ã—Ä—ã–µ —á–∏—Å–ª–∞)
        },
      );

      await _sendWeatherAlert(alert);
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞: $e');
    }
  }

  /// –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–≥–æ–¥–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  Future<void> _sendWeatherAlert(WeatherAlertModel weatherAlert) async {
    try {
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–≥–æ–¥–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –æ–±—â—É—é –º–æ–¥–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      final notification = NotificationModel(
        id: weatherAlert.id,
        title: weatherAlert.title,
        message: weatherAlert.message,
        type: _mapWeatherAlertTypeToNotificationType(weatherAlert.type),
        isRead: false,
        timestamp: weatherAlert.createdAt,
        data: weatherAlert.data,
      );

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¢–û–õ–¨–ö–û —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      await _notificationService.addNotification(notification);

      debugPrint('‚úÖ –ü–æ–≥–æ–¥–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${weatherAlert.title}');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–≥–æ–¥–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: $e');
    }
  }

  /// –ú–∞–ø–∏–Ω–≥ —Ç–∏–ø–æ–≤ –ø–æ–≥–æ–¥–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –æ–±—â–∏–µ —Ç–∏–ø—ã
  NotificationType _mapWeatherAlertTypeToNotificationType(
      WeatherAlertType weatherType,
      ) {
    switch (weatherType) {
      case WeatherAlertType.pressureChange:
      case WeatherAlertType.windChange:
      case WeatherAlertType.temperatureChange:
        return NotificationType.weatherUpdate;
      case WeatherAlertType.favorableConditions:
      case WeatherAlertType.biteActivity:
        return NotificationType.biteForecast;
      case WeatherAlertType.stormWarning:
        return NotificationType.weatherUpdate;
      case WeatherAlertType.dailyForecast:
        return NotificationType.biteForecast;
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
  Future<Position?> _getCurrentPosition() async {
    try {
      bool serviceEnabled = await Geolocator.isLocationServiceEnabled();
      if (!serviceEnabled) return null;

      LocationPermission permission = await Geolocator.checkPermission();
      if (permission == LocationPermission.denied) {
        permission = await Geolocator.requestPermission();
        if (permission == LocationPermission.denied) return null;
      }

      if (permission == LocationPermission.deniedForever) return null;

      return await Geolocator.getCurrentPosition(
        desiredAccuracy: LocationAccuracy.high,
      );
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏: $e');
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ü–∞–≤–ª–æ–¥–∞—Ä –∫–∞–∫ fallback
      return Position(
        longitude: 76.9574,
        latitude: 52.2962,
        timestamp: DateTime.now(),
        accuracy: 0,
        altitude: 0,
        altitudeAccuracy: 0,
        heading: 0,
        headingAccuracy: 0,
        speed: 0,
        speedAccuracy: 0,
      );
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è
  Future<bool> _wasNotificationSentToday(WeatherAlertType type) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final key = '${_lastNotificationTimeKey}${type.toString()}';
      final lastSentTimestamp = prefs.getInt(key);

      if (lastSentTimestamp == null) return false;

      final lastSentDate = DateTime.fromMillisecondsSinceEpoch(
        lastSentTimestamp,
      );
      final today = DateTime.now();

      return lastSentDate.day == today.day &&
          lastSentDate.month == today.month &&
          lastSentDate.year == today.year;
    } catch (e) {
      return false;
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–æ (–≤ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —á–∞—Å—ã)
  Future<bool> _wasNotificationSentRecently(
      WeatherAlertType type,
      int hours,
      ) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final key = '${_lastNotificationTimeKey}${type.toString()}_recent';
      final lastSentTimestamp = prefs.getInt(key);

      if (lastSentTimestamp == null) return false;

      final lastSentTime = DateTime.fromMillisecondsSinceEpoch(
        lastSentTimestamp,
      );
      final now = DateTime.now();

      return now.difference(lastSentTime).inHours < hours;
    } catch (e) {
      return false;
    }
  }

  /// –û—Ç–º–µ—Ç–∫–∞ –æ–± –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è
  Future<void> _markNotificationSentToday(WeatherAlertType type) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final key = '${_lastNotificationTimeKey}${type.toString()}';
      await prefs.setInt(key, DateTime.now().millisecondsSinceEpoch);
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: $e');
    }
  }

  /// –û—Ç–º–µ—Ç–∫–∞ –æ–± –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–µ–¥–∞–≤–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  Future<void> _markNotificationSentRecently(WeatherAlertType type) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final key = '${_lastNotificationTimeKey}${type.toString()}_recent';
      await prefs.setInt(key, DateTime.now().millisecondsSinceEpoch);
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –Ω–µ–¥–∞–≤–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: $e');
    }
  }

  /// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
  String _formatTime(DateTime dateTime) {
    return '${dateTime.hour.toString().padLeft(2, '0')}:${dateTime.minute.toString().padLeft(2, '0')}';
  }

  // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
  WeatherNotificationSettings get settings => _settings;

  /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  Future<void> updateSettings(WeatherNotificationSettings newSettings) async {
    _settings = newSettings;
    await _saveSettings();

    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–±—ã —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    if (_settings.enabled) {
      _startPeriodicChecks();
      _scheduleDailyForecast();
    } else {
      _stopServices();
    }
  }

  /// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–ª—É–∂–±
  void _stopServices() {
    _periodicCheckTimer?.cancel();
    _dailyForecastTimer?.cancel();
  }

  /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≥–æ–¥—ã –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å
  Future<void> forceWeatherCheck() async {
    debugPrint('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≥–æ–¥—ã...');
    await _checkWeatherChanges();
  }

  /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞
  Future<void> forceDailyForecast() async {
    debugPrint('üìÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞...');
    await _sendDailyForecast();
  }

  /// –û—á–∏—Å—Ç–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  void dispose() {
    _stopServices();
  }
}