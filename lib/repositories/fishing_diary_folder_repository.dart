// File: lib/repositories/fishing_diary_folder_repository.dart (New file)

import 'package:flutter/foundation.dart';
import 'package:uuid/uuid.dart';
import '../models/fishing_diary_folder_model.dart';
import '../models/isar/fishing_diary_folder_entity.dart';
import '../services/isar_service.dart';
import '../services/offline/sync_service.dart';
import '../services/firebase/firebase_service.dart';
import '../utils/network_utils.dart';

class FishingDiaryFolderRepository {
  static final FishingDiaryFolderRepository _instance = FishingDiaryFolderRepository._internal();

  factory FishingDiaryFolderRepository() {
    return _instance;
  }

  FishingDiaryFolderRepository._internal();

  final IsarService _isarService = IsarService.instance;
  final SyncService _syncService = SyncService.instance;
  final FirebaseService _firebaseService = FirebaseService();

  // –ö—ç—à –¥–ª—è –ø–∞–ø–æ–∫
  static List<FishingDiaryFolderModel>? _cachedFolders;
  static DateTime? _cacheTimestamp;
  static const Duration _cacheValidity = Duration(minutes: 2);

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–∞–ø–æ–∫ –¥–Ω–µ–≤–Ω–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<List<FishingDiaryFolderModel>> getUserFishingDiaryFolders() async {
    try {
      final userId = _firebaseService.currentUserId;
      if (userId == null || userId.isEmpty) {
        return [];
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
      if (_cachedFolders != null && _cacheTimestamp != null) {
        final cacheAge = DateTime.now().difference(_cacheTimestamp!);
        if (cacheAge < _cacheValidity) {
          return _cachedFolders!;
        } else {
          clearCache();
        }
      }

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Isar
      final isarFolders = await _isarService.getAllFishingDiaryFolders();

      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–æ–¥–µ–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
      final folders = isarFolders.map((entity) => _entityToModel(entity)).toList();

      // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      _cachedFolders = folders;
      _cacheTimestamp = DateTime.now();

      // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –µ—Å–ª–∏ –æ–Ω–ª–∞–π–Ω
      final isOnline = await NetworkUtils.isNetworkAvailable();
      if (isOnline) {
        _performBackgroundSync('getUserFolders');
      }

      return folders;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞–ø–æ–∫ –¥–Ω–µ–≤–Ω–∏–∫–∞: $e');
      return [];
    }
  }

  /// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –ø–∞–ø–∫–∏ –¥–Ω–µ–≤–Ω–∏–∫–∞
  Future<String> addFishingDiaryFolder(FishingDiaryFolderModel folder) async {
    try {
      final userId = _firebaseService.currentUserId;
      if (userId == null || userId.isEmpty) {
        throw Exception('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
      final folderId = folder.id.isEmpty ? const Uuid().v4() : folder.id;

      // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –ø–∞–ø–∫–∏ —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º ID –∏ UserID
      final folderToAdd = folder.copyWith(
        id: folderId,
        userId: userId,
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      );

      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ Isar entity –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
      final entity = _modelToEntity(folderToAdd);
      entity.isSynced = false;
      entity.markedForDeletion = false;

      await _isarService.insertFishingDiaryFolder(entity);

      // –ï—Å–ª–∏ –æ–Ω–ª–∞–π–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
      final isOnline = await NetworkUtils.isNetworkAvailable();
      if (isOnline) {
        _syncService.syncFishingDiaryFoldersToFirebase().then((_) {
          // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞
        }).catchError((e) {
          debugPrint('‚ùå –û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–∞–ø–æ–∫: $e');
        });
      }

      // –û—á–∏—â–∞–µ–º –∫—ç—à
      clearCache();

      return folderId;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞–ø–∫–∏ –¥–Ω–µ–≤–Ω–∏–∫–∞: $e');
      rethrow;
    }
  }

  /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–Ω–µ–≤–Ω–∏–∫–∞
  Future<void> updateFishingDiaryFolder(FishingDiaryFolderModel folder) async {
    try {
      final userId = _firebaseService.currentUserId;
      if (userId == null || userId.isEmpty) {
        throw Exception('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      }

      if (folder.id.isEmpty) {
        throw Exception('ID –ø–∞–ø–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
      }

      // –ù–∞—Ö–æ–¥–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–∞–ø–∫—É –≤ Isar
      final existingEntity = await _isarService.getFishingDiaryFolderByFirebaseId(folder.id);
      if (existingEntity == null) {
        throw Exception('–ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ');
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
      final updatedEntity = _modelToEntity(folder.copyWith(updatedAt: DateTime.now()));
      updatedEntity.id = existingEntity.id; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π ID
      updatedEntity.firebaseId = folder.id; // Firebase ID
      updatedEntity.isSynced = false;
      updatedEntity.markedForDeletion = false;

      await _isarService.updateFishingDiaryFolder(updatedEntity);

      // –ï—Å–ª–∏ –æ–Ω–ª–∞–π–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
      final isOnline = await NetworkUtils.isNetworkAvailable();
      if (isOnline) {
        _syncService.syncFishingDiaryFoldersToFirebase().then((_) {
          // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞
        }).catchError((e) {
          debugPrint('‚ùå –û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–∞–ø–æ–∫: $e');
        });
      }

      // –û—á–∏—â–∞–µ–º –∫—ç—à
      clearCache();
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞–ø–∫–∏ –¥–Ω–µ–≤–Ω–∏–∫–∞: $e');
      rethrow;
    }
  }

  /// –£–¥–∞–ª–µ–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–Ω–µ–≤–Ω–∏–∫–∞
  Future<void> deleteFishingDiaryFolder(String folderId, {bool moveEntriesToRoot = true}) async {
    try {
      if (folderId.isEmpty) {
        throw Exception('ID –ø–∞–ø–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
      }

      final entity = await _isarService.getFishingDiaryFolderByFirebaseId(folderId);
      if (entity == null) {
        throw Exception('–ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ');
      }

      // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, –ø–µ—Ä–µ–º–µ—â–∞–µ–º –∑–∞–ø–∏—Å–∏ –≤ –∫–æ—Ä–µ–Ω—å
      if (moveEntriesToRoot) {
        final entriesInFolder = await _isarService.getFishingDiaryEntriesByFolderId(folderId);
        for (final entry in entriesInFolder) {
          entry.folderId = null;
          entry.markAsModified();
          await _isarService.updateFishingDiaryEntry(entry);
        }
        debugPrint('üìÅ –ü–µ—Ä–µ–º–µ—â–µ–Ω–æ ${entriesInFolder.length} –∑–∞–ø–∏—Å–µ–π –≤ –∫–æ—Ä–µ–Ω—å');
      }

      final isOnline = await NetworkUtils.isNetworkAvailable();
      bool deletionSuccessful = false;

      if (isOnline) {
        // –û–ù–õ–ê–ô–ù –†–ï–ñ–ò–ú: –°—Ä–∞–∑—É —É–¥–∞–ª—è–µ–º –∏–∑ Firebase –∏ Isar
        try {
          deletionSuccessful = await _syncService.deleteFishingDiaryFolderByFirebaseId(folderId);

          if (deletionSuccessful) {
            debugPrint('‚úÖ –û–Ω–ª–∞–π–Ω —É–¥–∞–ª–µ–Ω–∏–µ –ø–∞–ø–∫–∏ $folderId —É—Å–ø–µ—à–Ω–æ');
          } else {
            debugPrint('‚ö†Ô∏è –û–Ω–ª–∞–π–Ω —É–¥–∞–ª–µ–Ω–∏–µ –ø–∞–ø–∫–∏ $folderId –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–∞–º–∏');
          }
        } catch (e) {
          debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ–Ω–ª–∞–π–Ω —É–¥–∞–ª–µ–Ω–∏—è –ø–∞–ø–∫–∏ $folderId: $e');
          throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É: $e');
        }
      } else {
        // –û–§–õ–ê–ô–ù –†–ï–ñ–ò–ú: –ü–æ–º–µ—á–∞–µ–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        try {
          entity.markedForDeletion = true;
          entity.updatedAt = DateTime.now();
          entity.isSynced = false;

          await _isarService.updateFishingDiaryFolder(entity);
          deletionSuccessful = true;

          debugPrint('‚úÖ –û—Ñ–ª–∞–π–Ω —É–¥–∞–ª–µ–Ω–∏–µ: –ø–∞–ø–∫–∞ $folderId –ø–æ–º–µ—á–µ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
        } catch (e) {
          debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ—Ñ–ª–∞–π–Ω —É–¥–∞–ª–µ–Ω–∏—è –ø–∞–ø–∫–∏ $folderId: $e');
          throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–º–µ—Ç–∏—Ç—å –ø–∞–ø–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: $e');
        }
      }

      if (deletionSuccessful) {
        // –û—á–∏—â–∞–µ–º –∫—ç—à
        clearCache();
      }
    } catch (e) {
      debugPrint('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞–ø–∫–∏ $folderId: $e');
      rethrow;
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞–ø–∫–∏ –ø–æ ID
  Future<FishingDiaryFolderModel?> getFishingDiaryFolderById(String folderId) async {
    try {
      if (folderId.isEmpty) {
        return null;
      }

      final entity = await _isarService.getFishingDiaryFolderByFirebaseId(folderId);
      if (entity == null || entity.markedForDeletion == true) {
        return null;
      }

      return _entityToModel(entity);
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞–ø–∫–∏ –ø–æ ID: $e');
      return null;
    }
  }

  /// –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏
  Future<String> copyFishingDiaryFolder(String folderId) async {
    try {
      final folder = await getFishingDiaryFolderById(folderId);
      if (folder == null) {
        throw Exception('–ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }

      final copiedFolder = folder.copyWith(
        id: '', // –ù–æ–≤—ã–π ID –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω
        name: '–ö–æ–ø–∏—è: ${folder.name}',
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      );

      return await addFishingDiaryFolder(copiedFolder);
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏: $e');
      rethrow;
    }
  }

  /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
  Future<bool> forceSyncData() async {
    try {
      final result = await _syncService.fullSync();

      if (result) {
        clearCache();
      }

      return result;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–∞–ø–æ–∫: $e');
      return false;
    }
  }

  /// –§–æ–Ω–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
  void _performBackgroundSync(String source) {
    _syncService.syncFishingDiaryFoldersToFirebase().then((result) {
      if (result) {
        clearCache();
        debugPrint('‚úÖ FolderRepository: –§–æ–Ω–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–∞–ø–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ($source)');
      } else {
        debugPrint('‚ö†Ô∏è FolderRepository: –§–æ–Ω–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–∞–ø–æ–∫ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏ ($source)');
      }
    }).catchError((e) {
      debugPrint('‚ùå FolderRepository: –û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–∞–ø–æ–∫ ($source): $e');
    });
  }

  /// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è FishingDiaryFolderModel –≤ FishingDiaryFolderEntity
  FishingDiaryFolderEntity _modelToEntity(FishingDiaryFolderModel model) {
    final entity = FishingDiaryFolderEntity()
      ..firebaseId = model.id.isNotEmpty ? model.id : null
      ..userId = model.userId
      ..name = model.name
      ..description = model.description
      ..colorHex = model.colorHex
      ..sortOrder = model.sortOrder
      ..createdAt = model.createdAt
      ..updatedAt = model.updatedAt
      ..markedForDeletion = false;

    return entity;
  }

  /// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è FishingDiaryFolderEntity –≤ FishingDiaryFolderModel
  FishingDiaryFolderModel _entityToModel(FishingDiaryFolderEntity entity) {
    return FishingDiaryFolderModel(
      id: entity.firebaseId ?? entity.id.toString(),
      userId: entity.userId,
      name: entity.name,
      description: entity.description,
      colorHex: entity.colorHex,
      sortOrder: entity.sortOrder,
      createdAt: entity.createdAt,
      updatedAt: entity.updatedAt,
    );
  }

  /// –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
  static void clearCache() {
    _cachedFolders = null;
    _cacheTimestamp = null;
  }

  /// –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
  Future<void> clearAllLocalData() async {
    try {
      await _isarService.clearAllFishingDiaryFolders();
      clearCache();
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫: $e');
      rethrow;
    }
  }
}