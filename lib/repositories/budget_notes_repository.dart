// –ü—É—Ç—å: lib/repositories/budget_notes_repository.dart

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/foundation.dart';
import 'package:uuid/uuid.dart';
import '../models/fishing_expense_model.dart';
import '../models/fishing_trip_model.dart';
import '../services/firebase/firebase_service.dart';
import '../utils/network_utils.dart';
import '../services/offline/offline_storage_service.dart';
import '../services/offline/sync_service.dart';
import '../services/subscription/subscription_service.dart';
import '../constants/subscription_constants.dart';

/// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô Repository –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∞–º–∏ –±—é–¥–∂–µ—Ç–∞ (–ø–æ–µ–∑–¥–∫–∞–º–∏ –Ω–∞ —Ä—ã–±–∞–ª–∫—É)
/// ContentType.expenses ‚Üí ContentType.budgetNotes –≤–µ–∑–¥–µ
/// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã Firebase: addBudgetNote(), getUserBudgetNotes() –∏ —Ç.–¥.
class BudgetNotesRepository {
  static final BudgetNotesRepository _instance = BudgetNotesRepository._internal();

  factory BudgetNotesRepository() {
    return _instance;
  }

  BudgetNotesRepository._internal();

  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final FirebaseService _firebaseService = FirebaseService();
  final OfflineStorageService _offlineStorage = OfflineStorageService();
  final SyncService _syncService = SyncService();
  final SubscriptionService _subscriptionService = SubscriptionService();

  // –ö—ç—à –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫
  static List<FishingTripModel>? _cachedTrips;
  static DateTime? _cacheTimestamp;
  static const Duration _cacheValidity = Duration(minutes: 2);

  /// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏ –±—é–¥–∂–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ü–†–ê–í–ò–õ–¨–ù–´–ú –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  Future<List<FishingTripModel>> getUserTrips() async {
    try {
      final userId = _firebaseService.currentUserId;
      if (userId == null || userId.isEmpty) {
        throw Exception('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      }

      debugPrint('üì• BudgetNotesRepository.getUserTrips() - userId: $userId');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
      if (_cachedTrips != null && _cacheTimestamp != null) {
        final cacheAge = DateTime.now().difference(_cacheTimestamp!);
        if (cacheAge < _cacheValidity) {
          debugPrint('üíæ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ (–≤–æ–∑—Ä–∞—Å—Ç: ${cacheAge.inSeconds}—Å)');
          return _cachedTrips!;
        } else {
          debugPrint('üíæ –ö—ç—à —É—Å—Ç–∞—Ä–µ–ª, –æ—á–∏—â–∞–µ–º');
          _cachedTrips = null;
          _cacheTimestamp = null;
        }
      }

      // –í—Å–µ–≥–¥–∞ –ø–æ–ª—É—á–∞–µ–º –æ—Ñ–ª–∞–π–Ω –∑–∞–º–µ—Ç–∫–∏ –ø–µ—Ä–≤—ã–º–∏ (—Ç–µ–ø–µ—Ä—å –≤–∫–ª—é—á–∞–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)
      final offlineTrips = await _getOfflineTrips(userId);
      debugPrint('üì± –û—Ñ–ª–∞–π–Ω –∑–∞–º–µ—Ç–æ–∫ –Ω–∞–π–¥–µ–Ω–æ: ${offlineTrips.length}');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
      final isOnline = await NetworkUtils.isNetworkAvailable();
      debugPrint('üåê –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ç–∏: ${isOnline ? '–û–Ω–ª–∞–π–Ω' : '–û—Ñ–ª–∞–π–Ω'}');

      List<FishingTripModel> onlineTrips = [];

      if (isOnline) {
        try {
          debugPrint('üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–º–µ—Ç–∫–∏ –±—é–¥–∂–µ—Ç–∞ –∏–∑ Firebase...');

          // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ getUserBudgetNotes()
          final notesSnapshot = await _firebaseService.getUserBudgetNotes();
          debugPrint('üì• –ü–æ–ª—É—á–µ–Ω–æ ${notesSnapshot.docs.length} –∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞ –∏–∑ Firebase');

          // –ü–∞—Ä—Å–∏–º –∫–∞–∂–¥—É—é –∑–∞–º–µ—Ç–∫—É –±—é–¥–∂–µ—Ç–∞ –∫–∞–∫ –ø–æ–µ–∑–¥–∫—É —Å —Ä–∞—Å—Ö–æ–¥–∞–º–∏
          for (var noteDoc in notesSnapshot.docs) {
            try {
              final noteData = noteDoc.data() as Map<String, dynamic>;
              noteData['id'] = noteDoc.id;

              // –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å –ø–æ–µ–∑–¥–∫–∏ —Å —Ä–∞—Å—Ö–æ–¥–∞–º–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–∫–∏ –±—é–¥–∂–µ—Ç–∞
              final trip = FishingTripModel.fromMapWithExpenses(noteData);
              onlineTrips.add(trip);

              debugPrint('‚úÖ –ó–∞–º–µ—Ç–∫–∞ –±—é–¥–∂–µ—Ç–∞ ${noteDoc.id} –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —Å ${trip.expenses.length} —Ä–∞—Å—Ö–æ–¥–∞–º–∏');
            } catch (e) {
              debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞–º–µ—Ç–∫–∏ –±—é–¥–∂–µ—Ç–∞ ${noteDoc.id}: $e');

              // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞, —Å–æ–∑–¥–∞–µ–º –∑–∞–º–µ—Ç–∫—É –±–µ–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤
              try {
                final noteData = noteDoc.data() as Map<String, dynamic>;
                noteData['id'] = noteDoc.id;
                noteData['expenses'] = []; // –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤

                final trip = FishingTripModel.fromMapWithExpenses(noteData);
                onlineTrips.add(trip);

                debugPrint('‚ö†Ô∏è –ó–∞–º–µ—Ç–∫–∞ –±—é–¥–∂–µ—Ç–∞ ${noteDoc.id} –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –±–µ–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤');
              } catch (e2) {
                debugPrint('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞–º–µ—Ç–∫–∏ –±—é–¥–∂–µ—Ç–∞ ${noteDoc.id}: $e2');
              }
            }
          }

          debugPrint('‚òÅÔ∏è –ó–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞ –∏–∑ Firebase: ${onlineTrips.length}');

          // üî• –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ö—ç—à–∏—Ä—É–µ–º Firebase –∑–∞–º–µ—Ç–∫–∏ –±—é–¥–∂–µ—Ç–∞ —á–µ—Ä–µ–∑ –ü–†–ê–í–ò–õ–¨–ù–´–ô –º–µ—Ç–æ–¥
          if (onlineTrips.isNotEmpty) {
            try {
              debugPrint('üíæ –ö—ç—à–∏—Ä—É–µ–º Firebase –∑–∞–º–µ—Ç–∫–∏ –±—é–¥–∂–µ—Ç–∞ —á–µ—Ä–µ–∑ cacheBudgetNotes...');
              final tripsToCache = onlineTrips.map((trip) {
                final tripJson = trip.toMapWithExpenses();
                tripJson['id'] = trip.id;
                tripJson['userId'] = userId;
                // üî• –î–û–ë–ê–í–õ–Ø–ï–ú –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –ü–û–õ–Ø –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –∫—ç—à–µ–º
                tripJson['isSynced'] = true;   // –ò–∑ Firebase - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
                tripJson['isOffline'] = false; // –ù–µ –æ—Ñ–ª–∞–π–Ω –∑–∞–º–µ—Ç–∫–∏
                return tripJson;
              }).toList();

              await _offlineStorage.cacheBudgetNotes(tripsToCache);
              debugPrint('‚úÖ ${onlineTrips.length} Firebase –∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
            } catch (e) {
              debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è Firebase –∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞: $e');
              debugPrint('‚ö†Ô∏è –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: ${e.toString()}');
            }
          }
        } catch (e) {
          debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞ –∏–∑ Firebase: $e');
        }
      }

      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–ø–∏—Å–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –∏–∑–±–µ–≥–∞—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
      final Map<String, FishingTripModel> uniqueTrips = {};

      // –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –æ–Ω–ª–∞–π–Ω –∑–∞–º–µ—Ç–∫–∏ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
      for (var trip in onlineTrips) {
        uniqueTrips[trip.id] = trip;
      }

      // –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ñ–ª–∞–π–Ω –∑–∞–º–µ—Ç–∫–∏, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –æ–Ω–ª–∞–π–Ω —Å–ø–∏—Å–∫–µ
      for (var trip in offlineTrips) {
        if (!uniqueTrips.containsKey(trip.id)) {
          uniqueTrips[trip.id] = trip;
        }
      }

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
      final allTrips = uniqueTrips.values.toList()
        ..sort((a, b) => b.date.compareTo(a.date));

      debugPrint('üìä –ò—Ç–æ–≥–æ –∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞: ${allTrips.length}');
      debugPrint('üìä –û–Ω–ª–∞–π–Ω: ${onlineTrips.length}, –û—Ñ–ª–∞–π–Ω: ${offlineTrips.length}');

      // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      _cachedTrips = allTrips;
      _cacheTimestamp = DateTime.now();

      // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤ —Ñ–æ–Ω–µ
      if (isOnline) {
        _syncService.syncAll();
      }

      return allTrips;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –≤ getUserTrips: $e');

      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, –ø—ã—Ç–∞–µ–º—Å—è –≤–µ—Ä–Ω—É—Ç—å —Ö–æ—Ç—è –±—ã –æ—Ñ–ª–∞–π–Ω –∑–∞–º–µ—Ç–∫–∏
      try {
        return await _getOfflineTrips(_firebaseService.currentUserId ?? '');
      } catch (_) {
        // –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        return [];
      }
    }
  }

  /// üî• –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫ –∏–∑ –í–°–ï–• –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
  Future<List<FishingTripModel>> _getOfflineTrips(String userId) async {
    try {
      final List<FishingTripModel> result = [];
      final Set<String> processedIds = <String>{};

      debugPrint('üì± –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ Firebase –∑–∞–º–µ—Ç–∫–∏ –±—é–¥–∂–µ—Ç–∞...');

      // 1. ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ Firebase –∑–∞–º–µ—Ç–∫–∏ –±—é–¥–∂–µ—Ç–∞
      try {
        final cachedNotes = await _offlineStorage.getCachedBudgetNotes();
        debugPrint('üíæ –ù–∞–π–¥–µ–Ω–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö Firebase –∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞: ${cachedNotes.length}');

        for (final noteData in cachedNotes) {
          try {
            final noteId = noteData['id']?.toString() ?? '';
            final noteUserId = noteData['userId']?.toString() ?? '';

            if (noteId.isEmpty) continue;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if (noteUserId == userId) {
              final trip = FishingTripModel.fromMapWithExpenses(noteData);
              result.add(trip);
              processedIds.add(noteId);
              debugPrint('‚úÖ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–º–µ—Ç–∫–∞ –±—é–¥–∂–µ—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: $noteId');
            }
          } catch (e) {
            debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏ –±—é–¥–∂–µ—Ç–∞: $e');
            continue;
          }
        }
      } catch (e) {
        debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞: $e');
      }

      debugPrint('üì± –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ñ–ª–∞–π–Ω —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ –±—é–¥–∂–µ—Ç–∞...');

      // 2. ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–≥—Ä—É–∂–∞–µ–º –¢–û–õ–¨–ö–û –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ñ–ª–∞–π–Ω –∑–∞–º–µ—Ç–∫–∏
      try {
        final allOfflineTrips = await _offlineStorage.getAllOfflineBudgetNotes();
        debugPrint('üì± –ù–∞–π–¥–µ–Ω–æ –æ—Ñ–ª–∞–π–Ω —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞: ${allOfflineTrips.length}');

        for (final tripData in allOfflineTrips) {
          try {
            final tripId = tripData['id']?.toString() ?? '';
            final tripUserId = tripData['userId']?.toString() ?? '';
            final isSynced = tripData['isSynced'] == true;
            final isOffline = tripData['isOffline'] == true;

            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏
            if (tripId.isEmpty || processedIds.contains(tripId)) {
              continue;
            }

            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–≥—Ä—É–∂–∞–µ–º –¢–û–õ–¨–ö–û –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ñ–ª–∞–π–Ω –∑–∞–º–µ—Ç–∫–∏
            if (!isSynced && isOffline) {
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
              bool belongsToUser = false;

              if (tripUserId.isNotEmpty && tripUserId == userId) {
                belongsToUser = true;
              } else if (tripUserId.isEmpty) {
                // –ó–∞–º–µ—Ç–∫–∞ –±–µ–∑ userId - –¥–æ–±–∞–≤–ª—è–µ–º userId
                tripData['userId'] = userId;
                belongsToUser = true;
                _offlineStorage.saveOfflineBudgetNote(tripData).catchError((error) {
                  debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏ –±—é–¥–∂–µ—Ç–∞: $error');
                });
              }

              if (belongsToUser) {
                final trip = FishingTripModel.fromMapWithExpenses(tripData);
                result.add(trip);
                processedIds.add(tripId);
                debugPrint('‚úÖ –ù–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ñ–ª–∞–π–Ω –∑–∞–º–µ—Ç–∫–∞ –±—é–¥–∂–µ—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: $tripId');
              }
            } else {
              debugPrint('‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞–º–µ—Ç–∫—É –±—é–¥–∂–µ—Ç–∞: $tripId (isSynced: $isSynced, isOffline: $isOffline)');
            }
          } catch (e) {
            debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ñ–ª–∞–π–Ω –∑–∞–º–µ—Ç–∫–∏ –±—é–¥–∂–µ—Ç–∞: $e');
            continue;
          }
        }
      } catch (e) {
        debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ñ–ª–∞–π–Ω –∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞: $e');
      }

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
      result.sort((a, b) => b.date.compareTo(a.date));

      debugPrint('‚úÖ –í—Å–µ–≥–æ –∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ –æ—Ñ–ª–∞–π–Ω –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: ${result.length}');

      return result;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ñ–ª–∞–π–Ω –∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞: $e');
      return [];
    }
  }

  /// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É –±—é–¥–∂–µ—Ç–∞ —Å —Ä–∞—Å—Ö–æ–¥–∞–º–∏
  Future<FishingTripModel> createTripWithExpenses({
    required DateTime date,
    String? locationName,
    String? notes,
    String currency = 'KZT',
    required Map<FishingExpenseCategory, double> categoryAmounts,
    required Map<FishingExpenseCategory, String> categoryDescriptions,
    required Map<FishingExpenseCategory, String> categoryNotes,
  }) async {
    try {
      final userId = _firebaseService.currentUserId;
      if (userId == null) {
        throw Exception('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      }

      debugPrint('üî• –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –±—é–¥–∂–µ—Ç–∞ —Å —Ä–∞—Å—Ö–æ–¥–∞–º–∏...');

      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –¥–ª—è budgetNotes
      final canCreate = await _subscriptionService.canCreateContentOffline(
        ContentType.budgetNotes,  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û! –ë—ã–ª–æ expenses
      );

      if (!canCreate) {
        throw Exception('–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞');
      }

      // –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—Ö–æ–¥—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ —Å—É–º–º–∞–º–∏
      final List<FishingExpenseModel> expenses = [];
      int expenseIndex = 0;

      for (final category in FishingExpenseCategory.allCategories) {
        final amount = categoryAmounts[category] ?? 0.0;
        if (amount > 0) {
          final description = categoryDescriptions[category]?.trim() ?? '';
          final expenseNotes = categoryNotes[category]?.trim() ?? '';

          // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞—Å—Ö–æ–¥–∞
          final now = DateTime.now();
          final expenseId = 'expense_${now.millisecondsSinceEpoch}_$expenseIndex';

          final expense = FishingExpenseModel(
            id: expenseId,
            userId: userId,
            tripId: '', // –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏
            amount: amount,
            description: description.isNotEmpty ? description : '–†–∞—Å—Ö–æ–¥—ã',
            category: category,
            date: date,
            currency: currency,
            notes: expenseNotes.isEmpty ? null : expenseNotes,
            locationName: locationName,
            createdAt: now,
            updatedAt: now,
            isSynced: false,
          );

          expenses.add(expense);
          expenseIndex++;
        }
      }

      debugPrint('üî• –°–æ–∑–¥–∞–Ω–æ ${expenses.length} —Ä–∞—Å—Ö–æ–¥–æ–≤');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
      final isOnline = await NetworkUtils.isNetworkAvailable();

      if (isOnline) {
        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ–∑–¥–∞–µ–º –∑–∞–º–µ—Ç–∫—É –±—é–¥–∂–µ—Ç–∞ —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥

        // 1. –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–º–µ—Ç–∫–∏ –±—é–¥–∂–µ—Ç–∞ (–≤–∫–ª—é—á–∞—è —Ä–∞—Å—Ö–æ–¥—ã –≤ –æ–¥–Ω–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ)
        final budgetData = {
          'userId': userId,
          'date': Timestamp.fromDate(date),
          'locationName': locationName,
          'notes': notes,
          'currency': currency,
          'totalAmount': expenses.fold<double>(0, (sum, expense) => sum + expense.amount),
          'expenseCount': expenses.length,
          'expenses': expenses.map((expense) => expense.toMap()).toList(), // –†–∞—Å—Ö–æ–¥—ã –≤–Ω—É—Ç—Ä–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        };

        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ addBudgetNote()
        final noteRef = await _firebaseService.addBudgetNote(budgetData);
        final noteId = noteRef.id;

        debugPrint('‚úÖ –ó–∞–º–µ—Ç–∫–∞ –±—é–¥–∂–µ—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞: $noteId');

        // 2. –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å –∑–∞–º–µ—Ç–∫–∏
        final syncedExpenses = expenses.map((e) =>
            e.copyWith(tripId: noteId).markAsSynced()
        ).toList();

        final syncedTrip = FishingTripModel.create(
          userId: userId,
          date: date,
          locationName: locationName,
          notes: notes,
          currency: currency,
        ).copyWith(id: noteId).markAsSynced().withExpenses(syncedExpenses);

        // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ö—ç—à–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É —á–µ—Ä–µ–∑ –ü–†–ê–í–ò–õ–¨–ù–´–ô –º–µ—Ç–æ–¥
        try {
          final tripJson = syncedTrip.toMapWithExpenses();
          tripJson['id'] = noteId;
          tripJson['userId'] = userId;
          // üî• –î–û–ë–ê–í–õ–Ø–ï–ú –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –ü–û–õ–Ø
          tripJson['isSynced'] = true;   // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å Firebase
          tripJson['isOffline'] = false; // –ù–µ –æ—Ñ–ª–∞–π–Ω –∑–∞–º–µ—Ç–∫–∞

          // –ö—ç—à–∏—Ä—É–µ–º –≤ –æ–±—â–∏–π –∫—ç—à Firebase –∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞
          await _offlineStorage.cacheBudgetNotes([tripJson]);

          debugPrint('üíæ –ù–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞ –±—é–¥–∂–µ—Ç–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
        } catch (e) {
          debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏ –±—é–¥–∂–µ—Ç–∞: $e');
        }

        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ budgetNotes —á–µ—Ä–µ–∑ Firebase
        try {
          final success = await _firebaseService.incrementUsageCount('budgetNotesCount');  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û!
          if (success) {
            debugPrint('‚úÖ –°—á–µ—Ç—á–∏–∫ –∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞ —É–≤–µ–ª–∏—á–µ–Ω —á–µ—Ä–µ–∑ Firebase');
          } else {
            debugPrint('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞ —á–µ—Ä–µ–∑ Firebase');
          }
        } catch (e) {
          debugPrint('‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞: $e');
        }

        // –û—á–∏—â–∞–µ–º –∫—ç—à –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏
        clearCache();

        return syncedTrip;
      } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–º–µ—Ç–∫—É –ª–æ–∫–∞–ª—å–Ω–æ
        final trip = FishingTripModel.create(
          userId: userId,
          date: date,
          locationName: locationName,
          notes: notes,
          currency: currency,
        ).withExpenses(expenses);

        await _saveTripOffline(trip);

        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ budgetNotes –æ—Ñ–ª–∞–π–Ω
        try {
          await _subscriptionService.incrementUsage(ContentType.budgetNotes);  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û!
          debugPrint('‚úÖ –°—á–µ—Ç—á–∏–∫ –∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞ —É–≤–µ–ª–∏—á–µ–Ω –æ—Ñ–ª–∞–π–Ω');
        } catch (e) {
          debugPrint('‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞: $e');
        }

        // –û—á–∏—â–∞–µ–º –∫—ç—à –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏
        clearCache();

        return trip;
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ –±—é–¥–∂–µ—Ç–∞: $e');
      rethrow;
    }
  }

  /// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ
  Future<void> _saveTripOffline(FishingTripModel trip) async {
    try {
      if (trip.id.isEmpty) {
        throw Exception('ID –∑–∞–º–µ—Ç–∫–∏ –±—é–¥–∂–µ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
      }

      debugPrint('üì± –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ñ–ª–∞–π–Ω –∑–∞–º–µ—Ç–∫–∏ –±—é–¥–∂–µ—Ç–∞: ${trip.id}');

      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ñ–ª–∞–≥–∏ –¥–ª—è –æ—Ñ–ª–∞–π–Ω –∑–∞–º–µ—Ç–∫–∏
      final tripJson = trip.toMapWithExpenses();
      tripJson['id'] = trip.id;
      tripJson['userId'] = trip.userId;
      tripJson['isSynced'] = false;  // –¢—Ä–µ–±—É–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      tripJson['isOffline'] = true;  // –°–æ–∑–¥–∞–Ω–∞ –æ—Ñ–ª–∞–π–Ω
      tripJson['offlineCreatedAt'] = DateTime.now().toIso8601String();

      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –±—é–¥–∂–µ—Ç–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫
      await _offlineStorage.saveOfflineBudgetNote(tripJson);
      debugPrint('‚úÖ –ó–∞–º–µ—Ç–∫–∞ –±—é–¥–∂–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ñ–ª–∞–π–Ω –∑–∞–º–µ—Ç–∫–∏ –±—é–¥–∂–µ—Ç–∞: $e');
      rethrow;
    }
  }

  /// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –±—é–¥–∂–µ—Ç–∞
  Future<FishingTripModel> updateTrip(FishingTripModel trip) async {
    try {
      if (trip.id.isEmpty) {
        throw Exception('ID –∑–∞–º–µ—Ç–∫–∏ –±—é–¥–∂–µ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
      }

      final userId = _firebaseService.currentUserId;
      if (userId == null || userId.isEmpty) {
        throw Exception('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      }

      debugPrint('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –±—é–¥–∂–µ—Ç–∞: ${trip.id}');

      // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –∑–∞–º–µ—Ç–∫–∏ —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º UserID
      final tripToUpdate = trip.copyWith(userId: userId).touch();

      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ñ–ª–∞–≥–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      final tripJson = tripToUpdate.toMapWithExpenses();
      tripJson['id'] = trip.id;
      tripJson['userId'] = userId;
      tripJson['isSynced'] = false;  // –¢—Ä–µ–±—É–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      tripJson['isOffline'] = false; // –û–±–Ω–æ–≤–ª–µ–Ω–∞, –Ω–æ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞ –æ—Ñ–ª–∞–π–Ω
      tripJson['updatedAt'] = DateTime.now().toIso8601String();

      // –í—Å–µ–≥–¥–∞ —Å–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
      await _offlineStorage.saveOfflineBudgetNote(tripJson);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
      final isOnline = await NetworkUtils.isNetworkAvailable();

      if (isOnline) {
        try {
          // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É –±—é–¥–∂–µ—Ç–∞ —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥

          // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É –±—é–¥–∂–µ—Ç–∞ (–≤–∫–ª—é—á–∞—è —Ä–∞—Å—Ö–æ–¥—ã –≤ –æ–¥–Ω–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ)
          final budgetData = {
            'userId': userId,
            'date': Timestamp.fromDate(tripToUpdate.date),
            'locationName': tripToUpdate.locationName,
            'notes': tripToUpdate.notes,
            'currency': tripToUpdate.currency,
            'totalAmount': tripToUpdate.totalAmount,
            'expenseCount': tripToUpdate.expenses.length,
            'expenses': tripToUpdate.expenses.map((expense) => expense.toMap()).toList(),
          };

          // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ updateBudgetNote()
          await _firebaseService.updateBudgetNote(trip.id, budgetData);

          debugPrint('‚úÖ –ó–∞–º–µ—Ç–∫–∞ –±—é–¥–∂–µ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ Firebase');

          // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ü–†–ê–í–ò–õ–¨–ù–û–ú –∫—ç—à–µ
          try {
            tripJson['userId'] = userId;
            tripJson['isSynced'] = true;   // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
            tripJson['isOffline'] = false; // –ù–µ –æ—Ñ–ª–∞–π–Ω –∑–∞–º–µ—Ç–∫–∞

            // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –æ–±—â–µ–º –∫—ç—à–µ Firebase –∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞
            await _offlineStorage.cacheBudgetNotes([tripJson]);

            // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –≤ –æ—Ñ–ª–∞–π–Ω —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            await _offlineStorage.saveOfflineBudgetNote(tripJson);

            debugPrint('üíæ –ó–∞–º–µ—Ç–∫–∞ –±—é–¥–∂–µ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ –∫—ç—à–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
          } catch (e) {
            debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –∫—ç—à–µ: $e');
          }
        } catch (e) {
          debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤ Firebase: $e');
        }
      }

      // –û—á–∏—â–∞–µ–º –∫—ç—à –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏
      clearCache();

      return tripToUpdate.markAsSynced();
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏ –±—é–¥–∂–µ—Ç–∞: $e');

      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ
      try {
        await _offlineStorage.saveOfflineBudgetNote(trip.toMapWithExpenses());
        return trip;
      } catch (_) {
        rethrow;
      }
    }
  }

  /// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –±—é–¥–∂–µ—Ç–∞ –ø–æ ID
  Future<FishingTripModel?> getTripById(String tripId) async {
    try {
      if (tripId.isEmpty) {
        throw Exception('ID –∑–∞–º–µ—Ç–∫–∏ –±—é–¥–∂–µ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
      }

      final userId = _firebaseService.currentUserId;
      if (userId == null || userId.isEmpty) {
        throw Exception('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      }

      debugPrint('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –±—é–¥–∂–µ—Ç–∞ –ø–æ ID: $tripId');

      final isOnline = await NetworkUtils.isNetworkAvailable();

      if (isOnline) {
        try {
          final doc = await _firestore
              .collection('users')
              .doc(userId)
              .collection('budget_notes')
              .doc(tripId)
              .get();

          if (doc.exists) {
            final data = doc.data() as Map<String, dynamic>;
            data['id'] = doc.id;

            // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            data['createdAt'] ??= Timestamp.now();
            data['updatedAt'] ??= Timestamp.now();
            data['isSynced'] ??= true; // –ò–∑ Firebase - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ

            final trip = FishingTripModel.fromMapWithExpenses(data);

            // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ö—ç—à–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ –ü–†–ê–í–ò–õ–¨–ù–´–ô –º–µ—Ç–æ–¥
            try {
              final tripJson = trip.toMapWithExpenses();
              tripJson['id'] = trip.id;
              tripJson['userId'] = userId;
              tripJson['isSynced'] = true;   // –ò–∑ Firebase
              tripJson['isOffline'] = false; // –ù–µ –æ—Ñ–ª–∞–π–Ω –∑–∞–º–µ—Ç–∫–∞

              // –ö—ç—à–∏—Ä—É–µ–º –≤ –æ–±—â–∏–π –∫—ç—à Firebase –∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞
              await _offlineStorage.cacheBudgetNotes([tripJson]);

              // –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ—Ñ–ª–∞–π–Ω —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
              await _offlineStorage.saveOfflineBudgetNote(tripJson);

              debugPrint('‚úÖ –ó–∞–º–µ—Ç–∫–∞ –±—é–¥–∂–µ—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞ –∏–∑ Firebase –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
            } catch (e) {
              debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏ –±—é–¥–∂–µ—Ç–∞: $e');
            }

            return trip;
          }
        } catch (e) {
          debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑ Firebase: $e');
        }
      }

      // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –æ–Ω–ª–∞–π–Ω - –∏—â–µ–º –≤ –æ—Ñ–ª–∞–π–Ω —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
      return await _getOfflineTripById(tripId);
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏ –±—é–¥–∂–µ—Ç–∞: $e');
      rethrow;
    }
  }

  /// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –±—é–¥–∂–µ—Ç–∞
  Future<void> deleteTrip(String tripId) async {
    try {
      if (tripId.isEmpty) {
        throw Exception('ID –∑–∞–º–µ—Ç–∫–∏ –±—é–¥–∂–µ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
      }

      final userId = _firebaseService.currentUserId;
      if (userId == null || userId.isEmpty) {
        throw Exception('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      }

      debugPrint('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –±—é–¥–∂–µ—Ç–∞: $tripId');

      final isOnline = await NetworkUtils.isNetworkAvailable();

      if (isOnline) {
        try {
          // –£–¥–∞–ª—è–µ–º –∏–∑ Firebase
          await _firebaseService.deleteBudgetNote(tripId);
          debugPrint('‚úÖ –ó–∞–º–µ—Ç–∫–∞ –±—é–¥–∂–µ—Ç–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ Firebase');

          // ‚úÖ –£–ü–†–û–©–ï–ù–û: –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¢–û–õ–¨–ö–û –æ–¥–∏–Ω —Ä–∞–∑
          try {
            await _firebaseService.incrementUsageCount('budgetNotesCount', increment: -1);
            debugPrint('‚úÖ –°—á–µ—Ç—á–∏–∫ –∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞ —É–º–µ–Ω—å—à–µ–Ω —á–µ—Ä–µ–∑ Firebase');
          } catch (e) {
            debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–º–µ–Ω—å—à–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞: $e');
          }

          // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–¥–∞–ª—è–µ–º –∏–∑ –∫—ç—à–∞ Firebase –∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞
          try {
            final cachedNotes = await _offlineStorage.getCachedBudgetNotes();
            final updatedCachedNotes = cachedNotes.where((note) => note['id'] != tripId).toList();
            await _offlineStorage.cacheBudgetNotes(updatedCachedNotes);
            debugPrint('‚úÖ –ó–∞–º–µ—Ç–∫–∞ –±—é–¥–∂–µ—Ç–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∫—ç—à–∞ Firebase –∑–∞–º–µ—Ç–æ–∫');
          } catch (e) {
            debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∫—ç—à–∞ Firebase –∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞: $e');
          }
        } catch (e) {
          debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ Firebase: $e');
          // –û—Ç–º–µ—á–∞–µ–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
          await _offlineStorage.markForDeletion(tripId, false); // false –¥–ª—è budget notes
        }
      } else {
        // –û—Ñ–ª–∞–π–Ω - –æ—Ç–º–µ—á–∞–µ–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        await _offlineStorage.markForDeletion(tripId, false); // false –¥–ª—è budget notes
      }

      // –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ–ø–∏—é
      try {
        await _offlineStorage.removeOfflineBudgetNote(tripId);
        debugPrint('‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è –∫–æ–ø–∏—è –∑–∞–º–µ—Ç–∫–∏ –±—é–¥–∂–µ—Ç–∞ —É–¥–∞–ª–µ–Ω–∞');
      } catch (e) {
        debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π –∫–æ–ø–∏–∏: $e');
      }

      // –û—á–∏—â–∞–µ–º –∫—ç—à –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏
      clearCache();
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏ –±—é–¥–∂–µ—Ç–∞: $e');
      rethrow;
    }
  }

  /// üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –∏–∑ –æ—Ñ–ª–∞–π–Ω —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –ø–æ ID
  Future<FishingTripModel?> _getOfflineTripById(String tripId) async {
    try {
      // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö Firebase –∑–∞–º–µ—Ç–∫–∞—Ö –±—é–¥–∂–µ—Ç–∞
      try {
        final cachedNotes = await _offlineStorage.getCachedBudgetNotes();
        final cachedNote = cachedNotes.where((note) => note['id'] == tripId).firstOrNull;

        if (cachedNote != null) {
          debugPrint('‚úÖ –ó–∞–º–µ—Ç–∫–∞ –±—é–¥–∂–µ—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫—ç—à–µ Firebase –∑–∞–º–µ—Ç–æ–∫');
          return FishingTripModel.fromMapWithExpenses(cachedNote);
        }
      } catch (e) {
        debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –∫—ç—à–µ Firebase –∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞: $e');
      }

      // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫—ç—à–µ - –∏—â–µ–º –≤ –æ—Ñ–ª–∞–π–Ω –∑–∞–º–µ—Ç–∫–∞—Ö –±—é–¥–∂–µ—Ç–∞
      final allOfflineTrips = await _offlineStorage.getAllOfflineBudgetNotes();
      final tripDataList = allOfflineTrips.where((trip) => trip['id'] == tripId).toList();

      if (tripDataList.isEmpty) {
        throw Exception('–ó–∞–º–µ—Ç–∫–∞ –±—é–¥–∂–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ—Ñ–ª–∞–π–Ω —Ö—Ä–∞–Ω–∏–ª–∏—â–µ');
      }

      final tripData = tripDataList.first;
      debugPrint('‚úÖ –ó–∞–º–µ—Ç–∫–∞ –±—é–¥–∂–µ—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ—Ñ–ª–∞–π–Ω —Ö—Ä–∞–Ω–∏–ª–∏—â–µ');
      return FishingTripModel.fromMapWithExpenses(tripData);
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ñ–ª–∞–π–Ω –∑–∞–º–µ—Ç–∫–∏ –±—é–¥–∂–µ—Ç–∞: $e');
      return null;
    }
  }

  /// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏ –±—é–¥–∂–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<void> deleteAllUserTrips() async {
    try {
      final userId = _firebaseService.currentUserId;
      if (userId == null) {
        throw Exception('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
      final isOnline = await NetworkUtils.isNetworkAvailable();

      if (isOnline) {
        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ï—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç, –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏ –±—é–¥–∂–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É–¥–∞–ª—è–µ–º –∏—Ö
        final snapshot = await _firebaseService.getUserBudgetNotes();

        // –£–¥–∞–ª—è–µ–º –∫–∞–∂–¥—É—é –∑–∞–º–µ—Ç–∫—É –±—é–¥–∂–µ—Ç–∞
        for (var doc in snapshot.docs) {
          await _firebaseService.deleteBudgetNote(doc.id);
        }

        debugPrint('‚úÖ –£–¥–∞–ª–µ–Ω–æ ${snapshot.docs.length} –∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞, –æ—Ç–º–µ—á–∞–µ–º –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        await _offlineStorage.markAllNotesForDeletion(); // –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –º–µ—Ç–æ–¥
      }

      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞
      try {
        final offlineTrips = await _offlineStorage.getAllOfflineBudgetNotes();
        for (var trip in offlineTrips) {
          final tripId = trip['id'];
          if (tripId != null) {
            await _offlineStorage.removeOfflineBudgetNote(tripId);
          }
        }
      } catch (e) {
        debugPrint('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞: $e');
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Å–µ—Ö –∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞: $e');

      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, –æ—Ç–º–µ—á–∞–µ–º –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
      try {
        await _offlineStorage.markAllNotesForDeletion();
      } catch (_) {
        rethrow;
      }
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  Future<Map<FishingExpenseCategory, CategoryExpenseSummary>> getCategorySummaries({
    DateTime? startDate,
    DateTime? endDate,
  }) async {
    try {
      debugPrint('üî• –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º...');

      // –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
      List<FishingTripModel> trips;
      if (_cachedTrips != null && _cacheTimestamp != null) {
        final cacheAge = DateTime.now().difference(_cacheTimestamp!);
        if (cacheAge < _cacheValidity) {
          debugPrint('üíæ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
          trips = _cachedTrips!;
        } else {
          debugPrint('üíæ –ö—ç—à —É—Å—Ç–∞—Ä–µ–ª, –∑–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–Ω–æ–≤–æ');
          trips = await getUserTrips();
        }
      } else {
        debugPrint('üíæ –ö—ç—à–∞ –Ω–µ—Ç, –∑–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–º–µ—Ç–∫–∏');
        trips = await getUserTrips();
      }

      debugPrint('üî• –ü–æ–ª—É—á–µ–Ω–æ ${trips.length} –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');

      // –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–º–µ—Ç–∫–∏ –ø–æ –ø–µ—Ä–∏–æ–¥—É
      final filteredTrips = trips.where((trip) {
        if (startDate != null && trip.date.isBefore(startDate)) return false;
        if (endDate != null && trip.date.isAfter(endDate)) return false;
        return true;
      }).toList();

      debugPrint('üî• –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Å—Ç–∞–ª–æ—Å—å ${filteredTrips.length} –∑–∞–º–µ—Ç–æ–∫');

      final Map<FishingExpenseCategory, CategoryExpenseSummary> summaries = {};

      for (final category in FishingExpenseCategory.allCategories) {
        double totalAmount = 0;
        int expenseCount = 0;
        int tripCount = 0;
        String currency = 'KZT';

        for (final trip in filteredTrips) {
          bool hasCategoryInTrip = false;

          for (final expense in trip.expenses) {
            if (expense.category == category) {
              totalAmount += expense.amount;
              expenseCount++;
              currency = expense.currency;
              hasCategoryInTrip = true;
            }
          }

          if (hasCategoryInTrip) {
            tripCount++;
          }
        }

        if (totalAmount > 0) {
          summaries[category] = CategoryExpenseSummary(
            category: category,
            totalAmount: totalAmount,
            expenseCount: expenseCount,
            tripCount: tripCount,
            currency: currency,
          );

          debugPrint('‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è ${category.toString()}: ${totalAmount.toStringAsFixed(2)} $currency');
        }
      }

      debugPrint('‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${summaries.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å —Ä–∞—Å—Ö–æ–¥–∞–º–∏');
      return summaries;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º: $e');
      return {};
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞
  Future<FishingTripStatistics> getTripStatistics({
    DateTime? startDate,
    DateTime? endDate,
  }) async {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
      List<FishingTripModel> allTrips;
      if (_cachedTrips != null && _cacheTimestamp != null) {
        final cacheAge = DateTime.now().difference(_cacheTimestamp!);
        if (cacheAge < _cacheValidity) {
          debugPrint('üíæ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
          allTrips = _cachedTrips!;
        } else {
          debugPrint('üíæ –ö—ç—à —É—Å—Ç–∞—Ä–µ–ª, –∑–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–Ω–æ–≤–æ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
          allTrips = await getUserTrips();
        }
      } else {
        debugPrint('üíæ –ö—ç—à–∞ –Ω–µ—Ç, –∑–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
        allTrips = await getUserTrips();
      }

      // –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–º–µ—Ç–∫–∏ –ø–æ –ø–µ—Ä–∏–æ–¥—É
      final filteredTrips = allTrips.where((trip) {
        if (startDate != null && trip.date.isBefore(startDate)) return false;
        if (endDate != null && trip.date.isAfter(endDate)) return false;
        return true;
      }).toList();

      return FishingTripStatistics.fromTrips(
        filteredTrips,
        startDate: startDate,
        endDate: endDate,
      );
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞: $e');
      return FishingTripStatistics.fromTrips([]);
    }
  }

  /// –ü–æ–∏—Å–∫ –∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞
  Future<List<FishingTripModel>> searchTrips(String query) async {
    try {
      if (query.trim().isEmpty) return getUserTrips();

      final allTrips = await getUserTrips();
      final lowercaseQuery = query.toLowerCase();

      return allTrips.where((trip) {
        return trip.locationName?.toLowerCase().contains(lowercaseQuery) == true ||
            trip.notes?.toLowerCase().contains(lowercaseQuery) == true ||
            trip.expenses.any((expense) =>
            expense.description.toLowerCase().contains(lowercaseQuery) ||
                expense.notes?.toLowerCase().contains(lowercaseQuery) == true
            );
      }).toList();
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞: $e');
      return [];
    }
  }

  /// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏ –±—é–¥–∂–µ—Ç–∞
  Future<bool> canCreateTrip() async {
    try {
      return await _subscriptionService.canCreateContentOffline(
        ContentType.budgetNotes,  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û! –ë—ã–ª–æ expenses
      );
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ –±—é–¥–∂–µ—Ç–∞: $e');
      return false;
    }
  }

  /// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞
  Future<int> getCurrentUsage() async {
    try {
      return await _subscriptionService.getCurrentUsage(
        ContentType.budgetNotes,  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û! –ë—ã–ª–æ expenses
      );
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞: $e');
      return 0;
    }
  }

  /// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞
  Future<int> getUsageLimit() async {
    try {
      return _subscriptionService.getLimit(ContentType.budgetNotes);  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û! –ë—ã–ª–æ expenses
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ –∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞: $e');
      return 0;
    }
  }

  /// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  Future<void> syncOfflineDataOnStartup() async {
    await _syncService.syncAll();
  }

  /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
  Future<bool> forceSyncData() async {
    try {
      return await _syncService.forceSyncAll();
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: $e');
      return false;
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  Future<Map<String, dynamic>> getSyncStatus() async {
    return await _syncService.getSyncStatus();
  }

  /// –û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à –¥–∞–Ω–Ω—ã—Ö
  static void clearCache() {
    _cachedTrips = null;
    _cacheTimestamp = null;
    debugPrint('üíæ –ö—ç—à –∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞ –æ—á–∏—â–µ–Ω');
  }

  // ========================================
  // –ú–ï–¢–û–î–´ –î–õ–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò –°–û –°–¢–ê–†–´–ú –ö–û–î–û–ú
  // ========================================

  /// –£—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥ - —Ç–µ–ø–µ—Ä—å –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
  @Deprecated('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ getUserTrips() –∏ —Ä–∞–±–æ—Ç–∞–π—Ç–µ —Å —Ä–∞—Å—Ö–æ–¥–∞–º–∏ –≤–Ω—É—Ç—Ä–∏ –∑–∞–º–µ—Ç–æ–∫')
  Future<List<FishingExpenseModel>> getUserExpenses() async {
    final trips = await getUserTrips();
    final allExpenses = <FishingExpenseModel>[];

    for (final trip in trips) {
      allExpenses.addAll(trip.expenses);
    }

    return allExpenses;
  }

  /// –£—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥ - —Ç–µ–ø–µ—Ä—å –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
  @Deprecated('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ updateTrip()')
  Future<FishingExpenseModel> addExpense(FishingExpenseModel expense) async {
    throw UnimplementedError('–ú–µ—Ç–æ–¥ –±–æ–ª—å—à–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ createTripWithExpenses()');
  }

  /// –£—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥ - —Ç–µ–ø–µ—Ä—å –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
  @Deprecated('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ updateTrip()')
  Future<void> deleteExpense(String expenseId) async {
    throw UnimplementedError('–ú–µ—Ç–æ–¥ –±–æ–ª—å—à–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –†–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –∑–∞–º–µ—Ç–∫—É –±—é–¥–∂–µ—Ç–∞ —Ü–µ–ª–∏–∫–æ–º');
  }
}

/// –°–≤–æ–¥–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
class CategoryExpenseSummary {
  /// –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤
  final FishingExpenseCategory category;

  /// –û–±—â–∞—è —Å—É–º–º–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  final double totalAmount;

  /// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—Ö–æ–¥–æ–≤
  final int expenseCount;

  /// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–º–µ—Ç–æ–∫ —Å —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
  final int tripCount;

  /// –í–∞–ª—é—Ç–∞
  final String currency;

  const CategoryExpenseSummary({
    required this.category,
    required this.totalAmount,
    required this.expenseCount,
    required this.tripCount,
    required this.currency,
  });

  /// –ü–æ–ª—É—á–∏—Ç—å —Å–∏–º–≤–æ–ª –≤–∞–ª—é—Ç—ã
  String get currencySymbol {
    switch (currency) {
      case 'KZT':
        return '‚Ç∏';
      case 'USD':
        return '\$';
      case 'EUR':
        return '‚Ç¨';
      case 'RUB':
        return '‚ÇΩ';
      default:
        return currency;
    }
  }

  /// –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞
  String get formattedAmount {
    return '$currencySymbol ${totalAmount.toStringAsFixed(totalAmount.truncateToDouble() == totalAmount ? 0 : 2)}';
  }

  /// –û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–º–µ—Ç–æ–∫
  String get tripCountDescription {
    if (tripCount == 1) {
      return '–∏–∑ 1 –∑–∞–º–µ—Ç–∫–∏';
    } else if (tripCount >= 2 && tripCount <= 4) {
      return '–∏–∑ $tripCount –∑–∞–º–µ—Ç–æ–∫';
    } else {
      return '–∏–∑ $tripCount –∑–∞–º–µ—Ç–æ–∫';
    }
  }
}