// –ü—É—Ç—å: lib/repositories/budget_notes_repository.dart

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/foundation.dart';
import 'package:uuid/uuid.dart';
import '../models/fishing_expense_model.dart';
import '../models/fishing_trip_model.dart';
import '../models/isar/budget_note_entity.dart';
import '../services/firebase/firebase_service.dart';
import '../services/isar_service.dart';
import '../utils/network_utils.dart';
import '../services/subscription/subscription_service.dart';
import '../constants/subscription_constants.dart';

/// ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–´–ô Repository –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∞–º–∏ –±—é–¥–∂–µ—Ç–∞ —á–µ—Ä–µ–∑ Isar
class BudgetNotesRepository {
  static final BudgetNotesRepository _instance = BudgetNotesRepository._internal();

  factory BudgetNotesRepository() {
    return _instance;
  }

  BudgetNotesRepository._internal();

  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final FirebaseService _firebaseService = FirebaseService();
  final IsarService _isarService = IsarService.instance;
  final SubscriptionService _subscriptionService = SubscriptionService();

  // –ö—ç—à –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫
  static List<FishingTripModel>? _cachedTrips;
  static DateTime? _cacheTimestamp;
  static const Duration _cacheValidity = Duration(minutes: 2);

  /// ‚úÖ –ù–û–í–û–ï: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
  Future<void> initialize() async {
    try {
      debugPrint('üè¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è BudgetNotesRepository...');

      // IsarService –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ main.dart
      if (!_isarService.isInitialized) {
        await _isarService.init();
      }

      debugPrint('‚úÖ BudgetNotesRepository –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ BudgetNotesRepository: $e');
      rethrow;
    }
  }

  /// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏ –±—é–¥–∂–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Isar
  Future<List<FishingTripModel>> getUserTrips() async {
    try {
      final userId = _firebaseService.currentUserId;
      if (userId == null || userId.isEmpty) {
        throw Exception('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      }

      debugPrint('üè¶ BudgetNotesRepository.getUserTrips() - userId: $userId');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
      if (_cachedTrips != null && _cacheTimestamp != null) {
        final cacheAge = DateTime.now().difference(_cacheTimestamp!);
        if (cacheAge < _cacheValidity) {
          debugPrint('üíæ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ (–≤–æ–∑—Ä–∞—Å—Ç: ${cacheAge.inSeconds}—Å)');
          return _cachedTrips!;
        } else {
          debugPrint('üíæ –ö—ç—à —É—Å—Ç–∞—Ä–µ–ª, –æ—á–∏—â–∞–µ–º');
          _cachedTrips = null;
          _cacheTimestamp = null;
        }
      }

      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Isar –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ
      final budgetEntities = await _isarService.getAllBudgetNotes(userId);
      debugPrint('üíæ –ù–∞–π–¥–µ–Ω–æ ${budgetEntities.length} –∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞ –≤ Isar');

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ FishingTripModel –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      final trips = budgetEntities.map((entity) => entity.toTripModel()).toList();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      final isOnline = await NetworkUtils.isNetworkAvailable();
      debugPrint('üåê –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ç–∏: ${isOnline ? '–û–Ω–ª–∞–π–Ω' : '–û—Ñ–ª–∞–π–Ω'}');

      if (isOnline) {
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤ —Ñ–æ–Ω–µ –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        final hasUnsyncedData = budgetEntities.any((entity) => !entity.isSynced);
        if (hasUnsyncedData) {
          debugPrint('üîÑ –ù–∞–π–¥–µ–Ω—ã –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∑–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é');
          _syncBudgetNotesInBackground();
        }

        // –¢–∞–∫–∂–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Firebase –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        _syncFromFirebaseInBackground(userId);
      }

      debugPrint('üìä –ò—Ç–æ–≥–æ –∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞: ${trips.length}');

      // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      _cachedTrips = trips;
      _cacheTimestamp = DateTime.now();

      return trips;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –≤ getUserTrips: $e');

      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, –ø—ã—Ç–∞–µ–º—Å—è –≤–µ—Ä–Ω—É—Ç—å —Ö–æ—Ç—è –±—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ Isar
      try {
        final userId = _firebaseService.currentUserId;
        if (userId != null) {
          final budgetEntities = await _isarService.getAllBudgetNotes(userId);
          return budgetEntities.map((entity) => entity.toTripModel()).toList();
        }
      } catch (_) {
        // –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
      }
      return [];
    }
  }

  /// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É –±—é–¥–∂–µ—Ç–∞ —Å —Ä–∞—Å—Ö–æ–¥–∞–º–∏ —á–µ—Ä–µ–∑ Isar
  Future<FishingTripModel> createTripWithExpenses({
    required DateTime date,
    String? locationName,
    String? notes,
    String currency = 'KZT',
    required Map<FishingExpenseCategory, double> categoryAmounts,
    required Map<FishingExpenseCategory, String> categoryDescriptions,
    required Map<FishingExpenseCategory, String> categoryNotes,
  }) async {
    try {
      final userId = _firebaseService.currentUserId;
      if (userId == null) {
        throw Exception('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      }

      debugPrint('üè¶ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –±—é–¥–∂–µ—Ç–∞ —Å —Ä–∞—Å—Ö–æ–¥–∞–º–∏...');

      // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –¥–ª—è budgetNotes
      final canCreate = await _subscriptionService.canCreateContentOffline(
        ContentType.budgetNotes,
      );

      if (!canCreate) {
        throw Exception('–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞');
      }

      // –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—Ö–æ–¥—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ —Å—É–º–º–∞–º–∏
      final List<FishingExpenseModel> expenses = [];
      int expenseIndex = 0;

      for (final category in FishingExpenseCategory.allCategories) {
        final amount = categoryAmounts[category] ?? 0.0;
        if (amount > 0) {
          final description = categoryDescriptions[category]?.trim() ?? '';
          final expenseNotes = categoryNotes[category]?.trim() ?? '';

          // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞—Å—Ö–æ–¥–∞
          final now = DateTime.now();
          final expenseId = 'expense_${now.millisecondsSinceEpoch}_$expenseIndex';

          final expense = FishingExpenseModel(
            id: expenseId,
            userId: userId,
            tripId: '', // –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏
            amount: amount,
            description: description.isNotEmpty ? description : '–†–∞—Å—Ö–æ–¥—ã',
            category: category,
            date: date,
            currency: currency,
            notes: expenseNotes.isEmpty ? null : expenseNotes,
            locationName: locationName,
            createdAt: now,
            updatedAt: now,
            isSynced: false,
          );

          expenses.add(expense);
          expenseIndex++;
        }
      }

      debugPrint('üè¶ –°–æ–∑–¥–∞–Ω–æ ${expenses.length} —Ä–∞—Å—Ö–æ–¥–æ–≤');

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
      final tripId = const Uuid().v4();

      // –û–±–Ω–æ–≤–ª—è–µ–º tripId –≤ —Ä–∞—Å—Ö–æ–¥–∞—Ö
      final updatedExpenses = expenses.map((expense) =>
          expense.copyWith(tripId: tripId)
      ).toList();

      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ–∑–¥–∞–µ–º BudgetNoteEntity –¥–ª—è Isar
      final budgetEntity = BudgetNoteEntity.create(
        customId: tripId,
        userId: userId,
        date: date,
        locationName: locationName,
        notes: notes,
        currency: currency,
        expenses: updatedExpenses,
      );

      // ‚úÖ –ù–û–í–û–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Isar
      await _isarService.insertBudgetNote(budgetEntity);
      debugPrint('üíæ –ó–∞–º–µ—Ç–∫–∞ –±—é–¥–∂–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Isar: $tripId');

      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
      try {
        await _subscriptionService.incrementUsage(ContentType.budgetNotes);
        debugPrint('‚úÖ –°—á–µ—Ç—á–∏–∫ –∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞ —É–≤–µ–ª–∏—á–µ–Ω');
      } catch (e) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞: $e');
      }

      // –û—á–∏—â–∞–µ–º –∫—ç—à –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏
      clearCache();

      // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤ —Ñ–æ–Ω–µ
      final isOnline = await NetworkUtils.isNetworkAvailable();
      if (isOnline) {
        _syncBudgetNotesInBackground();
      }

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º FishingTripModel –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      return budgetEntity.toTripModel();
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ –±—é–¥–∂–µ—Ç–∞: $e');
      rethrow;
    }
  }

  /// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –±—é–¥–∂–µ—Ç–∞ —á–µ—Ä–µ–∑ Isar
  Future<FishingTripModel> updateTrip(FishingTripModel trip) async {
    try {
      if (trip.id.isEmpty) {
        throw Exception('ID –∑–∞–º–µ—Ç–∫–∏ –±—é–¥–∂–µ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
      }

      final userId = _firebaseService.currentUserId;
      if (userId == null || userId.isEmpty) {
        throw Exception('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      }

      debugPrint('üè¶ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –±—é–¥–∂–µ—Ç–∞: ${trip.id}');

      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–∞—Ö–æ–¥–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –≤ Isar
      final existingEntity = await _isarService.getBudgetNoteByFirebaseId(trip.id);

      if (existingEntity != null) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
        final updatedEntity = BudgetNoteEntity.fromTripModel(trip);
        updatedEntity.id = existingEntity.id; // –°–æ—Ö—Ä–∞–Ω—è–µ–º Isar ID
        updatedEntity.markAsModified(); // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∏–∑–º–µ–Ω–µ–Ω–Ω—É—é

        await _isarService.updateBudgetNote(updatedEntity);
        debugPrint('üíæ –ó–∞–º–µ—Ç–∫–∞ –±—é–¥–∂–µ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ Isar');
      } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        final newEntity = BudgetNoteEntity.fromTripModel(trip);
        newEntity.markAsModified();

        await _isarService.insertBudgetNote(newEntity);
        debugPrint('üíæ –ó–∞–º–µ—Ç–∫–∞ –±—é–¥–∂–µ—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞ –≤ Isar (–Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)');
      }

      // –û—á–∏—â–∞–µ–º –∫—ç—à –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏
      clearCache();

      // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤ —Ñ–æ–Ω–µ
      final isOnline = await NetworkUtils.isNetworkAvailable();
      if (isOnline) {
        _syncBudgetNotesInBackground();
      }

      return trip;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏ –±—é–¥–∂–µ—Ç–∞: $e');
      rethrow;
    }
  }

  /// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –±—é–¥–∂–µ—Ç–∞ –ø–æ ID —á–µ—Ä–µ–∑ Isar
  Future<FishingTripModel?> getTripById(String tripId) async {
    try {
      if (tripId.isEmpty) {
        throw Exception('ID –∑–∞–º–µ—Ç–∫–∏ –±—é–¥–∂–µ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
      }

      final userId = _firebaseService.currentUserId;
      if (userId == null || userId.isEmpty) {
        throw Exception('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      }

      debugPrint('üè¶ –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –±—é–¥–∂–µ—Ç–∞ –ø–æ ID: $tripId');

      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—â–µ–º –≤ Isar
      final budgetEntity = await _isarService.getBudgetNoteByFirebaseId(tripId);

      if (budgetEntity != null) {
        debugPrint('‚úÖ –ó–∞–º–µ—Ç–∫–∞ –±—é–¥–∂–µ—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ Isar');
        return budgetEntity.toTripModel();
      }

      debugPrint('‚ö†Ô∏è –ó–∞–º–µ—Ç–∫–∞ –±—é–¥–∂–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: $tripId');
      return null;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏ –±—é–¥–∂–µ—Ç–∞: $e');
      return null;
    }
  }

  /// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –±—é–¥–∂–µ—Ç–∞ —á–µ—Ä–µ–∑ Isar
  Future<void> deleteTrip(String tripId) async {
    try {
      if (tripId.isEmpty) {
        throw Exception('ID –∑–∞–º–µ—Ç–∫–∏ –±—é–¥–∂–µ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
      }

      final userId = _firebaseService.currentUserId;
      if (userId == null || userId.isEmpty) {
        throw Exception('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      }

      debugPrint('üè¶ –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –±—é–¥–∂–µ—Ç–∞: $tripId');

      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–∞—Ö–æ–¥–∏–º –∏ –ø–æ–º–µ—á–∞–µ–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ Isar
      final budgetEntity = await _isarService.getBudgetNoteByFirebaseId(tripId);

      if (budgetEntity != null) {
        if (budgetEntity.isSynced) {
          // –ï—Å–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, –ø–æ–º–µ—á–∞–µ–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
          await _isarService.markBudgetNoteForDeletion(tripId);
          debugPrint('üíæ –ó–∞–º–µ—Ç–∫–∞ –±—é–¥–∂–µ—Ç–∞ –ø–æ–º–µ—á–µ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
        } else {
          // –ï—Å–ª–∏ –Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, —É–¥–∞–ª—è–µ–º —Å—Ä–∞–∑—É
          await _isarService.deleteBudgetNote(budgetEntity.id);
          debugPrint('üíæ –ù–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–º–µ—Ç–∫–∞ –±—é–¥–∂–µ—Ç–∞ —É–¥–∞–ª–µ–Ω–∞');
        }
      }

      // –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫
      try {
        await _subscriptionService.decrementUsage(ContentType.budgetNotes);
        debugPrint('‚úÖ –°—á–µ—Ç—á–∏–∫ –∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞ —É–º–µ–Ω—å—à–µ–Ω');
      } catch (e) {
        debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–º–µ–Ω—å—à–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞: $e');
      }

      // –û—á–∏—â–∞–µ–º –∫—ç—à –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏
      clearCache();

      // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤ —Ñ–æ–Ω–µ
      final isOnline = await NetworkUtils.isNetworkAvailable();
      if (isOnline) {
        _syncBudgetNotesInBackground();
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏ –±—é–¥–∂–µ—Ç–∞: $e');
      rethrow;
    }
  }

  /// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –§–æ–Ω–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞ —Å Firebase
  void _syncBudgetNotesInBackground() async {
    try {
      final userId = _firebaseService.currentUserId;
      if (userId == null) return;

      debugPrint('üîÑ –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞...');

      // –ü–æ–ª—É—á–∞–µ–º –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏
      final unsyncedNotes = await _isarService.getUnsyncedBudgetNotes(userId);

      for (final entity in unsyncedNotes) {
        try {
          if (entity.firebaseId != null) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–º–µ—Ç–∫—É –≤ Firebase
            final budgetData = entity.toMapWithExpenses();
            await _firebaseService.updateBudgetNote(entity.firebaseId!, budgetData);

            // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é
            await _isarService.markBudgetNoteAsSynced(entity.id, entity.firebaseId!);

            debugPrint('‚úÖ –ó–∞–º–µ—Ç–∫–∞ –±—é–¥–∂–µ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ Firebase: ${entity.firebaseId}');
          } else {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É –≤ Firebase
            final budgetData = entity.toMapWithExpenses();
            final noteRef = await _firebaseService.addBudgetNote(budgetData);

            // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å –Ω–æ–≤—ã–º Firebase ID
            await _isarService.markBudgetNoteAsSynced(entity.id, noteRef.id);

            debugPrint('‚úÖ –ó–∞–º–µ—Ç–∫–∞ –±—é–¥–∂–µ—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞ –≤ Firebase: ${noteRef.id}');
          }
        } catch (e) {
          debugPrint('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–º–µ—Ç–∫–∏ –±—é–¥–∂–µ—Ç–∞ ${entity.firebaseId}: $e');
        }
      }

      debugPrint('‚úÖ –§–æ–Ω–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞: $e');
    }
  }

  /// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Firebase –≤ Isar
  void _syncFromFirebaseInBackground(String userId) async {
    try {
      debugPrint('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞ –∏–∑ Firebase...');

      final snapshot = await _firebaseService.getUserBudgetNotes();

      for (var doc in snapshot.docs) {
        try {
          final firebaseId = doc.id;
          final data = doc.data() as Map<String, dynamic>;
          data['id'] = firebaseId;

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –∑–∞–º–µ—Ç–∫–∞ –≤ Isar
          final existingEntity = await _isarService.getBudgetNoteByFirebaseId(firebaseId);

          if (existingEntity == null) {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ Isar
            final entity = BudgetNoteEntity.fromMapWithExpenses(data);
            entity.markAsSynced();

            await _isarService.insertBudgetNote(entity);
            debugPrint('‚úÖ –ù–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞ –±—é–¥–∂–µ—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ Isar: $firebaseId');
          } else {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
            final firebaseUpdatedAt = DateTime.fromMillisecondsSinceEpoch(data['updatedAt'] as int);

            if (firebaseUpdatedAt.isAfter(existingEntity.updatedAt)) {
              // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ Firebase
              final updatedEntity = BudgetNoteEntity.fromMapWithExpenses(data);
              updatedEntity.id = existingEntity.id; // –°–æ—Ö—Ä–∞–Ω—è–µ–º Isar ID
              updatedEntity.markAsSynced();

              await _isarService.updateBudgetNote(updatedEntity);
              debugPrint('‚úÖ –ó–∞–º–µ—Ç–∫–∞ –±—é–¥–∂–µ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ Firebase: $firebaseId');
            }
          }
        } catch (e) {
          debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–º–µ—Ç–∫–∏ –±—é–¥–∂–µ—Ç–∞ ${doc.id}: $e');
        }
      }

      // –û—á–∏—â–∞–µ–º –∫—ç—à –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      clearCache();

      debugPrint('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–∑ Firebase –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏–∑ Firebase: $e');
    }
  }

  // ========================================
  // –û–°–¢–ê–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ (—Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
  // ========================================

  /// –ü–æ–ª—É—á–∏—Ç—å —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  Future<Map<FishingExpenseCategory, CategoryExpenseSummary>> getCategorySummaries({
    DateTime? startDate,
    DateTime? endDate,
  }) async {
    try {
      debugPrint('üè¶ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º...');

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
      List<FishingTripModel> trips;
      if (_cachedTrips != null && _cacheTimestamp != null) {
        final cacheAge = DateTime.now().difference(_cacheTimestamp!);
        if (cacheAge < _cacheValidity) {
          debugPrint('üíæ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
          trips = _cachedTrips!;
        } else {
          debugPrint('üíæ –ö—ç—à —É—Å—Ç–∞—Ä–µ–ª, –∑–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–Ω–æ–≤–æ');
          trips = await getUserTrips();
        }
      } else {
        debugPrint('üíæ –ö—ç—à–∞ –Ω–µ—Ç, –∑–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–º–µ—Ç–∫–∏');
        trips = await getUserTrips();
      }

      debugPrint('üè¶ –ü–æ–ª—É—á–µ–Ω–æ ${trips.length} –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');

      // –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–º–µ—Ç–∫–∏ –ø–æ –ø–µ—Ä–∏–æ–¥—É
      final filteredTrips = trips.where((trip) {
        if (startDate != null && trip.date.isBefore(startDate)) return false;
        if (endDate != null && trip.date.isAfter(endDate)) return false;
        return true;
      }).toList();

      debugPrint('üè¶ –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Å—Ç–∞–ª–æ—Å—å ${filteredTrips.length} –∑–∞–º–µ—Ç–æ–∫');

      final Map<FishingExpenseCategory, CategoryExpenseSummary> summaries = {};

      for (final category in FishingExpenseCategory.allCategories) {
        double totalAmount = 0;
        int expenseCount = 0;
        int tripCount = 0;
        String currency = 'KZT';

        for (final trip in filteredTrips) {
          bool hasCategoryInTrip = false;

          for (final expense in trip.expenses) {
            if (expense.category == category) {
              totalAmount += expense.amount;
              expenseCount++;
              currency = expense.currency;
              hasCategoryInTrip = true;
            }
          }

          if (hasCategoryInTrip) {
            tripCount++;
          }
        }

        if (totalAmount > 0) {
          summaries[category] = CategoryExpenseSummary(
            category: category,
            totalAmount: totalAmount,
            expenseCount: expenseCount,
            tripCount: tripCount,
            currency: currency,
          );

          debugPrint('‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è ${category.toString()}: ${totalAmount.toStringAsFixed(2)} $currency');
        }
      }

      debugPrint('‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${summaries.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å —Ä–∞—Å—Ö–æ–¥–∞–º–∏');
      return summaries;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º: $e');
      return {};
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞
  Future<FishingTripStatistics> getTripStatistics({
    DateTime? startDate,
    DateTime? endDate,
  }) async {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
      List<FishingTripModel> allTrips;
      if (_cachedTrips != null && _cacheTimestamp != null) {
        final cacheAge = DateTime.now().difference(_cacheTimestamp!);
        if (cacheAge < _cacheValidity) {
          debugPrint('üíæ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
          allTrips = _cachedTrips!;
        } else {
          debugPrint('üíæ –ö—ç—à —É—Å—Ç–∞—Ä–µ–ª, –∑–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–Ω–æ–≤–æ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
          allTrips = await getUserTrips();
        }
      } else {
        debugPrint('üíæ –ö—ç—à–∞ –Ω–µ—Ç, –∑–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
        allTrips = await getUserTrips();
      }

      // –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–º–µ—Ç–∫–∏ –ø–æ –ø–µ—Ä–∏–æ–¥—É
      final filteredTrips = allTrips.where((trip) {
        if (startDate != null && trip.date.isBefore(startDate)) return false;
        if (endDate != null && trip.date.isAfter(endDate)) return false;
        return true;
      }).toList();

      return FishingTripStatistics.fromTrips(
        filteredTrips,
        startDate: startDate,
        endDate: endDate,
      );
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞: $e');
      return FishingTripStatistics.fromTrips([]);
    }
  }

  /// –ü–æ–∏—Å–∫ –∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞
  Future<List<FishingTripModel>> searchTrips(String query) async {
    try {
      if (query.trim().isEmpty) return getUserTrips();

      final allTrips = await getUserTrips();
      final lowercaseQuery = query.toLowerCase();

      return allTrips.where((trip) {
        return trip.locationName?.toLowerCase().contains(lowercaseQuery) == true ||
            trip.notes?.toLowerCase().contains(lowercaseQuery) == true ||
            trip.expenses.any((expense) =>
            expense.description.toLowerCase().contains(lowercaseQuery) ||
                expense.notes?.toLowerCase().contains(lowercaseQuery) == true
            );
      }).toList();
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞: $e');
      return [];
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏ –±—é–¥–∂–µ—Ç–∞
  Future<bool> canCreateTrip() async {
    try {
      return await _subscriptionService.canCreateContentOffline(
        ContentType.budgetNotes,
      );
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ –±—é–¥–∂–µ—Ç–∞: $e');
      return false;
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞
  Future<int> getCurrentUsage() async {
    try {
      return await _subscriptionService.getCurrentUsage(
        ContentType.budgetNotes,
      );
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞: $e');
      return 0;
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞
  Future<int> getUsageLimit() async {
    try {
      return _subscriptionService.getLimit(ContentType.budgetNotes);
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ –∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞: $e');
      return 0;
    }
  }

  /// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏ –±—é–¥–∂–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<void> deleteAllUserTrips() async {
    try {
      final userId = _firebaseService.currentUserId;
      if (userId == null) {
        throw Exception('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      }

      debugPrint('üè¶ –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $userId');

      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–¥–∞–ª—è–µ–º –≤—Å–µ –∏–∑ Isar
      await _isarService.deleteAllBudgetNotes(userId);

      // –û—á–∏—â–∞–µ–º –∫—ç—à
      clearCache();

      debugPrint('‚úÖ –í—Å–µ –∑–∞–º–µ—Ç–∫–∏ –±—é–¥–∂–µ—Ç–∞ —É–¥–∞–ª–µ–Ω—ã');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Å–µ—Ö –∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞: $e');
      rethrow;
    }
  }

  /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
  Future<bool> forceSyncData() async {
    try {
      final userId = _firebaseService.currentUserId;
      if (userId == null) return false;

      debugPrint('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞...');

      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≤ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã
      _syncBudgetNotesInBackground();
      _syncFromFirebaseInBackground(userId);

      // –û—á–∏—â–∞–µ–º –∫—ç—à
      clearCache();

      return true;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: $e');
      return false;
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  Future<Map<String, dynamic>> getSyncStatus() async {
    try {
      final userId = _firebaseService.currentUserId;
      if (userId == null) return {};

      final total = await _isarService.getBudgetNotesCount(userId);
      final unsynced = await _isarService.getUnsyncedBudgetNotesCount(userId);

      return {
        'total': total,
        'unsynced': unsynced,
        'synced': total - unsynced,
      };
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: $e');
      return {};
    }
  }

  /// –û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à –¥–∞–Ω–Ω—ã—Ö
  static void clearCache() {
    _cachedTrips = null;
    _cacheTimestamp = null;
    debugPrint('üíæ –ö—ç—à –∑–∞–º–µ—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞ –æ—á–∏—â–µ–Ω');
  }

  // ========================================
  // –ú–ï–¢–û–î–´ –î–õ–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò –°–û –°–¢–ê–†–´–ú –ö–û–î–û–ú
  // ========================================

  /// –£—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥ - —Ç–µ–ø–µ—Ä—å –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
  @Deprecated('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ getUserTrips() –∏ —Ä–∞–±–æ—Ç–∞–π—Ç–µ —Å —Ä–∞—Å—Ö–æ–¥–∞–º–∏ –≤–Ω—É—Ç—Ä–∏ –∑–∞–º–µ—Ç–æ–∫')
  Future<List<FishingExpenseModel>> getUserExpenses() async {
    final trips = await getUserTrips();
    final allExpenses = <FishingExpenseModel>[];

    for (final trip in trips) {
      allExpenses.addAll(trip.expenses);
    }

    return allExpenses;
  }

  /// –£—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥ - —Ç–µ–ø–µ—Ä—å –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
  @Deprecated('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ updateTrip()')
  Future<FishingExpenseModel> addExpense(FishingExpenseModel expense) async {
    throw UnimplementedError('–ú–µ—Ç–æ–¥ –±–æ–ª—å—à–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ createTripWithExpenses()');
  }

  /// –£—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥ - —Ç–µ–ø–µ—Ä—å –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
  @Deprecated('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ updateTrip()')
  Future<void> deleteExpense(String expenseId) async {
    throw UnimplementedError('–ú–µ—Ç–æ–¥ –±–æ–ª—å—à–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –†–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –∑–∞–º–µ—Ç–∫—É –±—é–¥–∂–µ—Ç–∞ —Ü–µ–ª–∏–∫–æ–º');
  }
}

/// –°–≤–æ–¥–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
class CategoryExpenseSummary {
  final FishingExpenseCategory category;
  final double totalAmount;
  final int expenseCount;
  final int tripCount;
  final String currency;

  const CategoryExpenseSummary({
    required this.category,
    required this.totalAmount,
    required this.expenseCount,
    required this.tripCount,
    required this.currency,
  });

  String get currencySymbol {
    switch (currency) {
      case 'KZT':
        return '‚Ç∏';
      case 'USD':
        return '\$';
      case 'EUR':
        return '‚Ç¨';
      case 'RUB':
        return '‚ÇΩ';
      default:
        return currency;
    }
  }

  String get formattedAmount {
    return '$currencySymbol ${totalAmount.toStringAsFixed(totalAmount.truncateToDouble() == totalAmount ? 0 : 2)}';
  }

  String get tripCountDescription {
    if (tripCount == 1) {
      return '–∏–∑ 1 –∑–∞–º–µ—Ç–∫–∏';
    } else if (tripCount >= 2 && tripCount <= 4) {
      return '–∏–∑ $tripCount –∑–∞–º–µ—Ç–æ–∫';
    } else {
      return '–∏–∑ $tripCount –∑–∞–º–µ—Ç–æ–∫';
    }
  }
}