// –ü—É—Ç—å: lib/repositories/policy_acceptance_repository.dart

import 'package:flutter/foundation.dart';
import 'package:isar/isar.dart'; // ‚úÖ –î–û–ë–ê–í–ò–¢–¨ –≠–¢–£ –°–¢–†–û–ö–£
import '../models/isar/policy_acceptance_entity.dart';
import '../services/isar_service.dart';
import '../services/offline/sync_service.dart';
import '../services/firebase/firebase_service.dart';

/// ‚úÖ Repository –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–Ω—è—Ç–∏–µ–º –ø–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ Isar
class PolicyAcceptanceRepository {
  static final PolicyAcceptanceRepository _instance = PolicyAcceptanceRepository._internal();
  factory PolicyAcceptanceRepository() => _instance;
  PolicyAcceptanceRepository._internal();

  final IsarService _isarService = IsarService.instance;
  final SyncService _syncService = SyncService.instance;
  final FirebaseService _firebaseService = FirebaseService();

  // ========================================
  // CRUD –û–ü–ï–†–ê–¶–ò–ò
  // ========================================

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö —Å–æ–≥–ª–∞—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<PolicyAcceptanceEntity?> getUserPolicyAcceptance(String userId) async {
    try {
      debugPrint('üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $userId');

      final entities = await _isarService.getAllPolicyAcceptances();
      final userEntity = entities.where((e) => e.userId == userId).firstOrNull;

      if (userEntity != null) {
        debugPrint('‚úÖ –ù–∞–π–¥–µ–Ω—ã —Å–æ–≥–ª–∞—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userEntity.toString()}');
        return userEntity;
      }

      debugPrint('‚ùå –°–æ–≥–ª–∞—Å–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return null;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–≥–ª–∞—Å–∏–π: $e');
      return null;
    }
  }

  /// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<bool> savePolicyAcceptance(PolicyAcceptanceEntity entity) async {
    try {
      debugPrint('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–∏–π: ${entity.toString()}');

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
      if (entity.id == Isar.autoIncrement) {
        entity.createdAt = DateTime.now();
      }
      entity.updatedAt = DateTime.now();
      entity.markAsModified(); // isSynced = false

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Isar
      await _isarService.insertPolicyAcceptance(entity);

      debugPrint('‚úÖ –°–æ–≥–ª–∞—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Isar: ID=${entity.id}');

      // –¢—Ä–∏–≥–≥–µ—Ä–∏–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
      _triggerSyncServiceInBackground();

      return true;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–≥–ª–∞—Å–∏–π: $e');
      return false;
    }
  }

  /// –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<bool> createOrUpdatePolicyAcceptance({
    required String userId,
    bool? privacyPolicyAccepted,
    bool? termsOfServiceAccepted,
    String? privacyVersion,
    String? termsVersion,
    String? privacyHash,
    String? termsHash,
    String? language,
  }) async {
    try {
      debugPrint('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $userId');

      // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–æ–≥–ª–∞—Å–∏—è
      PolicyAcceptanceEntity entity = await getUserPolicyAcceptance(userId) ??
          PolicyAcceptanceEntity()
            ..userId = userId
            ..firebaseId = 'consents'
            ..createdAt = DateTime.now();

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
      if (privacyPolicyAccepted == true && privacyVersion != null) {
        entity.acceptPrivacyPolicy(privacyVersion, hash: privacyHash);
      }

      if (termsOfServiceAccepted == true && termsVersion != null) {
        entity.acceptTermsOfService(termsVersion, hash: termsHash);
      }

      if (language != null) {
        entity.consentLanguage = language;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º
      return await savePolicyAcceptance(entity);
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–≥–ª–∞—Å–∏–π: $e');
      return false;
    }
  }

  /// –ü—Ä–∏–Ω—è—Ç–∏–µ –≤—Å–µ—Ö —Å–æ–≥–ª–∞—Å–∏–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
  Future<bool> acceptAllPolicies({
    required String userId,
    required String privacyVersion,
    required String termsVersion,
    String? privacyHash,
    String? termsHash,
    String? language,
  }) async {
    try {
      debugPrint('‚úÖ –ü—Ä–∏–Ω—è—Ç–∏–µ –≤—Å–µ—Ö —Å–æ–≥–ª–∞—Å–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $userId');

      // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–æ–≥–ª–∞—Å–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ
      PolicyAcceptanceEntity entity = await getUserPolicyAcceptance(userId) ??
          PolicyAcceptanceEntity()
            ..userId = userId
            ..firebaseId = 'consents'
            ..createdAt = DateTime.now();

      // –ü—Ä–∏–Ω–∏–º–∞–µ–º –≤—Å–µ —Å–æ–≥–ª–∞—Å–∏—è
      entity.acceptAll(
        privacyVersion,
        termsVersion,
        privacyHash: privacyHash,
        termsHash: termsHash,
        language: language ?? 'ru',
      );

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º
      return await savePolicyAcceptance(entity);
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –≤—Å–µ—Ö —Å–æ–≥–ª–∞—Å–∏–π: $e');
      return false;
    }
  }

  /// –û—á–∏—Å—Ç–∫–∞ —Å–æ–≥–ª–∞—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞)
  Future<bool> clearUserPolicyAcceptance(String userId) async {
    try {
      debugPrint('üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ —Å–æ–≥–ª–∞—Å–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $userId');

      final entity = await getUserPolicyAcceptance(userId);
      if (entity != null) {
        await _isarService.deletePolicyAcceptance(entity.id);
        debugPrint('‚úÖ –°–æ–≥–ª–∞—Å–∏—è –æ—á–∏—â–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $userId');
      }

      return true;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–æ–≥–ª–∞—Å–∏–π: $e');
      return false;
    }
  }

  // ========================================
  // –ü–†–û–í–ï–†–ö–ê –í–ê–õ–ò–î–ù–û–°–¢–ò
  // ========================================

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–≥–ª–∞—Å–∏–π
  Future<bool> arePoliciesValid({
    required String userId,
    required String currentPrivacyVersion,
    required String currentTermsVersion,
  }) async {
    try {
      final entity = await getUserPolicyAcceptance(userId);

      if (entity == null) {
        debugPrint('‚ùå –°–æ–≥–ª–∞—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $userId');
        return false;
      }

      final isValid = entity.isValid(currentPrivacyVersion, currentTermsVersion);
      debugPrint('üîç –í–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å–æ–≥–ª–∞—Å–∏–π –¥–ª—è $userId: $isValid');

      return isValid;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Å–æ–≥–ª–∞—Å–∏–π: $e');
      return false;
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–≥–ª–∞—Å–∏–π (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º)
  Future<Map<String, dynamic>> getPolicyStatus(String userId) async {
    try {
      final entity = await getUserPolicyAcceptance(userId);

      if (entity == null) {
        return {
          'privacy_policy_accepted': false,
          'terms_of_service_accepted': false,
          'privacy_policy_version': '1.0.0',
          'terms_of_service_version': '1.0.0',
          'consent_language': 'ru',
          'consent_timestamp': null,
          'exists': false,
        };
      }

      return {
        'privacy_policy_accepted': entity.privacyPolicyAccepted,
        'terms_of_service_accepted': entity.termsOfServiceAccepted,
        'privacy_policy_version': entity.privacyPolicyVersion,
        'terms_of_service_version': entity.termsOfServiceVersion,
        'privacy_policy_hash': entity.privacyPolicyHash,
        'terms_of_service_hash': entity.termsOfServiceHash,
        'consent_language': entity.consentLanguage,
        'consent_timestamp': entity.consentTimestamp,
        'exists': true,
      };
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–≥–ª–∞—Å–∏–π: $e');
      return {
        'privacy_policy_accepted': false,
        'terms_of_service_accepted': false,
        'exists': false,
        'error': e.toString(),
      };
    }
  }

  // ========================================
  // –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø
  // ========================================

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–≥–ª–∞—Å–∏–π
  Future<List<PolicyAcceptanceEntity>> getUnsyncedPolicyAcceptances() async {
    try {
      final allEntities = await _isarService.getAllPolicyAcceptances();
      final unsynced = allEntities.where((entity) => !entity.isSynced).toList();

      debugPrint('üîÑ –ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–≥–ª–∞—Å–∏–π: ${unsynced.length}');
      return unsynced;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–≥–ª–∞—Å–∏–π: $e');
      return [];
    }
  }

  /// –¢—Ä–∏–≥–≥–µ—Ä —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
  void _triggerSyncServiceInBackground() {
    Future.delayed(Duration.zero, () async {
      try {
        await _syncService.performFullSync();
      } catch (e) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–æ–≥–ª–∞—Å–∏–π: $e');
      }
    });
  }

  // ========================================
  // –û–ë–†–ê–¢–ù–ê–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨
  // ========================================

  /// –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ SharedPreferences (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
  Future<void> migrateFromSharedPreferences(String userId) async {
    try {
      debugPrint('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å–æ–≥–ª–∞—Å–∏–π –∏–∑ SharedPreferences –¥–ª—è: $userId');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ –≤ Isar
      final existingEntity = await getUserPolicyAcceptance(userId);
      if (existingEntity != null) {
        debugPrint('‚úÖ –°–æ–≥–ª–∞—Å–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ Isar, –º–∏–≥—Ä–∞—Ü–∏—è –Ω–µ –Ω—É–∂–Ω–∞');
        return;
      }

      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —á—Ç–µ–Ω–∏—è –∏–∑ SharedPreferences
      // –∏ —Å–æ–∑–¥–∞–Ω–∏—è PolicyAcceptanceEntity
      debugPrint('üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è –∏–∑ SharedPreferences –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –∏–∑ SharedPreferences: $e');
    }
  }

  /// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Firebase (–ø—Ä—è–º–∞—è, –µ—Å–ª–∏ SyncService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)
  Future<bool> syncWithFirebase(String userId) async {
    try {
      debugPrint('üîÑ –ü—Ä—è–º–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ–≥–ª–∞—Å–∏–π —Å Firebase –¥–ª—è: $userId');

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Firebase
      final firebaseDoc = await _firebaseService.getUserConsents();

      if (firebaseDoc.exists) {
        final data = firebaseDoc.data() as Map<String, dynamic>;
        final entity = PolicyAcceptanceEntity.fromFirestoreMap(userId, data);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Isar
        await _isarService.insertPolicyAcceptance(entity);

        debugPrint('‚úÖ –°–æ–≥–ª–∞—Å–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å Firebase');
        return true;
      } else {
        debugPrint('‚ùå –°–æ–≥–ª–∞—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ Firebase');
        return false;
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Firebase: $e');
      return false;
    }
  }

  // ========================================
  // –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê
  // ========================================

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–≥–ª–∞—Å–∏–π –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
  Future<List<PolicyAcceptanceEntity>> getAllPolicyAcceptances() async {
    try {
      return await _isarService.getAllPolicyAcceptances();
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö —Å–æ–≥–ª–∞—Å–∏–π: $e');
      return [];
    }
  }

  /// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
  Future<Map<String, dynamic>> getRepositoryInfo() async {
    try {
      final allEntities = await getAllPolicyAcceptances();
      final unsyncedCount = allEntities.where((e) => !e.isSynced).length;

      return {
        'total_entities': allEntities.length,
        'unsynced_count': unsyncedCount,
        'synced_count': allEntities.length - unsyncedCount,
        'repository_type': 'PolicyAcceptanceRepository',
        'storage_backend': 'Isar',
        'sync_service': 'SyncService',
      };
    } catch (e) {
      return {
        'error': e.toString(),
        'repository_type': 'PolicyAcceptanceRepository',
      };
    }
  }
}