// –ü—É—Ç—å: lib/repositories/user_usage_limits_repository.dart

import 'package:flutter/foundation.dart';
import '../models/isar/user_usage_limits_entity.dart';
import '../models/usage_limits_model.dart';
import '../models/usage_limits_models.dart';
import '../constants/subscription_constants.dart';
import '../services/isar_service.dart';
import '../services/offline/sync_service.dart';

/// Repository –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–∏–º–∏—Ç–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/// –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –º–µ–∂–¥—É –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π Isar –∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π UsageLimitsModel
class UserUsageLimitsRepository {
  static UserUsageLimitsRepository? _instance;
  final IsarService _isarService;
  final SyncService _syncService;

  UserUsageLimitsRepository._({
    required IsarService isarService,
    required SyncService syncService,
  }) : _isarService = isarService,
        _syncService = syncService;

  static UserUsageLimitsRepository get instance {
    _instance ??= UserUsageLimitsRepository._(
      isarService: IsarService.instance,
      syncService: SyncService.instance,
    );
    return _instance!;
  }

  // ========================================
  // –û–°–ù–û–í–ù–´–ï CRUD –û–ü–ï–†–ê–¶–ò–ò
  // ========================================

  /// ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥)
  Future<UsageLimitsModel?> getUserLimits(String userId) async {
    try {
      if (kDebugMode) {
        debugPrint('üìä getUserLimits: –ø–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $userId');
      }

      // –ò—â–µ–º –≤ Isar
      final entity = await _isarService.getUserUsageLimitsByUserId(userId);

      if (entity != null) {
        final model = _entityToModel(entity);

        if (kDebugMode) {
          debugPrint('‚úÖ getUserLimits: –Ω–∞–π–¥–µ–Ω—ã –ª–∏–º–∏—Ç—ã –≤ Isar: $model');
        }

        return model;
      }

      // –ï—Å–ª–∏ –≤ Isar –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—ã–µ –ª–∏–º–∏—Ç—ã
      if (kDebugMode) {
        debugPrint('‚ö†Ô∏è getUserLimits: –ª–∏–º–∏—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
      }

      return UsageLimitsModel.defaultLimits(userId);

    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå getUserLimits: –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤: $e');
      }
      return UsageLimitsModel.defaultLimits(userId);
    }
  }

  /// ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<UsageLimitsModel> saveUserLimits(UsageLimitsModel model) async {
    try {
      if (kDebugMode) {
        debugPrint('üíæ saveUserLimits: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–∏–º–∏—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${model.userId}');
        debugPrint('üíæ saveUserLimits: ${model.toString()}');
      }

      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å –≤ entity
      final entity = _modelToEntity(model);

      // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
      final existingEntity = await _isarService.getUserUsageLimitsByUserId(model.userId);

      if (existingEntity != null) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é
        entity.id = existingEntity.id;
        entity.firebaseId = existingEntity.firebaseId;
        await _isarService.updateUserUsageLimits(entity);

        if (kDebugMode) {
          debugPrint('üîÑ saveUserLimits: –æ–±–Ω–æ–≤–ª–µ–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ª–∏–º–∏—Ç—ã ID: ${entity.id}');
        }
      } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
        await _isarService.insertUserUsageLimits(entity);

        if (kDebugMode) {
          debugPrint('üÜï saveUserLimits: —Å–æ–∑–¥–∞–Ω—ã –Ω–æ–≤—ã–µ –ª–∏–º–∏—Ç—ã ID: ${entity.id}');
        }
      }

      // –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
      _triggerSyncInBackground();

      return _entityToModel(entity);

    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå saveUserLimits: –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤: $e');
      }
      rethrow;
    }
  }

  /// ‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<bool> deleteUserLimits(String userId) async {
    try {
      if (kDebugMode) {
        debugPrint('üóëÔ∏è deleteUserLimits: —É–¥–∞–ª—è–µ–º –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $userId');
      }

      final deleted = await _isarService.deleteUserUsageLimitsByUserId(userId);

      if (deleted) {
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
        _triggerSyncInBackground();

        if (kDebugMode) {
          debugPrint('‚úÖ deleteUserLimits: –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $userId —É–¥–∞–ª–µ–Ω—ã');
        }
      }

      return deleted;

    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå deleteUserLimits: –æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤: $e');
      }
      return false;
    }
  }

  // ========================================
  // –û–ü–ï–†–ê–¶–ò–ò –°–û –°–ß–ï–¢–ß–ò–ö–ê–ú–ò
  // ========================================

  /// ‚úÖ –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –¥–ª—è —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  Future<UsageLimitsModel> incrementCounter(String userId, ContentType contentType) async {
    try {
      if (kDebugMode) {
        debugPrint('üìà incrementCounter: —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ $contentType –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $userId');
      }

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ª–∏–º–∏—Ç—ã
      var model = await getUserLimits(userId) ?? UsageLimitsModel.defaultLimits(userId);

      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
      model = model.incrementCounter(contentType);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º
      return await saveUserLimits(model);

    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå incrementCounter: –æ—à–∏–±–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞: $e');
      }
      rethrow;
    }
  }

  /// ‚úÖ –£–º–µ–Ω—å—à–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –¥–ª—è —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  Future<UsageLimitsModel> decrementCounter(String userId, ContentType contentType) async {
    try {
      if (kDebugMode) {
        debugPrint('üìâ decrementCounter: —É–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ $contentType –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $userId');
      }

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ª–∏–º–∏—Ç—ã
      var model = await getUserLimits(userId) ?? UsageLimitsModel.defaultLimits(userId);

      // –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫
      model = model.decrementCounter(contentType);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º
      return await saveUserLimits(model);

    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå decrementCounter: –æ—à–∏–±–∫–∞ —É–º–µ–Ω—å—à–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞: $e');
      }
      rethrow;
    }
  }

  /// ‚úÖ –ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ—Å—á–µ—Ç –ª–∏–º–∏—Ç–æ–≤
  Future<UsageLimitsModel> recalculateCounters(String userId, {
    required int notesCount,
    required int markerMapsCount,
    required int budgetNotesCount,
    String recalculationType = 'manual_recalculate',
  }) async {
    try {
      if (kDebugMode) {
        debugPrint('üî¢ recalculateCounters: –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ª–∏–º–∏—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $userId');
        debugPrint('üî¢ recalculateCounters: notes=$notesCount, maps=$markerMapsCount, budget=$budgetNotesCount');
      }

      // –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º —á–µ—Ä–µ–∑ IsarService
      final entity = await _isarService.createOrUpdateUserUsageLimits(
        userId,
        notesCount: notesCount,
        markerMapsCount: markerMapsCount,
        budgetNotesCount: budgetNotesCount,
        recalculationType: recalculationType,
      );

      // –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
      _triggerSyncInBackground();

      final model = _entityToModel(entity);

      if (kDebugMode) {
        debugPrint('‚úÖ recalculateCounters: –ª–∏–º–∏—Ç—ã –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã: $model');
      }

      return model;

    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå recalculateCounters: –æ—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –ª–∏–º–∏—Ç–æ–≤: $e');
      }
      rethrow;
    }
  }

  /// ‚úÖ –°–±—Ä–æ—Å –≤—Å–µ—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤
  Future<UsageLimitsModel> resetAllCounters(String userId) async {
    try {
      if (kDebugMode) {
        debugPrint('üîÑ resetAllCounters: —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Å—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $userId');
      }

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ª–∏–º–∏—Ç—ã
      var model = await getUserLimits(userId) ?? UsageLimitsModel.defaultLimits(userId);

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏
      model = model.resetAllCounters();

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º
      return await saveUserLimits(model);

    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå resetAllCounters: –æ—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Å—á–µ—Ç—á–∏–∫–æ–≤: $e');
      }
      rethrow;
    }
  }

  // ========================================
  // –ü–†–û–í–ï–†–ö–ò –õ–ò–ú–ò–¢–û–í
  // ========================================

  /// ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  Future<ContentCreationResult> canCreateContent(String userId, ContentType contentType) async {
    try {
      final model = await getUserLimits(userId) ?? UsageLimitsModel.defaultLimits(userId);

      final canCreate = model.canCreateNew(contentType);
      final currentCount = model.getCountForType(contentType);
      final limit = SubscriptionConstants.getContentLimit(contentType);
      final remaining = model.getRemainingCount(contentType);

      ContentCreationBlockReason? reason;
      if (!canCreate) {
        if (contentType == ContentType.depthChart) {
          reason = ContentCreationBlockReason.premiumRequired;
        } else {
          reason = ContentCreationBlockReason.limitReached;
        }
      }

      return ContentCreationResult(
        canCreate: canCreate,
        reason: reason,
        currentCount: currentCount,
        limit: limit,
        remaining: remaining,
      );

    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå canCreateContent: –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤: $e');
      }

      return ContentCreationResult(
        canCreate: false,
        reason: ContentCreationBlockReason.error,
        currentCount: 0,
        limit: 0,
        remaining: 0,
      );
    }
  }

  /// ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –æ –ª–∏–º–∏—Ç–∞—Ö
  Future<List<ContentTypeWarning>> getContentWarnings(String userId) async {
    try {
      final model = await getUserLimits(userId) ?? UsageLimitsModel.defaultLimits(userId);
      final warnings = <ContentTypeWarning>[];

      for (final contentType in [ContentType.fishingNotes, ContentType.markerMaps, ContentType.budgetNotes]) {
        if (model.shouldShowWarning(contentType)) {
          warnings.add(ContentTypeWarning(
            contentType: contentType,
            currentCount: model.getCountForType(contentType),
            limit: SubscriptionConstants.getContentLimit(contentType),
            remaining: model.getRemainingCount(contentType),
            percentage: model.getUsagePercentage(contentType),
          ));
        }
      }

      return warnings;

    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå getContentWarnings: –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: $e');
      }
      return [];
    }
  }

  // ========================================
  // –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò –û–¢–ß–ï–¢–´
  // ========================================

  /// ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
  Future<Map<String, dynamic>> getUsageStats(String userId) async {
    try {
      final model = await getUserLimits(userId) ?? UsageLimitsModel.defaultLimits(userId);
      return model.getUsageStats();

    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå getUsageStats: –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: $e');
      }
      return {};
    }
  }

  /// ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  Future<Map<String, dynamic>> getStatsForType(String userId, ContentType contentType) async {
    try {
      final model = await getUserLimits(userId) ?? UsageLimitsModel.defaultLimits(userId);
      return model.getStatsForType(contentType);

    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå getStatsForType: –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è —Ç–∏–ø–∞: $e');
      }
      return {};
    }
  }

  // ========================================
  // –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø
  // ========================================

  /// ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤
  Future<List<UserUsageLimitsEntity>> getUnsyncedLimits() async {
    try {
      return await _isarService.getUnsyncedUserUsageLimits();
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå getUnsyncedLimits: –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤: $e');
      }
      return [];
    }
  }

  /// ‚úÖ –ü–æ–º–µ—Ç–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –∫–∞–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
  Future<void> markAsSynced(int id, String firebaseId) async {
    try {
      await _isarService.markUserUsageLimitsAsSynced(id, firebaseId);

      if (kDebugMode) {
        debugPrint('‚úÖ markAsSynced: –ª–∏–º–∏—Ç—ã $id –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ');
      }
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå markAsSynced: –æ—à–∏–±–∫–∞ –ø–æ–º–µ—Ç–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: $e');
      }
    }
  }

  /// ‚úÖ –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
  void _triggerSyncInBackground() {
    try {
      // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
      _syncService.syncUserUsageLimitsToFirebase().catchError((error) {
        if (kDebugMode) {
          debugPrint('‚ö†Ô∏è –§–æ–Ω–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ª–∏–º–∏—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π: $error');
        }
      });

      if (kDebugMode) {
        debugPrint('üîÑ –ó–∞–ø—É—â–µ–Ω–∞ —Ñ–æ–Ω–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ª–∏–º–∏—Ç–æ–≤');
      }
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ª–∏–º–∏—Ç–æ–≤: $e');
      }
    }
  }

  // ========================================
  // –ö–û–ù–í–ï–†–¢–ê–¶–ò–Ø –ú–ï–ñ–î–£ –ú–û–î–ï–õ–Ø–ú–ò
  // ========================================

  /// ‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è Entity –≤ Model
  UsageLimitsModel _entityToModel(UserUsageLimitsEntity entity) {
    return UsageLimitsModel(
      userId: entity.userId,
      notesCount: entity.notesCount,
      markerMapsCount: entity.markerMapsCount,
      budgetNotesCount: entity.budgetNotesCount,
      lastResetDate: entity.lastResetDate != null
          ? DateTime.tryParse(entity.lastResetDate!) ?? entity.createdAt
          : entity.createdAt,
      updatedAt: entity.updatedAt,
    );
  }

  /// ‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è Model –≤ Entity
  UserUsageLimitsEntity _modelToEntity(UsageLimitsModel model) {
    final entity = UserUsageLimitsEntity();

    entity.userId = model.userId;
    entity.budgetNotesCount = model.budgetNotesCount;
    entity.expensesCount = model.budgetNotesCount; // –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
    entity.markerMapsCount = model.markerMapsCount;
    entity.notesCount = model.notesCount;
    entity.tripsCount = 0; // –ü–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ UsageLimitsModel

    entity.lastResetDate = model.lastResetDate.toIso8601String();
    entity.recalculatedAt = DateTime.now().toIso8601String();
    entity.recalculationType = 'repository_update';

    entity.createdAt = DateTime.now();
    entity.updatedAt = model.updatedAt;
    entity.isSynced = false; // –í—Å–µ–≥–¥–∞ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Firebase

    return entity;
  }

  // ========================================
  // –û–¢–õ–ê–î–ö–ê –ò –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê
  // ========================================

  /// ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
  Future<Map<String, dynamic>> getDebugInfo(String userId) async {
    try {
      final entity = await _isarService.getUserUsageLimitsByUserId(userId);
      final model = await getUserLimits(userId);

      return {
        'hasEntity': entity != null,
        'hasModel': model != null,
        'entity': entity?.toString(),
        'model': model?.toString(),
        'syncStatus': entity?.isSynced ?? false,
        'lastSync': entity?.lastSyncAt?.toIso8601String(),
      };
    } catch (e) {
      return {'error': e.toString()};
    }
  }

  /// ‚úÖ –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –ª–∏–º–∏—Ç–æ–≤ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
  Future<void> clearAllLimits() async {
    try {
      if (kDebugMode) {
        debugPrint('üóëÔ∏è clearAllLimits: –æ—á–∏—â–∞–µ–º –≤—Å–µ –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
      }

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏ —É–¥–∞–ª—è–µ–º –∏—Ö
      final allLimits = await _isarService.getAllUserUsageLimits();
      for (final limits in allLimits) {
        await _isarService.deleteUserUsageLimits(limits.id);
      }

      if (kDebugMode) {
        debugPrint('‚úÖ clearAllLimits: –≤—Å–µ –ª–∏–º–∏—Ç—ã –æ—á–∏—â–µ–Ω—ã');
      }
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå clearAllLimits: –æ—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–∏–º–∏—Ç–æ–≤: $e');
      }
    }
  }
}