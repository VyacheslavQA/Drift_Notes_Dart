// –ü—É—Ç—å: lib/repositories/fishing_expense_repository.dart

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/foundation.dart';
import '../models/fishing_expense_model.dart';
import '../services/firebase/firebase_service.dart';
import '../services/offline/offline_storage_service.dart';
import '../utils/network_utils.dart';

/// Repository –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞–º–∏ –Ω–∞ —Ä—ã–±–∞–ª–∫—É
class FishingExpenseRepository {
  static final FishingExpenseRepository _instance = FishingExpenseRepository._internal();

  factory FishingExpenseRepository() {
    return _instance;
  }

  FishingExpenseRepository._internal();

  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final FirebaseService _firebaseService = FirebaseService();
  final OfflineStorageService _offlineStorage = OfflineStorageService();

  static const String _collectionName = 'fishing_expenses';
  static const String _offlineKey = 'offline_fishing_expenses';

  /// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ä–∞—Å—Ö–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<List<FishingExpenseModel>> getUserExpenses() async {
    try {
      final userId = _firebaseService.currentUserId;
      if (userId == null) {
        throw Exception('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
      final isOnline = await NetworkUtils.isNetworkAvailable();

      if (isOnline) {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ Firestore
        final onlineExpenses = await _getExpensesFromFirestore(userId);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ—Ñ–ª–∞–π–Ω –∫–µ—à
        await _cacheExpensesOffline(onlineExpenses);

        debugPrint('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${onlineExpenses.length} —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏–∑ Firestore');
        return onlineExpenses;
      } else {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –æ—Ñ–ª–∞–π–Ω –∫–µ—à–∞
        final offlineExpenses = await _getExpensesFromOfflineCache();
        debugPrint('üì± –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${offlineExpenses.length} —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏–∑ –æ—Ñ–ª–∞–π–Ω –∫–µ—à–∞');
        return offlineExpenses;
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤: $e');

      // –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –æ—Ñ–ª–∞–π–Ω –∫–µ—à–∞
      try {
        final offlineExpenses = await _getExpensesFromOfflineCache();
        debugPrint('üì± Fallback: –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${offlineExpenses.length} —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏–∑ –∫–µ—à–∞');
        return offlineExpenses;
      } catch (offlineError) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –æ—Ñ–ª–∞–π–Ω –∫–µ—à–∞: $offlineError');
        return [];
      }
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –∏–∑ Firestore
  Future<List<FishingExpenseModel>> _getExpensesFromFirestore(String userId) async {
    final snapshot = await _firestore
        .collection(_collectionName)
        .where('userId', isEqualTo: userId)
        .get();

    final expenses = snapshot.docs
        .map((doc) => FishingExpenseModel.fromMap(doc.data()))
        .toList();

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤ –∫–æ–¥–µ –≤–º–µ—Å—Ç–æ Firestore
    expenses.sort((a, b) => b.date.compareTo(a.date));

    return expenses;
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –∏–∑ –æ—Ñ–ª–∞–π–Ω –∫–µ—à–∞
  Future<List<FishingExpenseModel>> _getExpensesFromOfflineCache() async {
    final prefs = await _offlineStorage.preferences;
    final expensesJson = prefs.getStringList(_offlineKey) ?? [];

    final List<FishingExpenseModel> expenses = [];
    for (var expenseJsonString in expensesJson) {
      try {
        final expenseJson = Map<String, dynamic>.from(
            await compute(_parseJson, expenseJsonString)
        );
        expenses.add(FishingExpenseModel.fromJson(expenseJson));
      } catch (e) {
        debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ñ–ª–∞–π–Ω —Ä–∞—Å—Ö–æ–¥–∞: $e');
      }
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
    expenses.sort((a, b) => b.date.compareTo(a.date));
    return expenses;
  }

  /// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –≤ –∏–∑–æ–ª—è—Ç–µ
  static Map<String, dynamic> _parseJson(String jsonString) {
    return Map<String, dynamic>.from(
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
        Uri.splitQueryString(jsonString.isEmpty ? '{}' : jsonString)
    );
  }

  /// –ö–µ—à–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –æ—Ñ–ª–∞–π–Ω
  Future<void> _cacheExpensesOffline(List<FishingExpenseModel> expenses) async {
    try {
      final prefs = await _offlineStorage.preferences;
      final expensesJson = expenses
          .map((expense) => expense.toJson())
          .map((json) => json.toString())
          .toList();

      await prefs.setStringList(_offlineKey, expensesJson);
      debugPrint('üíæ –ö–µ—à–∏—Ä–æ–≤–∞–Ω–æ ${expenses.length} —Ä–∞—Å—Ö–æ–¥–æ–≤ –æ—Ñ–ª–∞–π–Ω');
    } catch (e) {
      debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤: $e');
    }
  }

  /// –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ä–∞—Å—Ö–æ–¥
  Future<FishingExpenseModel> addExpense(FishingExpenseModel expense) async {
    try {
      final userId = _firebaseService.currentUserId;
      if (userId == null) {
        throw Exception('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      }

      // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ userId –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
      final expenseWithUserId = expense.copyWith(userId: userId);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
      final isOnline = await NetworkUtils.isNetworkAvailable();

      if (isOnline) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Firestore
        await _firestore
            .collection(_collectionName)
            .doc(expenseWithUserId.id)
            .set(expenseWithUserId.toMap());

        final syncedExpense = expenseWithUserId.markAsSynced();
        await _addExpenseToOfflineCache(syncedExpense);

        debugPrint('‚úÖ –†–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω –≤ Firestore: ${expenseWithUserId.id}');
        return syncedExpense;
      } else {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ñ–ª–∞–π–Ω –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        await _offlineStorage.saveOfflineNote(expenseWithUserId.toJson());
        await _addExpenseToOfflineCache(expenseWithUserId);

        debugPrint('üì± –†–∞—Å—Ö–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –æ—Ñ–ª–∞–π–Ω: ${expenseWithUserId.id}');
        return expenseWithUserId;
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞: $e');
      rethrow;
    }
  }

  /// –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥ –≤ –æ—Ñ–ª–∞–π–Ω –∫–µ—à
  Future<void> _addExpenseToOfflineCache(FishingExpenseModel expense) async {
    try {
      final currentExpenses = await _getExpensesFromOfflineCache();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ä–∞—Å—Ö–æ–¥
      final existingIndex = currentExpenses.indexWhere((e) => e.id == expense.id);

      if (existingIndex >= 0) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
        currentExpenses[existingIndex] = expense;
      } else {
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π
        currentExpenses.insert(0, expense);
      }

      await _cacheExpensesOffline(currentExpenses);
    } catch (e) {
      debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –æ—Ñ–ª–∞–π–Ω –∫–µ—à: $e');
    }
  }

  /// –û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥
  Future<FishingExpenseModel> updateExpense(FishingExpenseModel expense) async {
    try {
      final userId = _firebaseService.currentUserId;
      if (userId == null) {
        throw Exception('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º timestamp
      final updatedExpense = expense.touch();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
      final isOnline = await NetworkUtils.isNetworkAvailable();

      if (isOnline) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤ Firestore
        await _firestore
            .collection(_collectionName)
            .doc(updatedExpense.id)
            .set(updatedExpense.toMap());

        final syncedExpense = updatedExpense.markAsSynced();
        await _updateExpenseInOfflineCache(syncedExpense);

        debugPrint('‚úÖ –†–∞—Å—Ö–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ Firestore: ${updatedExpense.id}');
        return syncedExpense;
      } else {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        await _offlineStorage.saveNoteUpdate(updatedExpense.id, updatedExpense.toJson());
        await _updateExpenseInOfflineCache(updatedExpense);

        debugPrint('üì± –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –æ—Ñ–ª–∞–π–Ω: ${updatedExpense.id}');
        return updatedExpense;
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞: $e');
      rethrow;
    }
  }

  /// –û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥ –≤ –æ—Ñ–ª–∞–π–Ω –∫–µ—à–µ
  Future<void> _updateExpenseInOfflineCache(FishingExpenseModel expense) async {
    try {
      final currentExpenses = await _getExpensesFromOfflineCache();
      final index = currentExpenses.indexWhere((e) => e.id == expense.id);

      if (index >= 0) {
        currentExpenses[index] = expense;
        await _cacheExpensesOffline(currentExpenses);
      }
    } catch (e) {
      debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –æ—Ñ–ª–∞–π–Ω –∫–µ—à–µ: $e');
    }
  }

  /// –£–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Ö–æ–¥
  Future<void> deleteExpense(String expenseId) async {
    try {
      final userId = _firebaseService.currentUserId;
      if (userId == null) {
        throw Exception('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
      final isOnline = await NetworkUtils.isNetworkAvailable();

      if (isOnline) {
        // –£–¥–∞–ª—è–µ–º –∏–∑ Firestore
        await _firestore.collection(_collectionName).doc(expenseId).delete();
        debugPrint('‚úÖ –†–∞—Å—Ö–æ–¥ —É–¥–∞–ª–µ–Ω –∏–∑ Firestore: $expenseId');
      } else {
        // –û—Ç–º–µ—á–∞–µ–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        await _offlineStorage.markForDeletion(expenseId, false);
        debugPrint('üì± –†–∞—Å—Ö–æ–¥ –æ—Ç–º–µ—á–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: $expenseId');
      }

      // –£–¥–∞–ª—è–µ–º –∏–∑ –æ—Ñ–ª–∞–π–Ω –∫–µ—à–∞
      await _removeExpenseFromOfflineCache(expenseId);
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞: $e');
      rethrow;
    }
  }

  /// –£–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Ö–æ–¥ –∏–∑ –æ—Ñ–ª–∞–π–Ω –∫–µ—à–∞
  Future<void> _removeExpenseFromOfflineCache(String expenseId) async {
    try {
      final currentExpenses = await _getExpensesFromOfflineCache();
      final updatedExpenses = currentExpenses.where((e) => e.id != expenseId).toList();
      await _cacheExpensesOffline(updatedExpenses);
    } catch (e) {
      debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –æ—Ñ–ª–∞–π–Ω –∫–µ—à–∞: $e');
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
  Future<List<FishingExpenseModel>> getExpensesByPeriod({
    required DateTime startDate,
    required DateTime endDate,
  }) async {
    try {
      final allExpenses = await getUserExpenses();
      return allExpenses.where((expense) {
        return expense.date.isAfter(startDate.subtract(const Duration(days: 1))) &&
            expense.date.isBefore(endDate.add(const Duration(days: 1)));
      }).toList();
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥: $e');
      return [];
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  Future<List<FishingExpenseModel>> getExpensesByCategory(
      FishingExpenseCategory category
      ) async {
    try {
      final allExpenses = await getUserExpenses();
      return allExpenses.where((expense) => expense.category == category).toList();
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: $e');
      return [];
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞—Å—Ö–æ–¥–æ–≤
  Future<FishingExpenseStatistics> getExpenseStatistics({
    DateTime? startDate,
    DateTime? endDate,
  }) async {
    try {
      List<FishingExpenseModel> expenses;

      if (startDate != null || endDate != null) {
        expenses = await getExpensesByPeriod(
          startDate: startDate ?? DateTime(2020),
          endDate: endDate ?? DateTime.now(),
        );
      } else {
        expenses = await getUserExpenses();
      }

      return FishingExpenseStatistics.fromExpenses(
        expenses,
        startDate: startDate,
        endDate: endDate,
      );
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: $e');
      return FishingExpenseStatistics.fromExpenses([]);
    }
  }

  /// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—Ñ–ª–∞–π–Ω –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º
  Future<void> syncOfflineDataOnStartup() async {
    try {
      final isOnline = await NetworkUtils.isNetworkAvailable();
      if (!isOnline) {
        debugPrint('üì± –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤');
        return;
      }

      final userId = _firebaseService.currentUserId;
      if (userId == null) {
        debugPrint('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
        return;
      }

      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Ñ–ª–∞–π–Ω –∏–∑–º–µ–Ω–µ–Ω–∏–π
      // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      await getUserExpenses();
      debugPrint('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (e) {
      debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤: $e');
    }
  }

  /// –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ä–∞—Å—Ö–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
  Future<void> deleteAllUserExpenses() async {
    try {
      final userId = _firebaseService.currentUserId;
      if (userId == null) {
        throw Exception('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
      final isOnline = await NetworkUtils.isNetworkAvailable();

      if (isOnline) {
        // –£–¥–∞–ª—è–µ–º –∏–∑ Firestore
        final snapshot = await _firestore
            .collection(_collectionName)
            .where('userId', isEqualTo: userId)
            .get();

        final batch = _firestore.batch();
        for (var doc in snapshot.docs) {
          batch.delete(doc.reference);
        }
        await batch.commit();

        debugPrint('‚úÖ –í—Å–µ —Ä–∞—Å—Ö–æ–¥—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ Firestore');
      } else {
        // –û—Ç–º–µ—á–∞–µ–º –≤—Å–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        await _offlineStorage.markAllNotesForDeletion();
        debugPrint('üì± –í—Å–µ —Ä–∞—Å—Ö–æ–¥—ã –æ—Ç–º–µ—á–µ–Ω—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
      }

      // –û—á–∏—â–∞–µ–º –æ—Ñ–ª–∞–π–Ω –∫–µ—à
      await _clearOfflineCache();
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤: $e');
      rethrow;
    }
  }

  /// –û—á–∏—Å—Ç–∏—Ç—å –æ—Ñ–ª–∞–π–Ω –∫–µ—à
  Future<void> _clearOfflineCache() async {
    try {
      final prefs = await _offlineStorage.preferences;
      await prefs.remove(_offlineKey);
      debugPrint('üßπ –û—Ñ–ª–∞–π–Ω –∫–µ—à —Ä–∞—Å—Ö–æ–¥–æ–≤ –æ—á–∏—â–µ–Ω');
    } catch (e) {
      debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –æ—Ñ–ª–∞–π–Ω –∫–µ—à–∞: $e');
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤
  Future<int> getUnsyncedExpensesCount() async {
    try {
      final expenses = await _getExpensesFromOfflineCache();
      return expenses.where((expense) => !expense.isSynced).length;
    } catch (e) {
      debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤: $e');
      return 0;
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
  Future<Map<String, dynamic>> getRepositoryStatus() async {
    try {
      final isOnline = await NetworkUtils.isNetworkAvailable();
      final unsyncedCount = await getUnsyncedExpensesCount();
      final totalCount = (await _getExpensesFromOfflineCache()).length;

      return {
        'isOnline': isOnline,
        'totalExpenses': totalCount,
        'unsyncedExpenses': unsyncedCount,
        'lastUpdate': DateTime.now().toIso8601String(),
      };
    } catch (e) {
      debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: $e');
      return {
        'isOnline': false,
        'totalExpenses': 0,
        'unsyncedExpenses': 0,
        'error': e.toString(),
      };
    }
  }

  /// –ü–æ–∏—Å–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é
  Future<List<FishingExpenseModel>> searchExpenses(String query) async {
    try {
      if (query.trim().isEmpty) return getUserExpenses();

      final allExpenses = await getUserExpenses();
      final lowercaseQuery = query.toLowerCase();

      return allExpenses.where((expense) {
        return expense.description.toLowerCase().contains(lowercaseQuery) ||
            expense.notes?.toLowerCase().contains(lowercaseQuery) == true ||
            expense.locationName?.toLowerCase().contains(lowercaseQuery) == true;
      }).toList();
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤: $e');
      return [];
    }
  }

  /// Stream —Ä–∞—Å—Ö–æ–¥–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞)
  Stream<List<FishingExpenseModel>> getUserExpensesStream() {
    final userId = _firebaseService.currentUserId;
    if (userId == null) {
      return Stream.value([]);
    }

    return _firestore
        .collection(_collectionName)
        .where('userId', isEqualTo: userId)
        .snapshots()
        .map((snapshot) {
      final expenses = snapshot.docs
          .map((doc) => FishingExpenseModel.fromMap(doc.data()))
          .toList();

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤ –∫–æ–¥–µ –≤–º–µ—Å—Ç–æ Firestore
      expenses.sort((a, b) => b.date.compareTo(a.date));

      return expenses;
    });
  }
}