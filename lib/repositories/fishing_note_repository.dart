// –ü—É—Ç—å: lib/repositories/fishing_note_repository.dart

import 'dart:io';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/foundation.dart';
import 'package:uuid/uuid.dart';
import '../models/fishing_note_model.dart';
import '../services/firebase/firebase_service.dart';
import '../utils/network_utils.dart';
import '../services/offline/offline_storage_service.dart';
import '../services/offline/sync_service.dart';
import '../services/local/local_file_service.dart';
import '../services/subscription/subscription_service.dart';
import '../constants/subscription_constants.dart';

class FishingNoteRepository {
  static final FishingNoteRepository _instance = FishingNoteRepository._internal();

  factory FishingNoteRepository() {
    return _instance;
  }

  FishingNoteRepository._internal();

  final FirebaseService _firebaseService = FirebaseService();
  final OfflineStorageService _offlineStorage = OfflineStorageService();
  final SyncService _syncService = SyncService();
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final LocalFileService _localFileService = LocalFileService();
  final SubscriptionService _subscriptionService = SubscriptionService();

  // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –ö—ç—à –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫ (–∫–∞–∫ –≤ BudgetNotesRepository)
  static List<FishingNoteModel>? _cachedNotes;
  static DateTime? _cacheTimestamp;
  static const Duration _cacheValidity = Duration(minutes: 2);

  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫ —Å –ü–†–ê–í–ò–õ–¨–ù–´–ú –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º Firebase –∑–∞–º–µ—Ç–æ–∫
  Future<List<FishingNoteModel>> getUserFishingNotes() async {
    try {
      final userId = _firebaseService.currentUserId;
      if (userId == null || userId.isEmpty) {
        debugPrint('‚ö†Ô∏è getUserFishingNotes: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
        return [];
      }

      debugPrint('üìù –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $userId');

      // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
      if (_cachedNotes != null && _cacheTimestamp != null) {
        final cacheAge = DateTime.now().difference(_cacheTimestamp!);
        if (cacheAge < _cacheValidity) {
          debugPrint('üíæ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–º–µ—Ç–∫–∏ –∏–∑ –∫—ç—à–∞ (–≤–æ–∑—Ä–∞—Å—Ç: ${cacheAge.inSeconds}—Å)');
          return _cachedNotes!;
        } else {
          debugPrint('üíæ –ö—ç—à –∑–∞–º–µ—Ç–æ–∫ —É—Å—Ç–∞—Ä–µ–ª, –æ—á–∏—â–∞–µ–º');
          _cachedNotes = null;
          _cacheTimestamp = null;
        }
      }

      // –í—Å–µ–≥–¥–∞ –ø–æ–ª—É—á–∞–µ–º –æ—Ñ–ª–∞–π–Ω –∑–∞–º–µ—Ç–∫–∏ –ø–µ—Ä–≤—ã–º–∏ (—Ç–µ–ø–µ—Ä—å –≤–∫–ª—é—á–∞–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)
      final offlineNotes = await _getOfflineNotes(userId);
      debugPrint('üì± –û—Ñ–ª–∞–π–Ω –∑–∞–º–µ—Ç–æ–∫ –Ω–∞–π–¥–µ–Ω–æ: ${offlineNotes.length}');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
      final isOnline = await NetworkUtils.isNetworkAvailable();
      debugPrint('üåê –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ç–∏: ${isOnline ? '–û–Ω–ª–∞–π–Ω' : '–û—Ñ–ª–∞–π–Ω'}');

      List<FishingNoteModel> onlineNotes = [];

      if (isOnline) {
        try {
          debugPrint('‚òÅÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–º–µ—Ç–∫–∏ –∏–∑ Firebase');
          final snapshot = await _firebaseService.getUserFishingNotesNew();

          for (var doc in snapshot.docs) {
            final data = doc.data() as Map<String, dynamic>?;
            if (data != null && data.isNotEmpty) {
              final note = FishingNoteModel.fromJson(data, id: doc.id);
              onlineNotes.add(note);
            }
          }

          debugPrint('‚òÅÔ∏è –ó–∞–º–µ—Ç–æ–∫ –∏–∑ Firebase: ${onlineNotes.length}');

          // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ü–†–ê–í–ò–õ–¨–ù–´–ô –º–µ—Ç–æ–¥ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
          if (onlineNotes.isNotEmpty) {
            try {
              debugPrint('üíæ –ö—ç—à–∏—Ä—É–µ–º Firebase –∑–∞–º–µ—Ç–∫–∏ —á–µ—Ä–µ–∑ cacheFishingNotes...');
              final notesToCache = onlineNotes.map((note) {
                final noteJson = note.toJson();
                noteJson['id'] = note.id;
                noteJson['userId'] = userId;
                // üî• –î–û–ë–ê–í–õ–Ø–ï–ú –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –ü–û–õ–Ø –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –∫—ç—à–µ–º
                noteJson['isSynced'] = true;   // –ò–∑ Firebase - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
                noteJson['isOffline'] = false; // –ù–µ –æ—Ñ–ª–∞–π–Ω –∑–∞–º–µ—Ç–∫–∏
                return noteJson;
              }).toList();

              await _offlineStorage.cacheFishingNotes(notesToCache);
              debugPrint('‚úÖ ${onlineNotes.length} Firebase –∑–∞–º–µ—Ç–æ–∫ –∫—ç—à–∏—Ä–æ–≤–∞–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
            } catch (e) {
              debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è Firebase –∑–∞–º–µ—Ç–æ–∫: $e');
              debugPrint('‚ö†Ô∏è –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: ${e.toString()}');
            }
          }
        } catch (e) {
          debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–æ–∫ –∏–∑ Firebase: $e');
        }
      }

      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–ø–∏—Å–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –∏–∑–±–µ–≥–∞—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
      final Map<String, FishingNoteModel> uniqueNotes = {};

      // –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –æ–Ω–ª–∞–π–Ω –∑–∞–º–µ—Ç–∫–∏ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
      for (var note in onlineNotes) {
        uniqueNotes[note.id] = note;
      }

      // –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ñ–ª–∞–π–Ω –∑–∞–º–µ—Ç–∫–∏, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –æ–Ω–ª–∞–π–Ω —Å–ø–∏—Å–∫–µ
      for (var note in offlineNotes) {
        if (!uniqueNotes.containsKey(note.id)) {
          uniqueNotes[note.id] = note;
        }
      }

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
      final allNotes = uniqueNotes.values.toList()
        ..sort((a, b) => b.date.compareTo(a.date));

      debugPrint('üìä –ò—Ç–æ–≥–æ –∑–∞–º–µ—Ç–æ–∫: ${allNotes.length}');
      debugPrint('üìä –û–Ω–ª–∞–π–Ω: ${onlineNotes.length}, –û—Ñ–ª–∞–π–Ω: ${offlineNotes.length}');

      // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      _cachedNotes = allNotes;
      _cacheTimestamp = DateTime.now();

      // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤ —Ñ–æ–Ω–µ
      if (isOnline) {
        _syncService.syncAll();
      }

      return allNotes;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –≤ getUserFishingNotes: $e');

      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, –ø—ã—Ç–∞–µ–º—Å—è –≤–µ—Ä–Ω—É—Ç—å —Ö–æ—Ç—è –±—ã –æ—Ñ–ª–∞–π–Ω –∑–∞–º–µ—Ç–∫–∏
      try {
        return await _getOfflineNotes(_firebaseService.currentUserId ?? '');
      } catch (_) {
        // –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        return [];
      }
    }
  }

  // üî• –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
  Future<List<FishingNoteModel>> _getOfflineNotes(String userId) async {
    try {
      final List<FishingNoteModel> result = [];
      final Set<String> processedIds = <String>{};

      debugPrint('üì± –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ Firebase –∑–∞–º–µ—Ç–∫–∏...');

      // 1. ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ Firebase –∑–∞–º–µ—Ç–∫–∏
      try {
        final cachedNotes = await _offlineStorage.getCachedFishingNotes();
        debugPrint('üíæ –ù–∞–π–¥–µ–Ω–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö Firebase –∑–∞–º–µ—Ç–æ–∫: ${cachedNotes.length}');

        for (final noteData in cachedNotes) {
          try {
            final noteId = noteData['id']?.toString() ?? '';
            final noteUserId = noteData['userId']?.toString() ?? '';

            if (noteId.isEmpty) continue;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if (noteUserId == userId) {
              final noteModel = FishingNoteModel.fromJson(noteData, id: noteId);
              result.add(noteModel);
              processedIds.add(noteId);
              debugPrint('‚úÖ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–º–µ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: $noteId');
            }
          } catch (e) {
            debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏: $e');
            continue;
          }
        }
      } catch (e) {
        debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫: $e');
      }

      debugPrint('üì± –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ñ–ª–∞–π–Ω —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏...');

      // 2. ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–≥—Ä—É–∂–∞–µ–º –¢–û–õ–¨–ö–û –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ñ–ª–∞–π–Ω –∑–∞–º–µ—Ç–∫–∏
      try {
        final allOfflineNotes = await _offlineStorage.getAllOfflineNotes();
        debugPrint('üì± –ù–∞–π–¥–µ–Ω–æ –æ—Ñ–ª–∞–π–Ω —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫: ${allOfflineNotes.length}');

        for (final note in allOfflineNotes) {
          try {
            final noteId = note['id']?.toString() ?? '';
            final noteUserId = note['userId']?.toString() ?? '';
            final isSynced = note['isSynced'] == true;
            final isOffline = note['isOffline'] == true;

            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏
            if (noteId.isEmpty || processedIds.contains(noteId)) {
              continue;
            }

            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–≥—Ä—É–∂–∞–µ–º –¢–û–õ–¨–ö–û –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ñ–ª–∞–π–Ω –∑–∞–º–µ—Ç–∫–∏
            if (!isSynced && isOffline) {
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
              bool belongsToUser = false;

              if (noteUserId.isNotEmpty && noteUserId == userId) {
                belongsToUser = true;
              } else if (noteUserId.isEmpty) {
                // –ó–∞–º–µ—Ç–∫–∞ –±–µ–∑ userId - –¥–æ–±–∞–≤–ª—è–µ–º userId
                note['userId'] = userId;
                belongsToUser = true;
                _offlineStorage.saveOfflineNote(note).catchError((error) {
                  debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏: $error');
                });
              }

              if (belongsToUser) {
                final noteModel = FishingNoteModel.fromJson(note, id: noteId);
                result.add(noteModel);
                processedIds.add(noteId);
                debugPrint('‚úÖ –ù–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ñ–ª–∞–π–Ω –∑–∞–º–µ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: $noteId');
              }
            } else {
              debugPrint('‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞–º–µ—Ç–∫—É: $noteId (isSynced: $isSynced, isOffline: $isOffline)');
            }
          } catch (e) {
            debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ñ–ª–∞–π–Ω –∑–∞–º–µ—Ç–∫–∏: $e');
            continue;
          }
        }
      } catch (e) {
        debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ñ–ª–∞–π–Ω –∑–∞–º–µ—Ç–æ–∫: $e');
      }

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
      result.sort((a, b) => b.date.compareTo(a.date));

      debugPrint('‚úÖ –í—Å–µ–≥–æ –∑–∞–º–µ—Ç–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ –æ—Ñ–ª–∞–π–Ω –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: ${result.length}');

      return result;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ñ–ª–∞–π–Ω –∑–∞–º–µ—Ç–æ–∫: $e');
      return [];
    }
  }

  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  Future<String> addFishingNote(
      FishingNoteModel note,
      List<File>? photos,
      ) async {
    try {
      final userId = _firebaseService.currentUserId;
      if (userId == null || userId.isEmpty) {
        throw Exception('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
      final noteId = note.id.isEmpty ? const Uuid().v4() : note.id;
      debugPrint('üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ —Å ID: $noteId');

      // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –∑–∞–º–µ—Ç–∫–∏ —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º ID –∏ UserID
      final noteToAdd = note.copyWith(id: noteId, userId: userId);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
      final isOnline = await NetworkUtils.isNetworkAvailable();
      debugPrint('üåê –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ç–∏: ${isOnline ? '–û–Ω–ª–∞–π–Ω' : '–û—Ñ–ª–∞–π–Ω'}');

      if (isOnline) {
        // –û–ù–õ–ê–ô–ù: –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Firebase
        List<String> photoUrls = [];

        if (photos != null && photos.isNotEmpty) {
          debugPrint('üñºÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ ${photos.length} —Ñ–æ—Ç–æ');
          for (var photo in photos) {
            try {
              final bytes = await photo.readAsBytes();
              final fileName = '${DateTime.now().millisecondsSinceEpoch}_${photos.indexOf(photo)}.jpg';
              final path = 'users/$userId/photos/$fileName';
              final url = await _firebaseService.uploadImage(path, bytes);
              photoUrls.add(url);
            } catch (e) {
              debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ: $e');
            }
          }
        }

        final noteWithPhotos = noteToAdd.copyWith(photoUrls: photoUrls);

        try {
          // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ addFishingNoteNew
          await _firebaseService.addFishingNoteNew(noteWithPhotos.toJson());
          debugPrint('‚úÖ –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Firebase');

          // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ö—ç—à–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ –ü–†–ê–í–ò–õ–¨–ù–´–ô –º–µ—Ç–æ–¥
          try {
            final noteJson = noteWithPhotos.toJson();
            noteJson['id'] = noteId;
            noteJson['userId'] = userId;
            // üî• –î–û–ë–ê–í–õ–Ø–ï–ú –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –ü–û–õ–Ø
            noteJson['isSynced'] = true;   // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å Firebase
            noteJson['isOffline'] = false; // –ù–µ –æ—Ñ–ª–∞–π–Ω –∑–∞–º–µ—Ç–∫–∞

            // –ö—ç—à–∏—Ä—É–µ–º –≤ –æ–±—â–∏–π –∫—ç—à Firebase –∑–∞–º–µ—Ç–æ–∫
            await _offlineStorage.cacheFishingNotes([noteJson]);
            debugPrint('üíæ –ù–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
          } catch (e) {
            debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏: $e');
          }

          // ‚úÖ –£–ü–†–û–©–ï–ù–û: –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¢–û–õ–¨–ö–û –æ–¥–∏–Ω —Ä–∞–∑
          try {
            await _firebaseService.incrementUsageCount('notesCount');
            debugPrint('‚úÖ –°—á–µ—Ç—á–∏–∫ —É–≤–µ–ª–∏—á–µ–Ω —á–µ—Ä–µ–∑ Firebase');
          } catch (e) {
            debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞: $e');
          }

          // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –û—á–∏—â–∞–µ–º –∫—ç—à –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏
          clearCache();

          return noteId;
        } catch (e) {
          debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ Firebase: $e');
          // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
          await _saveOfflineNote(noteWithPhotos, photos);

          // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –û—á–∏—â–∞–µ–º –∫—ç—à –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏
          clearCache();

          return noteId;
        }
      } else {
        // –û–§–õ–ê–ô–ù: –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∫–æ–ø–∏–∏ —Ñ–æ—Ç–æ
        List<String> localPhotoUris = [];
        if (photos != null && photos.isNotEmpty) {
          localPhotoUris = await _localFileService.saveLocalCopies(photos);
        }

        final noteWithLocalPhotos = noteToAdd.copyWith(photoUrls: localPhotoUris);
        await _saveOfflineNote(noteWithLocalPhotos, photos);

        // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –û—á–∏—â–∞–µ–º –∫—ç—à –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏
        clearCache();

        return noteId;
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏: $e');
      rethrow;
    }
  }

  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ñ–ª–∞–π–Ω –∑–∞–º–µ—Ç–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ñ–ª–∞–≥–∞–º–∏
  Future<void> _saveOfflineNote(
      FishingNoteModel note,
      List<File>? photos,
      ) async {
    try {
      if (note.id.isEmpty) {
        throw Exception('ID –∑–∞–º–µ—Ç–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
      }

      debugPrint('üì± –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ñ–ª–∞–π–Ω –∑–∞–º–µ—Ç–∫–∏: ${note.id}');

      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ñ–ª–∞–≥–∏ –¥–ª—è –æ—Ñ–ª–∞–π–Ω –∑–∞–º–µ—Ç–∫–∏
      final noteJson = note.toJson();
      noteJson['id'] = note.id;
      noteJson['userId'] = note.userId;
      noteJson['isSynced'] = false;  // –¢—Ä–µ–±—É–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      noteJson['isOffline'] = true;  // –°–æ–∑–¥–∞–Ω–∞ –æ—Ñ–ª–∞–π–Ω
      noteJson['offlineCreatedAt'] = DateTime.now().toIso8601String();

      await _offlineStorage.saveOfflineNote(noteJson);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç–∏ –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º
      if (photos != null && photos.isNotEmpty) {
        final photoPaths = photos.map((file) => file.path).toList();
        await _offlineStorage.saveOfflinePhotoPaths(note.id, photoPaths);
      }

      debugPrint('‚úÖ –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ñ–ª–∞–π–Ω –∑–∞–º–µ—Ç–∫–∏: $e');
      rethrow;
    }
  }

  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  Future<void> updateFishingNote(FishingNoteModel note) async {
    try {
      final userId = _firebaseService.currentUserId;
      if (userId == null || userId.isEmpty) {
        throw Exception('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      }

      if (note.id.isEmpty) {
        throw Exception('ID –∑–∞–º–µ—Ç–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
      }

      debugPrint('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏: ${note.id}');

      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ñ–ª–∞–≥–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      final noteJson = note.toJson();
      noteJson['id'] = note.id;
      noteJson['userId'] = userId;
      noteJson['isSynced'] = false;  // –¢—Ä–µ–±—É–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      noteJson['isOffline'] = false; // –û–±–Ω–æ–≤–ª–µ–Ω–∞, –Ω–æ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞ –æ—Ñ–ª–∞–π–Ω
      noteJson['updatedAt'] = DateTime.now().toIso8601String();

      // –í—Å–µ–≥–¥–∞ —Å–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
      await _offlineStorage.saveOfflineNote(noteJson);

      // –ï—Å–ª–∏ –æ–Ω–ª–∞–π–Ω - –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –≤ Firebase
      final isOnline = await NetworkUtils.isNetworkAvailable();
      if (isOnline) {
        try {
          await _firebaseService.updateFishingNoteNew(note.id, note.toJson());
          debugPrint('‚úÖ –ó–∞–º–µ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ Firebase');

          // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ü–†–ê–í–ò–õ–¨–ù–û–ú –∫—ç—à–µ
          try {
            noteJson['userId'] = userId;
            noteJson['isSynced'] = true;   // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
            noteJson['isOffline'] = false; // –ù–µ –æ—Ñ–ª–∞–π–Ω –∑–∞–º–µ—Ç–∫–∞

            // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –æ–±—â–µ–º –∫—ç—à–µ Firebase –∑–∞–º–µ—Ç–æ–∫
            await _offlineStorage.cacheFishingNotes([noteJson]);

            // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –≤ –æ—Ñ–ª–∞–π–Ω —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            await _offlineStorage.saveOfflineNote(noteJson);

            debugPrint('üíæ –ó–∞–º–µ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ –∫—ç—à–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
          } catch (e) {
            debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –∫—ç—à–µ: $e');
          }
        } catch (e) {
          debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤ Firebase: $e');
        }
      }

      // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –û—á–∏—â–∞–µ–º –∫—ç—à –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏
      clearCache();
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏: $e');
      rethrow;
    }
  }

  /// üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –ø–æ ID —Å –ü–†–ê–í–ò–õ–¨–ù–´–ú –ø–æ—Ä—è–¥–∫–æ–º –ø–æ–∏—Å–∫–∞
  Future<FishingNoteModel> getFishingNoteById(String noteId) async {
    try {
      final userId = _firebaseService.currentUserId;
      if (userId == null || userId.isEmpty) {
        throw Exception('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      }

      if (noteId.isEmpty) {
        throw Exception('ID –∑–∞–º–µ—Ç–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
      }

      debugPrint('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –ø–æ ID: $noteId');

      // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –®–ê–ì 1 - –°–ù–ê–ß–ê–õ–ê –∏—â–µ–º –≤ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö Firebase –∑–∞–º–µ—Ç–∫–∞—Ö
      try {
        debugPrint('üîç –ò—â–µ–º –≤ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö Firebase –∑–∞–º–µ—Ç–∫–∞—Ö...');
        final cachedNotes = await _offlineStorage.getCachedFishingNotes();
        final cachedNote = cachedNotes.where((note) => note['id'] == noteId).firstOrNull;

        if (cachedNote != null) {
          debugPrint('‚úÖ –ó–∞–º–µ—Ç–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫—ç—à–µ Firebase –∑–∞–º–µ—Ç–æ–∫');
          return FishingNoteModel.fromJson(cachedNote, id: noteId);
        } else {
          debugPrint('‚ö†Ô∏è –ó–∞–º–µ—Ç–∫–∞ –ù–ï –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫—ç—à–µ Firebase –∑–∞–º–µ—Ç–æ–∫');
        }
      } catch (e) {
        debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –∫—ç—à–µ Firebase –∑–∞–º–µ—Ç–æ–∫: $e');
      }

      // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –®–ê–ì 2 - –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫—ç—à–µ, –∏—â–µ–º –≤ Firebase –æ–Ω–ª–∞–π–Ω
      final isOnline = await NetworkUtils.isNetworkAvailable();

      if (isOnline) {
        try {
          debugPrint('üîç –ò—â–µ–º –≤ Firebase –æ–Ω–ª–∞–π–Ω...');
          final doc = await _firestore
              .collection('users')
              .doc(userId)
              .collection('fishing_notes')
              .doc(noteId)
              .get();

          if (doc.exists) {
            final note = FishingNoteModel.fromJson(
              doc.data() as Map<String, dynamic>,
              id: doc.id,
            );

            // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ö—ç—à–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—É—é –∑–∞–º–µ—Ç–∫—É —á–µ—Ä–µ–∑ –ü–†–ê–í–ò–õ–¨–ù–´–ô –º–µ—Ç–æ–¥
            try {
              final noteJson = note.toJson();
              noteJson['id'] = note.id;
              noteJson['userId'] = userId;
              noteJson['isSynced'] = true;   // –ò–∑ Firebase
              noteJson['isOffline'] = false; // –ù–µ –æ—Ñ–ª–∞–π–Ω –∑–∞–º–µ—Ç–∫–∞

              // –ö—ç—à–∏—Ä—É–µ–º –≤ –æ–±—â–∏–π –∫—ç—à Firebase –∑–∞–º–µ—Ç–æ–∫
              await _offlineStorage.cacheFishingNotes([noteJson]);

              // –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ—Ñ–ª–∞–π–Ω —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
              await _offlineStorage.saveOfflineNote(noteJson);

              debugPrint('‚úÖ –ó–∞–º–µ—Ç–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ Firebase –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ: $noteId');
            } catch (e) {
              debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏: $e');
            }

            return note;
          } else {
            debugPrint('‚ö†Ô∏è –ó–∞–º–µ—Ç–∫–∞ –ù–ï –Ω–∞–π–¥–µ–Ω–∞ –≤ Firebase: $noteId');
          }
        } catch (e) {
          debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑ Firebase: $e');
        }
      } else {
        debugPrint('üì± –û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ –≤ Firebase');
      }

      // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –®–ê–ì 3 - –í –∫–æ–Ω—Ü–µ –∏—â–µ–º –≤ –æ—Ñ–ª–∞–π–Ω —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
      debugPrint('üîç –ò—â–µ–º –≤ –æ—Ñ–ª–∞–π–Ω —Ö—Ä–∞–Ω–∏–ª–∏—â–µ...');
      return await _getOfflineNoteByIdFromStorage(noteId);

    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏: $e');
      rethrow;
    }
  }

  /// üî• –ù–û–í–´–ô –ú–ï–¢–û–î: –ü–æ–∏—Å–∫ –¢–û–õ–¨–ö–û –≤ –æ—Ñ–ª–∞–π–Ω —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (–±–µ–∑ –∫—ç—à–∞ Firebase)
  Future<FishingNoteModel> _getOfflineNoteByIdFromStorage(String noteId) async {
    try {
      debugPrint('üîç –ü–æ–∏—Å–∫ –≤ –æ—Ñ–ª–∞–π–Ω —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–º–µ—Ç–æ–∫...');

      // –ò—â–µ–º –¢–û–õ–¨–ö–û –≤ –æ—Ñ–ª–∞–π–Ω –∑–∞–º–µ—Ç–∫–∞—Ö (–Ω–µ –≤ –∫—ç—à–µ Firebase)
      final allOfflineNotes = await _offlineStorage.getAllOfflineNotes();
      final noteDataList = allOfflineNotes.where((note) => note['id'] == noteId).toList();

      if (noteDataList.isEmpty) {
        throw Exception('–ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∏ –≤ –∫—ç—à–µ, –Ω–∏ –≤ Firebase, –Ω–∏ –≤ –æ—Ñ–ª–∞–π–Ω —Ö—Ä–∞–Ω–∏–ª–∏—â–µ');
      }

      final noteData = noteDataList.first;
      debugPrint('‚úÖ –ó–∞–º–µ—Ç–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ—Ñ–ª–∞–π–Ω —Ö—Ä–∞–Ω–∏–ª–∏—â–µ');
      return FishingNoteModel.fromJson(noteData, id: noteId);
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏ –∏–∑ –æ—Ñ–ª–∞–π–Ω —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: $e');
      rethrow;
    }
  }

  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –º–µ—Ç–æ–¥ deleteFishingNote() —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —É–¥–∞–ª–µ–Ω–∏–µ–º –∏–∑ –∫—ç—à–∞
  Future<void> deleteFishingNote(String noteId) async {
    try {
      final userId = _firebaseService.currentUserId;
      if (userId == null || userId.isEmpty) {
        throw Exception('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      }

      if (noteId.isEmpty) {
        throw Exception('ID –∑–∞–º–µ—Ç–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
      }

      debugPrint('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏: $noteId');

      final isOnline = await NetworkUtils.isNetworkAvailable();

      if (isOnline) {
        try {
          // –£–¥–∞–ª—è–µ–º –∏–∑ Firebase
          await _firebaseService.deleteFishingNoteNew(noteId);
          debugPrint('‚úÖ –ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ Firebase');

          // ‚úÖ –£–ü–†–û–©–ï–ù–û: –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¢–û–õ–¨–ö–û –æ–¥–∏–Ω —Ä–∞–∑
          try {
            await _firebaseService.incrementUsageCount('notesCount', increment: -1);
            debugPrint('‚úÖ –°—á–µ—Ç—á–∏–∫ —É–º–µ–Ω—å—à–µ–Ω —á–µ—Ä–µ–∑ Firebase');
          } catch (e) {
            debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–º–µ–Ω—å—à–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞: $e');
          }

          // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–¥–∞–ª—è–µ–º –∏–∑ –∫—ç—à–∞ Firebase –∑–∞–º–µ—Ç–æ–∫ –ü–†–ê–í–ò–õ–¨–ù–û
          try {
            debugPrint('üîç –£–¥–∞–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É $noteId –∏–∑ –∫—ç—à–∞ Firebase –∑–∞–º–µ—Ç–æ–∫...');

            final cachedNotes = await _offlineStorage.getCachedFishingNotes();
            debugPrint('üîç –í—Å–µ–≥–æ –∑–∞–º–µ—Ç–æ–∫ –≤ –∫—ç—à–µ: ${cachedNotes.length}');

            // ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–ê–Ø —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
            final updatedCachedNotes = cachedNotes.where((note) => note['id']?.toString() != noteId).toList();

            debugPrint('üîç –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: ${updatedCachedNotes.length} –∑–∞–º–µ—Ç–æ–∫');

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫—ç—à
            await _offlineStorage.cacheFishingNotes(updatedCachedNotes);
            debugPrint('‚úÖ –ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∫—ç—à–∞ Firebase –∑–∞–º–µ—Ç–æ–∫ (–±—ã–ª–æ: ${cachedNotes.length}, —Å—Ç–∞–ª–æ: ${updatedCachedNotes.length})');

          } catch (e) {
            debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∫—ç—à–∞ Firebase –∑–∞–º–µ—Ç–æ–∫: $e');
          }
        } catch (e) {
          debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ Firebase: $e');
          // –û—Ç–º–µ—á–∞–µ–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
          await _offlineStorage.markForDeletion(noteId, false);
        }
      } else {
        // –û—Ñ–ª–∞–π–Ω - –æ—Ç–º–µ—á–∞–µ–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        await _offlineStorage.markForDeletion(noteId, false);
      }

      // –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ–ø–∏—é
      try {
        await _offlineStorage.removeOfflineNote(noteId);
        debugPrint('‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è –∫–æ–ø–∏—è —É–¥–∞–ª–µ–Ω–∞');
      } catch (e) {
        debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π –∫–æ–ø–∏–∏: $e');
      }

      // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –û—á–∏—â–∞–µ–º –∫—ç—à –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏
      clearCache();
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏: $e');
      rethrow;
    }
  }

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  Future<void> syncOfflineDataOnStartup() async {
    try {
      await _syncService.syncAll();
    } catch (e) {
      debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: $e');
    }
  }

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
  Future<bool> forceSyncData() async {
    try {
      return await _syncService.forceSyncAll();
    } catch (e) {
      debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: $e');
      return false;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  Future<Map<String, dynamic>> getSyncStatus() async {
    try {
      return await _syncService.getSyncStatus();
    } catch (e) {
      return {'error': e.toString()};
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
  Future<void> clearLocalFilesCache() async {
    try {
      await _localFileService.clearCache();
    } catch (e) {
      debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞: $e');
      rethrow;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
  Future<int> getLocalFilesCacheSize() async {
    try {
      return await _localFileService.getCacheSize();
    } catch (e) {
      return 0;
    }
  }

  // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à –¥–∞–Ω–Ω—ã—Ö (–∫–∞–∫ –≤ BudgetNotesRepository)
  static void clearCache() {
    _cachedNotes = null;
    _cacheTimestamp = null;
    debugPrint('üíæ –ö—ç—à –∑–∞–º–µ—Ç–æ–∫ —Ä—ã–±–∞–ª–∫–∏ –æ—á–∏—â–µ–Ω');
  }
}