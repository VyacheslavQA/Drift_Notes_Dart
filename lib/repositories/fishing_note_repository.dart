// –ü—É—Ç—å: lib/repositories/fishing_note_repository.dart

import 'dart:io';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/foundation.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'dart:convert';
import 'package:uuid/uuid.dart';
import '../models/fishing_note_model.dart';
import '../services/firebase/firebase_service.dart';
import '../utils/network_utils.dart';
import '../services/offline/offline_storage_service.dart';
import '../services/offline/sync_service.dart';

class FishingNoteRepository {
  final FirebaseService _firebaseService = FirebaseService();
  final OfflineStorageService _offlineStorage = OfflineStorageService();
  final SyncService _syncService = SyncService();
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–º–µ—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<List<FishingNoteModel>> getUserFishingNotes() async {
    try {
      final userId = _firebaseService.currentUserId;
      if (userId == null) {
        debugPrint('‚ö†Ô∏è getUserFishingNotes: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
        throw Exception('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      }

      debugPrint('üìù –ó–∞–ø—Ä–æ—Å –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $userId');

      // –ü–æ–ª—É—á–∞–µ–º –æ—Ñ–ª–∞–π–Ω –∑–∞–º–µ—Ç–∫–∏ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
      final offlineNotes = await _getOfflineNotes(userId);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
      final isOnline = await NetworkUtils.isNetworkAvailable();

      debugPrint('üåê –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ç–∏: ${isOnline ? '–û–Ω–ª–∞–π–Ω' : '–û—Ñ–ª–∞–π–Ω'}');
      debugPrint('üì± –û—Ñ–ª–∞–π–Ω –∑–∞–º–µ—Ç–æ–∫: ${offlineNotes.length}');

      if (isOnline) {
        // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ, –ø–æ–ª—É—á–∞–µ–º –∑–∞–º–µ—Ç–∫–∏ –∏–∑ Firestore
        try {
          final snapshot = await _firestore
              .collection('fishing_notes')
              .where('userId', isEqualTo: userId)
              .get();

          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –º–æ–¥–µ–ª–∏
          final onlineNotes = snapshot.docs
              .map((doc) => FishingNoteModel.fromJson(doc.data() as Map<String, dynamic>, id: doc.id))
              .toList();

          debugPrint('‚òÅÔ∏è –û–Ω–ª–∞–π–Ω –∑–∞–º–µ—Ç–æ–∫: ${onlineNotes.length}');

          // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–ø–∏—Å–∫–∏, –∏–∑–±–µ–≥–∞—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
          final Map<String, FishingNoteModel> uniqueNotes = {};

          // –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –æ–Ω–ª–∞–π–Ω –∑–∞–º–µ—Ç–∫–∏
          for (var note in onlineNotes) {
            uniqueNotes[note.id] = note;
          }

          // –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ñ–ª–∞–π–Ω –∑–∞–º–µ—Ç–∫–∏, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –æ–Ω–ª–∞–π–Ω —Å–ø–∏—Å–∫–µ
          for (var note in offlineNotes) {
            if (!uniqueNotes.containsKey(note.id)) {
              uniqueNotes[note.id] = note;
              debugPrint('‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∞ –æ—Ñ–ª–∞–π–Ω –∑–∞–º–µ—Ç–∫–∞: ${note.id}');
            }
          }

          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
          final allNotes = uniqueNotes.values.toList()
            ..sort((a, b) => b.date.compareTo(a.date));

          debugPrint('üìä –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫: ${allNotes.length}');

          // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤ —Ñ–æ–Ω–µ
          _syncService.syncAll();

          return allNotes;
        } catch (e) {
          debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–Ω–ª–∞–π–Ω –∑–∞–º–µ—Ç–æ–∫: $e');
          // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–Ω–ª–∞–π–Ω –∑–∞–º–µ—Ç–æ–∫, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ñ–ª–∞–π–Ω –∑–∞–º–µ—Ç–∫–∏
          return offlineNotes;
        }
      } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–º–µ—Ç–∫–∏ –∏–∑ –æ—Ñ–ª–∞–π–Ω —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        debugPrint('üì± –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Ñ–ª–∞–π–Ω –∑–∞–º–µ—Ç–∫–∏');
        return offlineNotes;
      }
    } catch (e) {
      debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ getUserFishingNotes: $e');

      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, –ø—ã—Ç–∞–µ–º—Å—è –≤–µ—Ä–Ω—É—Ç—å —Ö–æ—Ç—è –±—ã –æ—Ñ–ª–∞–π–Ω –∑–∞–º–µ—Ç–∫–∏
      try {
        final userId = _firebaseService.currentUserId ?? '';
        debugPrint('üîÑ –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –æ—Ñ–ª–∞–π–Ω –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è: $userId');
        return await _getOfflineNotes(userId);
      } catch (innerError) {
        debugPrint('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ñ–ª–∞–π–Ω –∑–∞–º–µ—Ç–æ–∫: $innerError');
        rethrow;
      }
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫ –∏–∑ –æ—Ñ–ª–∞–π–Ω —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
  Future<List<FishingNoteModel>> _getOfflineNotes(String userId) async {
    try {
      final offlineNotes = await _offlineStorage.getAllOfflineNotes();
      debugPrint('üì± –í—Å–µ–≥–æ –æ—Ñ–ª–∞–π–Ω –∑–∞–º–µ—Ç–æ–∫ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: ${offlineNotes.length}');

      // –í—ã–≤–æ–¥–∏–º id –≤—Å–µ—Ö –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      for (var note in offlineNotes) {
        debugPrint('üìÑ –û—Ñ–ª–∞–π–Ω –∑–∞–º–µ—Ç–∫–∞: ${note['id']} (user: ${note['userId']})');
      }

      final offlineNoteModels = offlineNotes
          .where((note) => note['userId'] == userId) // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ userId
          .map((note) {
        final id = note['id']?.toString() ?? '';
        if (id.isEmpty) {
          debugPrint('‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∑–∞–º–µ—Ç–∫–∞ –±–µ–∑ ID!');
        }
        return FishingNoteModel.fromJson(note, id: id);
      })
          .toList();

      debugPrint('üì± –ó–∞–º–µ—Ç–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $userId: ${offlineNoteModels.length}');

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
      offlineNoteModels.sort((a, b) => b.date.compareTo(a.date));

      return offlineNoteModels;
    } catch (e) {
      debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ñ–ª–∞–π–Ω –∑–∞–º–µ—Ç–æ–∫: $e');
      return [];
    }
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏
  Future<String> addFishingNote(FishingNoteModel note, List<File>? photos) async {
    try {
      final userId = _firebaseService.currentUserId;
      if (userId == null) {
        debugPrint('‚ö†Ô∏è addFishingNote: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
        throw Exception('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
      final noteId = note.id.isEmpty ? const Uuid().v4() : note.id;
      debugPrint('üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ —Å ID: $noteId');

      // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –∑–∞–º–µ—Ç–∫–∏ —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º ID –∏ UserID
      final noteToAdd = note.copyWith(
        id: noteId,
        userId: userId,
      );

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
      final isOnline = await NetworkUtils.isNetworkAvailable();
      debugPrint('üåê –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ç–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏: ${isOnline ? '–û–Ω–ª–∞–π–Ω' : '–û—Ñ–ª–∞–π–Ω'}');

      if (isOnline) {
        // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç, –∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É –≤ Firestore
        List<String> photoUrls = [];

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ –∏ –ø–æ–ª—É—á–∞–µ–º URL
        if (photos != null && photos.isNotEmpty) {
          debugPrint('üñºÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ ${photos.length} —Ñ–æ—Ç–æ');
          for (var photo in photos) {
            try {
              final bytes = await photo.readAsBytes();
              final fileName = '${DateTime.now().millisecondsSinceEpoch}_${photos.indexOf(photo)}.jpg';
              final path = 'users/$userId/photos/$fileName';
              final url = await _firebaseService.uploadImage(path, bytes);
              photoUrls.add(url);
              debugPrint('üñºÔ∏è –§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: $url');
            } catch (e) {
              debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ: $e');
            }
          }
        }

        // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –∑–∞–º–µ—Ç–∫–∏ —Å URL —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        final noteWithPhotos = noteToAdd.copyWith(
          photoUrls: photoUrls,
        );

        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É –≤ Firestore
        try {
          final docRef = await _firestore
              .collection('fishing_notes')
              .doc(noteId)
              .set(noteWithPhotos.toJson());

          debugPrint('‚úÖ –ó–∞–º–µ—Ç–∫–∞ $noteId –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ Firestore');

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ñ–ª–∞–π–Ω –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
          _syncService.syncAll();

          return noteId;
        } catch (e) {
          debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏ –≤ Firestore: $e');

          // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ Firestore, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–º–µ—Ç–∫—É –ª–æ–∫–∞–ª—å–Ω–æ
          await _saveOfflineNote(noteWithPhotos, photos);
          return noteId;
        }
      } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–º–µ—Ç–∫—É –ª–æ–∫–∞–ª—å–Ω–æ
        debugPrint('üì± –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ');
        await _saveOfflineNote(noteToAdd, photos);
        return noteId;
      }
    } catch (e) {
      debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏: $e');
      rethrow;
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ
  Future<void> _saveOfflineNote(FishingNoteModel note, List<File>? photos) async {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –∑–∞–º–µ—Ç–∫–∏ –µ—Å—Ç—å ID
      if (note.id.isEmpty) {
        debugPrint('‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –±–µ–∑ ID!');
        throw Exception('ID –∑–∞–º–µ—Ç–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
      }

      debugPrint('üì± –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ ${note.id} –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ');

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–º–µ—Ç–∫—É
      final noteJson = note.toJson();
      noteJson['id'] = note.id; // –Ø–≤–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º ID –≤ JSON
      await _offlineStorage.saveOfflineNote(noteJson);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç–∏ –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º
      if (photos != null && photos.isNotEmpty) {
        final photoPaths = photos.map((file) => file.path).toList();
        await _offlineStorage.saveOfflinePhotoPaths(note.id, photoPaths);
        debugPrint('üì± –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${photoPaths.length} –ø—É—Ç–µ–π –∫ —Ñ–æ—Ç–æ –¥–ª—è –∑–∞–º–µ—Ç–∫–∏ ${note.id}');
      }

      debugPrint('‚úÖ –ó–∞–º–µ—Ç–∫–∞ ${note.id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ');
    } catch (e) {
      debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏ –æ—Ñ–ª–∞–π–Ω: $e');
      rethrow;
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏
  Future<void> updateFishingNote(FishingNoteModel note) async {
    try {
      if (note.id.isEmpty) {
        debugPrint('‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –±–µ–∑ ID!');
        throw Exception('ID –∑–∞–º–µ—Ç–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
      }

      debugPrint('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏: ${note.id}');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
      final isOnline = await NetworkUtils.isNetworkAvailable();
      debugPrint('üåê –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ç–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: ${isOnline ? '–û–Ω–ª–∞–π–Ω' : '–û—Ñ–ª–∞–π–Ω'}');

      if (isOnline) {
        // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É –≤ Firestore
        try {
          await _firestore
              .collection('fishing_notes')
              .doc(note.id)
              .update(note.toJson());

          debugPrint('‚úÖ –ó–∞–º–µ—Ç–∫–∞ ${note.id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ Firestore');

          // –î–∞–∂–µ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –æ–Ω–ª–∞–π–Ω-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏, –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ–ø–∏—é
          // –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –≤ —Å–ª—É—á–∞–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –æ—Ñ–ª–∞–π–Ω
          final noteJson = note.toJson();
          noteJson['id'] = note.id; // –Ø–≤–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º ID –≤ JSON
          await _offlineStorage.saveOfflineNote(noteJson);
          debugPrint('üì± –ó–∞–º–µ—Ç–∫–∞ ${note.id} —Ç–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ');
        } catch (e) {
          debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏ –≤ Firestore: $e');

          // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–º–µ—Ç–∫—É –ª–æ–∫–∞–ª—å–Ω–æ
          final noteJson = note.toJson();
          noteJson['id'] = note.id; // –Ø–≤–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º ID –≤ JSON
          await _offlineStorage.saveOfflineNote(noteJson);
          debugPrint('üì± –ó–∞–º–µ—Ç–∫–∞ ${note.id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ (–ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ Firestore)');
        }
      } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–º–µ—Ç–∫—É –ª–æ–∫–∞–ª—å–Ω–æ
        final noteJson = note.toJson();
        noteJson['id'] = note.id; // –Ø–≤–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º ID –≤ JSON
        await _offlineStorage.saveOfflineNote(noteJson);
        debugPrint('üì± –ó–∞–º–µ—Ç–∫–∞ ${note.id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ (–æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º)');
      }
    } catch (e) {
      debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏: $e');

      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, –ø—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –ª–æ–∫–∞–ª—å–Ω–æ
      try {
        final noteJson = note.toJson();
        noteJson['id'] = note.id; // –Ø–≤–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º ID –≤ JSON
        await _offlineStorage.saveOfflineNote(noteJson);
        debugPrint('üì± –ó–∞–º–µ—Ç–∫–∞ ${note.id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ (–ø–æ—Å–ª–µ –æ–±—â–µ–π –æ—à–∏–±–∫–∏)');
      } catch (innerError) {
        debugPrint('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: $innerError');
        rethrow;
      }
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –Ω–æ–≤—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
  Future<FishingNoteModel> updateFishingNoteWithPhotos(FishingNoteModel note, List<File> newPhotos) async {
    try {
      final userId = _firebaseService.currentUserId;
      if (userId == null) {
        throw Exception('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      }

      if (note.id.isEmpty) {
        throw Exception('ID –∑–∞–º–µ—Ç–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
      }

      debugPrint('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ —Å –Ω–æ–≤—ã–º–∏ —Ñ–æ—Ç–æ: ${note.id}');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
      final isOnline = await NetworkUtils.isNetworkAvailable();
      debugPrint('üåê –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ç–∏: ${isOnline ? '–û–Ω–ª–∞–π–Ω' : '–û—Ñ–ª–∞–π–Ω'}');

      if (isOnline) {
        // –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö URL —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ + –Ω–æ–≤—ã–µ)
        final List<String> allPhotoUrls = List.from(note.photoUrls);

        // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤—ã—Ö —Ñ–æ—Ç–æ
        if (newPhotos.isNotEmpty) {
          debugPrint('üñºÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ ${newPhotos.length} –Ω–æ–≤—ã—Ö —Ñ–æ—Ç–æ');
          for (var photo in newPhotos) {
            try {
              final bytes = await photo.readAsBytes();
              final fileName = '${DateTime.now().millisecondsSinceEpoch}_${newPhotos.indexOf(photo)}.jpg';
              final path = 'users/$userId/photos/$fileName';
              final url = await _firebaseService.uploadImage(path, bytes);
              allPhotoUrls.add(url);
              debugPrint('üñºÔ∏è –§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: $url');
            } catch (e) {
              debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ: $e');
            }
          }
        }

        // –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å –∑–∞–º–µ—Ç–∫–∏ —Å –Ω–æ–≤—ã–º–∏ —Ñ–æ—Ç–æ
        final updatedNote = note.copyWith(photoUrls: allPhotoUrls);

        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É –≤ Firestore
        try {
          await _firestore
              .collection('fishing_notes')
              .doc(note.id)
              .update(updatedNote.toJson());

          debugPrint('‚úÖ –ó–∞–º–µ—Ç–∫–∞ ${note.id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Å –Ω–æ–≤—ã–º–∏ —Ñ–æ—Ç–æ');

          // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–∫–∂–µ –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ–ø–∏—é
          final noteJson = updatedNote.toJson();
          noteJson['id'] = updatedNote.id; // –Ø–≤–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º ID –≤ JSON
          await _offlineStorage.saveOfflineNote(noteJson);

          return updatedNote;
        } catch (e) {
          debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏ –≤ Firestore: $e');

          // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
          await _saveOfflineNoteUpdate(updatedNote, newPhotos);
          debugPrint('üì± –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ ${note.id} —Å —Ñ–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ');
          return updatedNote;
        }
      } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ
        debugPrint('üì± –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ ${note.id} —Å —Ñ–æ—Ç–æ –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ');
        await _saveOfflineNoteUpdate(note, newPhotos);

        // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –Ω–æ–≤—ã–º —Ñ–æ—Ç–æ –≤ –º–æ–¥–µ–ª—å
        // –≠—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        final updatedNote = note.copyWith(
          photoUrls: [...note.photoUrls, ...newPhotos.map((_) => 'offline_photo')],
        );

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—É—é –º–æ–¥–µ–ª—å –≤ –æ—Ñ–ª–∞–π–Ω —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        final noteJson = updatedNote.toJson();
        noteJson['id'] = updatedNote.id; // –Ø–≤–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º ID –≤ JSON
        await _offlineStorage.saveOfflineNote(noteJson);

        return updatedNote;
      }
    } catch (e) {
      debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏ —Å —Ñ–æ—Ç–æ: $e');

      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ
      try {
        await _saveOfflineNoteUpdate(note, newPhotos);
        debugPrint('üì± –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ —Å —Ñ–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ (–ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏)');
      } catch (_) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤—Ç–æ—Ä–∏—á–Ω—É—é –æ—à–∏–±–∫—É
      }
      rethrow;
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ
  Future<void> _saveOfflineNoteUpdate(FishingNoteModel note, List<File> newPhotos) async {
    try {
      if (note.id.isEmpty) {
        throw Exception('ID –∑–∞–º–µ—Ç–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏
      final noteJson = note.toJson();
      noteJson['id'] = note.id; // –Ø–≤–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º ID –≤ JSON
      await _offlineStorage.saveOfflineNote(noteJson);

      // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ —Ñ–æ—Ç–æ
      if (newPhotos.isNotEmpty) {
        // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—É—Ç–∏ –∫ —Ñ–æ—Ç–æ –¥–ª—è —ç—Ç–æ–π –∑–∞–º–µ—Ç–∫–∏
        final existingPaths = await _offlineStorage.getOfflinePhotoPaths(note.id);

        // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –Ω–æ–≤—ã–º —Ñ–æ—Ç–æ
        final newPaths = newPhotos.map((photo) => photo.path).toList();
        final allPaths = [...existingPaths, ...newPaths];

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø—É—Ç–∏
        await _offlineStorage.saveOfflinePhotoPaths(note.id, allPaths);
        debugPrint('üì± –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${newPaths.length} –Ω–æ–≤—ã—Ö –ø—É—Ç–µ–π –∫ —Ñ–æ—Ç–æ (–≤—Å–µ–≥–æ: ${allPaths.length})');
      }

      debugPrint('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ ${note.id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ');
    } catch (e) {
      debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ –æ—Ñ–ª–∞–π–Ω: $e');
      rethrow;
    }
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏
  Future<void> deleteFishingNote(String noteId) async {
    try {
      if (noteId.isEmpty) {
        throw Exception('ID –∑–∞–º–µ—Ç–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
      }

      debugPrint('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏: $noteId');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
      final isOnline = await NetworkUtils.isNetworkAvailable();
      debugPrint('üåê –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ç–∏: ${isOnline ? '–û–Ω–ª–∞–π–Ω' : '–û—Ñ–ª–∞–π–Ω'}');

      if (isOnline) {
        // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç, —É–¥–∞–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É –∏–∑ Firestore
        try {
          await _firestore
              .collection('fishing_notes')
              .doc(noteId)
              .delete();

          debugPrint('‚úÖ –ó–∞–º–µ—Ç–∫–∞ $noteId —É–¥–∞–ª–µ–Ω–∞ –∏–∑ Firestore');

          // –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ–ø–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
          try {
            await _offlineStorage.removeOfflineNote(noteId);
            debugPrint('üì± –õ–æ–∫–∞–ª—å–Ω–∞—è –∫–æ–ø–∏—è –∑–∞–º–µ—Ç–∫–∏ $noteId —É–¥–∞–ª–µ–Ω–∞');
          } catch (e) {
            debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π –∫–æ–ø–∏–∏ –∑–∞–º–µ—Ç–∫–∏: $e');
          }
        } catch (e) {
          debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏ –∏–∑ Firestore: $e');

          // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ Firestore, –æ—Ç–º–µ—á–∞–µ–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
          await _offlineStorage.markForDeletion(noteId, false);
          debugPrint('üì± –ó–∞–º–µ—Ç–∫–∞ $noteId –æ—Ç–º–µ—á–µ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');

          // –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ–ø–∏—é
          try {
            await _offlineStorage.removeOfflineNote(noteId);
            debugPrint('üì± –õ–æ–∫–∞–ª—å–Ω–∞—è –∫–æ–ø–∏—è –∑–∞–º–µ—Ç–∫–∏ $noteId —É–¥–∞–ª–µ–Ω–∞');
          } catch (e) {
            debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π –∫–æ–ø–∏–∏ –∑–∞–º–µ—Ç–∫–∏: $e');
          }
        }
      } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞, –æ—Ç–º–µ—á–∞–µ–º –∑–∞–º–µ—Ç–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        await _offlineStorage.markForDeletion(noteId, false);
        debugPrint('üì± –ó–∞–º–µ—Ç–∫–∞ $noteId –æ—Ç–º–µ—á–µ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–æ—Ñ–ª–∞–π–Ω)');

        // –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ–ø–∏—é
        try {
          await _offlineStorage.removeOfflineNote(noteId);
          debugPrint('üì± –õ–æ–∫–∞–ª—å–Ω–∞—è –∫–æ–ø–∏—è –∑–∞–º–µ—Ç–∫–∏ $noteId —É–¥–∞–ª–µ–Ω–∞');
        } catch (e) {
          debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π –∫–æ–ø–∏–∏ –∑–∞–º–µ—Ç–∫–∏: $e');
        }
      }
    } catch (e) {
      debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏: $e');

      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, –æ—Ç–º–µ—á–∞–µ–º –∑–∞–º–µ—Ç–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
      try {
        await _offlineStorage.markForDeletion(noteId, false);
        debugPrint('üì± –ó–∞–º–µ—Ç–∫–∞ $noteId –æ—Ç–º–µ—á–µ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏)');
      } catch (_) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤—Ç–æ—Ä–∏—á–Ω—É—é –æ—à–∏–±–∫—É
      }
      rethrow;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –ø–æ ID
  Future<FishingNoteModel> getFishingNoteById(String noteId) async {
    try {
      if (noteId.isEmpty) {
        throw Exception('ID –∑–∞–º–µ—Ç–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
      }

      debugPrint('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –ø–æ ID: $noteId');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
      final isOnline = await NetworkUtils.isNetworkAvailable();
      debugPrint('üåê –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ç–∏: ${isOnline ? '–û–Ω–ª–∞–π–Ω' : '–û—Ñ–ª–∞–π–Ω'}');

      if (isOnline) {
        // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç, –ø–æ–ª—É—á–∞–µ–º –∑–∞–º–µ—Ç–∫—É –∏–∑ Firestore
        try {
          final doc = await _firestore
              .collection('fishing_notes')
              .doc(noteId)
              .get();

          if (!doc.exists) {
            debugPrint('‚ö†Ô∏è –ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ Firestore, –∏—â–µ–º –≤ –æ—Ñ–ª–∞–π–Ω —Ö—Ä–∞–Ω–∏–ª–∏—â–µ');
            // –ï—Å–ª–∏ –∑–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ Firestore, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤ –æ—Ñ–ª–∞–π–Ω —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            return await _getOfflineNoteById(noteId);
          }

          // –ü–æ–ª—É—á–∞–µ–º –∑–∞–º–µ—Ç–∫—É –∏–∑ Firestore –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–µ –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –æ—Ñ–ª–∞–π–Ω
          final note = FishingNoteModel.fromJson(doc.data() as Map<String, dynamic>, id: doc.id);
          debugPrint('‚úÖ –ó–∞–º–µ—Ç–∫–∞ $noteId –ø–æ–ª—É—á–µ–Ω–∞ –∏–∑ Firestore');

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ø–∏—é –≤ –æ—Ñ–ª–∞–π–Ω —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
          final noteJson = note.toJson();
          noteJson['id'] = note.id; // –Ø–≤–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º ID –≤ JSON
          await _offlineStorage.saveOfflineNote(noteJson);

          return note;
        } catch (e) {
          debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏ –∏–∑ Firestore: $e');

          // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑ Firestore, –∏—â–µ–º –≤ –æ—Ñ–ª–∞–π–Ω —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
          return await _getOfflineNoteById(noteId);
        }
      } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞, –∏—â–µ–º –∑–∞–º–µ—Ç–∫—É –≤ –æ—Ñ–ª–∞–π–Ω —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        debugPrint('üì± –ò—â–µ–º –∑–∞–º–µ—Ç–∫—É $noteId –≤ –æ—Ñ–ª–∞–π–Ω —Ö—Ä–∞–Ω–∏–ª–∏—â–µ');
        return await _getOfflineNoteById(noteId);
      }
    } catch (e) {
      debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏ –ø–æ ID: $e');

      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –∏–∑ –æ—Ñ–ª–∞–π–Ω —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
      try {
        debugPrint('üîÑ –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∑–∞–º–µ—Ç–∫—É $noteId –∏–∑ –æ—Ñ–ª–∞–π–Ω —Ö—Ä–∞–Ω–∏–ª–∏—â–∞');
        return await _getOfflineNoteById(noteId);
      } catch (innerError) {
        debugPrint('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ñ–ª–∞–π–Ω –∑–∞–º–µ—Ç–∫–∏: $innerError');
        rethrow;
      }
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –∏–∑ –æ—Ñ–ª–∞–π–Ω —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –ø–æ ID
  Future<FishingNoteModel> _getOfflineNoteById(String noteId) async {
    try {
      final allOfflineNotes = await _offlineStorage.getAllOfflineNotes();
      debugPrint('üì± –í—Å–µ–≥–æ –æ—Ñ–ª–∞–π–Ω –∑–∞–º–µ—Ç–æ–∫: ${allOfflineNotes.length}');

      // –ò—â–µ–º –∑–∞–º–µ—Ç–∫—É –ø–æ ID
      final noteDataList = allOfflineNotes.where((note) => note['id'] == noteId).toList();

      if (noteDataList.isEmpty) {
        debugPrint('‚ö†Ô∏è –ó–∞–º–µ—Ç–∫–∞ $noteId –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ—Ñ–ª–∞–π–Ω —Ö—Ä–∞–Ω–∏–ª–∏—â–µ');
        throw Exception('–ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ—Ñ–ª–∞–π–Ω —Ö—Ä–∞–Ω–∏–ª–∏—â–µ');
      }

      // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é –∑–∞–º–µ—Ç–∫—É
      final noteData = noteDataList.first;

      debugPrint('‚úÖ –ó–∞–º–µ—Ç–∫–∞ $noteId –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ—Ñ–ª–∞–π–Ω —Ö—Ä–∞–Ω–∏–ª–∏—â–µ');
      return FishingNoteModel.fromJson(noteData, id: noteId);
    } catch (e) {
      debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏ –∏–∑ –æ—Ñ–ª–∞–π–Ω —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: $e');
      rethrow;
    }
  }

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  Future<void> syncOfflineDataOnStartup() async {
    try {
      debugPrint('üîÑ –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
      await _syncService.syncAll();
      debugPrint('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (e) {
      debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: $e');
    }
  }

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
  Future<bool> forceSyncData() async {
    try {
      debugPrint('üîÑ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
      final result = await _syncService.forceSyncAll();
      debugPrint('‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${result ? '—É—Å–ø–µ—à–Ω–æ' : '–µ—Å—Ç—å –æ—à–∏–±–∫–∏'}');
      return result;
    } catch (e) {
      debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: $e');
      return false;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  Future<Map<String, dynamic>> getSyncStatus() async {
    try {
      return await _syncService.getSyncStatus();
    } catch (e) {
      debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: $e');
      return {'error': e.toString()};
    }
  }
}