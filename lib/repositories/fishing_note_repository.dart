// –ü—É—Ç—å: lib/repositories/fishing_note_repository.dart

import 'dart:convert';
import 'dart:io';
import 'package:flutter/foundation.dart';
import 'package:uuid/uuid.dart';
import '../models/fishing_note_model.dart';
import '../models/isar/fishing_note_entity.dart';
import '../services/isar_service.dart';
import '../services/offline/sync_service.dart';
import '../services/firebase/firebase_service.dart';
import '../services/local/local_file_service.dart';
import '../services/photo/photo_service.dart';
import '../services/subscription/subscription_service.dart';
import '../constants/subscription_constants.dart';
import '../utils/network_utils.dart';
import '../services/calendar_event_service.dart';

class FishingNoteRepository {
  static final FishingNoteRepository _instance = FishingNoteRepository._internal();

  factory FishingNoteRepository() {
    return _instance;
  }

  FishingNoteRepository._internal();

  final IsarService _isarService = IsarService.instance;
  final SyncService _syncService = SyncService.instance;
  final FirebaseService _firebaseService = FirebaseService();
  final LocalFileService _localFileService = LocalFileService();
  final PhotoService _photoService = PhotoService();
  final SubscriptionService _subscriptionService = SubscriptionService();

  // –ö—ç—à –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫
  static List<FishingNoteModel>? _cachedNotes;
  static DateTime? _cacheTimestamp;
  static const Duration _cacheValidity = Duration(minutes: 2);

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
  Future<void> initialize() async {
    try {
      await _isarService.init();

      // ‚úÖ –ù–û–í–û–ï: –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
      _photoService.cleanupOldTempFiles();

      // ‚úÖ –ù–û–í–û–ï: –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –æ—Ñ–ª–∞–π–Ω —Ñ–æ—Ç–æ –≤ —Ñ–æ–Ω–µ
      final isOnline = await NetworkUtils.isNetworkAvailable();
      if (isOnline) {
        syncAllOfflinePhotos().catchError((e) {
          debugPrint('‚ùå –û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ñ–æ—Ç–æ: $e');
        });
      }
    } catch (e) {
      rethrow;
    }
  }

  /// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ñ–ª–∞–π–Ω –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
  Future<void> syncOfflineDataOnStartup() async {
    try {
      final isOnline = await NetworkUtils.isNetworkAvailable();
      if (isOnline) {
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤ —Ñ–æ–Ω–µ
        _syncService.fullSync().then((result) {
          if (result) {
            clearCache(); // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
          }
        }).catchError((e) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ñ–æ–Ω–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        });
      }
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–º–µ—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<List<FishingNoteModel>> getUserFishingNotes() async {
    try {
      final userId = _firebaseService.currentUserId;
      if (userId == null || userId.isEmpty) {
        return [];
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
      if (_cachedNotes != null && _cacheTimestamp != null) {
        final cacheAge = DateTime.now().difference(_cacheTimestamp!);
        if (cacheAge < _cacheValidity) {
          return _cachedNotes!;
        } else {
          clearCache();
        }
      }

      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Isar —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
      final isarNotes = await _isarService.getAllFishingNotes();

      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±—Ä–∞–ª –Ω–µ–Ω—É–∂–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ null - markedForDeletion –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å null
      final activeNotes = isarNotes.where((entity) =>
      entity.markedForDeletion == false
      ).toList();

      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–æ–¥–µ–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
      final notes = activeNotes.map((entity) => _entityToModel(entity)).toList();

      // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      _cachedNotes = notes;
      _cacheTimestamp = DateTime.now();

      // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤ —Ñ–æ–Ω–µ, –µ—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç
      final isOnline = await NetworkUtils.isNetworkAvailable();
      if (isOnline) {
        _syncService.syncFishingNotesFromFirebase().then((_) {
          // –ü–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
          clearCache();
        }).catchError((e) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ñ–æ–Ω–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        });
      }

      return notes;
    } catch (e) {
      return [];
    }
  }

  /// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –°–û–ó–î–ê–ù–ò–ï –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏ (—É–±—Ä–∞–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ)
  Future<String> addFishingNote(
      FishingNoteModel note,
      List<File>? photos,
      ) async {
    try {
      final userId = _firebaseService.currentUserId;
      if (userId == null || userId.isEmpty) {
        throw Exception('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
      final noteId = note.id.isEmpty ? const Uuid().v4() : note.id;

      // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –∑–∞–º–µ—Ç–∫–∏ —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º ID –∏ UserID
      final noteToAdd = note.copyWith(id: noteId, userId: userId);

      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¢–û–õ–¨–ö–û –Ω–æ–≤—ã–µ —Ñ–æ—Ç–æ
      List<String> photoUrls = [];

      if (photos != null && photos.isNotEmpty) {
        debugPrint('üì∏ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ${photos.length} —Ñ–æ—Ç–æ –¥–ª—è –∑–∞–º–µ—Ç–∫–∏ $noteId');

        final isOnline = await NetworkUtils.isNetworkAvailable();

        if (isOnline) {
          // –û–Ω–ª–∞–π–Ω: –∑–∞–≥—Ä—É–∂–∞–µ–º –≤ Firebase Storage —á–µ—Ä–µ–∑ PhotoService
          photoUrls = await _photoService.uploadPhotosToFirebase(photos, noteId);
          debugPrint('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${photoUrls.length}/${photos.length} —Ñ–æ—Ç–æ –≤ Firebase');
        } else {
          // –û—Ñ–ª–∞–π–Ω: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
          debugPrint('üì± –û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø—É—Ç–∏ —Ñ–æ—Ç–æ');
          photoUrls = photos.map((file) => file.path).toList();

          // –ü–æ–º–µ—á–∞–µ–º –∑–∞–º–µ—Ç–∫—É –∫–∞–∫ —Ç—Ä–µ–±—É—é—â—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ñ–æ—Ç–æ
          debugPrint('üìù –ó–∞–º–µ—Ç–∫–∞ –ø–æ–º–µ—á–µ–Ω–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ñ–æ—Ç–æ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–µ—Ç–∏');
        }
      }

      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–ë–†–ê–õ–ò –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ - –º–æ–¥–µ–ª—å –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å –ø—É—Å—Ç—ã–º photoUrls
      // –¢–µ–ø–µ—Ä—å photoUrls —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ –∏–∑ PhotoService

      final noteWithPhotos = noteToAdd.copyWith(photoUrls: photoUrls);

      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ Isar entity –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Isar
      final entity = _modelToEntity(noteWithPhotos);
      entity.isSynced = false; // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é
      entity.markedForDeletion = false; // –Ø–≤–Ω–æ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ —É–¥–∞–ª–µ–Ω–Ω—É—é

      await _isarService.insertFishingNote(entity);

      // –ï—Å–ª–∏ –æ–Ω–ª–∞–π–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
      final isOnline = await NetworkUtils.isNetworkAvailable();
      if (isOnline) {
        _syncService.syncFishingNotesToFirebase().then((_) {
          // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞
        }).catchError((e) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ñ–æ–Ω–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        });
      }

      // –û—á–∏—â–∞–µ–º –∫—ç—à
      clearCache();

      return noteId;
    } catch (e) {
      rethrow;
    }
  }

  /// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –∑–∞–º–µ—Ç–∫–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–æ–≤—ã—Ö —Ñ–æ—Ç–æ
  Future<void> updateFishingNote(FishingNoteModel note) async {
    try {
      final userId = _firebaseService.currentUserId;
      if (userId == null || userId.isEmpty) {
        throw Exception('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      }

      if (note.id.isEmpty) {
        throw Exception('ID –∑–∞–º–µ—Ç–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
      }

      // –ù–∞—Ö–æ–¥–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –≤ Isar
      final existingEntity = await _isarService.getFishingNoteByFirebaseId(note.id);
      if (existingEntity == null) {
        throw Exception('–ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ');
      }

      // ‚úÖ –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–º–µ—Ç–∫–∞ –Ω–µ –ø–æ–º–µ—á–µ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
      if (existingEntity.markedForDeletion == true) {
        throw Exception('–ù–µ–ª—å–∑—è –æ–±–Ω–æ–≤–ª—è—Ç—å —É–¥–∞–ª–µ–Ω–Ω—É—é –∑–∞–º–µ—Ç–∫—É');
      }

      // ‚úÖ –ù–û–í–û–ï: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
      List<String> finalPhotoUrls = List.from(note.photoUrls);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø—É—Ç–∏ (–Ω–æ–≤—ã–µ —Ñ–æ—Ç–æ –∏–∑ edit screen)
      final localPhotos = finalPhotoUrls
          .where((url) => !url.startsWith('http')) // –õ–æ–∫–∞–ª—å–Ω—ã–µ –ø—É—Ç–∏
          .map((path) => File(path))
          .where((file) => file.existsSync())
          .toList();

      if (localPhotos.isNotEmpty) {
        debugPrint('üì∏ –ù–∞–π–¥–µ–Ω–æ ${localPhotos.length} –Ω–æ–≤—ã—Ö —Ñ–æ—Ç–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏');

        final isOnline = await NetworkUtils.isNetworkAvailable();

        if (isOnline) {
          // –û–Ω–ª–∞–π–Ω: –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ —Ñ–æ—Ç–æ –≤ Firebase
          final uploadedUrls = await _photoService.uploadPhotosToFirebase(localPhotos, note.id);

          // –ó–∞–º–µ–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø—É—Ç–∏ –Ω–∞ Firebase URL
          for (int i = 0; i < localPhotos.length && i < uploadedUrls.length; i++) {
            final localPath = localPhotos[i].path;
            final firebaseUrl = uploadedUrls[i];

            final index = finalPhotoUrls.indexOf(localPath);
            if (index != -1) {
              finalPhotoUrls[index] = firebaseUrl;
            }
          }

          debugPrint('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${uploadedUrls.length} –Ω–æ–≤—ã—Ö —Ñ–æ—Ç–æ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏');
        } else {
          debugPrint('üì± –û—Ñ–ª–∞–π–Ω: –Ω–æ–≤—ã–µ —Ñ–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ');
          // –í –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ –æ—Å—Ç–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø—É—Ç–∏ –∫–∞–∫ –µ—Å—Ç—å
        }
      }

      // –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å —Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º–∏ URL —Ñ–æ—Ç–æ
      final noteWithFinalPhotos = note.copyWith(photoUrls: finalPhotoUrls);

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
      final updatedEntity = _modelToEntity(noteWithFinalPhotos);
      updatedEntity.id = existingEntity.id; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π ID
      updatedEntity.firebaseId = note.id; // Firebase ID
      updatedEntity.isSynced = false; // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é
      updatedEntity.markedForDeletion = false; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–µ —É–¥–∞–ª–µ–Ω–Ω–æ–π
      updatedEntity.updatedAt = DateTime.now();

      await _isarService.updateFishingNote(updatedEntity);

      // –ï—Å–ª–∏ –æ–Ω–ª–∞–π–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
      final isOnline = await NetworkUtils.isNetworkAvailable();
      if (isOnline) {
        _syncService.syncFishingNotesToFirebase().then((_) {
          // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞
        }).catchError((e) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ñ–æ–Ω–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        });
      }

      // –û—á–∏—â–∞–µ–º –∫—ç—à
      clearCache();
    } catch (e) {
      rethrow;
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –ø–æ ID
  Future<FishingNoteModel> getFishingNoteById(String noteId) async {
    try {
      if (noteId.isEmpty) {
        throw Exception('ID –∑–∞–º–µ—Ç–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
      }

      // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø–æ Firebase ID
      FishingNoteEntity? entity = await _isarService.getFishingNoteByFirebaseId(noteId);

      // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ –ª–æ–∫–∞–ª—å–Ω–æ–º—É ID
      if (entity == null) {
        final localId = int.tryParse(noteId);
        if (localId != null) {
          entity = await _isarService.getFishingNoteById(localId);
        }
      }

      if (entity == null) {
        throw Exception('–ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }

      // ‚úÖ –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–º–µ—Ç–∫–∞ –Ω–µ –ø–æ–º–µ—á–µ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
      if (entity.markedForDeletion == true) {
        throw Exception('–ó–∞–º–µ—Ç–∫–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞');
      }

      return _entityToModel(entity);
    } catch (e) {
      rethrow;
    }
  }

  /// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –£–î–ê–õ–ï–ù–ò–ï —Å —É–¥–∞–ª–µ–Ω–∏–µ–º —Ñ–æ—Ç–æ –∏–∑ Firebase Storage
  Future<void> deleteFishingNote(String noteId) async {
    try {
      if (noteId.isEmpty) {
        throw Exception('ID –∑–∞–º–µ—Ç–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
      }

      // ‚úÖ –ù–û–í–û–ï: –ü–æ–ª—É—á–∞–µ–º –∑–∞–º–µ—Ç–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ
      final entity = await _isarService.getFishingNoteByFirebaseId(noteId);
      if (entity == null) {
        throw Exception('–ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ');
      }

      // ‚úÖ –ù–û–í–û–ï: –£–¥–∞–ª—è–µ–º —Ñ–æ—Ç–æ –∏–∑ Firebase Storage
      if (entity.photoUrls.isNotEmpty) {
        debugPrint('üóëÔ∏è –£–¥–∞–ª—è–µ–º ${entity.photoUrls.length} —Ñ–æ—Ç–æ –∏–∑ Firebase Storage');

        try {
          await _photoService.deletePhotosFromFirebase(entity.photoUrls);
          debugPrint('‚úÖ –§–æ—Ç–æ —É–¥–∞–ª–µ–Ω—ã –∏–∑ Firebase Storage');
        } catch (e) {
          debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ –∏–∑ Firebase: $e');
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –¥–∞–∂–µ –µ—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ —É–¥–∞–ª–∏–ª–∏—Å—å
        }

        // ‚úÖ –ù–û–í–û–ï: –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã —Ñ–æ—Ç–æ
        try {
          await _photoService.deleteLocalPhotos(entity.photoUrls);
          debugPrint('‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ —É–¥–∞–ª–µ–Ω—ã');
        } catch (e) {
          debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ: $e');
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏
        }
      }

      final isOnline = await NetworkUtils.isNetworkAvailable();
      bool deletionSuccessful = false;

      if (isOnline) {
        // –û–ù–õ–ê–ô–ù –†–ï–ñ–ò–ú: –°—Ä–∞–∑—É —É–¥–∞–ª—è–µ–º –∏–∑ Firebase –∏ Isar
        try {
          deletionSuccessful = await _syncService.deleteNoteByFirebaseId(noteId);

          if (deletionSuccessful) {
            debugPrint('‚úÖ –û–Ω–ª–∞–π–Ω —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ $noteId —É—Å–ø–µ—à–Ω–æ');
          } else {
            debugPrint('‚ö†Ô∏è –û–Ω–ª–∞–π–Ω —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ $noteId –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–∞–º–∏');
          }
        } catch (e) {
          debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ–Ω–ª–∞–π–Ω —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ $noteId: $e');
          throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É: $e');
        }
      } else {
        // –û–§–õ–ê–ô–ù –†–ï–ñ–ò–ú: –ü–æ–º–µ—á–∞–µ–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è, –ù–ï —É–¥–∞–ª—è–µ–º —Ñ–∏–∑–∏—á–µ—Å–∫–∏
        try {
          // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω—É—é, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
          entity.markedForDeletion = true;
          entity.updatedAt = DateTime.now();
          entity.isSynced = false; // –¢—Ä–µ–±—É–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è

          await _isarService.updateFishingNote(entity);
          deletionSuccessful = true;

          debugPrint('‚úÖ –û—Ñ–ª–∞–π–Ω —É–¥–∞–ª–µ–Ω–∏–µ: –∑–∞–º–µ—Ç–∫–∞ $noteId –ø–æ–º–µ—á–µ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
        } catch (e) {
          debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ—Ñ–ª–∞–π–Ω —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ $noteId: $e');
          throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–º–µ—Ç–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: $e');
        }
      }

      // –í–°–ï–ì–î–ê –æ–±–Ω–æ–≤–ª—è–µ–º –ª–∏–º–∏—Ç—ã –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏
      if (deletionSuccessful) {
        try {
          await _subscriptionService.decrementUsage(ContentType.fishingNotes);
          debugPrint('‚úÖ –õ–∏–º–∏—Ç fishingNotes —É—Å–ø–µ—à–Ω–æ —É–º–µ–Ω—å—à–µ–Ω');
        } catch (e) {
          debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞: $e');
          // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –∑–∞–º–µ—Ç–∫–∞ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞/–ø–æ–º–µ—á–µ–Ω–∞
        }

        // –û—á–∏—â–∞–µ–º –∫—ç—à
        clearCache();
      }

    } catch (e) {
      debugPrint('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ $noteId: $e');
      rethrow;
    }
  }

  /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
  Future<bool> forceSyncData() async {
    try {
      final result = await _syncService.fullSync();

      if (result) {
        // –û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        clearCache();
      }

      return result;
    } catch (e) {
      return false;
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  Future<Map<String, dynamic>> getSyncStatus() async {
    try {
      final syncStatus = await _syncService.getSyncStatus();
      final fishingStatus = syncStatus['fishingNotes'] as Map<String, dynamic>? ?? {};

      return {
        'total': fishingStatus['total'] ?? 0,
        'synced': fishingStatus['synced'] ?? 0,
        'unsynced': fishingStatus['unsynced'] ?? 0,
        'hasInternet': await NetworkUtils.isNetworkAvailable(),
      };
    } catch (e) {
      return {
        'total': 0,
        'synced': 0,
        'unsynced': 0,
        'hasInternet': false,
        'error': e.toString(),
      };
    }
  }

  /// ‚úÖ –ù–û–í–û–ï: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ñ–æ—Ç–æ –¥–ª—è –∑–∞–º–µ—Ç–∫–∏ (–¥–ª—è –æ—Ñ–ª–∞–π–Ω ‚Üí –æ–Ω–ª–∞–π–Ω)
  Future<void> syncPhotosForNote(String noteId) async {
    try {
      final userId = _firebaseService.currentUserId;
      if (userId == null || userId.isEmpty) {
        debugPrint('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ñ–æ—Ç–æ');
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –∑–∞–º–µ—Ç–∫—É
      final entity = await _isarService.getFishingNoteByFirebaseId(noteId);
      if (entity == null) {
        debugPrint('‚ùå –ó–∞–º–µ—Ç–∫–∞ $noteId –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ñ–æ—Ç–æ');
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
      final localPhotos = entity.photoUrls
          .where((url) => !url.startsWith('http')) // –õ–æ–∫–∞–ª—å–Ω—ã–µ –ø—É—Ç–∏
          .map((path) => File(path))
          .where((file) => file.existsSync())
          .toList();

      if (localPhotos.isEmpty) {
        debugPrint('üì∏ –ù–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–º–µ—Ç–∫–∏ $noteId');
        return;
      }

      debugPrint('üì§ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º ${localPhotos.length} –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ –¥–ª—è –∑–∞–º–µ—Ç–∫–∏ $noteId');

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ –≤ Firebase
      final uploadedUrls = await _photoService.uploadPhotosToFirebase(localPhotos, noteId);

      if (uploadedUrls.isNotEmpty) {
        // –û–±–Ω–æ–≤–ª—è–µ–º URL'—ã –≤ –∑–∞–º–µ—Ç–∫–µ
        final updatedPhotoUrls = List<String>.from(entity.photoUrls);

        // –ó–∞–º–µ–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø—É—Ç–∏ –Ω–∞ Firebase URL'—ã
        for (int i = 0; i < localPhotos.length && i < uploadedUrls.length; i++) {
          final localPath = localPhotos[i].path;
          final firebaseUrl = uploadedUrls[i];

          final index = updatedPhotoUrls.indexOf(localPath);
          if (index != -1) {
            updatedPhotoUrls[index] = firebaseUrl;
          }
        }

        entity.photoUrls = updatedPhotoUrls;
        entity.updatedAt = DateTime.now();
        await _isarService.updateFishingNote(entity);

        debugPrint('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ñ–æ—Ç–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${uploadedUrls.length} —Ñ–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ');
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ñ–æ—Ç–æ –¥–ª—è –∑–∞–º–µ—Ç–∫–∏ $noteId: $e');
    }
  }

  /// ‚úÖ –ù–û–í–û–ï: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –æ—Ñ–ª–∞–π–Ω —Ñ–æ—Ç–æ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–µ—Ç–∏
  Future<void> syncAllOfflinePhotos() async {
    try {
      final isOnline = await NetworkUtils.isNetworkAvailable();
      if (!isOnline) {
        debugPrint('üì± –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ç–∏ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ñ–æ—Ç–æ');
        return;
      }

      final userId = _firebaseService.currentUserId;
      if (userId == null) {
        debugPrint('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ñ–æ—Ç–æ');
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ —Ñ–æ—Ç–æ
      final allNotes = await _isarService.getAllFishingNotes();
      final notesWithLocalPhotos = allNotes.where((note) {
        return note.photoUrls.any((url) => !url.startsWith('http'));
      }).toList();

      if (notesWithLocalPhotos.isEmpty) {
        debugPrint('üì∏ –ù–µ—Ç –∑–∞–º–µ—Ç–æ–∫ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ —Ñ–æ—Ç–æ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
        return;
      }

      debugPrint('üì§ –ù–∞–π–¥–µ–Ω–æ ${notesWithLocalPhotos.length} –∑–∞–º–µ—Ç–æ–∫ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ —Ñ–æ—Ç–æ');

      for (final note in notesWithLocalPhotos) {
        if (note.firebaseId != null) {
          await syncPhotosForNote(note.firebaseId!);

          // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π –∑–∞–º–µ—Ç–æ–∫
          await Future.delayed(const Duration(milliseconds: 500));
        }
      }

      debugPrint('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –æ—Ñ–ª–∞–π–Ω —Ñ–æ—Ç–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ñ–æ—Ç–æ: $e');
    }
  }

  /// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è FishingNoteModel –≤ FishingNoteEntity
  FishingNoteEntity _modelToEntity(FishingNoteModel model) {
    final entity = FishingNoteEntity()
      ..firebaseId = model.id.isNotEmpty ? model.id : null
      ..userId = model.userId
      ..title = model.title.isNotEmpty ? model.title : model.location
      ..date = model.date
      ..location = model.location
      ..createdAt = DateTime.now()
      ..updatedAt = DateTime.now()
      ..markedForDeletion = false; // ‚úÖ –ù–û–í–û–ï: –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ —É–¥–∞–ª–µ–Ω–∞

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
    entity.tackle = model.tackle;
    entity.fishingType = model.fishingType;
    entity.notes = model.notes;
    entity.latitude = model.latitude;
    entity.longitude = model.longitude;
    entity.photoUrls = model.photoUrls;

    // description –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ (–µ—Å–ª–∏ notes –ø—É—Å—Ç—ã–µ)
    if (model.notes.isNotEmpty) {
      entity.description = model.notes;
    }

    // –ú–Ω–æ–≥–æ–¥–Ω–µ–≤–Ω—ã–µ —Ä—ã–±–∞–ª–∫–∏
    entity.isMultiDay = model.isMultiDay;
    entity.endDate = model.endDate;

    // –ú–∞—Ä–∫–µ—Ä—ã –∫–∞—Ä—Ç—ã –∫–∞–∫ JSON
    if (model.mapMarkers.isNotEmpty) {
      try {
        entity.mapMarkersJson = jsonEncode(model.mapMarkers);
      } catch (e) {
        entity.mapMarkersJson = '[]';
      }
    }

    // –ü–æ–≥–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –≤—Å–µ–º–∏ –ø–æ–ª—è–º–∏
    if (model.weather != null) {
      entity.weatherData = WeatherDataEntity()
        ..temperature = model.weather!.temperature
        ..feelsLike = model.weather!.feelsLike
        ..humidity = model.weather!.humidity.toDouble()
        ..windSpeed = model.weather!.windSpeed
        ..windDirection = model.weather!.windDirection
        ..pressure = model.weather!.pressure
        ..cloudCover = model.weather!.cloudCover.toDouble()
        ..isDay = model.weather!.isDay
        ..sunrise = model.weather!.sunrise
        ..sunset = model.weather!.sunset
        ..condition = model.weather!.weatherDescription
        ..recordedAt = model.weather!.observationTime;
    }

    // –ü–æ–∫–ª–µ–≤–∫–∏ —Å ID –∏ —Ñ–æ—Ç–æ
    if (model.biteRecords.isNotEmpty) {
      entity.biteRecords = model.biteRecords.map((bite) {
        return BiteRecordEntity()
          ..biteId = bite.id
          ..time = bite.time
          ..fishType = bite.fishType
          ..baitUsed = ''
          ..success = bite.weight > 0
          ..fishWeight = bite.weight
          ..fishLength = bite.length
          ..notes = bite.notes
          ..photoUrls = bite.photoUrls
          ..dayIndex = bite.dayIndex
          ..spotIndex = bite.spotIndex;
      }).toList();
    }

    // AI –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
    if (model.aiPrediction != null) {
      entity.aiPrediction = AiPredictionEntity()
        ..activityLevel = model.aiPrediction!['activityLevel']
        ..confidencePercent = model.aiPrediction!['confidencePercent']
        ..fishingType = model.aiPrediction!['fishingType']
        ..overallScore = model.aiPrediction!['overallScore']
        ..recommendation = model.aiPrediction!['recommendation']
        ..timestamp = model.aiPrediction!['timestamp'];

      // –ö–æ–¥–∏—Ä—É–µ–º —Å–æ–≤–µ—Ç—ã –≤ JSON
      if (model.aiPrediction!['tips'] != null) {
        try {
          entity.aiPrediction!.tipsJson = jsonEncode(model.aiPrediction!['tips']);
        } catch (e) {
          entity.aiPrediction!.tipsJson = '[]';
        }
      }
    }

    return entity;
  }

  /// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è FishingNoteEntity –≤ FishingNoteModel
  FishingNoteModel _entityToModel(FishingNoteEntity entity) {
    // –ü–æ–≥–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ –≤—Å–µ–º–∏ –ø–æ–ª—è–º–∏
    FishingWeather? weather;
    if (entity.weatherData != null) {
      weather = FishingWeather(
        temperature: entity.weatherData!.temperature ?? 0.0,
        feelsLike: entity.weatherData!.feelsLike ?? entity.weatherData!.temperature ?? 0.0,
        humidity: entity.weatherData!.humidity?.toInt() ?? 0,
        pressure: entity.weatherData!.pressure ?? 0.0,
        windSpeed: entity.weatherData!.windSpeed ?? 0.0,
        windDirection: entity.weatherData!.windDirection ?? '',
        weatherDescription: entity.weatherData!.condition ?? '',
        cloudCover: entity.weatherData!.cloudCover?.toInt() ?? 0,
        moonPhase: '',
        observationTime: entity.weatherData!.recordedAt ?? DateTime.now(),
        sunrise: entity.weatherData!.sunrise ?? '',
        sunset: entity.weatherData!.sunset ?? '',
        isDay: entity.weatherData!.isDay,
      );
    }

    // –ü–æ–∫–ª–µ–≤–∫–∏ —Å ID –∏ —Ñ–æ—Ç–æ –∏–∑ Entity
    List<BiteRecord> biteRecords = [];
    if (entity.biteRecords.isNotEmpty) {
      biteRecords = entity.biteRecords.map((bite) {
        return BiteRecord(
          id: bite.biteId ?? const Uuid().v4(),
          time: bite.time ?? DateTime.now(),
          fishType: bite.fishType ?? '',
          weight: bite.fishWeight ?? 0.0,
          length: bite.fishLength ?? 0.0,
          notes: bite.notes ?? '',
          dayIndex: bite.dayIndex ?? 0,
          spotIndex: bite.spotIndex ?? 0,
          photoUrls: bite.photoUrls,
        );
      }).toList();
    }

    // –ú–∞—Ä–∫–µ—Ä—ã –∫–∞—Ä—Ç—ã –∏–∑ JSON
    List<Map<String, dynamic>> mapMarkers = [];
    if (entity.mapMarkersJson != null && entity.mapMarkersJson!.isNotEmpty) {
      try {
        final decoded = jsonDecode(entity.mapMarkersJson!);
        if (decoded is List) {
          mapMarkers = List<Map<String, dynamic>>.from(decoded);
        }
      } catch (e) {
        mapMarkers = [];
      }
    }

    // AI –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∏–∑ Entity
    Map<String, dynamic>? aiPrediction;
    if (entity.aiPrediction != null) {
      List<String> tips = [];
      if (entity.aiPrediction!.tipsJson != null && entity.aiPrediction!.tipsJson!.isNotEmpty) {
        try {
          final decoded = jsonDecode(entity.aiPrediction!.tipsJson!);
          if (decoded is List) {
            tips = List<String>.from(decoded);
          }
        } catch (e) {
          tips = [];
        }
      }

      aiPrediction = {
        'activityLevel': entity.aiPrediction!.activityLevel ?? '',
        'confidencePercent': entity.aiPrediction!.confidencePercent ?? 0,
        'fishingType': entity.aiPrediction!.fishingType ?? '',
        'overallScore': entity.aiPrediction!.overallScore ?? 0,
        'recommendation': entity.aiPrediction!.recommendation ?? '',
        'timestamp': entity.aiPrediction!.timestamp ?? DateTime.now().millisecondsSinceEpoch,
        'tips': tips,
      };
    }

    return FishingNoteModel(
      id: entity.firebaseId ?? entity.id.toString(),
      userId: _firebaseService.currentUserId ?? '',
      location: entity.location ?? '',

      // –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –∏–∑ Entity
      latitude: entity.latitude ?? 0.0,
      longitude: entity.longitude ?? 0.0,
      tackle: entity.tackle ?? '',
      fishingType: entity.fishingType ?? '',
      notes: entity.notes ?? entity.description ?? '',
      photoUrls: entity.photoUrls,

      date: entity.date,
      endDate: entity.endDate,
      isMultiDay: entity.isMultiDay,
      weather: weather,
      biteRecords: biteRecords,
      mapMarkers: mapMarkers,
      title: entity.title,
      aiPrediction: aiPrediction,

      // –ü–æ–ª—è –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –≤ —Å—Ç–∞—Ä–æ–π –º–æ–¥–µ–ª–∏
      dayBiteMaps: const {},
      fishingSpots: const ['–û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞'],
      coverPhotoUrl: '',
      coverCropSettings: null,
      reminderEnabled: false,
      reminderType: ReminderType.none,
      reminderTime: null,
    );
  }

  /// –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
  static void clearCache() {
    _cachedNotes = null;
    _cacheTimestamp = null;
  }

  /// –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
  Future<void> clearAllLocalData() async {
    try {
      await _isarService.clearAllData();
      clearCache();
    } catch (e) {
      rethrow;
    }
  }
}