// –ü—É—Ç—å: lib/repositories/fishing_note_repository.dart

import 'dart:io';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/foundation.dart';
import 'package:uuid/uuid.dart';
import '../models/fishing_note_model.dart';
import '../services/firebase/firebase_service.dart';
import '../utils/network_utils.dart';
import '../services/offline/offline_storage_service.dart';
import '../services/offline/sync_service.dart';
import '../services/local/local_file_service.dart';
import '../services/subscription/subscription_service.dart';
import '../constants/subscription_constants.dart';

class FishingNoteRepository {
  final FirebaseService _firebaseService = FirebaseService();
  final OfflineStorageService _offlineStorage = OfflineStorageService();
  final SyncService _syncService = SyncService();
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final LocalFileService _localFileService = LocalFileService();
  final SubscriptionService _subscriptionService = SubscriptionService();

  // üî• –£–ü–†–û–©–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫ –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
  Future<List<FishingNoteModel>> getUserFishingNotes() async {
    try {
      final userId = _firebaseService.currentUserId;
      if (userId == null || userId.isEmpty) {
        debugPrint('‚ö†Ô∏è getUserFishingNotes: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
        return [];
      }

      debugPrint('üìù –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $userId');

      // –í—Å–µ–≥–¥–∞ –ø–æ–ª—É—á–∞–µ–º –æ—Ñ–ª–∞–π–Ω –∑–∞–º–µ—Ç–∫–∏ –ø–µ—Ä–≤—ã–º–∏
      final offlineNotes = await _getOfflineNotes(userId);
      debugPrint('üì± –û—Ñ–ª–∞–π–Ω –∑–∞–º–µ—Ç–æ–∫ –Ω–∞–π–¥–µ–Ω–æ: ${offlineNotes.length}');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
      final isOnline = await NetworkUtils.isNetworkAvailable();
      debugPrint('üåê –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ç–∏: ${isOnline ? '–û–Ω–ª–∞–π–Ω' : '–û—Ñ–ª–∞–π–Ω'}');

      List<FishingNoteModel> onlineNotes = [];

      if (isOnline) {
        try {
          debugPrint('‚òÅÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–º–µ—Ç–∫–∏ –∏–∑ Firebase');
          final snapshot = await _firebaseService.getUserFishingNotesNew();

          for (var doc in snapshot.docs) {
            final data = doc.data() as Map<String, dynamic>?;
            if (data != null && data.isNotEmpty) {
              final note = FishingNoteModel.fromJson(data, id: doc.id);
              onlineNotes.add(note);
            }
          }

          debugPrint('‚òÅÔ∏è –ó–∞–º–µ—Ç–æ–∫ –∏–∑ Firebase: ${onlineNotes.length}');
        } catch (e) {
          debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–æ–∫ –∏–∑ Firebase: $e');
        }
      }

      // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–ø–∏—Å–∫–∏, –∏–∑–±–µ–≥–∞—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
      final Map<String, FishingNoteModel> uniqueNotes = {};

      // –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –æ–Ω–ª–∞–π–Ω –∑–∞–º–µ—Ç–∫–∏
      for (var note in onlineNotes) {
        uniqueNotes[note.id] = note;
      }

      // –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ñ–ª–∞–π–Ω –∑–∞–º–µ—Ç–∫–∏, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –æ–Ω–ª–∞–π–Ω —Å–ø–∏—Å–∫–µ
      for (var note in offlineNotes) {
        if (!uniqueNotes.containsKey(note.id)) {
          uniqueNotes[note.id] = note;
        }
      }

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
      final allNotes = uniqueNotes.values.toList()
        ..sort((a, b) => b.date.compareTo(a.date));

      debugPrint('üìä –ò—Ç–æ–≥–æ –∑–∞–º–µ—Ç–æ–∫: ${allNotes.length}');

      // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤ —Ñ–æ–Ω–µ
      if (isOnline) {
        _syncService.syncAll();
      }

      return allNotes;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –≤ getUserFishingNotes: $e');
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
      return [];
    }
  }

  // üî• –£–ü–†–û–©–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ñ–ª–∞–π–Ω –∑–∞–º–µ—Ç–æ–∫
  Future<List<FishingNoteModel>> _getOfflineNotes(String userId) async {
    try {
      final offlineNotes = await _offlineStorage.getAllOfflineNotes();
      final List<FishingNoteModel> result = [];

      for (final note in offlineNotes) {
        try {
          final noteId = note['id']?.toString() ?? '';
          final noteUserId = note['userId']?.toString() ?? '';

          if (noteId.isEmpty) continue;

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
          bool belongsToUser = false;

          if (noteUserId.isNotEmpty && noteUserId == userId) {
            belongsToUser = true;
          } else if (noteUserId.isEmpty) {
            // –ó–∞–º–µ—Ç–∫–∞ –±–µ–∑ userId - –¥–æ–±–∞–≤–ª—è–µ–º userId
            note['userId'] = userId;
            belongsToUser = true;
            _offlineStorage.saveOfflineNote(note).catchError((error) {
              debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏: $error');
            });
          }

          if (belongsToUser) {
            final noteModel = FishingNoteModel.fromJson(note, id: noteId);
            result.add(noteModel);
          }
        } catch (e) {
          debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–º–µ—Ç–∫–∏: $e');
          continue;
        }
      }

      result.sort((a, b) => b.date.compareTo(a.date));
      return result;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ñ–ª–∞–π–Ω –∑–∞–º–µ—Ç–æ–∫: $e');
      return [];
    }
  }

  // üî• –ö–†–ò–¢–ò–ß–ï–°–ö–ò –£–ü–†–û–©–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –ë–ï–ó —Å–ª–æ–∂–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –ª–∏–º–∏—Ç–æ–≤
  Future<String> addFishingNote(
      FishingNoteModel note,
      List<File>? photos,
      ) async {
    try {
      final userId = _firebaseService.currentUserId;
      if (userId == null || userId.isEmpty) {
        throw Exception('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
      final noteId = note.id.isEmpty ? const Uuid().v4() : note.id;
      debugPrint('üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ —Å ID: $noteId');

      // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –∑–∞–º–µ—Ç–∫–∏ —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º ID –∏ UserID
      final noteToAdd = note.copyWith(id: noteId, userId: userId);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
      final isOnline = await NetworkUtils.isNetworkAvailable();
      debugPrint('üåê –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ç–∏: ${isOnline ? '–û–Ω–ª–∞–π–Ω' : '–û—Ñ–ª–∞–π–Ω'}');

      if (isOnline) {
        // –û–ù–õ–ê–ô–ù: –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Firebase
        List<String> photoUrls = [];

        if (photos != null && photos.isNotEmpty) {
          debugPrint('üñºÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ ${photos.length} —Ñ–æ—Ç–æ');
          for (var photo in photos) {
            try {
              final bytes = await photo.readAsBytes();
              final fileName = '${DateTime.now().millisecondsSinceEpoch}_${photos.indexOf(photo)}.jpg';
              final path = 'users/$userId/photos/$fileName';
              final url = await _firebaseService.uploadImage(path, bytes);
              photoUrls.add(url);
            } catch (e) {
              debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ: $e');
            }
          }
        }

        final noteWithPhotos = noteToAdd.copyWith(photoUrls: photoUrls);

        try {
          // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ addFishingNoteNew
          await _firebaseService.addFishingNoteNew(noteWithPhotos.toJson());
          debugPrint('‚úÖ –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Firebase');

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ø–∏—é –≤ –æ—Ñ–ª–∞–π–Ω —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
          final noteJson = noteWithPhotos.toJson();
          noteJson['id'] = noteId;
          noteJson['isSynced'] = true;
          noteJson['isOffline'] = false;
          await _offlineStorage.saveOfflineNote(noteJson);

          // ‚úÖ –£–ü–†–û–©–ï–ù–û: –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¢–û–õ–¨–ö–û –æ–¥–∏–Ω —Ä–∞–∑
          try {
            await _firebaseService.incrementUsageCount('notesCount');
            debugPrint('‚úÖ –°—á–µ—Ç—á–∏–∫ —É–≤–µ–ª–∏—á–µ–Ω —á–µ—Ä–µ–∑ Firebase');
          } catch (e) {
            debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞: $e');
          }

          return noteId;
        } catch (e) {
          debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ Firebase: $e');
          // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
          await _saveOfflineNote(noteWithPhotos, photos);
          return noteId;
        }
      } else {
        // –û–§–õ–ê–ô–ù: –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∫–æ–ø–∏–∏ —Ñ–æ—Ç–æ
        List<String> localPhotoUris = [];
        if (photos != null && photos.isNotEmpty) {
          localPhotoUris = await _localFileService.saveLocalCopies(photos);
        }

        final noteWithLocalPhotos = noteToAdd.copyWith(photoUrls: localPhotoUris);
        await _saveOfflineNote(noteWithLocalPhotos, photos);

        return noteId;
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏: $e');
      rethrow;
    }
  }

  // üî• –£–ü–†–û–©–ï–ù–û: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ñ–ª–∞–π–Ω –∑–∞–º–µ—Ç–∫–∏
  Future<void> _saveOfflineNote(
      FishingNoteModel note,
      List<File>? photos,
      ) async {
    try {
      if (note.id.isEmpty) {
        throw Exception('ID –∑–∞–º–µ—Ç–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
      }

      debugPrint('üì± –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ñ–ª–∞–π–Ω –∑–∞–º–µ—Ç–∫–∏: ${note.id}');

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–º–µ—Ç–∫—É
      final noteJson = note.toJson();
      noteJson['id'] = note.id;
      noteJson['isSynced'] = false;
      noteJson['isOffline'] = true;

      await _offlineStorage.saveOfflineNote(noteJson);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç–∏ –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º
      if (photos != null && photos.isNotEmpty) {
        final photoPaths = photos.map((file) => file.path).toList();
        await _offlineStorage.saveOfflinePhotoPaths(note.id, photoPaths);
      }

      debugPrint('‚úÖ –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ñ–ª–∞–π–Ω –∑–∞–º–µ—Ç–∫–∏: $e');
      rethrow;
    }
  }

  // üî• –£–ü–†–û–©–ï–ù–û: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏
  Future<void> updateFishingNote(FishingNoteModel note) async {
    try {
      final userId = _firebaseService.currentUserId;
      if (userId == null || userId.isEmpty) {
        throw Exception('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      }

      if (note.id.isEmpty) {
        throw Exception('ID –∑–∞–º–µ—Ç–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
      }

      debugPrint('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏: ${note.id}');

      // –í—Å–µ–≥–¥–∞ —Å–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
      final noteJson = note.toJson();
      noteJson['id'] = note.id;
      await _offlineStorage.saveOfflineNote(noteJson);

      // –ï—Å–ª–∏ –æ–Ω–ª–∞–π–Ω - –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –≤ Firebase
      final isOnline = await NetworkUtils.isNetworkAvailable();
      if (isOnline) {
        try {
          await _firebaseService.updateFishingNoteNew(note.id, note.toJson());
          debugPrint('‚úÖ –ó–∞–º–µ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ Firebase');
        } catch (e) {
          debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤ Firebase: $e');
        }
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏: $e');
      rethrow;
    }
  }

  // üî• –£–ü–†–û–©–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –ø–æ ID
  Future<FishingNoteModel> getFishingNoteById(String noteId) async {
    try {
      final userId = _firebaseService.currentUserId;
      if (userId == null || userId.isEmpty) {
        throw Exception('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      }

      if (noteId.isEmpty) {
        throw Exception('ID –∑–∞–º–µ—Ç–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
      }

      debugPrint('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –ø–æ ID: $noteId');

      final isOnline = await NetworkUtils.isNetworkAvailable();

      if (isOnline) {
        try {
          final doc = await _firestore
              .collection('users')
              .doc(userId)
              .collection('fishing_notes')
              .doc(noteId)
              .get();

          if (doc.exists) {
            final note = FishingNoteModel.fromJson(
              doc.data() as Map<String, dynamic>,
              id: doc.id,
            );
            debugPrint('‚úÖ –ó–∞–º–µ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞ –∏–∑ Firebase');
            return note;
          }
        } catch (e) {
          debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑ Firebase: $e');
        }
      }

      // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –æ–Ω–ª–∞–π–Ω - –∏—â–µ–º –≤ –æ—Ñ–ª–∞–π–Ω —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
      return await _getOfflineNoteById(noteId);
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏: $e');
      rethrow;
    }
  }

  // üî• –£–ü–†–û–©–ï–ù–û: –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏
  Future<void> deleteFishingNote(String noteId) async {
    try {
      final userId = _firebaseService.currentUserId;
      if (userId == null || userId.isEmpty) {
        throw Exception('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      }

      if (noteId.isEmpty) {
        throw Exception('ID –∑–∞–º–µ—Ç–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
      }

      debugPrint('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏: $noteId');

      final isOnline = await NetworkUtils.isNetworkAvailable();

      if (isOnline) {
        try {
          // –£–¥–∞–ª—è–µ–º –∏–∑ Firebase
          await _firebaseService.deleteFishingNoteNew(noteId);
          debugPrint('‚úÖ –ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ Firebase');

          // ‚úÖ –£–ü–†–û–©–ï–ù–û: –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¢–û–õ–¨–ö–û –æ–¥–∏–Ω —Ä–∞–∑
          try {
            await _firebaseService.incrementUsageCount('notesCount', increment: -1);
            debugPrint('‚úÖ –°—á–µ—Ç—á–∏–∫ —É–º–µ–Ω—å—à–µ–Ω —á–µ—Ä–µ–∑ Firebase');
          } catch (e) {
            debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–º–µ–Ω—å—à–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞: $e');
          }
        } catch (e) {
          debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ Firebase: $e');
          // –û—Ç–º–µ—á–∞–µ–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
          await _offlineStorage.markForDeletion(noteId, false);
        }
      } else {
        // –û—Ñ–ª–∞–π–Ω - –æ—Ç–º–µ—á–∞–µ–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        await _offlineStorage.markForDeletion(noteId, false);
      }

      // –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ–ø–∏—é
      try {
        await _offlineStorage.removeOfflineNote(noteId);
        debugPrint('‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è –∫–æ–ø–∏—è —É–¥–∞–ª–µ–Ω–∞');
      } catch (e) {
        debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π –∫–æ–ø–∏–∏: $e');
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏: $e');
      rethrow;
    }
  }

  // üî• –£–ü–†–û–©–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ñ–ª–∞–π–Ω –∑–∞–º–µ—Ç–∫–∏ –ø–æ ID
  Future<FishingNoteModel> _getOfflineNoteById(String noteId) async {
    try {
      final allOfflineNotes = await _offlineStorage.getAllOfflineNotes();
      final noteDataList = allOfflineNotes.where((note) => note['id'] == noteId).toList();

      if (noteDataList.isEmpty) {
        throw Exception('–ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ—Ñ–ª–∞–π–Ω —Ö—Ä–∞–Ω–∏–ª–∏—â–µ');
      }

      final noteData = noteDataList.first;
      return FishingNoteModel.fromJson(noteData, id: noteId);
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ñ–ª–∞–π–Ω –∑–∞–º–µ—Ç–∫–∏: $e');
      rethrow;
    }
  }

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  Future<void> syncOfflineDataOnStartup() async {
    try {
      await _syncService.syncAll();
    } catch (e) {
      debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: $e');
    }
  }

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
  Future<bool> forceSyncData() async {
    try {
      return await _syncService.forceSyncAll();
    } catch (e) {
      debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: $e');
      return false;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  Future<Map<String, dynamic>> getSyncStatus() async {
    try {
      return await _syncService.getSyncStatus();
    } catch (e) {
      return {'error': e.toString()};
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
  Future<void> clearLocalFilesCache() async {
    try {
      await _localFileService.clearCache();
    } catch (e) {
      debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞: $e');
      rethrow;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
  Future<int> getLocalFilesCacheSize() async {
    try {
      return await _localFileService.getCacheSize();
    } catch (e) {
      return 0;
    }
  }
}