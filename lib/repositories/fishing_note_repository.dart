// –ü—É—Ç—å: lib/repositories/fishing_note_repository.dart

import 'dart:io';
import 'package:flutter/foundation.dart';
import 'package:uuid/uuid.dart';
import 'package:connectivity_plus/connectivity_plus.dart';
import '../models/fishing_note_model.dart';
import '../models/isar/fishing_note_entity.dart';
import '../services/isar_service.dart';
import '../services/offline/sync_service.dart';
import '../services/firebase/firebase_service.dart';
import '../services/local/local_file_service.dart';
import '../utils/network_utils.dart';
import '../services/calendar_event_service.dart';

class FishingNoteRepository {
  static final FishingNoteRepository _instance = FishingNoteRepository._internal();

  factory FishingNoteRepository() {
    return _instance;
  }

  FishingNoteRepository._internal();

  final IsarService _isarService = IsarService.instance;
  final SyncService _syncService = SyncService.instance;
  final FirebaseService _firebaseService = FirebaseService();
  final LocalFileService _localFileService = LocalFileService();

  // –ö—ç—à –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫
  static List<FishingNoteModel>? _cachedNotes;
  static DateTime? _cacheTimestamp;
  static const Duration _cacheValidity = Duration(minutes: 2);

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
  Future<void> initialize() async {
    try {
      await _isarService.init();
      debugPrint('‚úÖ FishingNoteRepository –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ FishingNoteRepository: $e');
      rethrow;
    }
  }

  /// ‚úÖ –ù–û–í–´–ô –ú–ï–¢–û–î: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ñ–ª–∞–π–Ω –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
  Future<void> syncOfflineDataOnStartup() async {
    try {
      debugPrint('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ñ–ª–∞–π–Ω –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ');

      final isOnline = await NetworkUtils.isNetworkAvailable();
      if (isOnline) {
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤ —Ñ–æ–Ω–µ
        _syncService.fullSync().then((result) {
          if (result) {
            debugPrint('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
            clearCache(); // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
          } else {
            debugPrint('‚ö†Ô∏è –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏');
          }
        }).catchError((e) {
          debugPrint('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: $e');
        });
      } else {
        debugPrint('üì± –û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞');
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –≤ syncOfflineDataOnStartup: $e');
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–º–µ—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<List<FishingNoteModel>> getUserFishingNotes() async {
    try {
      final userId = _firebaseService.currentUserId;
      if (userId == null || userId.isEmpty) {
        debugPrint('‚ö†Ô∏è getUserFishingNotes: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
        return [];
      }

      debugPrint('üìù –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $userId');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
      if (_cachedNotes != null && _cacheTimestamp != null) {
        final cacheAge = DateTime.now().difference(_cacheTimestamp!);
        if (cacheAge < _cacheValidity) {
          debugPrint('üíæ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–º–µ—Ç–∫–∏ –∏–∑ –∫—ç—à–∞ (–≤–æ–∑—Ä–∞—Å—Ç: ${cacheAge.inSeconds}—Å)');
          return _cachedNotes!;
        } else {
          debugPrint('üíæ –ö—ç—à –∑–∞–º–µ—Ç–æ–∫ —É—Å—Ç–∞—Ä–µ–ª, –æ—á–∏—â–∞–µ–º');
          clearCache();
        }
      }

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Isar (–ª–æ–∫–∞–ª—å–Ω–∞—è –ë–î)
      final isarNotes = await _isarService.getAllFishingNotes();
      debugPrint('üì± –ù–∞–π–¥–µ–Ω–æ –∑–∞–º–µ—Ç–æ–∫ –≤ Isar: ${isarNotes.length}');

      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–æ–¥–µ–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
      final notes = isarNotes.map((entity) => _entityToModel(entity)).toList();

      // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      _cachedNotes = notes;
      _cacheTimestamp = DateTime.now();

      // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤ —Ñ–æ–Ω–µ, –µ—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç
      final isOnline = await NetworkUtils.isNetworkAvailable();
      if (isOnline) {
        _syncService.syncFishingNotesFromFirebase().then((_) {
          // –ü–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
          clearCache();
        }).catchError((e) {
          debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: $e');
        });
      }

      debugPrint('üìä –ò—Ç–æ–≥–æ –∑–∞–º–µ—Ç–æ–∫ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ: ${notes.length}');
      return notes;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –≤ getUserFishingNotes: $e');
      return [];
    }
  }

  /// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏
  Future<String> addFishingNote(
      FishingNoteModel note,
      List<File>? photos,
      ) async {
    try {
      final userId = _firebaseService.currentUserId;
      if (userId == null || userId.isEmpty) {
        throw Exception('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
      final noteId = note.id.isEmpty ? const Uuid().v4() : note.id;
      debugPrint('üìù –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ —Å ID: $noteId');

      // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –∑–∞–º–µ—Ç–∫–∏ —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º ID –∏ UserID
      final noteToAdd = note.copyWith(id: noteId, userId: userId);

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
      List<String> photoUrls = [];
      final isOnline = await NetworkUtils.isNetworkAvailable();

      if (isOnline && photos != null && photos.isNotEmpty) {
        // –û–Ω–ª–∞–π–Ω: –∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ –≤ Firebase Storage
        debugPrint('üñºÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ ${photos.length} —Ñ–æ—Ç–æ –≤ Firebase Storage');
        for (var photo in photos) {
          try {
            final bytes = await photo.readAsBytes();
            final fileName = '${DateTime.now().millisecondsSinceEpoch}_${photos.indexOf(photo)}.jpg';
            final path = 'users/$userId/photos/$fileName';
            final url = await _firebaseService.uploadImage(path, bytes);
            photoUrls.add(url);
          } catch (e) {
            debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ: $e');
          }
        }
      } else if (photos != null && photos.isNotEmpty) {
        // –û—Ñ–ª–∞–π–Ω: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∫–æ–ø–∏–∏
        debugPrint('üì± –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ${photos.length} —Ñ–æ—Ç–æ –ª–æ–∫–∞–ª—å–Ω–æ');
        photoUrls = await _localFileService.saveLocalCopies(photos);
      }

      final noteWithPhotos = noteToAdd.copyWith(photoUrls: photoUrls);

      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ Isar entity –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Isar
      final entity = _modelToEntity(noteWithPhotos);
      entity.isSynced = false; // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é

      await _isarService.insertFishingNote(entity);
      debugPrint('‚úÖ –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Isar');

      // –ï—Å–ª–∏ –æ–Ω–ª–∞–π–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
      if (isOnline) {
        _syncService.syncFishingNotesToFirebase().then((_) {
          debugPrint('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Firebase –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        }).catchError((e) {
          debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Firebase: $e');
        });
      }

      // –û—á–∏—â–∞–µ–º –∫—ç—à
      clearCache();

      return noteId;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏: $e');
      rethrow;
    }
  }

  /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–º–µ—Ç–∫–∏
  Future<void> updateFishingNote(FishingNoteModel note) async {
    try {
      final userId = _firebaseService.currentUserId;
      if (userId == null || userId.isEmpty) {
        throw Exception('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      }

      if (note.id.isEmpty) {
        throw Exception('ID –∑–∞–º–µ—Ç–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
      }

      debugPrint('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏: ${note.id}');

      // –ù–∞—Ö–æ–¥–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –≤ Isar
      final existingEntity = await _isarService.getFishingNoteByFirebaseId(note.id);
      if (existingEntity == null) {
        throw Exception('–ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ');
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
      final updatedEntity = _modelToEntity(note);
      updatedEntity.id = existingEntity.id; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π ID
      updatedEntity.firebaseId = note.id; // Firebase ID
      updatedEntity.isSynced = false; // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é
      updatedEntity.updatedAt = DateTime.now();

      await _isarService.updateFishingNote(updatedEntity);
      debugPrint('‚úÖ –ó–∞–º–µ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ Isar');

      // –ï—Å–ª–∏ –æ–Ω–ª–∞–π–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
      final isOnline = await NetworkUtils.isNetworkAvailable();
      if (isOnline) {
        _syncService.syncFishingNotesToFirebase().then((_) {
          debugPrint('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å Firebase –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        }).catchError((e) {
          debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: $e');
        });
      }

      // –û—á–∏—â–∞–µ–º –∫—ç—à
      clearCache();
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏: $e');
      rethrow;
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –ø–æ ID
  Future<FishingNoteModel> getFishingNoteById(String noteId) async {
    try {
      if (noteId.isEmpty) {
        throw Exception('ID –∑–∞–º–µ—Ç–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
      }

      debugPrint('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –ø–æ ID: $noteId');

      // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø–æ Firebase ID
      FishingNoteEntity? entity = await _isarService.getFishingNoteByFirebaseId(noteId);

      // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ –ª–æ–∫–∞–ª—å–Ω–æ–º—É ID
      if (entity == null) {
        final localId = int.tryParse(noteId);
        if (localId != null) {
          entity = await _isarService.getFishingNoteById(localId);
        }
      }

      if (entity == null) {
        throw Exception('–ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }

      debugPrint('‚úÖ –ó–∞–º–µ—Ç–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ Isar');
      return _entityToModel(entity);
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏: $e');
      rethrow;
    }
  }

  /// –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏
  Future<void> deleteFishingNote(String noteId) async {
    try {
      debugPrint('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏: $noteId');

      // üî• –ò–°–ü–û–õ–¨–ó–£–ï–ú –ù–û–í–´–ô –ú–ï–¢–û–î: –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ Firebase ID
      final result = await _syncService.deleteNoteByFirebaseId(noteId);

      if (result) {
        debugPrint('‚úÖ –ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
      } else {
        debugPrint('‚ö†Ô∏è –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏');
      }

      // –û—á–∏—â–∞–µ–º –∫—ç—à
      clearCache();
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏: $e');
      rethrow;
    }
  }

  /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
  Future<bool> forceSyncData() async {
    try {
      debugPrint('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö');
      final result = await _syncService.fullSync();

      if (result) {
        // –û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        clearCache();
        debugPrint('‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
      } else {
        debugPrint('‚ö†Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏');
      }

      return result;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: $e');
      return false;
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  Future<Map<String, dynamic>> getSyncStatus() async {
    try {
      final syncStatus = await _syncService.getSyncStatus();
      final fishingStatus = syncStatus['fishingNotes'] as Map<String, dynamic>? ?? {};

      return {
        'total': fishingStatus['total'] ?? 0,
        'synced': fishingStatus['synced'] ?? 0,
        'unsynced': fishingStatus['unsynced'] ?? 0,
        'hasInternet': await NetworkUtils.isNetworkAvailable(),
      };
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: $e');
      return {
        'total': 0,
        'synced': 0,
        'unsynced': 0,
        'hasInternet': false,
        'error': e.toString(),
      };
    }
  }

  /// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è FishingNoteModel –≤ FishingNoteEntity
  FishingNoteEntity _modelToEntity(FishingNoteModel model) {
    final entity = FishingNoteEntity()
      ..firebaseId = model.id.isNotEmpty ? model.id : null
      ..title = model.title.isNotEmpty ? model.title : model.location // –ï—Å–ª–∏ title –ø—É—Å—Ç–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º location
      ..date = model.date
      ..location = model.location
      ..createdAt = DateTime.now() // –£ —Å—Ç–∞—Ä–æ–π –º–æ–¥–µ–ª–∏ –Ω–µ—Ç createdAt
      ..updatedAt = DateTime.now();

    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: description = notes –∏–∑ —Å—Ç–∞—Ä–æ–π –º–æ–¥–µ–ª–∏
    if (model.notes.isNotEmpty) {
      entity.description = model.notes;
    }

    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–≥–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
    if (model.weather != null) {
      entity.weatherData = WeatherDataEntity()
        ..temperature = model.weather!.temperature
        ..humidity = model.weather!.humidity.toDouble()
        ..windSpeed = model.weather!.windSpeed
        ..windDirection = model.weather!.windDirection
        ..pressure = model.weather!.pressure
        ..condition = model.weather!.weatherDescription // weatherDescription -> condition
        ..recordedAt = model.weather!.observationTime;
    }

    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –æ –ø–æ–∫–ª–µ–≤–∫–∞—Ö —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
    if (model.biteRecords.isNotEmpty) {
      entity.biteRecords = model.biteRecords.map((bite) {
        return BiteRecordEntity()
          ..time = bite.time
          ..fishType = bite.fishType
          ..baitUsed = '' // –£ —Å—Ç–∞—Ä–æ–π –º–æ–¥–µ–ª–∏ –Ω–µ—Ç baitUsed, —Å—Ç–∞–≤–∏–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
          ..success = bite.weight > 0 // –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω–æ–π, –µ—Å–ª–∏ –µ—Å—Ç—å –≤–µ—Å —Ä—ã–±—ã
          ..fishWeight = bite.weight
          ..fishLength = bite.length
          ..notes = bite.notes;
      }).toList();
    }

    return entity;
  }

  /// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è FishingNoteEntity –≤ FishingNoteModel
  FishingNoteModel _entityToModel(FishingNoteEntity entity) {
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–≥–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    FishingWeather? weather;
    if (entity.weatherData != null) {
      weather = FishingWeather(
        temperature: entity.weatherData!.temperature ?? 0.0,
        feelsLike: entity.weatherData!.temperature ?? 0.0, // –ò—Å–ø–æ–ª—å–∑—É–µ–º temperature
        humidity: entity.weatherData!.humidity?.toInt() ?? 0,
        pressure: entity.weatherData!.pressure ?? 0.0,
        windSpeed: entity.weatherData!.windSpeed ?? 0.0,
        windDirection: entity.weatherData!.windDirection ?? '',
        weatherDescription: entity.weatherData!.condition ?? '', // condition -> weatherDescription
        cloudCover: 0, // –£ Entity –Ω–µ—Ç cloudCover
        moonPhase: '', // –£ Entity –Ω–µ—Ç moonPhase
        observationTime: entity.weatherData!.recordedAt ?? DateTime.now(),
        sunrise: '', // –£ Entity –Ω–µ—Ç sunrise
        sunset: '', // –£ Entity –Ω–µ—Ç sunset
        isDay: true, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–µ–Ω—å
      );
    }

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –æ –ø–æ–∫–ª–µ–≤–∫–∞—Ö
    List<BiteRecord> biteRecords = [];
    if (entity.biteRecords.isNotEmpty) {
      biteRecords = entity.biteRecords.map((bite) {
        return BiteRecord(
          id: const Uuid().v4(), // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –¥–ª—è —Å—Ç–∞—Ä–æ–π –º–æ–¥–µ–ª–∏
          time: bite.time ?? DateTime.now(),
          fishType: bite.fishType ?? '',
          weight: bite.fishWeight ?? 0.0, // fishWeight -> weight
          length: bite.fishLength ?? 0.0, // fishLength -> length
          notes: bite.notes ?? '',
          dayIndex: 0, // –£ Entity –Ω–µ—Ç dayIndex
          spotIndex: 0, // –£ Entity –Ω–µ—Ç spotIndex
          photoUrls: [], // –£ Entity –Ω–µ—Ç photoUrls –¥–ª—è bite records
        );
      }).toList();
    }

    return FishingNoteModel(
      id: entity.firebaseId ?? entity.id.toString(),
      userId: _firebaseService.currentUserId ?? '',
      location: entity.location ?? '',
      latitude: 0.0, // –£ Entity –Ω–µ—Ç latitude
      longitude: 0.0, // –£ Entity –Ω–µ—Ç longitude
      date: entity.date,
      endDate: null, // –£ Entity –Ω–µ—Ç endDate
      isMultiDay: false, // –£ Entity –Ω–µ—Ç isMultiDay
      tackle: '', // –£ Entity –Ω–µ—Ç tackle
      notes: entity.description ?? '', // description -> notes
      photoUrls: [], // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ URL —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
      fishingType: '', // –£ Entity –Ω–µ—Ç fishingType
      weather: weather,
      biteRecords: biteRecords,
      dayBiteMaps: const {}, // –£ Entity –Ω–µ—Ç dayBiteMaps
      fishingSpots: const ['–û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞'], // –£ Entity –Ω–µ—Ç fishingSpots
      mapMarkers: const [], // –£ Entity –Ω–µ—Ç mapMarkers
      coverPhotoUrl: '', // –£ Entity –Ω–µ—Ç coverPhotoUrl
      coverCropSettings: null, // –£ Entity –Ω–µ—Ç coverCropSettings
      title: entity.title,
      aiPrediction: null, // –£ Entity –Ω–µ—Ç aiPrediction
      reminderEnabled: false, // –£ Entity –Ω–µ—Ç reminderEnabled
      reminderType: ReminderType.none, // –£ Entity –Ω–µ—Ç reminderType
      reminderTime: null, // –£ Entity –Ω–µ—Ç reminderTime
    );
  }

  /// –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
  static void clearCache() {
    _cachedNotes = null;
    _cacheTimestamp = null;
    debugPrint('üíæ –ö—ç—à –∑–∞–º–µ—Ç–æ–∫ —Ä—ã–±–∞–ª–∫–∏ –æ—á–∏—â–µ–Ω');
  }

  /// –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
  Future<void> clearAllLocalData() async {
    try {
      await _isarService.clearAllData();
      clearCache();
      debugPrint('‚úÖ –í—Å–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: $e');
      rethrow;
    }
  }
}