// –ü—É—Ç—å: lib/repositories/user_repository.dart

import 'dart:async';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/foundation.dart';
import '../models/user_model.dart';
import '../services/user_consent_service.dart'; // –ù–û–í–´–ô –ò–ú–ü–û–†–¢!

class UserRepository {
  final FirebaseAuth _auth = FirebaseAuth.instance;
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final UserConsentService _consentService = UserConsentService(); // –ù–û–í–û–ï!

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  User? get currentUser => _auth.currentUser;

  // –ü–æ–ª—É—á–µ–Ω–∏–µ ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  String? get currentUserId => _auth.currentUser?.uid;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  bool get isUserLoggedIn => _auth.currentUser != null;

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
  Future<UserModel?> getUserData(String userId) async {
    try {
      final doc = await _firestore.collection('users').doc(userId).get();

      if (!doc.exists) {
        return null;
      }

      return UserModel.fromJson(doc.data() as Map<String, dynamic>);
    } catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $e');
      return null;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<UserModel?> getCurrentUserData() async {
    final userId = currentUserId;
    if (userId == null) return null;

    return getUserData(userId);
  }

  // –°—Ç—Ä–∏–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
  Stream<UserModel?> getUserStream() {
    final userId = currentUserId;
    if (userId == null) {
      return Stream.value(null);
    }

    return _firestore
        .collection('users')
        .doc(userId)
        .snapshots()
        .map((snapshot) {
      if (!snapshot.exists) {
        return null;
      }

      return UserModel.fromJson(snapshot.data() as Map<String, dynamic>);
    });
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<void> updateUserData(Map<String, dynamic> userData) async {
    final userId = currentUserId;
    if (userId == null) {
      throw Exception('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
    }

    await _firestore.collection('users').doc(userId).set(
      userData,
      SetOptions(merge: true),
    );
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<void> updateUserAvatar(String avatarUrl) async {
    final userId = currentUserId;
    if (userId == null) {
      throw Exception('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
    }

    await _firestore.collection('users').doc(userId).update({
      'avatarUrl': avatarUrl,
    });
  }

  // –í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ (–ò–°–ü–†–ê–í–õ–ï–ù–û!)
  Future<void> signOut() async {
    try {
      // –í–ê–ñ–ù–û: –û—á–∏—â–∞–µ–º —Å–æ–≥–ª–∞—Å–∏—è –ü–ï–†–ï–î –≤—ã—Ö–æ–¥–æ–º
      debugPrint('üßπ –û—á–∏—â–∞–µ–º —Å–æ–≥–ª–∞—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º');
      await _consentService.clearAllConsents();

      // –í—ã—Ö–æ–¥–∏–º –∏–∑ Firebase Auth
      await _auth.signOut();

      debugPrint('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ (—Å –æ—á–∏—Å—Ç–∫–æ–π —Å–æ–≥–ª–∞—Å–∏–π)');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞: $e');

      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ –ø—ã—Ç–∞–µ–º—Å—è –≤—ã–π—Ç–∏ –∏–∑ Firebase
      try {
        await _auth.signOut();
      } catch (signOutError) {
        debugPrint('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ Firebase: $signOutError');
      }
    }
  }
}