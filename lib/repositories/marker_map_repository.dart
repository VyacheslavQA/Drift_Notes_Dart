// –ü—É—Ç—å: lib/repositories/marker_map_repository.dart

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/foundation.dart';
import 'package:uuid/uuid.dart';
import '../models/marker_map_model.dart';
import '../services/firebase/firebase_service.dart';
import '../utils/network_utils.dart';
import '../services/offline/offline_storage_service.dart';
import '../services/offline/sync_service.dart';
import '../services/subscription/subscription_service.dart';
import '../constants/subscription_constants.dart';

class MarkerMapRepository {
  final FirebaseService _firebaseService = FirebaseService();
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final OfflineStorageService _offlineStorage = OfflineStorageService();
  final SyncService _syncService = SyncService();
  final SubscriptionService _subscriptionService = SubscriptionService();

  // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –º–∞—Ä–∫–µ—Ä–Ω—ã–µ –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ù–û–í–û–ô —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
  Future<List<MarkerMapModel>> getUserMarkerMaps() async {
    try {
      final userId = _firebaseService.currentUserId;
      if (userId == null || userId.isEmpty) {
        throw Exception('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      }

      debugPrint('üìç –ó–∞–ø—Ä–æ—Å –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $userId');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
      final isOnline = await NetworkUtils.isNetworkAvailable();

      if (isOnline) {
        debugPrint('üìç –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç—ã –∏–∑ –ù–û–í–û–ô —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Firebase...');

        // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ù–û–í–£–Æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —á–µ—Ä–µ–∑ FirebaseService
        final snapshot = await _firebaseService.getUserMarkerMaps();
        debugPrint('üìç –ü–æ–ª—É—á–µ–Ω–æ ${snapshot.docs.length} –∫–∞—Ä—Ç –∏–∑ Firebase');

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –º–æ–¥–µ–ª–∏
        final onlineMaps = snapshot.docs
            .map((doc) {
          try {
            final data = doc.data() as Map<String, dynamic>;
            return MarkerMapModel.fromJson(data, id: doc.id);
          } catch (e) {
            debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞—Ä—Ç—ã ${doc.id}: $e');
            return null;
          }
        })
            .where((map) => map != null)
            .cast<MarkerMapModel>()
            .toList();

        debugPrint('üìç –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${onlineMaps.length} –∫–∞—Ä—Ç');

        // –ü–æ–ª—É—á–∞–µ–º –æ—Ñ–ª–∞–π–Ω –∫–∞—Ä—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –±—ã–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
        final offlineMaps = await _getOfflineMarkerMaps(userId);

        // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–ø–∏—Å–∫–∏, –∏–∑–±–µ–≥–∞—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        final allMaps = [...onlineMaps];

        for (var offlineMap in offlineMaps) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–∫–æ–π –∫–∞—Ä—Ç—ã –µ—â–µ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ
          if (!allMaps.any((map) => map.id == offlineMap.id)) {
            allMaps.add(offlineMap);
          }
        }

        // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ ID
        final Map<String, MarkerMapModel> uniqueMaps = {};
        for (var map in allMaps) {
          uniqueMaps[map.id] = map;
        }

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ –ø–æ –¥–∞—Ç–µ (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º)
        final result = uniqueMaps.values.toList()
          ..sort((a, b) => b.date.compareTo(a.date));

        debugPrint('‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${result.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç');

        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤ —Ñ–æ–Ω–µ
        _syncService.syncAll();

        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–º–∏—Ç—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç
        try {
          await _subscriptionService.refreshUsageLimits();
        } catch (e) {
          debugPrint('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç: $e');
        }

        return result;
      } else {
        debugPrint('üì± –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç –∏–∑ –æ—Ñ–ª–∞–π–Ω —Ö—Ä–∞–Ω–∏–ª–∏—â–∞');

        // –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –ø–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—ã –∏–∑ –æ—Ñ–ª–∞–π–Ω —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        return await _getOfflineMarkerMaps(userId);
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç: $e');

      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, –ø—ã—Ç–∞–µ–º—Å—è –≤–µ—Ä–Ω—É—Ç—å —Ö–æ—Ç—è –±—ã –æ—Ñ–ª–∞–π–Ω –∫–∞—Ä—Ç—ã
      try {
        return await _getOfflineMarkerMaps(
          _firebaseService.currentUserId ?? '',
        );
      } catch (_) {
        rethrow;
      }
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç –∏–∑ –æ—Ñ–ª–∞–π–Ω —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
  Future<List<MarkerMapModel>> _getOfflineMarkerMaps(String userId) async {
    try {
      final offlineMaps = await _offlineStorage.getAllOfflineMarkerMaps();

      // –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –º–æ–¥–µ–ª–∏
      final offlineMapModels = offlineMaps
          .where((map) => map['userId'] == userId) // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ userId
          .map((map) {
        try {
          return MarkerMapModel.fromJson(map, id: map['id'] as String);
        } catch (e) {
          debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ñ–ª–∞–π–Ω –∫–∞—Ä—Ç—ã: $e');
          return null;
        }
      })
          .where((map) => map != null)
          .cast<MarkerMapModel>()
          .toList();

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º)
      offlineMapModels.sort((a, b) => b.date.compareTo(a.date));

      return offlineMapModels;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ñ–ª–∞–π–Ω –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç: $e');
      return [];
    }
  }

  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –º–∞—Ä–∫–µ—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã (—É–±—Ä–∞–Ω–æ –¥–≤–æ–π–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤)
  Future<String> addMarkerMap(MarkerMapModel map) async {
    try {
      final userId = _firebaseService.currentUserId;
      if (userId == null || userId.isEmpty) {
        throw Exception('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      }

      debugPrint('üìç –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $userId');

      // ‚úÖ –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –î–û —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã
      final canCreate = await _subscriptionService.canCreateContentOffline(
        ContentType.markerMaps,
      );

      if (!canCreate) {
        throw Exception('–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç');
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
      final String mapId = map.id.isEmpty ? const Uuid().v4() : map.id;

      // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –∫–∞—Ä—Ç—ã —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º ID –∏ UserID
      final mapToAdd = map.copyWith(
        id: mapId,
        userId: userId,
        date: map.date,
      );

      debugPrint('üìç –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É —Å ID: $mapId');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
      final isOnline = await NetworkUtils.isNetworkAvailable();

      if (isOnline) {
        // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º FirebaseService –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ù–û–í–£–Æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        try {
          await _firebaseService.addMarkerMap(mapToAdd.toJson());
          debugPrint('‚úÖ –ú–∞—Ä–∫–µ—Ä–Ω–∞—è –∫–∞—Ä—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ù–û–í–£–Æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É: $mapId');

          // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¢–û–õ–¨–ö–û —á–µ—Ä–µ–∑ FirebaseService (–æ–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º)
          try {
            await _firebaseService.incrementUsageCount('markerMapsCount');
            debugPrint('‚úÖ –°—á–µ—Ç—á–∏–∫ –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç —É–≤–µ–ª–∏—á–µ–Ω —á–µ—Ä–µ–∑ Firebase');
          } catch (e) {
            debugPrint('‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ —á–µ—Ä–µ–∑ Firebase: $e');
            // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –∫–∞—Ä—Ç–∞ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞
          }

        } catch (e) {
          debugPrint('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ Firebase, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ñ–ª–∞–π–Ω: $e');
          await _saveMapOffline(mapToAdd);

          // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¢–û–õ–¨–ö–û —á–µ—Ä–µ–∑ SubscriptionService (–æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º)
          try {
            await _subscriptionService.incrementUsage(ContentType.markerMaps);
            debugPrint('‚úÖ –°—á–µ—Ç—á–∏–∫ –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç —É–≤–µ–ª–∏—á–µ–Ω —á–µ—Ä–µ–∑ SubscriptionService');
          } catch (e) {
            debugPrint('‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ —á–µ—Ä–µ–∑ SubscriptionService: $e');
            // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –∫–∞—Ä—Ç–∞ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞
          }
        }

        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –æ—Ñ–ª–∞–π–Ω –∫–∞—Ä—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        _syncService.syncAll();

        debugPrint('‚úÖ –ú–∞—Ä–∫–µ—Ä–Ω–∞—è –∫–∞—Ä—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –æ–Ω–ª–∞–π–Ω: $mapId');
      } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ä—Ç—É –ª–æ–∫–∞–ª—å–Ω–æ
        await _saveMapOffline(mapToAdd);

        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¢–û–õ–¨–ö–û —á–µ—Ä–µ–∑ SubscriptionService (–æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º)
        try {
          await _subscriptionService.incrementUsage(ContentType.markerMaps);
          debugPrint('‚úÖ –°—á–µ—Ç—á–∏–∫ –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç —É–≤–µ–ª–∏—á–µ–Ω –æ—Ñ–ª–∞–π–Ω');
        } catch (e) {
          debugPrint('‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –æ—Ñ–ª–∞–π–Ω: $e');
          // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –∫–∞—Ä—Ç–∞ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞
        }

        debugPrint('‚úÖ –ú–∞—Ä–∫–µ—Ä–Ω–∞—è –∫–∞—Ä—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –æ—Ñ–ª–∞–π–Ω: $mapId');
      }

      return mapId;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–∞—Ä–∫–µ—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã: $e');
      rethrow;
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ
  Future<void> _saveMapOffline(MarkerMapModel map) async {
    try {
      await _offlineStorage.saveOfflineMarkerMap(map.toJson());
      debugPrint('üì± –ú–∞—Ä–∫–µ—Ä–Ω–∞—è –∫–∞—Ä—Ç–∞ ${map.id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã –æ—Ñ–ª–∞–π–Ω: $e');
      rethrow;
    }
  }

  // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã –≤ –ù–û–í–û–ô —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
  Future<void> updateMarkerMap(MarkerMapModel map) async {
    try {
      if (map.id.isEmpty) {
        throw Exception('ID –∫–∞—Ä—Ç—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
      }

      final userId = _firebaseService.currentUserId;
      if (userId == null || userId.isEmpty) {
        throw Exception('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      }

      debugPrint('üìç –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã: ${map.id}');

      // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –∫–∞—Ä—Ç—ã —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º UserID
      final mapToUpdate = map.copyWith(userId: userId);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
      final isOnline = await NetworkUtils.isNetworkAvailable();

      if (isOnline) {
        // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º FirebaseService –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –ù–û–í–û–ô —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
        try {
          await _firebaseService.updateMarkerMap(map.id, mapToUpdate.toJson());
          debugPrint('‚úÖ –ú–∞—Ä–∫–µ—Ä–Ω–∞—è –∫–∞—Ä—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ –ù–û–í–û–ô —Å—Ç—Ä—É–∫—Ç—É—Ä–µ: ${map.id}');
        } catch (e) {
          debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ Firebase, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ñ–ª–∞–π–Ω: $e');
          await _offlineStorage.saveMarkerMapUpdate(map.id, mapToUpdate.toJson());
        }
      } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ
        await _offlineStorage.saveMarkerMapUpdate(map.id, mapToUpdate.toJson());

        debugPrint('‚úÖ –ú–∞—Ä–∫–µ—Ä–Ω–∞—è –∫–∞—Ä—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –æ—Ñ–ª–∞–π–Ω: ${map.id}');
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–∞—Ä–∫–µ—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã: $e');

      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ
      try {
        await _offlineStorage.saveMarkerMapUpdate(map.id, map.toJson());
      } catch (_) {
        rethrow;
      }
    }
  }

  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–¥–∞–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã (—É–±—Ä–∞–Ω–æ –¥–≤–æ–π–Ω–æ–µ —É–º–µ–Ω—å—à–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤)
  Future<void> deleteMarkerMap(String mapId) async {
    try {
      if (mapId.isEmpty) {
        throw Exception('ID –∫–∞—Ä—Ç—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
      }

      debugPrint('üìç –£–¥–∞–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã: $mapId');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
      final isOnline = await NetworkUtils.isNetworkAvailable();

      if (isOnline) {
        // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º FirebaseService –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –ù–û–í–û–ô —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        try {
          await _firebaseService.deleteMarkerMap(mapId);
          debugPrint('‚úÖ –ú–∞—Ä–∫–µ—Ä–Ω–∞—è –∫–∞—Ä—Ç–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –ù–û–í–û–ô —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: $mapId');

          // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¢–û–õ–¨–ö–û —á–µ—Ä–µ–∑ FirebaseService (–æ–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º)
          // –ù–ï —á–µ—Ä–µ–∑ SubscriptionService —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–≤–æ–π–Ω–æ–≥–æ —É–º–µ–Ω—å—à–µ–Ω–∏—è
          // FirebaseService —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫–∏ –≤ –æ–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ

        } catch (e) {
          debugPrint('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ Firebase, –æ—Ç–º–µ—á–∞–µ–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: $e');
          await _offlineStorage.markForDeletion(mapId, true);

          // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¢–û–õ–¨–ö–û —á–µ—Ä–µ–∑ SubscriptionService (–æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º)
          try {
            await _subscriptionService.decrementUsage(ContentType.markerMaps);
            debugPrint('‚úÖ –°—á–µ—Ç—á–∏–∫ –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç —É–º–µ–Ω—å—à–µ–Ω —á–µ—Ä–µ–∑ SubscriptionService');
          } catch (e) {
            debugPrint('‚ùå –û—à–∏–±–∫–∞ —É–º–µ–Ω—å—à–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ —á–µ—Ä–µ–∑ SubscriptionService: $e');
            // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –∫–∞—Ä—Ç–∞ —É–∂–µ –æ—Ç–º–µ—á–µ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
          }
        }

        // –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ–ø–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        try {
          await _offlineStorage.removeOfflineMarkerMap(mapId);
        } catch (e) {
          debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π –∫–æ–ø–∏–∏ –∫–∞—Ä—Ç—ã: $e');
        }

        debugPrint('‚úÖ –ú–∞—Ä–∫–µ—Ä–Ω–∞—è –∫–∞—Ä—Ç–∞ —É–¥–∞–ª–µ–Ω–∞ –æ–Ω–ª–∞–π–Ω: $mapId');
      } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞, –æ—Ç–º–µ—á–∞–µ–º –∫–∞—Ä—Ç—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        await _offlineStorage.markForDeletion(mapId, true);

        // –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ–ø–∏—é
        try {
          await _offlineStorage.removeOfflineMarkerMap(mapId);
        } catch (e) {
          debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π –∫–æ–ø–∏–∏ –∫–∞—Ä—Ç—ã: $e');
        }

        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¢–û–õ–¨–ö–û —á–µ—Ä–µ–∑ SubscriptionService (–æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º)
        try {
          await _subscriptionService.decrementUsage(ContentType.markerMaps);
          debugPrint('‚úÖ –°—á–µ—Ç—á–∏–∫ –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç —É–º–µ–Ω—å—à–µ–Ω –æ—Ñ–ª–∞–π–Ω');
        } catch (e) {
          debugPrint('‚ùå –û—à–∏–±–∫–∞ —É–º–µ–Ω—å—à–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –æ—Ñ–ª–∞–π–Ω: $e');
          // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –∫–∞—Ä—Ç–∞ —É–∂–µ –æ—Ç–º–µ—á–µ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        }

        debugPrint('‚úÖ –ú–∞—Ä–∫–µ—Ä–Ω–∞—è –∫–∞—Ä—Ç–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: $mapId');
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–∞—Ä–∫–µ—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã: $e');

      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, –æ—Ç–º–µ—á–∞–µ–º –∫–∞—Ä—Ç—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
      try {
        await _offlineStorage.markForDeletion(mapId, true);
      } catch (_) {
        rethrow;
      }
    }
  }

  // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã –ø–æ ID –∏–∑ –ù–û–í–û–ô —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
  Future<MarkerMapModel> getMarkerMapById(String mapId) async {
    try {
      if (mapId.isEmpty) {
        throw Exception('ID –∫–∞—Ä—Ç—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
      }

      final userId = _firebaseService.currentUserId;
      if (userId == null || userId.isEmpty) {
        throw Exception('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      }

      debugPrint('üìç –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã –ø–æ ID: $mapId');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
      final isOnline = await NetworkUtils.isNetworkAvailable();

      if (isOnline) {
        // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º –∏–∑ –ù–û–í–û–ô —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —á–µ—Ä–µ–∑ FirebaseService
        try {
          final doc = await _firestore
              .collection('users')
              .doc(userId)
              .collection('marker_maps')
              .doc(mapId)
              .get();

          if (doc.exists) {
            debugPrint('‚úÖ –ö–∞—Ä—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ù–û–í–û–ô —Å—Ç—Ä—É–∫—Ç—É—Ä–µ: $mapId');
            return MarkerMapModel.fromJson(doc.data()!, id: doc.id);
          } else {
            debugPrint('‚ö†Ô∏è –ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ù–û–í–û–ô —Å—Ç—Ä—É–∫—Ç—É—Ä–µ, –∏—â–µ–º –æ—Ñ–ª–∞–π–Ω: $mapId');
          }
        } catch (e) {
          debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑ Firebase: $e');
        }
      } else {
        debugPrint('üì± –û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º: –∏—â–µ–º –∫–∞—Ä—Ç—É –≤ –æ—Ñ–ª–∞–π–Ω —Ö—Ä–∞–Ω–∏–ª–∏—â–µ');
      }

      // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –æ–Ω–ª–∞–π–Ω –∏–ª–∏ –Ω–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞, –∏—â–µ–º –≤ –æ—Ñ–ª–∞–π–Ω —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
      return await _getOfflineMarkerMapById(mapId);
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ä–∫–µ—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã –ø–æ ID: $e');

      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É –∏–∑ –æ—Ñ–ª–∞–π–Ω —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
      try {
        return await _getOfflineMarkerMapById(mapId);
      } catch (_) {
        rethrow;
      }
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã –∏–∑ –æ—Ñ–ª–∞–π–Ω —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –ø–æ ID
  Future<MarkerMapModel> _getOfflineMarkerMapById(String mapId) async {
    try {
      final allOfflineMaps = await _offlineStorage.getAllOfflineMarkerMaps();

      // –ò—â–µ–º –∫–∞—Ä—Ç—É –ø–æ ID
      final mapData = allOfflineMaps.firstWhere(
            (map) => map['id'] == mapId,
        orElse: () => throw Exception(
          '–ú–∞—Ä–∫–µ—Ä–Ω–∞—è –∫–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ—Ñ–ª–∞–π–Ω —Ö—Ä–∞–Ω–∏–ª–∏—â–µ',
        ),
      );

      return MarkerMapModel.fromJson(mapData, id: mapId);
    } catch (e) {
      debugPrint(
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ä–∫–µ—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã –∏–∑ –æ—Ñ–ª–∞–π–Ω —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: $e',
      );
      rethrow;
    }
  }

  // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ù–û–í–û–ô —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
  Future<void> clearAllMarkerMaps() async {
    try {
      final userId = _firebaseService.currentUserId;
      if (userId == null || userId.isEmpty) {
        throw Exception('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      }

      debugPrint('üìç –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $userId');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
      final isOnline = await NetworkUtils.isNetworkAvailable();

      if (isOnline) {
        // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º –≤—Å–µ –∫–∞—Ä—Ç—ã –∏–∑ –ù–û–í–û–ô —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        final snapshot = await _firebaseService.getUserMarkerMaps();

        // –°–æ–∑–¥–∞–µ–º –ø–∞–∫–µ—Ç–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        final batch = _firestore.batch();
        for (var doc in snapshot.docs) {
          batch.delete(doc.reference);
        }

        // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–∞–∫–µ—Ç–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
        await batch.commit();

        debugPrint(
          '‚úÖ –£–¥–∞–ª–µ–Ω–æ ${snapshot.docs.length} –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç –∏–∑ –ù–û–í–û–ô —Å—Ç—Ä—É–∫—Ç—É—Ä—ã',
        );
      } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞, –æ—Ç–º–µ—á–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        await _offlineStorage.markAllMarkerMapsForDeletion();
        debugPrint('üì± –í—Å–µ –∫–∞—Ä—Ç—ã –æ—Ç–º–µ—á–µ–Ω—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–æ—Ñ–ª–∞–π–Ω)');
      }

      // –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ, –æ—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∫–∞—Ä—Ç
      try {
        final offlineMaps = await _offlineStorage.getAllOfflineMarkerMaps();
        for (var map in offlineMaps) {
          final mapId = map['id'];
          if (mapId != null) {
            await _offlineStorage.removeOfflineMarkerMap(mapId);
          }
        }
        debugPrint('‚úÖ –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∫–∞—Ä—Ç –æ—á–∏—â–µ–Ω–æ');
      } catch (e) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∫–∞—Ä—Ç: $e');
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Å–µ—Ö –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç: $e');

      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, –æ—Ç–º–µ—á–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
      try {
        await _offlineStorage.markAllMarkerMapsForDeletion();
      } catch (_) {
        rethrow;
      }
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –º–∞—Ä–∫–µ—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã
  Future<bool> canCreateMarkerMap() async {
    try {
      return await _subscriptionService.canCreateContentOffline(
        ContentType.markerMaps,
      );
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã: $e');
      return false;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç
  Future<int> getCurrentUsage() async {
    try {
      return await _subscriptionService.getCurrentOfflineUsage(
        ContentType.markerMaps,
      );
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç: $e');
      return 0;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç
  Future<int> getUsageLimit() async {
    try {
      return _subscriptionService.getLimit(ContentType.markerMaps);
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ –∫–∞—Ä—Ç: $e');
      return 0;
    }
  }

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  Future<void> syncOfflineDataOnStartup() async {
    await _syncService.syncAll();
  }

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
  Future<bool> forceSyncData() async {
    try {
      return await _syncService.forceSyncAll();
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: $e');
      return false;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  Future<Map<String, dynamic>> getSyncStatus() async {
    return await _syncService.getSyncStatus();
  }
}