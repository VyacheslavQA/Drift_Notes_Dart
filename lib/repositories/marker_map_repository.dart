// –ü—É—Ç—å: lib/repositories/marker_map_repository.dart

import 'package:flutter/foundation.dart';
import 'package:uuid/uuid.dart';
import '../models/marker_map_model.dart';
import '../models/isar/marker_map_entity.dart'; // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å
import '../services/isar_service.dart';
import '../services/offline/sync_service.dart';
import '../services/subscription/subscription_service.dart';
import '../constants/subscription_constants.dart';
import '../utils/network_utils.dart';

class MarkerMapRepository {
  static final MarkerMapRepository _instance = MarkerMapRepository._internal();

  factory MarkerMapRepository() {
    return _instance;
  }

  MarkerMapRepository._internal();

  final SubscriptionService _subscriptionService = SubscriptionService();

  // ‚úÖ –ö—ç—à –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫
  static List<MarkerMapModel>? _cachedMaps;
  static DateTime? _cacheTimestamp;
  static const Duration _cacheValidity = Duration(minutes: 2);

  // ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
  Future<void> initialize() async {
    try {
      // –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ IsarService
      if (kDebugMode) {
        debugPrint('‚úÖ MarkerMapRepository –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Isar');
      }
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MarkerMapRepository: $e');
      }
      rethrow;
    }
  }

  // ‚úÖ –û–°–ù–û–í–ù–û–ô –ú–ï–¢–û–î: –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –º–∞—Ä–∫–µ—Ä–Ω—ã–µ –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<List<MarkerMapModel>> getUserMarkerMaps() async {
    try {
      if (kDebugMode) {
        debugPrint('üìç –ó–∞–ø—Ä–æ—Å –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Isar');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
      if (_cachedMaps != null && _cacheTimestamp != null) {
        final cacheAge = DateTime.now().difference(_cacheTimestamp!);
        if (cacheAge < _cacheValidity) {
          if (kDebugMode) {
            debugPrint('üíæ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞—Ä—Ç—ã –∏–∑ –∫—ç—à–∞ (–≤–æ–∑—Ä–∞—Å—Ç: ${cacheAge.inSeconds}—Å)');
          }
          return _cachedMaps!;
        } else {
          if (kDebugMode) {
            debugPrint('üíæ –ö—ç—à –∫–∞—Ä—Ç —É—Å—Ç–∞—Ä–µ–ª, –æ—á–∏—â–∞–µ–º');
          }
          clearCache();
        }
      }

      // –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      final userId = IsarService.instance.getCurrentUserId();
      if (userId == null || userId.isEmpty) {
        throw Exception('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç—ã –∏–∑ Isar
      final markerMapEntities = await IsarService.instance.getAllMarkerMaps(userId);

      if (kDebugMode) {
        debugPrint('üíæ –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ä—Ç –≤ Isar: ${markerMapEntities.length}');
      }

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º entities –≤ models
      final markerMaps = markerMapEntities
          .map((entity) => _entityToModel(entity))
          .toList();

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º)
      markerMaps.sort((a, b) => b.date.compareTo(a.date));

      // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      _cachedMaps = markerMaps;
      _cacheTimestamp = DateTime.now();

      if (kDebugMode) {
        debugPrint('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${markerMaps.length} –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç –∏–∑ Isar');
      }

      // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤ —Ñ–æ–Ω–µ, –µ—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç
      final isOnline = await NetworkUtils.isNetworkAvailable();
      if (isOnline) {
        SyncService.instance.fullSync().catchError((e) {
          if (kDebugMode) {
            debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: $e');
          }
        });
      }

      return markerMaps;
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç: $e');
      }

      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
      return [];
    }
  }

  // ‚úÖ –°–û–ó–î–ê–ù–ò–ï: –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –º–∞—Ä–∫–µ—Ä–Ω—É—é –∫–∞—Ä—Ç—É
  Future<String> addMarkerMap(MarkerMapModel map) async {
    try {
      if (kDebugMode) {
        debugPrint('üìç –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –º–∞—Ä–∫–µ—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã');
      }

      // –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      final userId = IsarService.instance.getCurrentUserId();
      if (userId == null || userId.isEmpty) {
        throw Exception('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –ü–ï–†–ï–î —Å–æ–∑–¥–∞–Ω–∏–µ–º –∫–∞—Ä—Ç—ã
      final canCreate = await _subscriptionService.canCreateContentOffline(
        ContentType.markerMaps,
      );

      if (!canCreate) {
        throw Exception('–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç');
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
      final String mapId = map.id.isEmpty ? const Uuid().v4() : map.id;

      // –°–æ–∑–¥–∞–µ–º entity –∏–∑ model
      final entity = _modelToEntity(map.copyWith(
        id: mapId,
        userId: userId,
      ));

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
      final isOnline = await NetworkUtils.isNetworkAvailable();

      if (isOnline) {
        // –û–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º: –ø—ã—Ç–∞–µ–º—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ä–∞–∑—É
        entity.isSynced = false; // –ë—É–¥–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ
      } else {
        // –û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º: –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é
        entity.isSynced = false;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Isar
      await IsarService.instance.insertMarkerMap(entity);

      if (kDebugMode) {
        debugPrint('‚úÖ –ú–∞—Ä–∫–µ—Ä–Ω–∞—è –∫–∞—Ä—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Isar: $mapId');
      }

      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      try {
        await _subscriptionService.incrementUsage(ContentType.markerMaps);
        if (kDebugMode) {
          debugPrint('‚úÖ –°—á–µ—Ç—á–∏–∫ –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç —É–≤–µ–ª–∏—á–µ–Ω');
        }
      } catch (e) {
        if (kDebugMode) {
          debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞: $e');
        }
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –∫–∞—Ä—Ç–∞ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞
      }

      // –û—á–∏—â–∞–µ–º –∫—ç—à
      clearCache();

      // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤ —Ñ–æ–Ω–µ
      if (isOnline) {
        SyncService.instance.fullSync().catchError((e) {
          if (kDebugMode) {
            debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è: $e');
          }
        });
      }

      return mapId;
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–∞—Ä–∫–µ—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã: $e');
      }
      rethrow;
    }
  }

  // ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ò–ï: –û–±–Ω–æ–≤–∏—Ç—å –º–∞—Ä–∫–µ—Ä–Ω—É—é –∫–∞—Ä—Ç—É
  Future<void> updateMarkerMap(MarkerMapModel map) async {
    try {
      if (kDebugMode) {
        debugPrint('üìç –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã: ${map.id}');
        debugPrint('üìç –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ä–∫–µ—Ä–æ–≤: ${map.markers.length}');
      }

      if (map.id.isEmpty) {
        throw Exception('ID –∫–∞—Ä—Ç—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
      }

      // –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      final userId = IsarService.instance.getCurrentUserId();
      if (userId == null || userId.isEmpty) {
        throw Exception('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      }

      // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é entity –ø–æ Firebase ID
      MarkerMapEntity? existingEntity =
      await IsarService.instance.getMarkerMapByFirebaseId(map.id);

      if (existingEntity == null) {
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ Firebase ID, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
        existingEntity = _modelToEntity(map.copyWith(userId: userId));
      } else {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é entity
        existingEntity.name = map.name;
        existingEntity.date = map.date;
        existingEntity.sector = map.sector;
        existingEntity.noteIds = map.noteIds;
        existingEntity.noteNames = map.noteNames;
        existingEntity.markers = map.markers;
        existingEntity.markAsModified(); // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∏–∑–º–µ–Ω–µ–Ω–Ω—É—é
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ Isar
      await IsarService.instance.updateMarkerMap(existingEntity);

      if (kDebugMode) {
        debugPrint('‚úÖ –ú–∞—Ä–∫–µ—Ä–Ω–∞—è –∫–∞—Ä—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ Isar');
      }

      // –û—á–∏—â–∞–µ–º –∫—ç—à
      clearCache();

      // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤ —Ñ–æ–Ω–µ
      final isOnline = await NetworkUtils.isNetworkAvailable();
      if (isOnline) {
        SyncService.instance.fullSync().catchError((e) {
          if (kDebugMode) {
            debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: $e');
          }
        });
      }
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–∞—Ä–∫–µ—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã: $e');
      }
      rethrow;
    }
  }

  // ‚úÖ –£–î–ê–õ–ï–ù–ò–ï: –£–¥–∞–ª–∏—Ç—å –º–∞—Ä–∫–µ—Ä–Ω—É—é –∫–∞—Ä—Ç—É
  Future<void> deleteMarkerMap(String mapId) async {
    try {
      if (mapId.isEmpty) {
        throw Exception('ID –∫–∞—Ä—Ç—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
      }

      if (kDebugMode) {
        debugPrint('üìç –£–¥–∞–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã: $mapId');
      }

      // –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      final userId = IsarService.instance.getCurrentUserId();
      if (userId == null || userId.isEmpty) {
        throw Exception('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
      final isOnline = await NetworkUtils.isNetworkAvailable();

      if (isOnline) {
        // –û–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º: —É–¥–∞–ª—è–µ–º –∏–∑ Isar (—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É–¥–∞–ª–∏—Ç –∏–∑ Firebase)
        final success = await IsarService.instance.deleteMarkerMapByFirebaseId(mapId);

        if (success) {
          if (kDebugMode) {
            debugPrint('‚úÖ –ú–∞—Ä–∫–µ—Ä–Ω–∞—è –∫–∞—Ä—Ç–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ Isar');
          }
        }
      } else {
        // –û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º: –ø–æ–º–µ—á–∞–µ–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        await IsarService.instance.markMarkerMapForDeletion(mapId);

        if (kDebugMode) {
          debugPrint('‚úÖ –ú–∞—Ä–∫–µ—Ä–Ω–∞—è –∫–∞—Ä—Ç–∞ –ø–æ–º–µ—á–µ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
        }
      }

      // –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      try {
        await _subscriptionService.decrementUsage(ContentType.markerMaps);
        if (kDebugMode) {
          debugPrint('‚úÖ –°—á–µ—Ç—á–∏–∫ –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç —É–º–µ–Ω—å—à–µ–Ω');
        }
      } catch (e) {
        if (kDebugMode) {
          debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–º–µ–Ω—å—à–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞: $e');
        }
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
      }

      // –û—á–∏—â–∞–µ–º –∫—ç—à
      clearCache();

      // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤ —Ñ–æ–Ω–µ
      if (isOnline) {
        SyncService.instance.fullSync().catchError((e) {
          if (kDebugMode) {
            debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è: $e');
          }
        });
      }
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–∞—Ä–∫–µ—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã: $e');
      }
      rethrow;
    }
  }

  // ‚úÖ –ü–û–õ–£–ß–ï–ù–ò–ï –ü–û ID: –ü–æ–ª—É—á–∏—Ç—å –º–∞—Ä–∫–µ—Ä–Ω—É—é –∫–∞—Ä—Ç—É –ø–æ ID
  Future<MarkerMapModel> getMarkerMapById(String mapId) async {
    try {
      if (mapId.isEmpty) {
        throw Exception('ID –∫–∞—Ä—Ç—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
      }

      if (kDebugMode) {
        debugPrint('üìç –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã –ø–æ ID: $mapId');
      }

      // –ò—â–µ–º entity –ø–æ Firebase ID
      final entity = await IsarService.instance.getMarkerMapByFirebaseId(mapId);

      if (entity == null) {
        throw Exception('–ú–∞—Ä–∫–µ—Ä–Ω–∞—è –∫–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }

      final model = _entityToModel(entity);

      if (kDebugMode) {
        debugPrint('‚úÖ –ú–∞—Ä–∫–µ—Ä–Ω–∞—è –∫–∞—Ä—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞');
      }

      return model;
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ä–∫–µ—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã –ø–æ ID: $e');
      }
      rethrow;
    }
  }

  // ‚úÖ –û–ß–ò–°–¢–ö–ê: –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –º–∞—Ä–∫–µ—Ä–Ω—ã–µ –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<void> clearAllMarkerMaps() async {
    try {
      if (kDebugMode) {
        debugPrint('üìç –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      }

      // –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      final userId = IsarService.instance.getCurrentUserId();
      if (userId == null || userId.isEmpty) {
        throw Exception('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      }

      // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Isar
      await IsarService.instance.deleteAllMarkerMaps(userId);

      if (kDebugMode) {
        debugPrint('‚úÖ –í—Å–µ –º–∞—Ä–∫–µ—Ä–Ω—ã–µ –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–¥–∞–ª–µ–Ω—ã');
      }

      // –û—á–∏—â–∞–µ–º –∫—ç—à
      clearCache();
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Å–µ—Ö –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç: $e');
      }
      rethrow;
    }
  }

  // ‚úÖ –ü–†–û–í–ï–†–ö–ò –ò –õ–ò–ú–ò–¢–´

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –º–∞—Ä–∫–µ—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã
  Future<bool> canCreateMarkerMap() async {
    try {
      return await _subscriptionService.canCreateContentOffline(
        ContentType.markerMaps,
      );
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã: $e');
      }
      return false;
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç
  Future<int> getCurrentUsage() async {
    try {
      return await _subscriptionService.getCurrentUsage(
        ContentType.markerMaps,
      );
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç: $e');
      }
      return 0;
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç
  Future<int> getUsageLimit() async {
    try {
      return _subscriptionService.getLimit(ContentType.markerMaps);
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ –∫–∞—Ä—Ç: $e');
      }
      return 0;
    }
  }

  // ‚úÖ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø

  /// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  Future<void> syncOfflineDataOnStartup() async {
    await SyncService.instance.fullSync();
  }

  /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
  Future<bool> forceSyncData() async {
    try {
      await SyncService.instance.fullSync();
      return true;
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: $e');
      }
      return false;
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  Future<Map<String, dynamic>> getSyncStatus() async {
    try {
      final userId = IsarService.instance.getCurrentUserId();
      if (userId == null) return {};

      final total = await IsarService.instance.getMarkerMapsCount(userId);
      final unsynced = await IsarService.instance.getUnsyncedMarkerMapsCount(userId);

      return {
        'total': total,
        'synced': total - unsynced,
        'unsynced': unsynced,
        'syncPercentage': total > 0 ? ((total - unsynced) / total * 100).round() : 100,
      };
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: $e');
      }
      return {};
    }
  }

  // ‚úÖ –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´

  /// –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –¥–∞–Ω–Ω—ã—Ö
  static void clearCache() {
    _cachedMaps = null;
    _cacheTimestamp = null;
    if (kDebugMode) {
      debugPrint('üíæ –ö—ç—à –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç –æ—á–∏—â–µ–Ω');
    }
  }

  /// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ Entity –≤ Model
  MarkerMapModel _entityToModel(MarkerMapEntity entity) {
    return MarkerMapModel(
      id: entity.firebaseId ?? '',
      userId: entity.userId,
      name: entity.name,
      date: entity.date,
      sector: entity.sector,
      noteIds: entity.noteIds,
      noteNames: entity.noteNames,
      markers: entity.markers,
    );
  }

  /// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ Model –≤ Entity
  MarkerMapEntity _modelToEntity(MarkerMapModel model) {
    return MarkerMapEntity()
      ..firebaseId = model.id.isNotEmpty ? model.id : null
      ..userId = model.userId
      ..name = model.name
      ..date = model.date
      ..sector = model.sector
      ..noteIds = model.noteIds
      ..noteNames = model.noteNames
      ..markers = model.markers
      ..isSynced = false
      ..markedForDeletion = false
      ..createdAt = DateTime.now()
      ..updatedAt = DateTime.now();
  }
}