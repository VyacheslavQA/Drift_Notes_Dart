// –ü—É—Ç—å: lib/repositories/marker_map_repository.dart

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/foundation.dart';
import 'package:uuid/uuid.dart';
import '../models/marker_map_model.dart';
import '../services/firebase/firebase_service.dart';
import '../utils/network_utils.dart';
import '../services/offline/offline_storage_service.dart';
import '../services/offline/sync_service.dart';
import '../services/subscription/subscription_service.dart';
import '../constants/subscription_constants.dart';

class MarkerMapRepository {
  static final MarkerMapRepository _instance = MarkerMapRepository._internal();

  factory MarkerMapRepository() {
    return _instance;
  }

  MarkerMapRepository._internal();

  final FirebaseService _firebaseService = FirebaseService();
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final OfflineStorageService _offlineStorage = OfflineStorageService();
  final SyncService _syncService = SyncService();
  final SubscriptionService _subscriptionService = SubscriptionService();

  // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –ö—ç—à –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫ (–∫–∞–∫ –≤ BudgetNotesRepository)
  static List<MarkerMapModel>? _cachedMaps;
  static DateTime? _cacheTimestamp;
  static const Duration _cacheValidity = Duration(minutes: 2);

  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –º–∞—Ä–∫–µ—Ä–Ω—ã–µ –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ü–†–ê–í–ò–õ–¨–ù–´–ú –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  Future<List<MarkerMapModel>> getUserMarkerMaps() async {
    try {
      final userId = _firebaseService.currentUserId;
      if (userId == null || userId.isEmpty) {
        throw Exception('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      }

      debugPrint('üìç –ó–∞–ø—Ä–æ—Å –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $userId');

      // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
      if (_cachedMaps != null && _cacheTimestamp != null) {
        final cacheAge = DateTime.now().difference(_cacheTimestamp!);
        if (cacheAge < _cacheValidity) {
          debugPrint('üíæ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞—Ä—Ç—ã –∏–∑ –∫—ç—à–∞ (–≤–æ–∑—Ä–∞—Å—Ç: ${cacheAge.inSeconds}—Å)');
          return _cachedMaps!;
        } else {
          debugPrint('üíæ –ö—ç—à –∫–∞—Ä—Ç —É—Å—Ç–∞—Ä–µ–ª, –æ—á–∏—â–∞–µ–º');
          _cachedMaps = null;
          _cacheTimestamp = null;
        }
      }

      // –í—Å–µ–≥–¥–∞ –ø–æ–ª—É—á–∞–µ–º –æ—Ñ–ª–∞–π–Ω –∫–∞—Ä—Ç—ã –ø–µ—Ä–≤—ã–º–∏ (—Ç–µ–ø–µ—Ä—å –≤–∫–ª—é—á–∞–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)
      final offlineMaps = await _getOfflineMarkerMaps(userId);
      debugPrint('üì± –û—Ñ–ª–∞–π–Ω –∫–∞—Ä—Ç –Ω–∞–π–¥–µ–Ω–æ: ${offlineMaps.length}');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
      final isOnline = await NetworkUtils.isNetworkAvailable();
      debugPrint('üåê –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ç–∏: ${isOnline ? '–û–Ω–ª–∞–π–Ω' : '–û—Ñ–ª–∞–π–Ω'}');

      List<MarkerMapModel> onlineMaps = [];

      if (isOnline) {
        try {
          debugPrint('üìç –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç—ã –∏–∑ –ù–û–í–û–ô —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Firebase...');

          // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ù–û–í–£–Æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —á–µ—Ä–µ–∑ FirebaseService
          final snapshot = await _firebaseService.getUserMarkerMaps();
          debugPrint('üìç –ü–æ–ª—É—á–µ–Ω–æ ${snapshot.docs.length} –∫–∞—Ä—Ç –∏–∑ Firebase');

          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –º–æ–¥–µ–ª–∏
          for (var doc in snapshot.docs) {
            try {
              final data = doc.data() as Map<String, dynamic>;
              final map = MarkerMapModel.fromJson(data, id: doc.id);
              onlineMaps.add(map);
            } catch (e) {
              debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞—Ä—Ç—ã ${doc.id}: $e');
              continue;
            }
          }

          debugPrint('üìç –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${onlineMaps.length} –∫–∞—Ä—Ç');

          // üî• –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ö—ç—à–∏—Ä—É–µ–º Firebase –∫–∞—Ä—Ç—ã —á–µ—Ä–µ–∑ –ü–†–ê–í–ò–õ–¨–ù–´–ô –º–µ—Ç–æ–¥
          if (onlineMaps.isNotEmpty) {
            try {
              debugPrint('üíæ –ö—ç—à–∏—Ä—É–µ–º Firebase –∫–∞—Ä—Ç—ã —á–µ—Ä–µ–∑ cacheMarkerMaps...');
              final mapsToCache = onlineMaps.map((map) {
                final mapJson = map.toJson();
                mapJson['id'] = map.id;
                mapJson['userId'] = userId;
                // üî• –î–û–ë–ê–í–õ–Ø–ï–ú –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –ü–û–õ–Ø –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –∫—ç—à–µ–º
                mapJson['isSynced'] = true;   // –ò–∑ Firebase - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
                mapJson['isOffline'] = false; // –ù–µ –æ—Ñ–ª–∞–π–Ω –∫–∞—Ä—Ç—ã
                return mapJson;
              }).toList();

              await _offlineStorage.cacheMarkerMaps(mapsToCache);
              debugPrint('‚úÖ ${onlineMaps.length} Firebase –∫–∞—Ä—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
            } catch (e) {
              debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è Firebase –∫–∞—Ä—Ç: $e');
              debugPrint('‚ö†Ô∏è –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: ${e.toString()}');
            }
          }
        } catch (e) {
          debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç –∏–∑ Firebase: $e');
        }
      }

      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–ø–∏—Å–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –∏–∑–±–µ–≥–∞—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
      final Map<String, MarkerMapModel> uniqueMaps = {};

      // –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –æ–Ω–ª–∞–π–Ω –∫–∞—Ä—Ç—ã (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
      for (var map in onlineMaps) {
        uniqueMaps[map.id] = map;
      }

      // –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ñ–ª–∞–π–Ω –∫–∞—Ä—Ç—ã, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –æ–Ω–ª–∞–π–Ω —Å–ø–∏—Å–∫–µ
      for (var map in offlineMaps) {
        if (!uniqueMaps.containsKey(map.id)) {
          uniqueMaps[map.id] = map;
        }
      }

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
      final allMaps = uniqueMaps.values.toList()
        ..sort((a, b) => b.date.compareTo(a.date));

      debugPrint('üìä –ò—Ç–æ–≥–æ –∫–∞—Ä—Ç: ${allMaps.length}');
      debugPrint('üìä –û–Ω–ª–∞–π–Ω: ${onlineMaps.length}, –û—Ñ–ª–∞–π–Ω: ${offlineMaps.length}');

      // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      _cachedMaps = allMaps;
      _cacheTimestamp = DateTime.now();

      // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤ —Ñ–æ–Ω–µ
      if (isOnline) {
        _syncService.syncAll();
      }

      return allMaps;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç: $e');

      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, –ø—ã—Ç–∞–µ–º—Å—è –≤–µ—Ä–Ω—É—Ç—å —Ö–æ—Ç—è –±—ã –æ—Ñ–ª–∞–π–Ω –∫–∞—Ä—Ç—ã
      try {
        return await _getOfflineMarkerMaps(
          _firebaseService.currentUserId ?? '',
        );
      } catch (_) {
        // –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        return [];
      }
    }
  }

  // üî• –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç –∏–∑ –í–°–ï–• –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
  Future<List<MarkerMapModel>> _getOfflineMarkerMaps(String userId) async {
    try {
      final List<MarkerMapModel> result = [];
      final Set<String> processedIds = <String>{};

      debugPrint('üì± –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ Firebase –∫–∞—Ä—Ç—ã...');

      // 1. ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ Firebase –∫–∞—Ä—Ç—ã
      try {
        final cachedMaps = await _offlineStorage.getCachedMarkerMaps();
        debugPrint('üíæ –ù–∞–π–¥–µ–Ω–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö Firebase –∫–∞—Ä—Ç: ${cachedMaps.length}');

        for (final mapData in cachedMaps) {
          try {
            final mapId = mapData['id']?.toString() ?? '';
            final mapUserId = mapData['userId']?.toString() ?? '';

            if (mapId.isEmpty) continue;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if (mapUserId == userId) {
              final map = MarkerMapModel.fromJson(mapData, id: mapId);
              result.add(map);
              processedIds.add(mapId);
              debugPrint('‚úÖ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: $mapId');
            }
          } catch (e) {
            debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã: $e');
            continue;
          }
        }
      } catch (e) {
        debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç: $e');
      }

      debugPrint('üì± –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ñ–ª–∞–π–Ω —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã...');

      // 2. ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–≥—Ä—É–∂–∞–µ–º –¢–û–õ–¨–ö–û –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ñ–ª–∞–π–Ω –∫–∞—Ä—Ç—ã
      try {
        final offlineMaps = await _offlineStorage.getAllOfflineMarkerMaps();
        debugPrint('üì± –ù–∞–π–¥–µ–Ω–æ –æ—Ñ–ª–∞–π–Ω —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç: ${offlineMaps.length}');

        // –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –º–æ–¥–µ–ª–∏
        for (final mapData in offlineMaps) {
          try {
            final mapId = mapData['id']?.toString() ?? '';
            final mapUserId = mapData['userId']?.toString() ?? '';
            final isSynced = mapData['isSynced'] == true;
            final isOffline = mapData['isOffline'] == true;

            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã
            if (mapId.isEmpty || processedIds.contains(mapId)) {
              continue;
            }

            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–≥—Ä—É–∂–∞–µ–º –¢–û–õ–¨–ö–û –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ñ–ª–∞–π–Ω –∫–∞—Ä—Ç—ã
            if (!isSynced && isOffline) {
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
              bool belongsToUser = false;

              if (mapUserId.isNotEmpty && mapUserId == userId) {
                belongsToUser = true;
              } else if (mapUserId.isEmpty) {
                // –ö–∞—Ä—Ç–∞ –±–µ–∑ userId - –¥–æ–±–∞–≤–ª—è–µ–º userId
                mapData['userId'] = userId;
                belongsToUser = true;
                _offlineStorage.saveOfflineMarkerMap(mapData).catchError((error) {
                  debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã: $error');
                });
              }

              if (belongsToUser) {
                final map = MarkerMapModel.fromJson(mapData, id: mapId);
                result.add(map);
                processedIds.add(mapId);
                debugPrint('‚úÖ –ù–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ñ–ª–∞–π–Ω –∫–∞—Ä—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: $mapId');
              }
            } else {
              debugPrint('‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–∞—Ä—Ç—É: $mapId (isSynced: $isSynced, isOffline: $isOffline)');
            }
          } catch (e) {
            debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ñ–ª–∞–π–Ω –∫–∞—Ä—Ç—ã: $e');
            continue;
          }
        }
      } catch (e) {
        debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ñ–ª–∞–π–Ω –∫–∞—Ä—Ç: $e');
      }

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º)
      result.sort((a, b) => b.date.compareTo(a.date));

      debugPrint('‚úÖ –í—Å–µ–≥–æ –∫–∞—Ä—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ –æ—Ñ–ª–∞–π–Ω –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: ${result.length}');

      return result;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ñ–ª–∞–π–Ω –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç: $e');
      return [];
    }
  }

  // üî• –ö–†–ò–¢–ò–ß–ï–°–ö–ò –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –º–∞—Ä–∫–µ—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ ID
  Future<String> addMarkerMap(MarkerMapModel map) async {
    try {
      final userId = _firebaseService.currentUserId;
      if (userId == null || userId.isEmpty) {
        throw Exception('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      }

      debugPrint('üìç –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $userId');

      // ‚úÖ –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –î–û —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã
      final canCreate = await _subscriptionService.canCreateContentOffline(
        ContentType.markerMaps,
      );

      if (!canCreate) {
        throw Exception('–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç');
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
      final String mapId = map.id.isEmpty ? const Uuid().v4() : map.id;

      // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –∫–∞—Ä—Ç—ã —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º ID –∏ UserID
      final mapToAdd = map.copyWith(
        id: mapId,
        userId: userId,
        date: map.date,
      );

      debugPrint('üìç –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É —Å ID: $mapId');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
      final isOnline = await NetworkUtils.isNetworkAvailable();

      if (isOnline) {
        // üî• –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π ID –≤ FirebaseService
        try {
          final savedMapId = await _firebaseService.addMarkerMap(
            mapToAdd.toJson(),
            customId: mapId,  // üî• –ü–ï–†–ï–î–ê–ï–ú –ö–ê–°–¢–û–ú–ù–´–ô ID
          );

          debugPrint('‚úÖ –ú–∞—Ä–∫–µ—Ä–Ω–∞—è –∫–∞—Ä—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ù–û–í–£–Æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å ID: $savedMapId');

          // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ö—ç—à–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É —á–µ—Ä–µ–∑ –ü–†–ê–í–ò–õ–¨–ù–´–ô –º–µ—Ç–æ–¥
          try {
            final mapJson = mapToAdd.toJson();
            mapJson['id'] = mapId;
            mapJson['userId'] = userId;
            // üî• –î–û–ë–ê–í–õ–Ø–ï–ú –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –ü–û–õ–Ø
            mapJson['isSynced'] = true;   // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å Firebase
            mapJson['isOffline'] = false; // –ù–µ –æ—Ñ–ª–∞–π–Ω –∫–∞—Ä—Ç–∞

            // –ö—ç—à–∏—Ä—É–µ–º –≤ –æ–±—â–∏–π –∫—ç—à Firebase –∫–∞—Ä—Ç
            await _offlineStorage.cacheMarkerMaps([mapJson]);

            debugPrint('üíæ –ù–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
          } catch (e) {
            debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ä—Ç—ã: $e');
          }

          // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¢–û–õ–¨–ö–û —á–µ—Ä–µ–∑ FirebaseService (–æ–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º)
          try {
            await _firebaseService.incrementUsageCount('markerMapsCount');
            debugPrint('‚úÖ –°—á–µ—Ç—á–∏–∫ –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç —É–≤–µ–ª–∏—á–µ–Ω —á–µ—Ä–µ–∑ Firebase');
          } catch (e) {
            debugPrint('‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ —á–µ—Ä–µ–∑ Firebase: $e');
            // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –∫–∞—Ä—Ç–∞ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞
          }

        } catch (e) {
          debugPrint('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ Firebase, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ñ–ª–∞–π–Ω: $e');
          await _saveMapOffline(mapToAdd);

          // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¢–û–õ–¨–ö–û —á–µ—Ä–µ–∑ SubscriptionService (–æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º)
          try {
            await _subscriptionService.incrementUsage(ContentType.markerMaps);
            debugPrint('‚úÖ –°—á–µ—Ç—á–∏–∫ –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç —É–≤–µ–ª–∏—á–µ–Ω —á–µ—Ä–µ–∑ SubscriptionService');
          } catch (e) {
            debugPrint('‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ —á–µ—Ä–µ–∑ SubscriptionService: $e');
            // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –∫–∞—Ä—Ç–∞ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞
          }
        }

        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –æ—Ñ–ª–∞–π–Ω –∫–∞—Ä—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        _syncService.syncAll();

        debugPrint('‚úÖ –ú–∞—Ä–∫–µ—Ä–Ω–∞—è –∫–∞—Ä—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –æ–Ω–ª–∞–π–Ω: $mapId');
      } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ä—Ç—É –ª–æ–∫–∞–ª—å–Ω–æ
        await _saveMapOffline(mapToAdd);

        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¢–û–õ–¨–ö–û —á–µ—Ä–µ–∑ SubscriptionService (–æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º)
        try {
          await _subscriptionService.incrementUsage(ContentType.markerMaps);
          debugPrint('‚úÖ –°—á–µ—Ç—á–∏–∫ –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç —É–≤–µ–ª–∏—á–µ–Ω –æ—Ñ–ª–∞–π–Ω');
        } catch (e) {
          debugPrint('‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –æ—Ñ–ª–∞–π–Ω: $e');
          // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –∫–∞—Ä—Ç–∞ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞
        }

        debugPrint('‚úÖ –ú–∞—Ä–∫–µ—Ä–Ω–∞—è –∫–∞—Ä—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –æ—Ñ–ª–∞–π–Ω: $mapId');
      }

      // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –û—á–∏—â–∞–µ–º –∫—ç—à –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ä—Ç—ã
      clearCache();

      return mapId;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–∞—Ä–∫–µ—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã: $e');
      rethrow;
    }
  }

  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ
  Future<void> _saveMapOffline(MarkerMapModel map) async {
    try {
      if (map.id.isEmpty) {
        throw Exception('ID –∫–∞—Ä—Ç—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
      }

      debugPrint('üì± –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ñ–ª–∞–π–Ω –∫–∞—Ä—Ç—ã: ${map.id}');

      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ñ–ª–∞–≥–∏ –¥–ª—è –æ—Ñ–ª–∞–π–Ω –∫–∞—Ä—Ç—ã
      final mapJson = map.toJson();
      mapJson['id'] = map.id;
      mapJson['userId'] = map.userId;
      mapJson['isSynced'] = false;  // –¢—Ä–µ–±—É–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      mapJson['isOffline'] = true;  // –°–æ–∑–¥–∞–Ω–∞ –æ—Ñ–ª–∞–π–Ω
      mapJson['offlineCreatedAt'] = DateTime.now().toIso8601String();

      await _offlineStorage.saveOfflineMarkerMap(mapJson);
      debugPrint('‚úÖ –ö–∞—Ä—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã –æ—Ñ–ª–∞–π–Ω: $e');
      rethrow;
    }
  }

  // üî• –ü–û–õ–ù–û–°–¢–¨–Æ –ü–ï–†–ï–ü–ò–°–ê–ù–ù–´–ô –º–µ—Ç–æ–¥ updateMarkerMap() —Å –û–ë–ù–û–í–õ–ï–ù–ò–ï–ú –ö–≠–®–ê
  Future<void> updateMarkerMap(MarkerMapModel map) async {
    debugPrint('üî•üî•üî• –í–´–ó–í–ê–ù updateMarkerMap() –¥–ª—è –∫–∞—Ä—Ç—ã: ${map.id}');
    debugPrint('üî•üî•üî• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ä–∫–µ—Ä–æ–≤ –≤ –∫–∞—Ä—Ç–µ: ${map.markers.length}');
    debugPrint('üî•üî•üî• –ü–æ—Å–ª–µ–¥–Ω–∏–π –º–∞—Ä–∫–µ—Ä: ${map.markers.isNotEmpty ? map.markers.last['id'] ?? "–ë–ï–ó ID" : "–ù–ï–¢ –ú–ê–†–ö–ï–†–û–í"}');

    try {
      if (map.id.isEmpty) {
        throw Exception('ID –∫–∞—Ä—Ç—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
      }

      final userId = _firebaseService.currentUserId;
      if (userId == null || userId.isEmpty) {
        throw Exception('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      }

      debugPrint('üìç –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã: ${map.id}');

      // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –∫–∞—Ä—Ç—ã —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º UserID
      final mapToUpdate = map.copyWith(userId: userId);

      // üî• –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã
      final mapJson = mapToUpdate.toJson();
      mapJson['id'] = map.id;
      mapJson['userId'] = userId;
      mapJson['updatedAt'] = DateTime.now().toIso8601String();

      // üî• –ö–õ–Æ–ß–ï–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª—è–µ–º –ö–≠–® FIREBASE –ø–µ—Ä–≤—ã–º –¥–µ–ª–æ–º!
      debugPrint('üíæ –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à Firebase –∫–∞—Ä—Ç —Å –Ω–æ–≤—ã–º–∏ –º–∞—Ä–∫–µ—Ä–∞–º–∏...');

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫—ç—à
      final cachedMaps = await _offlineStorage.getCachedMarkerMaps();
      debugPrint('üìã –ù–∞–π–¥–µ–Ω–æ –≤ –∫—ç—à–µ –∫–∞—Ä—Ç: ${cachedMaps.length}');

      // –û–±–Ω–æ–≤–ª—è–µ–º –Ω—É–∂–Ω—É—é –∫–∞—Ä—Ç—É –≤ –∫—ç—à–µ –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é
      bool mapFoundInCache = false;
      final updatedCachedMaps = <Map<String, dynamic>>[];

      for (final cachedMap in cachedMaps) {
        if (cachedMap['id'] == map.id) {
          // üî• –û–ë–ù–û–í–õ–Ø–ï–ú —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞—Ä—Ç—É –≤ –∫—ç—à–µ
          final updatedCachedMap = Map<String, dynamic>.from(mapJson);
          updatedCachedMap['isSynced'] = true;   // –í –∫—ç—à–µ - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
          updatedCachedMap['isOffline'] = false; // –ù–µ –æ—Ñ–ª–∞–π–Ω –∫–∞—Ä—Ç—ã
          updatedCachedMaps.add(updatedCachedMap);
          mapFoundInCache = true;
          debugPrint('‚úÖ –ö–∞—Ä—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ –∫—ç—à–µ Firebase: ${map.id}');
        } else {
          updatedCachedMaps.add(cachedMap);
        }
      }

      if (!mapFoundInCache) {
        // üî• –î–û–ë–ê–í–õ–Ø–ï–ú –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É –≤ –∫—ç—à
        final newCachedMap = Map<String, dynamic>.from(mapJson);
        newCachedMap['isSynced'] = true;   // –í –∫—ç—à–µ - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
        newCachedMap['isOffline'] = false; // –ù–µ –æ—Ñ–ª–∞–π–Ω –∫–∞—Ä—Ç—ã
        updatedCachedMaps.add(newCachedMap);
        debugPrint('‚úÖ –ö–∞—Ä—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫—ç—à Firebase: ${map.id}');
      }

      // üî• –°–û–•–†–ê–ù–Ø–ï–ú –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫—ç—à
      await _offlineStorage.cacheMarkerMaps(updatedCachedMaps);
      debugPrint('üíæ –ö—ç—à Firebase –∫–∞—Ä—Ç –æ–±–Ω–æ–≤–ª–µ–Ω —Å –Ω–æ–≤—ã–º–∏ –º–∞—Ä–∫–µ—Ä–∞–º–∏');

      // üî• –ë–´–°–¢–†–û–ï –æ—Ñ–ª–∞–π–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ (–¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏)
      mapJson['isSynced'] = false;  // –¢—Ä–µ–±—É–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º
      mapJson['isOffline'] = true;  // –û—Ñ–ª–∞–π–Ω –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      await _offlineStorage.saveOfflineMarkerMap(mapJson);
      debugPrint('üíæ –ö–∞—Ä—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –æ—Ñ–ª–∞–π–Ω —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');

      // –û—á–∏—â–∞–µ–º –∫—ç—à Repository –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
      clearCache();
      debugPrint('üóëÔ∏è –ö—ç—à Repository –æ—á–∏—â–µ–Ω –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');

      // üî• –ê–°–ò–ù–•–†–û–ù–ù–ê–Ø —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤ —Ñ–æ–Ω–µ (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç UI)
      _syncMapInBackground(map.id, mapToUpdate);

    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–∞—Ä–∫–µ—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã: $e');

      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ
      try {
        await _offlineStorage.saveMarkerMapUpdate(map.id, map.toJson());
        debugPrint('üíæ –ö–∞—Ä—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ fallback —Ä–µ–∂–∏–º–µ');
      } catch (_) {
        rethrow;
      }
    }
  }

  // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –º–µ—Ç–æ–¥: –§–æ–Ω–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ñ–ª–∞–≥–∞–º–∏
  void _syncMapInBackground(String mapId, MarkerMapModel mapToUpdate) async {
    try {
      debugPrint('üåä –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∫–∞—Ä—Ç—ã: $mapId');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
      final isOnline = await NetworkUtils.isNetworkAvailable();

      if (isOnline) {
        // ‚úÖ –ü—ã—Ç–∞–µ–º—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å Firebase –≤ —Ñ–æ–Ω–µ
        try {
          await _firebaseService.updateMarkerMap(mapId, mapToUpdate.toJson());
          debugPrint('‚úÖ –ö–∞—Ä—Ç–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å Firebase –≤ —Ñ–æ–Ω–µ: $mapId');

          // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
          final mapJson = mapToUpdate.toJson();
          mapJson['id'] = mapId;
          mapJson['userId'] = mapToUpdate.userId;
          mapJson['isSynced'] = true;   // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
          mapJson['isOffline'] = false; // –ù–µ –æ—Ñ–ª–∞–π–Ω –∫–∞—Ä—Ç–∞
          mapJson['updatedAt'] = DateTime.now().toIso8601String();

          // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à Firebase
          final cachedMaps = await _offlineStorage.getCachedMarkerMaps();
          final updatedCachedMaps = <Map<String, dynamic>>[];

          bool foundInCache = false;
          for (final cachedMap in cachedMaps) {
            if (cachedMap['id'] == mapId) {
              updatedCachedMaps.add(mapJson);
              foundInCache = true;
            } else {
              updatedCachedMaps.add(cachedMap);
            }
          }

          if (!foundInCache) {
            updatedCachedMaps.add(mapJson);
          }

          await _offlineStorage.cacheMarkerMaps(updatedCachedMaps);
          debugPrint('üíæ –ö–∞—Ä—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ –∫—ç—à–µ –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
        } catch (e) {
          debugPrint('‚ùå –§–æ–Ω–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –∫–∞—Ä—Ç–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ–π: $e');

          // üî• –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ñ–ª–∞–π–Ω –∫–∞—Ä—Ç—É
          final mapJson = mapToUpdate.toJson();
          mapJson['id'] = mapId;
          mapJson['userId'] = mapToUpdate.userId;
          mapJson['isSynced'] = false;  // –¢—Ä–µ–±—É–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
          mapJson['isOffline'] = true;  // üî• –ò–ó–ú–ï–ù–ï–ù–û: true –≤–º–µ—Å—Ç–æ false - —ç—Ç–æ –û–§–õ–ê–ô–ù –∫–∞—Ä—Ç–∞!
          mapJson['updatedAt'] = DateTime.now().toIso8601String();

          await _offlineStorage.saveOfflineMarkerMap(mapJson);
          debugPrint('üíæ –ö–∞—Ä—Ç–∞ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –æ—Ñ–ª–∞–π–Ω –ø–æ—Å–ª–µ –Ω–µ—É–¥–∞—á–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
        }
      } else {
        debugPrint('üì± –ù–µ—Ç —Å–µ—Ç–∏ - –∫–∞—Ä—Ç–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ');

        // üî• –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ñ–ª–∞–π–Ω –∫–∞—Ä—Ç—É
        final mapJson = mapToUpdate.toJson();
        mapJson['id'] = mapId;
        mapJson['userId'] = mapToUpdate.userId;
        mapJson['isSynced'] = false;  // –¢—Ä–µ–±—É–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        mapJson['isOffline'] = true;  // üî• –ò–ó–ú–ï–ù–ï–ù–û: true –≤–º–µ—Å—Ç–æ false - —ç—Ç–æ –û–§–õ–ê–ô–ù –∫–∞—Ä—Ç–∞!
        mapJson['updatedAt'] = DateTime.now().toIso8601String();

        await _offlineStorage.saveOfflineMarkerMap(mapJson);
        debugPrint('üíæ –ö–∞—Ä—Ç–∞ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –æ—Ñ–ª–∞–π–Ω –≤ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Å–µ—Ç–∏');
      }

      debugPrint('üåä –§–æ–Ω–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –∫–∞—Ä—Ç—ã: $mapId');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: $e');

      // üî• –î–û–ë–ê–í–õ–ï–ù–û: –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ç–æ–∂–µ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ñ–ª–∞–π–Ω
      try {
        final mapJson = mapToUpdate.toJson();
        mapJson['id'] = mapId;
        mapJson['userId'] = mapToUpdate.userId;
        mapJson['isSynced'] = false;  // –¢—Ä–µ–±—É–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        mapJson['isOffline'] = true;  // –≠—Ç–æ –æ—Ñ–ª–∞–π–Ω –∫–∞—Ä—Ç–∞
        mapJson['updatedAt'] = DateTime.now().toIso8601String();

        await _offlineStorage.saveOfflineMarkerMap(mapJson);
        debugPrint('üíæ –ö–∞—Ä—Ç–∞ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –æ—Ñ–ª–∞–π–Ω –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
      } catch (saveError) {
        debugPrint('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: $saveError');
      }
    }
  }

  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–¥–∞–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã (—É–±—Ä–∞–Ω–æ –¥–≤–æ–π–Ω–æ–µ —É–º–µ–Ω—å—à–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤)
  Future<void> deleteMarkerMap(String mapId) async {
    try {
      if (mapId.isEmpty) {
        throw Exception('ID –∫–∞—Ä—Ç—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
      }

      final userId = _firebaseService.currentUserId;
      if (userId == null || userId.isEmpty) {
        throw Exception('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      }

      debugPrint('üìç –£–¥–∞–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã: $mapId');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
      final isOnline = await NetworkUtils.isNetworkAvailable();

      if (isOnline) {
        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º FirebaseService –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –ù–û–í–û–ô —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        try {
          await _firebaseService.deleteMarkerMap(mapId);
          debugPrint('‚úÖ –ú–∞—Ä–∫–µ—Ä–Ω–∞—è –∫–∞—Ä—Ç–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –ù–û–í–û–ô —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: $mapId');

          // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¢–û–õ–¨–ö–û —á–µ—Ä–µ–∑ FirebaseService (–æ–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º)
          try {
            await _firebaseService.incrementUsageCount('markerMapsCount', increment: -1);
            debugPrint('‚úÖ –°—á–µ—Ç—á–∏–∫ –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç —É–º–µ–Ω—å—à–µ–Ω —á–µ—Ä–µ–∑ Firebase');
          } catch (e) {
            debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–º–µ–Ω—å—à–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ —á–µ—Ä–µ–∑ Firebase: $e');
          }

          // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –£–¥–∞–ª—è–µ–º –∏–∑ –∫—ç—à–∞ Firebase –∫–∞—Ä—Ç
          try {
            final cachedMaps = await _offlineStorage.getCachedMarkerMaps();
            final updatedCachedMaps = cachedMaps.where((map) => map['id'] != mapId).toList();
            await _offlineStorage.cacheMarkerMaps(updatedCachedMaps);
            debugPrint('‚úÖ –ö–∞—Ä—Ç–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∫—ç—à–∞ Firebase –∫–∞—Ä—Ç');
          } catch (e) {
            debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∫—ç—à–∞ Firebase –∫–∞—Ä—Ç: $e');
          }

        } catch (e) {
          debugPrint('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ Firebase, –æ—Ç–º–µ—á–∞–µ–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: $e');
          await _offlineStorage.markForDeletion(mapId, true);

          // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¢–û–õ–¨–ö–û —á–µ—Ä–µ–∑ SubscriptionService (–æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º)
          try {
            await _subscriptionService.decrementUsage(ContentType.markerMaps);
            debugPrint('‚úÖ –°—á–µ—Ç—á–∏–∫ –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç —É–º–µ–Ω—å—à–µ–Ω —á–µ—Ä–µ–∑ SubscriptionService');
          } catch (e) {
            debugPrint('‚ùå –û—à–∏–±–∫–∞ —É–º–µ–Ω—å—à–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ —á–µ—Ä–µ–∑ SubscriptionService: $e');
            // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –∫–∞—Ä—Ç–∞ —É–∂–µ –æ—Ç–º–µ—á–µ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
          }
        }

        debugPrint('‚úÖ –ú–∞—Ä–∫–µ—Ä–Ω–∞—è –∫–∞—Ä—Ç–∞ —É–¥–∞–ª–µ–Ω–∞ –æ–Ω–ª–∞–π–Ω: $mapId');
      } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞, –æ—Ç–º–µ—á–∞–µ–º –∫–∞—Ä—Ç—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        await _offlineStorage.markForDeletion(mapId, true);

        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¢–û–õ–¨–ö–û —á–µ—Ä–µ–∑ SubscriptionService (–æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º)
        try {
          await _subscriptionService.decrementUsage(ContentType.markerMaps);
          debugPrint('‚úÖ –°—á–µ—Ç—á–∏–∫ –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç —É–º–µ–Ω—å—à–µ–Ω –æ—Ñ–ª–∞–π–Ω');
        } catch (e) {
          debugPrint('‚ùå –û—à–∏–±–∫–∞ —É–º–µ–Ω—å—à–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –æ—Ñ–ª–∞–π–Ω: $e');
          // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –∫–∞—Ä—Ç–∞ —É–∂–µ –æ—Ç–º–µ—á–µ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        }

        debugPrint('‚úÖ –ú–∞—Ä–∫–µ—Ä–Ω–∞—è –∫–∞—Ä—Ç–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: $mapId');
      }

      // –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ–ø–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
      try {
        await _offlineStorage.removeOfflineMarkerMap(mapId);
        debugPrint('‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è –∫–æ–ø–∏—è –∫–∞—Ä—Ç—ã —É–¥–∞–ª–µ–Ω–∞');
      } catch (e) {
        debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π –∫–æ–ø–∏–∏ –∫–∞—Ä—Ç—ã: $e');
      }

      // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –û—á–∏—â–∞–µ–º –∫—ç—à –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã
      clearCache();
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–∞—Ä–∫–µ—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã: $e');

      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, –æ—Ç–º–µ—á–∞–µ–º –∫–∞—Ä—Ç—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
      try {
        await _offlineStorage.markForDeletion(mapId, true);
      } catch (_) {
        rethrow;
      }
    }
  }

  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã –ø–æ ID –∏–∑ –ù–û–í–û–ô —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
  Future<MarkerMapModel> getMarkerMapById(String mapId) async {
    try {
      if (mapId.isEmpty) {
        throw Exception('ID –∫–∞—Ä—Ç—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
      }

      final userId = _firebaseService.currentUserId;
      if (userId == null || userId.isEmpty) {
        throw Exception('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      }

      debugPrint('üìç –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã –ø–æ ID: $mapId');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
      final isOnline = await NetworkUtils.isNetworkAvailable();

      if (isOnline) {
        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º –∏–∑ –ù–û–í–û–ô —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —á–µ—Ä–µ–∑ FirebaseService
        try {
          final doc = await _firestore
              .collection('users')
              .doc(userId)
              .collection('marker_maps')
              .doc(mapId)
              .get();

          if (doc.exists) {
            final map = MarkerMapModel.fromJson(doc.data()!, id: doc.id);

            // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ö—ç—à–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—É—é –∫–∞—Ä—Ç—É —á–µ—Ä–µ–∑ –ü–†–ê–í–ò–õ–¨–ù–´–ô –º–µ—Ç–æ–¥
            try {
              final mapJson = map.toJson();
              mapJson['id'] = map.id;
              mapJson['userId'] = userId;
              mapJson['isSynced'] = true;   // –ò–∑ Firebase
              mapJson['isOffline'] = false; // –ù–µ –æ—Ñ–ª–∞–π–Ω –∫–∞—Ä—Ç–∞

              // –ö—ç—à–∏—Ä—É–µ–º –≤ –æ–±—â–∏–π –∫—ç—à Firebase –∫–∞—Ä—Ç
              await _offlineStorage.cacheMarkerMaps([mapJson]);

              // –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ—Ñ–ª–∞–π–Ω —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
              await _offlineStorage.saveOfflineMarkerMap(mapJson);

              debugPrint('‚úÖ –ö–∞—Ä—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ù–û–í–û–ô —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ: $mapId');
            } catch (e) {
              debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã: $e');
            }

            return map;
          } else {
            debugPrint('‚ö†Ô∏è –ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ù–û–í–û–ô —Å—Ç—Ä—É–∫—Ç—É—Ä–µ, –∏—â–µ–º –æ—Ñ–ª–∞–π–Ω: $mapId');
          }
        } catch (e) {
          debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑ Firebase: $e');
        }
      } else {
        debugPrint('üì± –û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º: –∏—â–µ–º –∫–∞—Ä—Ç—É –≤ –æ—Ñ–ª–∞–π–Ω —Ö—Ä–∞–Ω–∏–ª–∏—â–µ');
      }

      // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –æ–Ω–ª–∞–π–Ω –∏–ª–∏ –Ω–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞, –∏—â–µ–º –≤ –æ—Ñ–ª–∞–π–Ω —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
      return await _getOfflineMarkerMapById(mapId);
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ä–∫–µ—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã –ø–æ ID: $e');

      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É –∏–∑ –æ—Ñ–ª–∞–π–Ω —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
      try {
        return await _getOfflineMarkerMapById(mapId);
      } catch (_) {
        rethrow;
      }
    }
  }

  // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã –∏–∑ –æ—Ñ–ª–∞–π–Ω —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –ø–æ ID
  Future<MarkerMapModel> _getOfflineMarkerMapById(String mapId) async {
    try {
      // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö Firebase –∫–∞—Ä—Ç–∞—Ö
      try {
        final cachedMaps = await _offlineStorage.getCachedMarkerMaps();
        final cachedMap = cachedMaps.where((map) => map['id'] == mapId).firstOrNull;

        if (cachedMap != null) {
          debugPrint('‚úÖ –ö–∞—Ä—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫—ç—à–µ Firebase –∫–∞—Ä—Ç');
          return MarkerMapModel.fromJson(cachedMap, id: mapId);
        }
      } catch (e) {
        debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –∫—ç—à–µ Firebase –∫–∞—Ä—Ç: $e');
      }

      // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫—ç—à–µ - –∏—â–µ–º –≤ –æ—Ñ–ª–∞–π–Ω –∫–∞—Ä—Ç–∞—Ö
      final allOfflineMaps = await _offlineStorage.getAllOfflineMarkerMaps();

      // –ò—â–µ–º –∫–∞—Ä—Ç—É –ø–æ ID
      final mapData = allOfflineMaps.firstWhere(
            (map) => map['id'] == mapId,
        orElse: () => throw Exception(
          '–ú–∞—Ä–∫–µ—Ä–Ω–∞—è –∫–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ—Ñ–ª–∞–π–Ω —Ö—Ä–∞–Ω–∏–ª–∏—â–µ',
        ),
      );

      debugPrint('‚úÖ –ö–∞—Ä—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ—Ñ–ª–∞–π–Ω —Ö—Ä–∞–Ω–∏–ª–∏—â–µ');
      return MarkerMapModel.fromJson(mapData, id: mapId);
    } catch (e) {
      debugPrint(
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ä–∫–µ—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã –∏–∑ –æ—Ñ–ª–∞–π–Ω —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: $e',
      );
      rethrow;
    }
  }

  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ù–û–í–û–ô —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
  Future<void> clearAllMarkerMaps() async {
    try {
      final userId = _firebaseService.currentUserId;
      if (userId == null || userId.isEmpty) {
        throw Exception('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      }

      debugPrint('üìç –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $userId');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
      final isOnline = await NetworkUtils.isNetworkAvailable();

      if (isOnline) {
        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º –≤—Å–µ –∫–∞—Ä—Ç—ã –∏–∑ –ù–û–í–û–ô —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        final snapshot = await _firebaseService.getUserMarkerMaps();

        // –°–æ–∑–¥–∞–µ–º –ø–∞–∫–µ—Ç–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        final batch = _firestore.batch();
        for (var doc in snapshot.docs) {
          batch.delete(doc.reference);
        }

        // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–∞–∫–µ—Ç–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
        await batch.commit();

        debugPrint(
          '‚úÖ –£–¥–∞–ª–µ–Ω–æ ${snapshot.docs.length} –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç –∏–∑ –ù–û–í–û–ô —Å—Ç—Ä—É–∫—Ç—É—Ä—ã',
        );
      } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞, –æ—Ç–º–µ—á–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        await _offlineStorage.markAllMarkerMapsForDeletion();
        debugPrint('üì± –í—Å–µ –∫–∞—Ä—Ç—ã –æ—Ç–º–µ—á–µ–Ω—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–æ—Ñ–ª–∞–π–Ω)');
      }

      // –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ, –æ—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∫–∞—Ä—Ç
      try {
        final offlineMaps = await _offlineStorage.getAllOfflineMarkerMaps();
        for (var map in offlineMaps) {
          final mapId = map['id'];
          if (mapId != null) {
            await _offlineStorage.removeOfflineMarkerMap(mapId);
          }
        }
        debugPrint('‚úÖ –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∫–∞—Ä—Ç –æ—á–∏—â–µ–Ω–æ');
      } catch (e) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∫–∞—Ä—Ç: $e');
      }

      // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –û—á–∏—â–∞–µ–º –∫—ç—à –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∫–∞—Ä—Ç
      clearCache();
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Å–µ—Ö –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç: $e');

      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, –æ—Ç–º–µ—á–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
      try {
        await _offlineStorage.markAllMarkerMapsForDeletion();
      } catch (_) {
        rethrow;
      }
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –º–∞—Ä–∫–µ—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã
  Future<bool> canCreateMarkerMap() async {
    try {
      return await _subscriptionService.canCreateContentOffline(
        ContentType.markerMaps,
      );
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã: $e');
      return false;
    }
  }

  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç
  Future<int> getCurrentUsage() async {
    try {
      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: getCurrentOfflineUsage ‚Üí getCurrentUsage
      return await _subscriptionService.getCurrentUsage(
        ContentType.markerMaps,
      );
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç: $e');
      return 0;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç
  Future<int> getUsageLimit() async {
    try {
      return _subscriptionService.getLimit(ContentType.markerMaps);
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ –∫–∞—Ä—Ç: $e');
      return 0;
    }
  }

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  Future<void> syncOfflineDataOnStartup() async {
    await _syncService.syncAll();
  }

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
  Future<bool> forceSyncData() async {
    try {
      return await _syncService.forceSyncAll();
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: $e');
      return false;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  Future<Map<String, dynamic>> getSyncStatus() async {
    return await _syncService.getSyncStatus();
  }

  // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à –¥–∞–Ω–Ω—ã—Ö (–∫–∞–∫ –≤ BudgetNotesRepository)
  static void clearCache() {
    _cachedMaps = null;
    _cacheTimestamp = null;
    debugPrint('üíæ –ö—ç—à –º–∞—Ä–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç –æ—á–∏—â–µ–Ω');
  }
}