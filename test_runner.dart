import 'dart:io';
import 'dart:developer' as developer;

void main(List<String> arguments) async {
  developer.log('üß™ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è DriftNotes –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...\n');

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ Flutter
  final flutterPath = await findFlutterPath();

  if (flutterPath == null) {
    developer.log('‚ùå Flutter –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH');
    developer.log('üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é: flutter test');
    return;
  }

  final testSuites = {
    '–ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã (Providers)': 'test/providers/',
    '–ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö (Models)': 'test/models/',
    '–£—Ç–∏–ª–∏—Ç—ã –∏ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä—ã (Utils)': 'test/utils/',
    '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã (Integration)': 'test/integration/',
    '–í–∏–¥–∂–µ—Ç—ã (Widgets)': 'test/widget_test.dart',
  };

  if (arguments.isEmpty) {
    developer.log('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞:');
    var index = 1;
    // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∑–∞–º–µ–Ω–∏–ª–∏ forEach –Ω–∞ –æ–±—ã—á–Ω—ã–π —Ü–∏–∫–ª for
    for (final suite in testSuites.keys) {
      developer.log('$index. $suite');
      index++;
    }
    developer.log('6. –ó–∞–ø—É—Å—Ç–∏—Ç—å –í–°–ï —Ç–µ—Å—Ç—ã');
    developer.log('7. –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –∫–æ–¥–∞');
    developer.log('8. –ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã (—Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã)');
    developer.log('0. –í—ã—Ö–æ–¥');

    stdout.write('\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (0-8): ');
    final input = stdin.readLineSync();
    final choice = int.tryParse(input ?? '') ?? 0;

    switch (choice) {
      case 1:
        await runTestSuite(flutterPath, '–ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã', 'test/providers/');
        break;
      case 2:
        await runTestSuite(flutterPath, '–ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö', 'test/models/');
        break;
      case 3:
        await runTestSuite(flutterPath, '–£—Ç–∏–ª–∏—Ç—ã –∏ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä—ã', 'test/utils/');
        break;
      case 4:
        await runTestSuite(flutterPath, '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã', 'test/integration/');
        break;
      case 5:
        await runTestSuite(flutterPath, '–í–∏–¥–∂–µ—Ç—ã', 'test/widget_test.dart');
        break;
      case 6:
        await runAllTests(flutterPath);
        break;
      case 7:
        await runTestsWithCoverage(flutterPath);
        break;
      case 8:
        await runQuickTests(flutterPath);
        break;
      default:
        developer.log('–í—ã—Ö–æ–¥ –∏–∑ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.');
        exit(0);
    }
  } else {
    await handleCommandLineArgs(flutterPath, arguments);
  }
}

Future<String?> findFlutterPath() async {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è Windows
  final possiblePaths = [
    'flutter',
    'flutter.bat',
    'C:\\flutter\\bin\\flutter.bat',
    'C:\\flutter\\bin\\flutter',
  ];

  for (final path in possiblePaths) {
    try {
      final result = await Process.run(path, ['--version'], runInShell: true);
      if (result.exitCode == 0) {
        return path;
      }
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∏ –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø—É—Ç—å
    }
  }

  return null;
}

Future<void> runTestSuite(String flutterPath, String suiteName, String path) async {
  developer.log('üéØ –ó–∞–ø—É—Å–∫: $suiteName');
  developer.log('üìÅ –ü—É—Ç—å: $path\n');

  if (await Directory(path).exists() || await File(path).exists()) {
    await runCommand(flutterPath, ['test', path]);
  } else {
    developer.log('‚ö†Ô∏è  –ü—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω: $path');
    developer.log('üí° –°–æ–∑–¥–∞–π—Ç–µ —Ç–µ—Å—Ç—ã –≤ —ç—Ç–æ–π –ø–∞–ø–∫–µ:');
    if (path.contains('models')) {
      developer.log('   - –¢–µ—Å—Ç—ã –¥–ª—è –º–æ–¥–µ–ª–µ–π –¥–∞–Ω–Ω—ã—Ö (FishingNoteModel, BiteRecordModel)');
    } else if (path.contains('utils')) {
      developer.log('   - –¢–µ—Å—Ç—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤ (email, –ø–∞—Ä–æ–ª–∏, –≤–µ—Å —Ä—ã–±—ã)');
    } else if (path.contains('integration')) {
      developer.log('   - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã (–ø–æ–ª–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)');
    }
    developer.log('');
  }
}

Future<void> runAllTests(String flutterPath) async {
  developer.log('üöÄ –ó–∞–ø—É—Å–∫ –í–°–ï–• —Ç–µ—Å—Ç–æ–≤...\n');

  final startTime = DateTime.now();

  await runCommand(flutterPath, ['test']);

  final duration = DateTime.now().difference(startTime);
  developer.log('\n‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration.inSeconds} —Å–µ–∫—É–Ω–¥');
  developer.log('‚úÖ –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
}

Future<void> runTestsWithCoverage(String flutterPath) async {
  developer.log('üìä –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å –∞–Ω–∞–ª–∏–∑–æ–º –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–¥–∞...\n');

  await runCommand(flutterPath, ['test', '--coverage']);

  developer.log('\nüìà –ê–Ω–∞–ª–∏–∑ –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–¥–∞:');
  if (await File('coverage/lcov.info').exists()) {
    developer.log('‚úÖ –û—Ç—á–µ—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏ —Å–æ–∑–¥–∞–Ω: coverage/lcov.info');
    developer.log('üí° –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ HTML –æ—Ç—á–µ—Ç–∞:');
    developer.log('   1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ lcov (–µ—Å–ª–∏ –Ω–µ—Ç)');
    developer.log('   2. –í—ã–ø–æ–ª–Ω–∏—Ç–µ: genhtml coverage/lcov.info -o coverage/html');
    developer.log('   3. –û—Ç–∫—Ä–æ–π—Ç–µ: coverage/html/index.html');
  } else {
    developer.log('‚ö†Ô∏è  –§–∞–π–ª –ø–æ–∫—Ä—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω');
  }
}

Future<void> runQuickTests(String flutterPath) async {
  developer.log('‚ö° –ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä—ã—Ö —Ç–µ—Å—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã)...\n');

  if (await Directory('test/providers/').exists()) {
    await runCommand(flutterPath, ['test', 'test/providers/']);
  } else {
    developer.log('‚ö†Ô∏è  –ü–∞–ø–∫–∞ test/providers/ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
  }
}

Future<void> handleCommandLineArgs(String flutterPath, List<String> arguments) async {
  switch (arguments[0]) {
    case 'all':
      await runAllTests(flutterPath);
      break;
    case 'providers':
      await runTestSuite(flutterPath, '–ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã', 'test/providers/');
      break;
    case 'models':
      await runTestSuite(flutterPath, '–ú–æ–¥–µ–ª–∏', 'test/models/');
      break;
    case 'utils':
      await runTestSuite(flutterPath, '–£—Ç–∏–ª–∏—Ç—ã', 'test/utils/');
      break;
    case 'integration':
      await runTestSuite(flutterPath, '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è', 'test/integration/');
      break;
    case 'coverage':
      await runTestsWithCoverage(flutterPath);
      break;
    case 'quick':
      await runQuickTests(flutterPath);
      break;
    default:
      developer.log('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${arguments[0]}');
      printUsage();
  }
}

Future<void> runCommand(String command, List<String> arguments) async {
  developer.log('üîß –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: $command ${arguments.join(' ')}');

  try {
    final process = await Process.start(
      command,
      arguments,
      runInShell: Platform.isWindows,
    );

    process.stdout.listen((data) {
      stdout.add(data);
    });

    process.stderr.listen((data) {
      stderr.add(data);
    });

    final exitCode = await process.exitCode;

    if (exitCode == 0) {
      developer.log('‚úÖ –¢–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ');
    } else {
      developer.log('‚ùå –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥: $exitCode)');
    }
  } catch (e) {
    developer.log('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: $e');
    developer.log('üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é: $command ${arguments.join(' ')}');
  }
}

void printUsage() {
  developer.log('üìö –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:');
  developer.log('dart test_runner.dart [–∫–æ–º–∞–Ω–¥–∞]');
  developer.log('');
  developer.log('üéØ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:');
  developer.log('  all         # –í—Å–µ —Ç–µ—Å—Ç—ã');
  developer.log('  providers   # –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã');
  developer.log('  models      # –¢–æ–ª—å–∫–æ –º–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö');
  developer.log('  utils       # –¢–æ–ª—å–∫–æ —É—Ç–∏–ª–∏—Ç—ã –∏ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä—ã');
  developer.log('  integration # –¢–æ–ª—å–∫–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã');
  developer.log('  coverage    # –¢–µ—Å—Ç—ã —Å –∞–Ω–∞–ª–∏–∑–æ–º –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–¥–∞');
  developer.log('  quick       # –ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã (–ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã)');
  developer.log('');
  developer.log('üí° –ü—Ä–∏–º–µ—Ä—ã:');
  developer.log('  dart test_runner.dart all');
  developer.log('  dart test_runner.dart providers');
  developer.log('  dart test_runner.dart coverage');
  developer.log('');
  developer.log('üéØ –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Ç–µ—Å—Ç–æ–≤:');
  developer.log('  ‚úÖ –ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã: 35 —Ç–µ—Å—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç');
  developer.log('  üÜï –ú–æ–¥–µ–ª–∏: —Å–æ–∑–¥–∞–π—Ç–µ test/models/');
  developer.log('  üÜï –£—Ç–∏–ª–∏—Ç—ã: —Å–æ–∑–¥–∞–π—Ç–µ test/utils/');
  developer.log('  üÜï –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: —Å–æ–∑–¥–∞–π—Ç–µ test/integration/');
}